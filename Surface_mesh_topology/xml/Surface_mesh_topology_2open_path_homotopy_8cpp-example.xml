<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="Surface_mesh_topology_2open_path_homotopy_8cpp-example" kind="example">
    <compoundname>Surface_mesh_topology/open_path_homotopy.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename="Surface_mesh_topology/open_path_homotopy.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Surface_mesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Curves_on_surface_topology.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Path_on_surface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/draw_face_graph_with_paths.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Exact_predicates_inexact_constructions_kernel<sp/>Kernel;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Kernel::Point_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_3;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh&lt;Point_3&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SM;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL_1_1Surface__mesh__topology" kindref="compound">CGAL::Surface_mesh_topology</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>create_path_1(<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface&lt;SM&gt;</ref>&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>p.<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface_1a3bf430e3e6fc0fd2d173b98cffcdb89d" kindref="member">push_back_by_index</ref>(88);<sp/></highlight><highlight class="comment">//<sp/>Its<sp/>starting<sp/>dart</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>p.<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface_1a1d84ab79576f8f41f5124c2b5fe7c55f" kindref="member">extend_positive_turn</ref>(2);<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>create_path_2(<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface&lt;SM&gt;</ref>&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>p.<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface_1a3bf430e3e6fc0fd2d173b98cffcdb89d" kindref="member">push_back_by_index</ref>(300);<sp/><sp/></highlight><highlight class="comment">//<sp/>Its<sp/>starting<sp/>dart</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>p.<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface_1a3b1629a7e6e46e0477166a18ae1d1e96" kindref="member">extend_negative_turn</ref>(2);<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>create_path_3(<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface&lt;SM&gt;</ref>&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>p.<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface_1a3bf430e3e6fc0fd2d173b98cffcdb89d" kindref="member">push_back_by_index</ref>(87);<sp/></highlight><highlight class="comment">//<sp/>Its<sp/>starting<sp/>dart</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>p.<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface_1a1d84ab79576f8f41f5124c2b5fe7c55f" kindref="member">extend_positive_turn</ref>(1);<sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>p.<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface_1a1d84ab79576f8f41f5124c2b5fe7c55f" kindref="member">extend_positive_turn</ref>(2);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>p.<ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface_1a1d84ab79576f8f41f5124c2b5fe7c55f" kindref="member">extend_positive_turn</ref>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__PkgDrawSurfaceMesh_1ga73d415a7cf9cf671950b27e8b5cdf6f5" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">draw</ref>=(argc&gt;1?std::string(argv[1])==</highlight><highlight class="stringliteral">&quot;-draw&quot;</highlight><highlight class="normal">:</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>in(<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/double-torus-example.off&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in.is_open())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;ERROR<sp/>reading<sp/>file<sp/>data/double-torus.off&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SM<sp/>sm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in&gt;&gt;sm;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology" kindref="compound">Curves_on_surface_topology&lt;SM&gt;</ref><sp/>cst(sm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface&lt;SM&gt;</ref><sp/>p1(sm),<sp/>p2(sm),<sp/>p3(sm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>create_path_1(p1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>create_path_2(p2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>create_path_3(p3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>res1=cst.are_base_point_homotopic(p1,<sp/>p2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Path<sp/>p1<sp/>(pink)<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;(res1?</highlight><highlight class="stringliteral">&quot;IS&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;IS<sp/>NOT&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>base<sp/>point<sp/>homotopic<sp/>with<sp/>path<sp/>p2<sp/>(green).&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>res2=cst.are_base_point_homotopic(p2,<sp/>p3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Path<sp/>p2<sp/>(green)<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;(res2?</highlight><highlight class="stringliteral">&quot;IS&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;IS<sp/>NOT&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>base<sp/>point<sp/>homotopic<sp/>with<sp/>path<sp/>p3<sp/>(orange).&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__PkgDrawSurfaceMesh_1ga73d415a7cf9cf671950b27e8b5cdf6f5" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">draw</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cycles={p1,<sp/>p2,<sp/>p3};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgDrawLinearCellComplex_1gaf1430ae5975d4186d8a9a873959826fc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Linear_cell_complex.tag">CGAL::draw</ref>(sm,<sp/>cycles);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="examples.txt"/>
  </compounddef>
</doxygen>
