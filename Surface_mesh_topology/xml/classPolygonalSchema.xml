<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classPolygonalSchema" kind="class" language="C++" prot="public">
    <compoundname>PolygonalSchema</compoundname>
    <includes local="no">Concepts/PolygonalSchema.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPolygonalSchema_1ae7aeec51b594f9a28f13be0ef8796de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolygonalSchema::PolygonalSchema</definition>
        <argsstring>()</argsstring>
        <name>PolygonalSchema</name>
        <qualifiedname>PolygonalSchema::PolygonalSchema</qualifiedname>
        <briefdescription>
<para>creates an empty <computeroutput><ref refid="classPolygonalSchema" kindref="compound">PolygonalSchema</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="22" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1abb0c90f5140ce4a498eb21224695e6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PolygonalSchema::init_facet</definition>
        <argsstring>()</argsstring>
        <name>init_facet</name>
        <qualifiedname>PolygonalSchema::init_facet</qualifiedname>
        <briefdescription>
<para>starts a new facet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="25" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1a440a5d6c15f7f5f4d4b58450adf9846a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Dart_descriptor</type>
        <definition>Dart_descriptor PolygonalSchema::finish_facet</definition>
        <argsstring>()</argsstring>
        <name>finish_facet</name>
        <qualifiedname>PolygonalSchema::finish_facet</qualifiedname>
        <briefdescription>
<para>finishes the current facet. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the first dart of this facet. <simplesect kind="pre"><para>A facet is under creation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="29" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1a6568707a0842ad9e5a81601ff26f2f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PolygonalSchema::add_edge_to_facet</definition>
        <argsstring>(const std::string &amp;l)</argsstring>
        <name>add_edge_to_facet</name>
        <qualifiedname>PolygonalSchema::add_edge_to_facet</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>adds one edge to the current facet, given by its label <computeroutput>l</computeroutput> (any string containing no space, using minus sign for orientation). </para>
        </briefdescription>
        <detaileddescription>
<para>Since the surface is oriented, each label can be used only twice with opposite signs. If this method is called with a label already used, with same sign, an error message is given and this label is ignored. <simplesect kind="pre"><para>A facet is under creation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="34" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1acaaf70f2078f0f62986c77ea66400648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PolygonalSchema::add_edges_to_facet</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>add_edges_to_facet</name>
        <qualifiedname>PolygonalSchema::add_edges_to_facet</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>adds the given edges to the current facet. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>s</computeroutput> is a sequence of labels, separated by spaces. All the corresponding edges are added into the current facet. <simplesect kind="pre"><para>A facet is under creation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="39" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1a8d3f2abb3d118a3a25ae691178ea7312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PolygonalSchema::add_facet</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>add_facet</name>
        <qualifiedname>PolygonalSchema::add_facet</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>adds directly one facet giving the sequence of labels <computeroutput>s</computeroutput> of all its edges (labels are separated by spaces). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="42" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1a006ccdb967aa1eef3f8fbc4bc4de6f4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PolygonalSchema::get_label</definition>
        <argsstring>(Dart_descriptor d) const</argsstring>
        <name>get_label</name>
        <qualifiedname>PolygonalSchema::get_label</qualifiedname>
        <param>
          <type>Dart_descriptor</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>returns the label of dart <computeroutput>d</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="45" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1a7f62576d884d2e96c0ec4c4c71b76088" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Dart_descriptor</type>
        <definition>Dart_descriptor PolygonalSchema::get_dart_labeled</definition>
        <argsstring>(const std::string &amp;s) const</argsstring>
        <name>get_dart_labeled</name>
        <qualifiedname>PolygonalSchema::get_dart_labeled</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns dart with label <computeroutput>s</computeroutput>, NULL if this label is not used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="48" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1aff8d842d0e7283c8079e194d873d84b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PolygonalSchema::is_perforated</definition>
        <argsstring>(Dart_const_descriptor d) const</argsstring>
        <name>is_perforated</name>
        <qualifiedname>PolygonalSchema::is_perforated</qualifiedname>
        <param>
          <type>Dart_const_descriptor</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>returns true iff the facet containing <computeroutput>d</computeroutput> is perforated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="51" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1afd5f6672057b46d7f39045a0a968206c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PolygonalSchema::is_perforated</definition>
        <argsstring>(const std::string &amp;s) const</argsstring>
        <name>is_perforated</name>
        <qualifiedname>PolygonalSchema::is_perforated</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Shortcut for <computeroutput>is_perforated(get_dart_labeled(s))</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="54" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1a2f5ea0f91ce40fa4362686343ec209a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type PolygonalSchema::perforate_facet</definition>
        <argsstring>(Dart_descriptor d)</argsstring>
        <name>perforate_facet</name>
        <qualifiedname>PolygonalSchema::perforate_facet</qualifiedname>
        <param>
          <type>Dart_descriptor</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>perforates the facet containing <computeroutput>d</computeroutput>. Returns the number of darts of the face; 0 if the facet was already perforated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="57" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1a928c5d3baa3455cdc2add9291ee88144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type PolygonalSchema::perforate_facet</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>perforate_facet</name>
        <qualifiedname>PolygonalSchema::perforate_facet</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Shortcut for perforate_facet(get_dart_labeled(s)). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="60" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1ace5783954706f82a421ff6a2688fc577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type PolygonalSchema::fill_facet</definition>
        <argsstring>(Dart_descriptor d)</argsstring>
        <name>fill_facet</name>
        <qualifiedname>PolygonalSchema::fill_facet</qualifiedname>
        <param>
          <type>Dart_descriptor</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>fills the facet containing <computeroutput>d</computeroutput>. Returns the number of darts of the face; 0 if the facet was already filled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="63" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPolygonalSchema_1a95205e4b3f10a7be73ff33aff440b97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type PolygonalSchema::fill_facet</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>fill_facet</name>
        <qualifiedname>PolygonalSchema::fill_facet</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Shortcut for <computeroutput>fill_facet(get_dart_labeled(s))</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PolygonalSchema.h" line="66" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classPolygonalSchema" kindref="compound">PolygonalSchema</ref></computeroutput> defines a 2D polygonal schema, i.e. a combinatorial surface with labeled edges. A <ref refid="classPolygonalSchema" kindref="compound">PolygonalSchema</ref> is created incrementally by adding facets one at a time. A label is any word, that does not contain a space. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para>PolygonalSchema::Dart_info should be a class having a public data member std::string m_label. PolygonalSchema::dimension should be equal to 2.</para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classGenericMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Combinatorial_map.tag">GenericMap</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Polygonal__schema__with__combinatorial__map" kindref="compound"><computeroutput>CGAL::Surface_mesh_topology::Polygonal_schema_with_combinatorial_map&lt;Items,Alloc&gt;</computeroutput></ref> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Polygonal__schema__with__generalized__map" kindref="compound"><computeroutput>CGAL::Surface_mesh_topology::Polygonal_schema_with_generalized_map&lt;Items,Alloc&gt;</computeroutput></ref> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/PolygonalSchema.h" line="18" column="1" bodyfile="Concepts/PolygonalSchema.h" bodystart="19" bodyend="67"/>
    <listofallmembers>
      <member refid="classPolygonalSchema_1a6568707a0842ad9e5a81601ff26f2f5a" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>add_edge_to_facet</name></member>
      <member refid="classPolygonalSchema_1acaaf70f2078f0f62986c77ea66400648" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>add_edges_to_facet</name></member>
      <member refid="classPolygonalSchema_1a8d3f2abb3d118a3a25ae691178ea7312" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>add_facet</name></member>
      <member refid="classPolygonalSchema_1ace5783954706f82a421ff6a2688fc577" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>fill_facet</name></member>
      <member refid="classPolygonalSchema_1a95205e4b3f10a7be73ff33aff440b97e" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>fill_facet</name></member>
      <member refid="classPolygonalSchema_1a440a5d6c15f7f5f4d4b58450adf9846a" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>finish_facet</name></member>
      <member refid="classPolygonalSchema_1a7f62576d884d2e96c0ec4c4c71b76088" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>get_dart_labeled</name></member>
      <member refid="classPolygonalSchema_1a006ccdb967aa1eef3f8fbc4bc4de6f4c" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>get_label</name></member>
      <member refid="classPolygonalSchema_1abb0c90f5140ce4a498eb21224695e6b0" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>init_facet</name></member>
      <member refid="classPolygonalSchema_1aff8d842d0e7283c8079e194d873d84b0" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>is_perforated</name></member>
      <member refid="classPolygonalSchema_1afd5f6672057b46d7f39045a0a968206c" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>is_perforated</name></member>
      <member refid="classPolygonalSchema_1a2f5ea0f91ce40fa4362686343ec209a4" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>perforate_facet</name></member>
      <member refid="classPolygonalSchema_1a928c5d3baa3455cdc2add9291ee88144" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>perforate_facet</name></member>
      <member refid="classPolygonalSchema_1ae7aeec51b594f9a28f13be0ef8796de8" prot="public" virt="non-virtual"><scope>PolygonalSchema</scope><name>PolygonalSchema</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
