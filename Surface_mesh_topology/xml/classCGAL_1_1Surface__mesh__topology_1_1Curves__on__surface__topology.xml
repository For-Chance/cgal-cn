<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Surface_mesh_topology::Curves_on_surface_topology</compoundname>
    <includes local="no">CGAL/Curves_on_surface_topology.h</includes>
    <templateparamlist>
      <param>
        <type>typename Mesh</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a7fc50a348a8b3b265301a6821bcbaa24" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::halfedge_descriptor</definition>
        <argsstring></argsstring>
        <name>halfedge_descriptor</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::halfedge_descriptor</qualifiedname>
        <briefdescription>
<para>A descriptor to <computeroutput>Dart</computeroutput> for combinatorial/generalized maps, or a halfedge descriptor for models of the <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> concept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="19" column="30" bodyfile="CGAL/Curves_on_surface_topology.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a5b7143b973ad40dff2fd5fc24c2ffcfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::Curves_on_surface_topology</definition>
        <argsstring>(const Mesh &amp;amesh)</argsstring>
        <name>Curves_on_surface_topology</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::Curves_on_surface_topology</qualifiedname>
        <param>
          <type>const Mesh &amp;</type>
          <declname>amesh</declname>
        </param>
        <briefdescription>
<para>creates a <computeroutput><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology" kindref="compound">Curves_on_surface_topology</ref></computeroutput> object using <computeroutput>amesh</computeroutput> as input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="23" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a85fc4a1f20c84073814251af6912539d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::are_freely_homotopic</definition>
        <argsstring>(const Path_on_surface&lt; Mesh &gt; &amp;p1, const Path_on_surface&lt; Mesh &gt; &amp;p2) const</argsstring>
        <name>are_freely_homotopic</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::are_freely_homotopic</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the closed paths <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> are freely homotopic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> must be two paths on <computeroutput>amesh</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="28" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a05dba41f3012ec7747aa215e2af2f152" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::are_homotopic_with_fixed_endpoints</definition>
        <argsstring>(const Path_on_surface&lt; Mesh &gt; &amp;p1, const Path_on_surface&lt; Mesh &gt; &amp;p2) const</argsstring>
        <name>are_homotopic_with_fixed_endpoints</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::are_homotopic_with_fixed_endpoints</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the paths <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> are homotopic with fixed endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>The paths <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> must have the same endpoints but must not be closed. Equivalent to <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a816ad97901765d303ee5fa50fc8a0d0b" kindref="member"><computeroutput>is_contractible(q)</computeroutput></ref> where <computeroutput>q</computeroutput> is the concatenation of <computeroutput>p1</computeroutput> and the reverse of <computeroutput>p2</computeroutput>. <simplesect kind="pre"><para><computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> must be two paths on <computeroutput>amesh</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="34" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a816ad97901765d303ee5fa50fc8a0d0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::is_contractible</definition>
        <argsstring>(const Path_on_surface&lt; Mesh &gt; &amp;p) const</argsstring>
        <name>is_contractible</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::is_contractible</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the closed path <computeroutput>p</computeroutput> is contractible. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput> must be a closed path on <computeroutput>amesh</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="40" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a8d7c4cba2cf2cff542f5cd93117233db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::is_homotopic_to_simple_cycle</definition>
        <argsstring>(const Path_on_surface&lt; Mesh &gt; &amp;p) const</argsstring>
        <name>is_homotopic_to_simple_cycle</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::is_homotopic_to_simple_cycle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the closed path <computeroutput>p</computeroutput> is homotopic to some simple cycle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput> must be a closed path on <computeroutput>amesh</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="45" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a38561507c54e7a0c70b7d8cd00cd9713" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt;</type>
        <definition>Path_on_surface&lt; Mesh &gt; CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::compute_edge_width</definition>
        <argsstring>() const</argsstring>
        <name>compute_edge_width</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::compute_edge_width</qualifiedname>
        <briefdescription>
<para>returns a non-contractible cycle of type <computeroutput><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref></computeroutput> with minimal number of edges. </para>
        </briefdescription>
        <detaileddescription>
<para>This number of edges is the edge width of the mesh. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="49" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a8292fce8d2ea8e2f9657196626e6af82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classWeightFunctor" kindref="compound">WeightFunctor</ref></type>
            <defval><ref refid="structCGAL_1_1Surface__mesh__topology_1_1Unit__weight__functor" kindref="compound">Unit_weight_functor</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt;</type>
        <definition>Path_on_surface&lt; Mesh &gt; CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::compute_shortest_non_contractible_cycle</definition>
        <argsstring>(const WeightFunctor &amp;wf=WeightFunctor()) const</argsstring>
        <name>compute_shortest_non_contractible_cycle</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::compute_shortest_non_contractible_cycle</qualifiedname>
        <param>
          <type>const <ref refid="classWeightFunctor" kindref="compound">WeightFunctor</ref> &amp;</type>
          <declname>wf</declname>
          <defval><ref refid="classWeightFunctor" kindref="compound">WeightFunctor</ref>()</defval>
        </param>
        <briefdescription>
<para>returns a non-contractible cycle of type <computeroutput><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref></computeroutput> with minimal length, where the length of a cycle is the sum of the weights of its edges computed thanks to the <ref refid="classWeightFunctor" kindref="compound">WeightFunctor</ref> <computeroutput>wf</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, all the edge weights are set to 1 (thanks to the <computeroutput><ref refid="structCGAL_1_1Surface__mesh__topology_1_1Unit__weight__functor" kindref="compound">Unit_weight_functor</ref></computeroutput> functor). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="54" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a415f2d76b13fdb39d4e3f10c611ad412" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classWeightFunctor" kindref="compound">WeightFunctor</ref></type>
            <defval><ref refid="structCGAL_1_1Surface__mesh__topology_1_1Unit__weight__functor" kindref="compound">Unit_weight_functor</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref>&lt; Mesh &gt;</type>
        <definition>Path_on_surface&lt; Mesh &gt; CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::compute_shortest_non_contractible_cycle_with_base_point</definition>
        <argsstring>(halfedge_descriptor d, const WeightFunctor &amp;wf=WeightFunctor()) const</argsstring>
        <name>compute_shortest_non_contractible_cycle_with_base_point</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::compute_shortest_non_contractible_cycle_with_base_point</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a7fc50a348a8b3b265301a6821bcbaa24" kindref="member">halfedge_descriptor</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classWeightFunctor" kindref="compound">WeightFunctor</ref> &amp;</type>
          <declname>wf</declname>
          <defval><ref refid="classWeightFunctor" kindref="compound">WeightFunctor</ref>()</defval>
        </param>
        <briefdescription>
<para>returns a non-contractible cycle of type <computeroutput><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Path__on__surface" kindref="compound">Path_on_surface</ref></computeroutput> with minimal length going through the source vertex of <computeroutput>d</computeroutput>, where the length of a cycle is the sum of the weights of its edges computed thanks to the <ref refid="classWeightFunctor" kindref="compound">WeightFunctor</ref> <computeroutput>wf</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, all the edge weights are set to 1 (thanks to the <computeroutput><ref refid="structCGAL_1_1Surface__mesh__topology_1_1Unit__weight__functor" kindref="compound">Unit_weight_functor</ref></computeroutput> functor). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="59" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1ab1e89845805ea2bfbdbeb6344aed8643" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a7fc50a348a8b3b265301a6821bcbaa24" kindref="member">halfedge_descriptor</ref> &gt;</type>
        <definition>std::vector&lt; halfedge_descriptor &gt; CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::compute_face_width</definition>
        <argsstring>() const</argsstring>
        <name>compute_face_width</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::compute_face_width</qualifiedname>
        <briefdescription>
<para>returns a vector of darts representing a non-contractible curve with a minimal number of intersection with the graph of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This curve can be described by the alternating sequence of faces and vertices it goes through, so that each dart in the returned vector belongs to both a face and the next vertex in the alternating sequence. (Here, faces and vertices are viewed as subsets of darts.) The size of the returned vector is the face width of the mesh. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="63" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a54878d88b4dea6d3a51ff9a2ea112b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Surface_mesh_topology::Curves_on_surface_topology&lt; Mesh &gt;::set_verbose</definition>
        <argsstring>(bool is_verbose)</argsstring>
        <name>set_verbose</name>
        <qualifiedname>CGAL::Surface_mesh_topology::Curves_on_surface_topology::set_verbose</qualifiedname>
        <param>
          <type>bool</type>
          <declname>is_verbose</declname>
        </param>
        <briefdescription>
<para>set whether the function should output error message to <computeroutput>std::cerr</computeroutput> when the prerequisite of the argument(s) is not met. </para>
        </briefdescription>
        <detaileddescription>
<para>Affects <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a85fc4a1f20c84073814251af6912539d" kindref="member"><computeroutput>are_freely_homotopic(p1, p2)</computeroutput></ref>, <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a05dba41f3012ec7747aa215e2af2f152" kindref="member"><computeroutput>are_homotopic_with_fixed_endpoints(p1, p2)</computeroutput></ref>, <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a816ad97901765d303ee5fa50fc8a0d0b" kindref="member"><computeroutput>is_contractible(p)</computeroutput></ref>, and <ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a8d7c4cba2cf2cff542f5cd93117233db" kindref="member"><computeroutput>is_homotopic_to_simple_cycle(p)</computeroutput></ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Curves_on_surface_topology.h" line="68" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology" kindref="compound">Curves_on_surface_topology</ref></computeroutput> provides methods to compute shortest non contractible cycles and to test homotopy on paths. </para>
    </briefdescription>
    <detaileddescription>
<para>Each object of this class is constructed from an external mesh, either a <ref refid="classCombinatorialMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Combinatorial_map.tag">2D combinatorial map</ref> or a model of a <ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref>. It maintains a correspondence between this mesh and an internal representation, computed the first time an homotopy test is called. The user must not modify the input surface as long as homotopy tests are performed with this <computeroutput><ref refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology" kindref="compound">Curves_on_surface_topology</ref></computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCombinatorialMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Combinatorial_map.tag">CombinatorialMap</ref></computeroutput> or of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="CGAL/Curves_on_surface_topology.h" line="12" column="3" bodyfile="CGAL/Curves_on_surface_topology.h" bodystart="13" bodyend="69"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a85fc4a1f20c84073814251af6912539d" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>are_freely_homotopic</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a05dba41f3012ec7747aa215e2af2f152" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>are_homotopic_with_fixed_endpoints</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a38561507c54e7a0c70b7d8cd00cd9713" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>compute_edge_width</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1ab1e89845805ea2bfbdbeb6344aed8643" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>compute_face_width</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a8292fce8d2ea8e2f9657196626e6af82" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>compute_shortest_non_contractible_cycle</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a415f2d76b13fdb39d4e3f10c611ad412" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>compute_shortest_non_contractible_cycle_with_base_point</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a5b7143b973ad40dff2fd5fc24c2ffcfd" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>Curves_on_surface_topology</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a7fc50a348a8b3b265301a6821bcbaa24" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>halfedge_descriptor</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a816ad97901765d303ee5fa50fc8a0d0b" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>is_contractible</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a8d7c4cba2cf2cff542f5cd93117233db" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>is_homotopic_to_simple_cycle</name></member>
      <member refid="classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology_1a54878d88b4dea6d3a51ff9a2ea112b1e" prot="public" virt="non-virtual"><scope>CGAL::Surface_mesh_topology::Curves_on_surface_topology</scope><name>set_verbose</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
