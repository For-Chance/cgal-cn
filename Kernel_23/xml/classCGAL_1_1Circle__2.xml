<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Circle__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Circle_2</compoundname>
    <includes local="no">CGAL/Circle_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1aa4288248fd220340df32bf677b243a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Circle_2&lt; Kernel &gt;::Circle_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;center, const Kernel::FT &amp;squared_radius, const Orientation &amp;ori=COUNTERCLOCKWISE)</argsstring>
        <name>Circle_2</name>
        <qualifiedname>CGAL::Circle_2::Circle_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>squared_radius</declname>
        </param>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref> &amp;</type>
          <declname>ori</declname>
          <defval><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">COUNTERCLOCKWISE</ref></defval>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is initialized to the circle with center <computeroutput>center</computeroutput>, squared radius <computeroutput>squared_radius</computeroutput> and orientation <computeroutput>ori</computeroutput>. <simplesect kind="pre"><para><computeroutput>ori != COLLINEAR</computeroutput> and <computeroutput>squared_radius &gt;= 0</computeroutput>.</para>
</simplesect>
<variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a0224ebf5bbcd2992731a077d95d09b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Circle_2&lt; Kernel &gt;::Circle_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p, const Point_2&lt; Kernel &gt; &amp;q, const Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>Circle_2</name>
        <qualifiedname>CGAL::Circle_2::Circle_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is initialized to the unique circle which passes through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. The orientation of the circle is the orientation of the point triple <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>. <simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a54b545c955b2c19dd0cacd0aaa59a46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Circle_2&lt; Kernel &gt;::Circle_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p, const Point_2&lt; Kernel &gt; &amp;q, const Orientation &amp;ori=COUNTERCLOCKWISE)</argsstring>
        <name>Circle_2</name>
        <qualifiedname>CGAL::Circle_2::Circle_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref> &amp;</type>
          <declname>ori</declname>
          <defval><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">COUNTERCLOCKWISE</ref></defval>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is initialized to the circle with diameter <formula id="38">$ \overline{pq}$</formula> and orientation <computeroutput>ori</computeroutput>. <simplesect kind="pre"><para><computeroutput>ori != COLLINEAR</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a029d79198da34c791b978e40b492f4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Circle_2&lt; Kernel &gt;::Circle_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;center, const Orientation &amp;ori=COUNTERCLOCKWISE)</argsstring>
        <name>Circle_2</name>
        <qualifiedname>CGAL::Circle_2::Circle_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref> &amp;</type>
          <declname>ori</declname>
          <defval><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">COUNTERCLOCKWISE</ref></defval>
        </param>
        <briefdescription>
<para>introduces a variable <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is initialized to the circle with center <computeroutput>center</computeroutput>, squared radius zero and orientation <computeroutput>ori</computeroutput>. <simplesect kind="pre"><para><computeroutput>ori != COLLINEAR</computeroutput>. </para>
</simplesect>
<simplesect kind="post"><para><computeroutput>c.is_degenerate()</computeroutput> = <computeroutput>true</computeroutput>.</para>
</simplesect>
<variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="72" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a12f2724f354977c15fe8b29af099484b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
        <definition>const Point_2&lt; Kernel &gt; &amp; CGAL::Circle_2&lt; Kernel &gt;::center</definition>
        <argsstring>() const</argsstring>
        <name>center</name>
        <qualifiedname>CGAL::Circle_2::center</qualifiedname>
        <briefdescription>
<para>returns the center of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="85" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a3bee3b5df6f471d9fa3a6546c5a4c523" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Kernel::FT &amp;</type>
        <definition>const Kernel::FT &amp; CGAL::Circle_2&lt; Kernel &gt;::squared_radius</definition>
        <argsstring>() const</argsstring>
        <name>squared_radius</name>
        <qualifiedname>CGAL::Circle_2::squared_radius</qualifiedname>
        <briefdescription>
<para>returns the squared radius of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="92" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a6cfaae0dc899fa0b53268b15a169b775" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::Circle_2&lt; Kernel &gt;::orientation</definition>
        <argsstring>() const</argsstring>
        <name>orientation</name>
        <qualifiedname>CGAL::Circle_2::orientation</qualifiedname>
        <briefdescription>
<para>returns the orientation of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="99" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a206d0b170681f478df9dcb268f120162" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Circle_2&lt; Kernel &gt;::operator==</definition>
        <argsstring>(const Circle_2&lt; Kernel &gt; &amp;circle2) const</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Circle_2::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>circle2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>c</computeroutput> and <computeroutput>circle2</computeroutput> are equal, i.e. if they have the same center, same squared radius and same orientation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="107" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a76ac2fdf5766bc7e581b31d839a9bf20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Circle_2&lt; Kernel &gt;::operator!=</definition>
        <argsstring>(const Circle_2&lt; Kernel &gt; &amp;circle2) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Circle_2::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>circle2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>c</computeroutput> and <computeroutput>circle2</computeroutput> are not equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="113" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1afc1572cabcd6189ef105911b728708b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Circle_2&lt; Kernel &gt;::is_degenerate</definition>
        <argsstring>() const</argsstring>
        <name>is_degenerate</name>
        <qualifiedname>CGAL::Circle_2::is_degenerate</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>c</computeroutput> is degenerate, i.e. if <computeroutput>c</computeroutput> has squared radius zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="124" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a54e05146199d9b0472d92a39b10d4835" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Circle_2&lt; Kernel &gt;::oriented_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::Circle_2::oriented_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns either the constant <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">ON_ORIENTED_BOUNDARY</ref>, <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979aec3846b620579589dcc30c8fe71cc7f0" kindref="member">ON_POSITIVE_SIDE</ref>, or <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979ab906419672c7ae509b5e63158479ed85" kindref="member">ON_NEGATIVE_SIDE</ref>, iff <computeroutput>p</computeroutput> lies on the boundary, properly on the positive side, or properly on the negative side of <computeroutput>c</computeroutput>, resp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a37424719cfaa243d2841dcea46fa8bef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Circle_2&lt; Kernel &gt;::bounded_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>bounded_side</name>
        <qualifiedname>CGAL::Circle_2::bounded_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111ad8333d35d4801c08b3a5ae9e94d7cabe" kindref="member">ON_BOUNDED_SIDE</ref>, <ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" kindref="member">ON_BOUNDARY</ref>, or <ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a3a96e6da84164cc8300c9e130be23f71" kindref="member">ON_UNBOUNDED_SIDE</ref> iff <computeroutput>p</computeroutput> lies properly inside, on the boundary, or properly outside of <computeroutput>c</computeroutput>, resp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1afe7a679e46e568272a4e6d37cc5728f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Circle_2&lt; Kernel &gt;::has_on_positive_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_positive_side</name>
        <qualifiedname>CGAL::Circle_2::has_on_positive_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="150" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1ab83be96e9afec9835449db440926b572" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Circle_2&lt; Kernel &gt;::has_on_negative_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_negative_side</name>
        <qualifiedname>CGAL::Circle_2::has_on_negative_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="155" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a44d2ef9a36b03ae3e29bf83b57f499f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Circle_2&lt; Kernel &gt;::has_on_boundary</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_boundary</name>
        <qualifiedname>CGAL::Circle_2::has_on_boundary</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="160" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a5cebae495472f993fe4e01df89e0db10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Circle_2&lt; Kernel &gt;::has_on_bounded_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_bounded_side</name>
        <qualifiedname>CGAL::Circle_2::has_on_bounded_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="165" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a4a4e79ff53f15d75b90cb866ffb6f8cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Circle_2&lt; Kernel &gt;::has_on_unbounded_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_unbounded_side</name>
        <qualifiedname>CGAL::Circle_2::has_on_unbounded_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="170" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1ab41e6aeba289475ccf0aeab5c91de201" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Circle_2&lt; Kernel &gt; CGAL::Circle_2&lt; Kernel &gt;::opposite</definition>
        <argsstring>() const</argsstring>
        <name>opposite</name>
        <qualifiedname>CGAL::Circle_2::opposite</qualifiedname>
        <briefdescription>
<para>returns the circle with the same center and squared radius as <computeroutput>c</computeroutput> but with opposite orientation. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="183" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1a9c0b7562b2ad7884a3cf4eac758633d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Circle_2&lt; Kernel &gt; CGAL::Circle_2&lt; Kernel &gt;::orthogonal_transform</definition>
        <argsstring>(Aff_transformation_2&lt; Kernel &gt; const &amp;at) const</argsstring>
        <name>orthogonal_transform</name>
        <qualifiedname>CGAL::Circle_2::orthogonal_transform</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Aff__transformation__2" kindref="compound">Aff_transformation_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; const &amp;</type>
          <declname>at</declname>
        </param>
        <briefdescription>
<para>returns the circle obtained by applying <formula id="39">$ at$</formula> on <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>at</computeroutput> is an orthogonal transformation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="190" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Circle__2_1ab75edddb7938c9780e2865b8340d154a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Bbox__2" kindref="compound">Bbox_2</ref></type>
        <definition>Bbox_2 CGAL::Circle_2&lt; Kernel &gt;::bbox</definition>
        <argsstring>() const</argsstring>
        <name>bbox</name>
        <qualifiedname>CGAL::Circle_2::bbox</qualifiedname>
        <briefdescription>
<para>returns a bounding box containing <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circle_2.h" line="197" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object <computeroutput>c</computeroutput> of type <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref></computeroutput> is a circle in the two-dimensional Euclidean plane <formula id="26">$ \E^2$</formula>. </para>
    </briefdescription>
    <detaileddescription>
<para>The circle is oriented, i.e. its boundary has clockwise or counterclockwise orientation. The boundary splits <formula id="26">$ \E^2$</formula> into a positive and a negative side, where the positive side is to the left of the boundary. The boundary also splits <formula id="26">$ \E^2$</formula> into a bounded and an unbounded side. Note that the circle can be degenerated, i.e. the squared radius may be zero.</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classKernel_1_1Circle__2" kindref="compound">Kernel::Circle_2</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput> if <computeroutput><ref refid="classKernel" kindref="compound">Kernel</ref></computeroutput> is a cartesian kernel and if <computeroutput>Kernel::FT</computeroutput> is <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput></para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="CGAL/Circle_2.h" line="18" column="1" bodyfile="CGAL/Circle_2.h" bodystart="18" bodyend="201"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Circle__2_1ab75edddb7938c9780e2865b8340d154a" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>bbox</name></member>
      <member refid="classCGAL_1_1Circle__2_1a37424719cfaa243d2841dcea46fa8bef" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>bounded_side</name></member>
      <member refid="classCGAL_1_1Circle__2_1a12f2724f354977c15fe8b29af099484b" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>center</name></member>
      <member refid="classCGAL_1_1Circle__2_1aa4288248fd220340df32bf677b243a87" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>Circle_2</name></member>
      <member refid="classCGAL_1_1Circle__2_1a0224ebf5bbcd2992731a077d95d09b27" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>Circle_2</name></member>
      <member refid="classCGAL_1_1Circle__2_1a54b545c955b2c19dd0cacd0aaa59a46b" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>Circle_2</name></member>
      <member refid="classCGAL_1_1Circle__2_1a029d79198da34c791b978e40b492f4e9" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>Circle_2</name></member>
      <member refid="classCGAL_1_1Circle__2_1a44d2ef9a36b03ae3e29bf83b57f499f5" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>has_on_boundary</name></member>
      <member refid="classCGAL_1_1Circle__2_1a5cebae495472f993fe4e01df89e0db10" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>has_on_bounded_side</name></member>
      <member refid="classCGAL_1_1Circle__2_1ab83be96e9afec9835449db440926b572" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>has_on_negative_side</name></member>
      <member refid="classCGAL_1_1Circle__2_1afe7a679e46e568272a4e6d37cc5728f5" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>has_on_positive_side</name></member>
      <member refid="classCGAL_1_1Circle__2_1a4a4e79ff53f15d75b90cb866ffb6f8cd" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>has_on_unbounded_side</name></member>
      <member refid="classCGAL_1_1Circle__2_1afc1572cabcd6189ef105911b728708b8" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>is_degenerate</name></member>
      <member refid="classCGAL_1_1Circle__2_1a76ac2fdf5766bc7e581b31d839a9bf20" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Circle__2_1a206d0b170681f478df9dcb268f120162" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Circle__2_1ab41e6aeba289475ccf0aeab5c91de201" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>opposite</name></member>
      <member refid="classCGAL_1_1Circle__2_1a6cfaae0dc899fa0b53268b15a169b775" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>orientation</name></member>
      <member refid="classCGAL_1_1Circle__2_1a54e05146199d9b0472d92a39b10d4835" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Circle__2_1a9c0b7562b2ad7884a3cf4eac758633d6" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>orthogonal_transform</name></member>
      <member refid="classCGAL_1_1Circle__2_1a3bee3b5df6f471d9fa3a6546c5a4c523" prot="public" virt="non-virtual"><scope>CGAL::Circle_2</scope><name>squared_radius</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
