<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Plane__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Plane_3</compoundname>
    <includes local="no">CGAL/Plane_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1af3c70a710a35b054963521ff24d846e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Plane_3&lt; Kernel &gt;::Plane_3</definition>
        <argsstring>(const Kernel::RT &amp;a, const Kernel::RT &amp;b, const Kernel::RT &amp;c, const Kernel::RT &amp;d)</argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Plane_3::Plane_3</qualifiedname>
        <param>
          <type>const Kernel::RT &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Kernel::RT &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Kernel::RT &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const Kernel::RT &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>creates a plane <computeroutput>h</computeroutput> defined by the equation <formula id="75">$ a\, px +b\, py +c\, pz + d = 0$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>Notice that <computeroutput>h</computeroutput> is degenerate if <formula id="76">$ a = b = c = 0$</formula>. <variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1ae4f75b89e91d636eebaf0e0fd1dfd4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Plane_3&lt; Kernel &gt;::Plane_3</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p, const Point_3&lt; Kernel &gt; &amp;q, const Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Plane_3::Plane_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>creates a plane <computeroutput>h</computeroutput> passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The plane is oriented such that <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> are oriented in a positive sense (that is counterclockwise) when seen from the positive side of <computeroutput>h</computeroutput>. Notice that <computeroutput>h</computeroutput> is degenerate if the points are collinear. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a18b50463614c6eee3a1d6d933a7e4db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Plane_3&lt; Kernel &gt;::Plane_3</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p, const Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Plane_3::Plane_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>introduces a plane <computeroutput>h</computeroutput> that passes through point <computeroutput>p</computeroutput> and that is orthogonal to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a5946d70dfbd251bb0cd9b7685c296e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Plane_3&lt; Kernel &gt;::Plane_3</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p, const Direction_3&lt; Kernel &gt; &amp;d)</argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Plane_3::Plane_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Direction__3" kindref="compound">Direction_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>introduces a plane <computeroutput>h</computeroutput> that passes through point <computeroutput>p</computeroutput> and that has as an orthogonal direction equal to <computeroutput>d</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1ab35accafdeeec101e2943ac1d1d9c90b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Plane_3&lt; Kernel &gt;::Plane_3</definition>
        <argsstring>(const Line_3&lt; Kernel &gt; &amp;l, const Point_3&lt; Kernel &gt; &amp;p)</argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Plane_3::Plane_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>introduces a plane <computeroutput>h</computeroutput> that is defined through the three points <computeroutput>l.point(0)</computeroutput>, <computeroutput>l.point(1)</computeroutput> and <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a21538544cca0e0bf934112d13c406e81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Plane_3&lt; Kernel &gt;::Plane_3</definition>
        <argsstring>(const Ray_3&lt; Kernel &gt; &amp;r, const Point_3&lt; Kernel &gt; &amp;p)</argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Plane_3::Plane_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>introduces a plane <computeroutput>h</computeroutput> that is defined through the three points <computeroutput>r.point(0)</computeroutput>, <computeroutput>r.point(1)</computeroutput> and <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a45aa55d07858c36e2a0599b920191f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Plane_3&lt; Kernel &gt;::Plane_3</definition>
        <argsstring>(const Segment_3&lt; Kernel &gt; &amp;s, const Point_3&lt; Kernel &gt; &amp;p)</argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Plane_3::Plane_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>introduces a plane <computeroutput>h</computeroutput> that is defined through the three points <computeroutput>s.source()</computeroutput>, <computeroutput>s.target()</computeroutput> and <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1af1d75410d3ab52c097092907effb5377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Plane_3&lt; Kernel &gt;::Plane_3</definition>
        <argsstring>(const Circle_3&lt; Kernel &gt; &amp;c)</argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Plane_3::Plane_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>introduces a plane <computeroutput>h</computeroutput> that is defined as the plane containing the circle. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1afd23b0c86cb18f173aca8a69da1f0c6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Plane_3&lt; Kernel &gt;::operator==</definition>
        <argsstring>(const Plane_3&lt; Kernel &gt; &amp;h2) const</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Plane_3::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>Test for equality: two planes are equal, iff they have a non empty intersection and the same orientation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="101" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a571c800762243fec4dfa19f11d1abd71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Plane_3&lt; Kernel &gt;::operator!=</definition>
        <argsstring>(const Plane_3&lt; Kernel &gt; &amp;h2) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Plane_3::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>Test for inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="106" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1ae3e4a5dae30e7c0fc55956f081b977b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::RT</type>
        <definition>Kernel::RT CGAL::Plane_3&lt; Kernel &gt;::a</definition>
        <argsstring>() const</argsstring>
        <name>a</name>
        <qualifiedname>CGAL::Plane_3::a</qualifiedname>
        <briefdescription>
<para>returns the first coefficient of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="112" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1aaaef3942464f136e44a7fad882265466" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::RT</type>
        <definition>Kernel::RT CGAL::Plane_3&lt; Kernel &gt;::b</definition>
        <argsstring>() const</argsstring>
        <name>b</name>
        <qualifiedname>CGAL::Plane_3::b</qualifiedname>
        <briefdescription>
<para>returns the second coefficient of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="118" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a60fa2e448ab9d76a724665dc7c781af9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::RT</type>
        <definition>Kernel::RT CGAL::Plane_3&lt; Kernel &gt;::c</definition>
        <argsstring>() const</argsstring>
        <name>c</name>
        <qualifiedname>CGAL::Plane_3::c</qualifiedname>
        <briefdescription>
<para>returns the third coefficient of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="124" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a97759ecad183f2b21002530624a5797a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::RT</type>
        <definition>Kernel::RT CGAL::Plane_3&lt; Kernel &gt;::d</definition>
        <argsstring>() const</argsstring>
        <name>d</name>
        <qualifiedname>CGAL::Plane_3::d</qualifiedname>
        <briefdescription>
<para>returns the fourth coefficient of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="130" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1ad25c4812b6d35fbf872bad44cebe77eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Line_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::perpendicular_line</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>perpendicular_line</name>
        <qualifiedname>CGAL::Plane_3::perpendicular_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the line that is perpendicular to <computeroutput>h</computeroutput> and that passes through point <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The line is oriented from the negative to the positive side of <computeroutput>h</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="137" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1ab4b3e06410bd35b3eb7aeec95f958c53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::projection</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>projection</name>
        <qualifiedname>CGAL::Plane_3::projection</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the orthogonal projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="142" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a6f45e84ed5d2a7690f6f3cd77b7c64de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Plane_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::opposite</definition>
        <argsstring>() const</argsstring>
        <name>opposite</name>
        <qualifiedname>CGAL::Plane_3::opposite</qualifiedname>
        <briefdescription>
<para>returns the plane with opposite orientation. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="148" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1afaf118993632ee104ab42110aaebf47c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::point</definition>
        <argsstring>() const</argsstring>
        <name>point</name>
        <qualifiedname>CGAL::Plane_3::point</qualifiedname>
        <briefdescription>
<para>returns an arbitrary point on <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="153" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a93d0feb722a3b435a2a25524abce3f9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Vector_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::orthogonal_vector</definition>
        <argsstring>() const</argsstring>
        <name>orthogonal_vector</name>
        <qualifiedname>CGAL::Plane_3::orthogonal_vector</qualifiedname>
        <briefdescription>
<para>returns a vector that is orthogonal to <computeroutput>h</computeroutput> and that is directed to the positive side of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="160" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1afb507696c0120ff5a27b2b0a048a458a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Direction__3" kindref="compound">Direction_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Direction_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::orthogonal_direction</definition>
        <argsstring>() const</argsstring>
        <name>orthogonal_direction</name>
        <qualifiedname>CGAL::Plane_3::orthogonal_direction</qualifiedname>
        <briefdescription>
<para>returns the direction that is orthogonal to <computeroutput>h</computeroutput> and that is directed to the positive side of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="167" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a04225b7706e74a7b6bd24eadf0cfddcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Vector_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::base1</definition>
        <argsstring>() const</argsstring>
        <name>base1</name>
        <qualifiedname>CGAL::Plane_3::base1</qualifiedname>
        <briefdescription>
<para>returns a vector orthogonal to <computeroutput><ref refid="classCGAL_1_1Plane__3_1a93d0feb722a3b435a2a25524abce3f9d" kindref="member">orthogonal_vector()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="173" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a80330968d52b7be3a29528348ba1b87d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Vector_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::base2</definition>
        <argsstring>() const</argsstring>
        <name>base2</name>
        <qualifiedname>CGAL::Plane_3::base2</qualifiedname>
        <briefdescription>
<para>returns a vector that is both orthogonal to <computeroutput><ref refid="classCGAL_1_1Plane__3_1a04225b7706e74a7b6bd24eadf0cfddcd" kindref="member">base1()</ref></computeroutput>, and to <computeroutput><ref refid="classCGAL_1_1Plane__3_1a93d0feb722a3b435a2a25524abce3f9d" kindref="member">orthogonal_vector()</ref></computeroutput>, and such that the result of <computeroutput>orientation( <ref refid="classCGAL_1_1Plane__3_1afaf118993632ee104ab42110aaebf47c" kindref="member">point()</ref>, <ref refid="classCGAL_1_1Plane__3_1afaf118993632ee104ab42110aaebf47c" kindref="member">point()</ref> + <ref refid="classCGAL_1_1Plane__3_1a04225b7706e74a7b6bd24eadf0cfddcd" kindref="member">base1()</ref>, <ref refid="classCGAL_1_1Plane__3_1afaf118993632ee104ab42110aaebf47c" kindref="member">point()</ref>+<ref refid="classCGAL_1_1Plane__3_1a80330968d52b7be3a29528348ba1b87d" kindref="member">base2()</ref>, <ref refid="classCGAL_1_1Plane__3_1afaf118993632ee104ab42110aaebf47c" kindref="member">point()</ref> + <ref refid="classCGAL_1_1Plane__3_1a93d0feb722a3b435a2a25524abce3f9d" kindref="member">orthogonal_vector()</ref> )</computeroutput> is positive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="180" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>2D Conversion</header>
      <description><para>The following functions provide conversion between a plane and CGAL&apos;s two-dimensional space.</para>
<para>The transformation is affine, but not necessarily an isometry. This means, the transformation preserves combinatorics, but not distances. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1ad5cf19a5d776d8262ddbd2807352e8bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::to_2d</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>to_2d</name>
        <qualifiedname>CGAL::Plane_3::to_2d</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the image point of the projection of <computeroutput>p</computeroutput> under an affine transformation, which maps <computeroutput>h</computeroutput> onto the <formula id="60">$ xy$</formula>-plane, with the <formula id="49">$ z$</formula>-coordinate removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="196" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1af41f582bf26bcb569df14e6ecdea3ea3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::to_3d</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>to_3d</name>
        <qualifiedname>CGAL::Plane_3::to_3d</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns a point <computeroutput>q</computeroutput>, such that <computeroutput>to_2d( to_3d( p ))</computeroutput> is equal to <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="202" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a3500f0c6d707bac032fb9fdcbf04cd09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Plane_3&lt; Kernel &gt;::oriented_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::Plane_3::oriented_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns either <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">ON_ORIENTED_BOUNDARY</ref>, or the constant <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979aec3846b620579589dcc30c8fe71cc7f0" kindref="member">ON_POSITIVE_SIDE</ref>, or the constant <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979ab906419672c7ae509b5e63158479ed85" kindref="member">ON_NEGATIVE_SIDE</ref>, determined by the position of <computeroutput>p</computeroutput> relative to the oriented plane <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="216" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Convenience Boolean Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a6d38a5e7a2cb99b8b27e2e8e51d0699a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Plane_3&lt; Kernel &gt;::has_on</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on</name>
        <qualifiedname>CGAL::Plane_3::has_on</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="226" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a477af2147c914dd74ef7dedffd6ad958" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Plane_3&lt; Kernel &gt;::has_on_positive_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_positive_side</name>
        <qualifiedname>CGAL::Plane_3::has_on_positive_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="231" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a63bb97c7994ab7b450a276659ad58a48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Plane_3&lt; Kernel &gt;::has_on_negative_side</definition>
        <argsstring>(const Point_3&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_negative_side</name>
        <qualifiedname>CGAL::Plane_3::has_on_negative_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="236" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1abd05705f493ce3cfaa600defa5600abd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Plane_3&lt; Kernel &gt;::has_on</definition>
        <argsstring>(const Line_3&lt; Kernel &gt; &amp;l) const</argsstring>
        <name>has_on</name>
        <qualifiedname>CGAL::Plane_3::has_on</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="241" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a9b71bd0a8b61f27131c4dd7d252fee96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Plane_3&lt; Kernel &gt;::has_on</definition>
        <argsstring>(const Circle_3&lt; Kernel &gt; &amp;l) const</argsstring>
        <name>has_on</name>
        <qualifiedname>CGAL::Plane_3::has_on</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="246" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a105b8bf7edfb4f1396e228cecc8f2749" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Plane_3&lt; Kernel &gt;::is_degenerate</definition>
        <argsstring>() const</argsstring>
        <name>is_degenerate</name>
        <qualifiedname>CGAL::Plane_3::is_degenerate</qualifiedname>
        <briefdescription>
<para>Plane <computeroutput>h</computeroutput> is degenerate, if the coefficients <computeroutput>a</computeroutput>, <computeroutput>b</computeroutput>, and <computeroutput>c</computeroutput> of the plane equation are zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="252" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Plane__3_1a427c141c95cef0b764f0980e61c21ab0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Plane_3&lt; Kernel &gt; CGAL::Plane_3&lt; Kernel &gt;::transform</definition>
        <argsstring>(const Aff_transformation_3&lt; Kernel &gt; &amp;t) const</argsstring>
        <name>transform</name>
        <qualifiedname>CGAL::Plane_3::transform</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Aff__transformation__3" kindref="compound">Aff_transformation_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the plane obtained by applying <computeroutput>t</computeroutput> on a point of <computeroutput>h</computeroutput> and the orthogonal direction of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Plane_3.h" line="263" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object <computeroutput>h</computeroutput> of the data type <computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref></computeroutput> is an oriented plane in the three-dimensional Euclidean space <formula id="30">$ \E^3$</formula>. </para>
    </briefdescription>
    <detaileddescription>
<para>It is defined by the set of points with Cartesian coordinates <formula id="70">$ (x,y,z)$</formula> that satisfy the plane equation</para>
<para><formula id="71">\[h :\;  a\, x +b\, y +c\, z + d = 0.\]</formula></para>
<para>The plane splits <formula id="30">$ \E^3$</formula> in a <emphasis>positive</emphasis> and a <emphasis>negative side</emphasis>. A point <computeroutput>p</computeroutput> with Cartesian coordinates <formula id="72">$ (px, py, pz)$</formula> is on the positive side of <computeroutput>h</computeroutput>, iff <formula id="73">$ a\, px +b\, py +c\, pz + d &gt; 0$</formula>. It is on the negative side, iff <formula id="74">$ a\, px +b\, py\, +c\, pz + d &lt; 0$</formula>.</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classKernel_1_1Plane__3" kindref="compound">Kernel::Plane_3</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="CGAL/Plane_3.h" line="21" column="1" bodyfile="CGAL/Plane_3.h" bodystart="21" bodyend="267"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Plane__3_1ae3e4a5dae30e7c0fc55956f081b977b6" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>a</name></member>
      <member refid="classCGAL_1_1Plane__3_1aaaef3942464f136e44a7fad882265466" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>b</name></member>
      <member refid="classCGAL_1_1Plane__3_1a04225b7706e74a7b6bd24eadf0cfddcd" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>base1</name></member>
      <member refid="classCGAL_1_1Plane__3_1a80330968d52b7be3a29528348ba1b87d" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>base2</name></member>
      <member refid="classCGAL_1_1Plane__3_1a60fa2e448ab9d76a724665dc7c781af9" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>c</name></member>
      <member refid="classCGAL_1_1Plane__3_1a97759ecad183f2b21002530624a5797a" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>d</name></member>
      <member refid="classCGAL_1_1Plane__3_1a6d38a5e7a2cb99b8b27e2e8e51d0699a" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>has_on</name></member>
      <member refid="classCGAL_1_1Plane__3_1abd05705f493ce3cfaa600defa5600abd" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>has_on</name></member>
      <member refid="classCGAL_1_1Plane__3_1a9b71bd0a8b61f27131c4dd7d252fee96" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>has_on</name></member>
      <member refid="classCGAL_1_1Plane__3_1a63bb97c7994ab7b450a276659ad58a48" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>has_on_negative_side</name></member>
      <member refid="classCGAL_1_1Plane__3_1a477af2147c914dd74ef7dedffd6ad958" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>has_on_positive_side</name></member>
      <member refid="classCGAL_1_1Plane__3_1a105b8bf7edfb4f1396e228cecc8f2749" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>is_degenerate</name></member>
      <member refid="classCGAL_1_1Plane__3_1a571c800762243fec4dfa19f11d1abd71" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Plane__3_1afd23b0c86cb18f173aca8a69da1f0c6e" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Plane__3_1a6f45e84ed5d2a7690f6f3cd77b7c64de" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>opposite</name></member>
      <member refid="classCGAL_1_1Plane__3_1a3500f0c6d707bac032fb9fdcbf04cd09" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Plane__3_1afb507696c0120ff5a27b2b0a048a458a" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>orthogonal_direction</name></member>
      <member refid="classCGAL_1_1Plane__3_1a93d0feb722a3b435a2a25524abce3f9d" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>orthogonal_vector</name></member>
      <member refid="classCGAL_1_1Plane__3_1ad25c4812b6d35fbf872bad44cebe77eb" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>perpendicular_line</name></member>
      <member refid="classCGAL_1_1Plane__3_1af3c70a710a35b054963521ff24d846e2" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Plane__3_1ae4f75b89e91d636eebaf0e0fd1dfd4a9" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Plane__3_1a18b50463614c6eee3a1d6d933a7e4db5" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Plane__3_1a5946d70dfbd251bb0cd9b7685c296e7c" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Plane__3_1ab35accafdeeec101e2943ac1d1d9c90b" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Plane__3_1a21538544cca0e0bf934112d13c406e81" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Plane__3_1a45aa55d07858c36e2a0599b920191f1f" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Plane__3_1af1d75410d3ab52c097092907effb5377" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Plane__3_1afaf118993632ee104ab42110aaebf47c" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>point</name></member>
      <member refid="classCGAL_1_1Plane__3_1ab4b3e06410bd35b3eb7aeec95f958c53" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>projection</name></member>
      <member refid="classCGAL_1_1Plane__3_1ad5cf19a5d776d8262ddbd2807352e8bb" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>to_2d</name></member>
      <member refid="classCGAL_1_1Plane__3_1af41f582bf26bcb569df14e6ecdea3ea3" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>to_3d</name></member>
      <member refid="classCGAL_1_1Plane__3_1a427c141c95cef0b764f0980e61c21ab0" prot="public" virt="non-virtual"><scope>CGAL::Plane_3</scope><name>transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
