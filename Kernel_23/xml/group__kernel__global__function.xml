<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__kernel__global__function" kind="group">
    <compoundname>kernel_global_function</compoundname>
    <title>Global Kernel Functions</title>
    <innergroup refid="group__angle__grp">CGAL::angle()</innergroup>
    <innergroup refid="group__approximate__angle__grp">CGAL::approximate_angle()</innergroup>
    <innergroup refid="group__approximate__dihedral__angle__grp">CGAL::approximate_dihedral_angle()</innergroup>
    <innergroup refid="group__area__grp">CGAL::area()</innergroup>
    <innergroup refid="group__are__ordered__along__line__grp">CGAL::are_ordered_along_line()</innergroup>
    <innergroup refid="group__are__strictly__ordered__along__line__grp">CGAL::are_strictly_ordered_along_line()</innergroup>
    <innergroup refid="group__barycenter__grp">CGAL::barycenter()</innergroup>
    <innergroup refid="group__bisector__grp">CGAL::bisector()</innergroup>
    <innergroup refid="group__centroid__grp">CGAL::centroid()</innergroup>
    <innergroup refid="group__circumcenter__grp">CGAL::circumcenter()</innergroup>
    <innergroup refid="group__collinear__are__ordered__along__line__grp">CGAL::collinear_are_ordered_along_line()</innergroup>
    <innergroup refid="group__collinear__are__strictly__ordered__along__line__grp">CGAL::collinear_are_strictly_ordered_along_line()</innergroup>
    <innergroup refid="group__collinear__grp">CGAL::collinear()</innergroup>
    <innergroup refid="group__compare__dihedral__angle__grp">CGAL::compare_dihedral_angle()</innergroup>
    <innergroup refid="group__compare__distance__to__point__grp">CGAL::compare_distance_to_point()</innergroup>
    <innergroup refid="group__compare__lexicographically__linear__grp">CGAL::compare_lexicographically()</innergroup>
    <innergroup refid="group__compare__signed__distance__to__line__grp">CGAL::compare_signed_distance_to_line()</innergroup>
    <innergroup refid="group__compare__signed__distance__to__plane__grp">CGAL::compare_signed_distance_to_plane()</innergroup>
    <innergroup refid="group__compare__slopes__grp">CGAL::compare_slope()</innergroup>
    <innergroup refid="group__compare__squared__distance__grp">CGAL::compare_squared_distance()</innergroup>
    <innergroup refid="group__compare__squared__radius__grp">CGAL::compare_squared_radius()</innergroup>
    <innergroup refid="group__compare__x__grp">CGAL::compare_x()</innergroup>
    <innergroup refid="group__compare__xy__grp">CGAL::compare_xy()</innergroup>
    <innergroup refid="group__compare__x__at__y__grp">CGAL::compare_x_at_y()</innergroup>
    <innergroup refid="group__compare__y__at__x__grp">CGAL::compare_y_at_x()</innergroup>
    <innergroup refid="group__compare__y__grp">CGAL::compare_y()</innergroup>
    <innergroup refid="group__compare__xyz__grp">CGAL::compare_xyz()</innergroup>
    <innergroup refid="group__compare__z__grp">CGAL::compare_z()</innergroup>
    <innergroup refid="group__compare__yx__grp">CGAL::compare_yx()</innergroup>
    <innergroup refid="group__coplanar__grp">CGAL::coplanar()</innergroup>
    <innergroup refid="group__coplanar__orientation__grp">CGAL::coplanar_orientation()</innergroup>
    <innergroup refid="group__coplanar__side__of__bounded__circle__grp">CGAL::coplanar_side_of_bounded_circle()</innergroup>
    <innergroup refid="group__cross__product__grp">CGAL::cross_product()</innergroup>
    <innergroup refid="group__determinant__grp">CGAL::determinant()</innergroup>
    <innergroup refid="group__do__intersect__grp">Intersection Testing Functions - CGAL::do_intersect()</innergroup>
    <innergroup refid="group__equidistant__line__grp">CGAL::equidistant_line()</innergroup>
    <innergroup refid="group__has__larger__distance__to__point__grp">CGAL::has_larger_distance_to_point()</innergroup>
    <innergroup refid="group__has__larger__signed__distance__to__line__grp">CGAL::has_larger_signed_distance_to_line()</innergroup>
    <innergroup refid="group__has__larger__signed__distance__to__plane__grp">CGAL::has_larger_signed_distance_to_plane()</innergroup>
    <innergroup refid="group__has__smaller__distance__to__point__grp">CGAL::has_smaller_distance_to_point()</innergroup>
    <innergroup refid="group__has__smaller__signed__distance__to__line__grp">CGAL::has_smaller_signed_distance_to_line()</innergroup>
    <innergroup refid="group__has__smaller__signed__distance__to__plane__grp">CGAL::has_smaller_signed_distance_to_plane()</innergroup>
    <innergroup refid="group__intersection__grp">Intersection Computation Functions - CGAL::intersection()</innergroup>
    <innergroup refid="group__l__infinity__distance__grp">CGAL::l_infinity_distance()</innergroup>
    <innergroup refid="group__left__turn__grp">CGAL::left_turn()</innergroup>
    <innergroup refid="group__lexicographically__xy__larger__grp">CGAL::lexicographically_xy_larger()</innergroup>
    <innergroup refid="group__lexicographically__xy__larger__or__equal__grp">CGAL::lexicographically_xy_larger_or_equal()</innergroup>
    <innergroup refid="group__lexicographically__xy__smaller__grp">CGAL::lexicographically_xy_smaller()</innergroup>
    <innergroup refid="group__lexicographically__xy__smaller__or__equal__grp">CGAL::lexicographically_xy_smaller_or_equal()</innergroup>
    <innergroup refid="group__lexicographically__xyz__smaller__grp">CGAL::lexicographically_xyz_smaller()</innergroup>
    <innergroup refid="group__lexicographically__xyz__smaller__or__equal__grp">CGAL::lexicographically_xyz_smaller_or_equal()</innergroup>
    <innergroup refid="group__max__vertex__grp">CGAL::max_vertex()</innergroup>
    <innergroup refid="group__midpoint__grp">CGAL::midpoint()</innergroup>
    <innergroup refid="group__min__vertex__grp">CGAL::min_vertex()</innergroup>
    <innergroup refid="group__normal__grp">CGAL::normal()</innergroup>
    <innergroup refid="group__orientation__grp">CGAL::orientation()</innergroup>
    <innergroup refid="group__orthogonal__vector__grp">CGAL::orthogonal_vector()</innergroup>
    <innergroup refid="group__parallel__grp">CGAL::parallel()</innergroup>
    <innergroup refid="group__radical__plane__grp">CGAL::radical_plane()</innergroup>
    <innergroup refid="group__radical__line__grp">CGAL::radical_line()</innergroup>
    <innergroup refid="group__rational__rotation__approximation__grp">CGAL::rational_rotation_approximation()</innergroup>
    <innergroup refid="group__right__turn__grp">CGAL::right_turn()</innergroup>
    <innergroup refid="group__scalar__product__grp">CGAL::scalar_product()</innergroup>
    <innergroup refid="group__side__of__bounded__circle__grp">CGAL::side_of_bounded_circle()</innergroup>
    <innergroup refid="group__side__of__bounded__sphere__grp">CGAL::side_of_bounded_sphere()</innergroup>
    <innergroup refid="group__side__of__oriented__circle__grp">CGAL::side_of_oriented_circle()</innergroup>
    <innergroup refid="group__side__of__oriented__sphere__grp">CGAL::side_of_oriented_sphere()</innergroup>
    <innergroup refid="group__squared__area__grp">CGAL::squared_area()</innergroup>
    <innergroup refid="group__squared__distance__grp">CGAL::squared_distance()</innergroup>
    <innergroup refid="group__squared__length__grp">CGAL::squared_length()</innergroup>
    <innergroup refid="group__squared__radius__grp">CGAL::squared_radius()</innergroup>
    <innergroup refid="group__unit__normal__grp">CGAL::unit_normal()</innergroup>
    <innergroup refid="group__volume__grp">CGAL::volume()</innergroup>
    <innergroup refid="group__x__equal__grp">CGAL::x_equal()</innergroup>
    <innergroup refid="group__y__equal__grp">CGAL::y_equal()</innergroup>
    <innergroup refid="group__z__equal__grp">CGAL::z_equal()</innergroup>
    <innergroup refid="group__Kernel__operator__plus">CGAL::operator+</innergroup>
    <innergroup refid="group__Kernel__operator__minus">CGAL::operator-</innergroup>
    <innergroup refid="group__Kernel__operator__prod">CGAL::operator*</innergroup>
    <innergroup refid="group__do__overlap__grp">CGAL::do_overlap()</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__global__function_1gafc40016b26f9b699ae6f4230735062b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Comparison_result</type>
        <definition>Comparison_result CGAL::compare_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;a, const CGAL::Point_3&lt; Kernel &gt; &amp;b, const CGAL::Point_3&lt; Kernel &gt; &amp;c, const Kernel::FT &amp;cosine)</argsstring>
        <name>compare_angle</name>
        <qualifiedname>CGAL::compare_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>cosine</declname>
        </param>
        <briefdescription>
<para>compares the angles <formula id="52">$ \theta_1$</formula> and <formula id="53">$ \theta_2$</formula>, where <formula id="52">$ \theta_1$</formula> is the angle in <formula id="54">$ [0, \pi]$</formula> of the triangle <formula id="55">$ (a, b, c)$</formula> at the vertex <computeroutput>b</computeroutput>, and <formula id="53">$ \theta_2$</formula> is the angle in <formula id="54">$ [0, \pi]$</formula> such that <formula id="56">$ cos(\theta_2) = cosine$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>a!=b &amp;&amp; c!=b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="631" column="19" declfile="CGAL/Kernel/global_functions.h" declline="631" declcolumn="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
