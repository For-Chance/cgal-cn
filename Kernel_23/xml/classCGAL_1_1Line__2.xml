<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Line__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Line_2</compoundname>
    <includes local="no">CGAL/Line_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1ac9ae8c96fd2a0ac321fe709481dd3014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Line_2&lt; Kernel &gt;::Line_2</definition>
        <argsstring>(const Kernel::RT &amp;a, const Kernel::RT &amp;b, const Kernel::RT &amp;c)</argsstring>
        <name>Line_2</name>
        <qualifiedname>CGAL::Line_2::Line_2</qualifiedname>
        <param>
          <type>const Kernel::RT &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Kernel::RT &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Kernel::RT &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>introduces a line <computeroutput>l</computeroutput> with the line equation in Cartesian coordinates <formula id="68">$ ax +by +c = 0$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1ad0a2042cf135b5a79abc84c16d202a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Line_2&lt; Kernel &gt;::Line_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p, const Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>Line_2</name>
        <qualifiedname>CGAL::Line_2::Line_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>introduces a line <computeroutput>l</computeroutput> passing through the points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Line <computeroutput>l</computeroutput> is directed from <computeroutput>p</computeroutput> to <computeroutput>q</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a68277346e312569bf86eb50033407778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Line_2&lt; Kernel &gt;::Line_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p, const Direction_2&lt; Kernel &gt; &amp;d)</argsstring>
        <name>Line_2</name>
        <qualifiedname>CGAL::Line_2::Line_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Direction__2" kindref="compound">Direction_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>introduces a line <computeroutput>l</computeroutput> passing through point <computeroutput>p</computeroutput> with direction <computeroutput>d</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1abdf3e7effbeeaa9f95f7329367ffb0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Line_2&lt; Kernel &gt;::Line_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p, const Vector_2&lt; Kernel &gt; &amp;v)</argsstring>
        <name>Line_2</name>
        <qualifiedname>CGAL::Line_2::Line_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>introduces a line <computeroutput>l</computeroutput> passing through point <computeroutput>p</computeroutput> and oriented by <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a3ae5b70a3eab682b4944ba3cae8b65f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Line_2&lt; Kernel &gt;::Line_2</definition>
        <argsstring>(const Segment_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>Line_2</name>
        <qualifiedname>CGAL::Line_2::Line_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>introduces a line <computeroutput>l</computeroutput> supporting the segment <computeroutput>s</computeroutput>, oriented from source to target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a247304ffb42fc97952f8f7fa5942c917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Line_2&lt; Kernel &gt;::Line_2</definition>
        <argsstring>(const Ray_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>Line_2</name>
        <qualifiedname>CGAL::Line_2::Line_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>introduces a line <computeroutput>l</computeroutput> supporting the ray <computeroutput>r</computeroutput>, with same orientation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="82" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a94bd192facf79e3a1c0d85bf19692eeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Line_2&lt; Kernel &gt;::operator==</definition>
        <argsstring>(const Line_2&lt; Kernel &gt; &amp;h) const</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Line_2::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Test for equality: two lines are equal, iff they have a non empty intersection and the same direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="93" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1ae4dd218f1e6d889d384a334dfe4bca46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Line_2&lt; Kernel &gt;::operator!=</definition>
        <argsstring>(const Line_2&lt; Kernel &gt; &amp;h) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Line_2::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Test for inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="98" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a748d159397ba51b94294d0c14a370d71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::RT</type>
        <definition>Kernel::RT CGAL::Line_2&lt; Kernel &gt;::a</definition>
        <argsstring>() const</argsstring>
        <name>a</name>
        <qualifiedname>CGAL::Line_2::a</qualifiedname>
        <briefdescription>
<para>returns the first coefficient of <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="104" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a8363d538682e68d5f169f83a0504b9d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::RT</type>
        <definition>Kernel::RT CGAL::Line_2&lt; Kernel &gt;::b</definition>
        <argsstring>() const</argsstring>
        <name>b</name>
        <qualifiedname>CGAL::Line_2::b</qualifiedname>
        <briefdescription>
<para>returns the second coefficient of <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="110" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1ae2a774ec0c363ce43d10f4f9f94f8566" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::RT</type>
        <definition>Kernel::RT CGAL::Line_2&lt; Kernel &gt;::c</definition>
        <argsstring>() const</argsstring>
        <name>c</name>
        <qualifiedname>CGAL::Line_2::c</qualifiedname>
        <briefdescription>
<para>returns the third coefficient of <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="116" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1acc6f8e6878ebfba7a2195d5fbeef6a5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Line_2&lt; Kernel &gt;::point</definition>
        <argsstring>(const Kernel::FT i) const</argsstring>
        <name>point</name>
        <qualifiedname>CGAL::Line_2::point</qualifiedname>
        <param>
          <type>const Kernel::FT</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns an arbitrary point on <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It holds <computeroutput>point(i) == point(j)</computeroutput>, iff <computeroutput>i==j</computeroutput>. Furthermore, <computeroutput>l</computeroutput> is directed from <computeroutput>point(i)</computeroutput> to <computeroutput>point(j)</computeroutput>, for all <computeroutput>i</computeroutput> <formula id="69">$ &lt;$</formula> <computeroutput>j</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="124" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1ab94a54d9f3fad07d0b5d7f713c3c33ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Line_2&lt; Kernel &gt;::projection</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>projection</name>
        <qualifiedname>CGAL::Line_2::projection</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the orthogonal projection of <computeroutput>p</computeroutput> onto <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="129" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a8ce19d2d04dd137303f759fac5ae5c76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::Line_2&lt; Kernel &gt;::x_at_y</definition>
        <argsstring>(const Kernel::FT &amp;y) const</argsstring>
        <name>x_at_y</name>
        <qualifiedname>CGAL::Line_2::x_at_y</qualifiedname>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>returns the <formula id="44">$ x$</formula>-coordinate of the point at <computeroutput>l</computeroutput> with given <formula id="48">$ y$</formula>-coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>l</computeroutput> is not horizontal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="136" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a3e8e394bf9bea0cdfd2b47b74679b44a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::Line_2&lt; Kernel &gt;::y_at_x</definition>
        <argsstring>(const Kernel::FT &amp;x) const</argsstring>
        <name>y_at_x</name>
        <qualifiedname>CGAL::Line_2::y_at_x</qualifiedname>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the <formula id="48">$ y$</formula>-coordinate of the point at <computeroutput>l</computeroutput> with given <formula id="44">$ x$</formula>-coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>l</computeroutput> is not vertical. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="143" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a5eee2c3bbb45c59a03a7e9aa31917f53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Line_2&lt; Kernel &gt;::is_degenerate</definition>
        <argsstring>() const</argsstring>
        <name>is_degenerate</name>
        <qualifiedname>CGAL::Line_2::is_degenerate</qualifiedname>
        <briefdescription>
<para>line <computeroutput>l</computeroutput> is degenerate, if the coefficients <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> of the line equation are zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="154" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a2e3f6afb48b21e5fb059cd80167c577b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Line_2&lt; Kernel &gt;::is_horizontal</definition>
        <argsstring>() const</argsstring>
        <name>is_horizontal</name>
        <qualifiedname>CGAL::Line_2::is_horizontal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="159" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a52dced2852a9288f28e950599967b252" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Line_2&lt; Kernel &gt;::is_vertical</definition>
        <argsstring>() const</argsstring>
        <name>is_vertical</name>
        <qualifiedname>CGAL::Line_2::is_vertical</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="164" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a13559588ea88cec2411f0623fc16ff52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Line_2&lt; Kernel &gt;::oriented_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::Line_2::oriented_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">ON_ORIENTED_BOUNDARY</ref>, <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979ab906419672c7ae509b5e63158479ed85" kindref="member">ON_NEGATIVE_SIDE</ref>, or the constant <ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979aec3846b620579589dcc30c8fe71cc7f0" kindref="member">ON_POSITIVE_SIDE</ref>, depending on the position of <computeroutput>p</computeroutput> relative to the oriented line <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="173" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Convenience Boolean Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a901765df299700b37b071951466dd0e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Line_2&lt; Kernel &gt;::has_on</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on</name>
        <qualifiedname>CGAL::Line_2::has_on</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="183" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a1453d0576bc1db634254ac3a0161951e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Line_2&lt; Kernel &gt;::has_on_positive_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_positive_side</name>
        <qualifiedname>CGAL::Line_2::has_on_positive_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="188" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1ab0c360963e47c0eeef2c2851af442e18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Line_2&lt; Kernel &gt;::has_on_negative_side</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on_negative_side</name>
        <qualifiedname>CGAL::Line_2::has_on_negative_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="193" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a420967bca785ae7bc11dc4c89c18ae9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Vector__2" kindref="compound">Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Vector_2&lt; Kernel &gt; CGAL::Line_2&lt; Kernel &gt;::to_vector</definition>
        <argsstring>() const</argsstring>
        <name>to_vector</name>
        <qualifiedname>CGAL::Line_2::to_vector</qualifiedname>
        <briefdescription>
<para>returns a vector having the direction of <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="203" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1ac61907e214ff2df3a632f4fd9529c5d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Direction__2" kindref="compound">Direction_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Direction_2&lt; Kernel &gt; CGAL::Line_2&lt; Kernel &gt;::direction</definition>
        <argsstring>() const</argsstring>
        <name>direction</name>
        <qualifiedname>CGAL::Line_2::direction</qualifiedname>
        <briefdescription>
<para>returns the direction of <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="208" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a6e751526f51680908827a44527eca930" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Line_2&lt; Kernel &gt; CGAL::Line_2&lt; Kernel &gt;::opposite</definition>
        <argsstring>() const</argsstring>
        <name>opposite</name>
        <qualifiedname>CGAL::Line_2::opposite</qualifiedname>
        <briefdescription>
<para>returns the line with opposite direction. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="214" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1af648ae7434e998c1254a6432c22b50b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Line_2&lt; Kernel &gt; CGAL::Line_2&lt; Kernel &gt;::perpendicular</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>perpendicular</name>
        <qualifiedname>CGAL::Line_2::perpendicular</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>returns the line perpendicular to <computeroutput>l</computeroutput> and passing through <computeroutput>p</computeroutput>, where the direction is the direction of <computeroutput>l</computeroutput> rotated counterclockwise by 90 degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="221" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Line__2_1a40fe2d86713ccc8ce456d0be53ec8296" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Line_2&lt; Kernel &gt; CGAL::Line_2&lt; Kernel &gt;::transform</definition>
        <argsstring>(const Aff_transformation_2&lt; Kernel &gt; &amp;t) const</argsstring>
        <name>transform</name>
        <qualifiedname>CGAL::Line_2::transform</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Aff__transformation__2" kindref="compound">Aff_transformation_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the line obtained by applying <computeroutput>t</computeroutput> on a point on <computeroutput>l</computeroutput> and the direction of <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Line_2.h" line="227" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object <computeroutput>l</computeroutput> of the data type <computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref></computeroutput> is a directed straight line in the two-dimensional Euclidean plane <formula id="26">$ \E^2$</formula>. </para>
    </briefdescription>
    <detaileddescription>
<para>It is defined by the set of points with Cartesian coordinates <formula id="63">$ (x,y)$</formula> that satisfy the equation</para>
<para><formula id="64">\[ l:\; a\, x +b\, y +c = 0. \]</formula></para>
<para>The line splits <formula id="26">$ \E^2$</formula> in a <emphasis>positive</emphasis> and a <emphasis>negative</emphasis> side. A point <computeroutput>p</computeroutput> with Cartesian coordinates <formula id="65">$ (px, py)$</formula> is on the positive side of <computeroutput>l</computeroutput>, iff <formula id="66">$ a\, px + b\, py +c &gt; 0$</formula>, it is on the negative side of <computeroutput>l</computeroutput>, iff <formula id="67">$ a\, px + b\, py +c &lt; 0$</formula>. The positive side is to the left of <computeroutput>l</computeroutput>.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>Let us first define two Cartesian two-dimensional points in the Euclidean plane <formula id="26">$ \E^2$</formula>. Their dimension and the fact that they are Cartesian is expressed by the suffix <computeroutput>_2</computeroutput> and the representation type <computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref></computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">Point_2&lt;<sp/>Cartesian&lt;double&gt;<sp/>&gt;<sp/>p(1.0,1.0),<sp/>q(4.0,7.0);</highlight></codeline>
</programlisting></para>
<para>To define a line <computeroutput>l</computeroutput> we write:</para>
<para><programlisting><codeline><highlight class="normal">Line_2&lt;<sp/>Cartesian&lt;double&gt;<sp/>&gt;<sp/>l(p,q);</highlight></codeline>
</programlisting></para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classKernel_1_1Line__2" kindref="compound">Kernel::Line_2</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="CGAL/Line_2.h" line="41" column="1" bodyfile="CGAL/Line_2.h" bodystart="41" bodyend="231"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Line__2_1a748d159397ba51b94294d0c14a370d71" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>a</name></member>
      <member refid="classCGAL_1_1Line__2_1a8363d538682e68d5f169f83a0504b9d1" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>b</name></member>
      <member refid="classCGAL_1_1Line__2_1ae2a774ec0c363ce43d10f4f9f94f8566" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>c</name></member>
      <member refid="classCGAL_1_1Line__2_1ac61907e214ff2df3a632f4fd9529c5d5" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>direction</name></member>
      <member refid="classCGAL_1_1Line__2_1a901765df299700b37b071951466dd0e7" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>has_on</name></member>
      <member refid="classCGAL_1_1Line__2_1ab0c360963e47c0eeef2c2851af442e18" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>has_on_negative_side</name></member>
      <member refid="classCGAL_1_1Line__2_1a1453d0576bc1db634254ac3a0161951e" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>has_on_positive_side</name></member>
      <member refid="classCGAL_1_1Line__2_1a5eee2c3bbb45c59a03a7e9aa31917f53" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>is_degenerate</name></member>
      <member refid="classCGAL_1_1Line__2_1a2e3f6afb48b21e5fb059cd80167c577b" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>is_horizontal</name></member>
      <member refid="classCGAL_1_1Line__2_1a52dced2852a9288f28e950599967b252" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>is_vertical</name></member>
      <member refid="classCGAL_1_1Line__2_1ac9ae8c96fd2a0ac321fe709481dd3014" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>Line_2</name></member>
      <member refid="classCGAL_1_1Line__2_1ad0a2042cf135b5a79abc84c16d202a30" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>Line_2</name></member>
      <member refid="classCGAL_1_1Line__2_1a68277346e312569bf86eb50033407778" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>Line_2</name></member>
      <member refid="classCGAL_1_1Line__2_1abdf3e7effbeeaa9f95f7329367ffb0e1" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>Line_2</name></member>
      <member refid="classCGAL_1_1Line__2_1a3ae5b70a3eab682b4944ba3cae8b65f1" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>Line_2</name></member>
      <member refid="classCGAL_1_1Line__2_1a247304ffb42fc97952f8f7fa5942c917" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>Line_2</name></member>
      <member refid="classCGAL_1_1Line__2_1ae4dd218f1e6d889d384a334dfe4bca46" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Line__2_1a94bd192facf79e3a1c0d85bf19692eeb" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Line__2_1a6e751526f51680908827a44527eca930" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>opposite</name></member>
      <member refid="classCGAL_1_1Line__2_1a13559588ea88cec2411f0623fc16ff52" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Line__2_1af648ae7434e998c1254a6432c22b50b2" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>perpendicular</name></member>
      <member refid="classCGAL_1_1Line__2_1acc6f8e6878ebfba7a2195d5fbeef6a5f" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>point</name></member>
      <member refid="classCGAL_1_1Line__2_1ab94a54d9f3fad07d0b5d7f713c3c33ce" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>projection</name></member>
      <member refid="classCGAL_1_1Line__2_1a420967bca785ae7bc11dc4c89c18ae9a" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>to_vector</name></member>
      <member refid="classCGAL_1_1Line__2_1a40fe2d86713ccc8ce456d0be53ec8296" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>transform</name></member>
      <member refid="classCGAL_1_1Line__2_1a8ce19d2d04dd137303f759fac5ae5c76" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>x_at_y</name></member>
      <member refid="classCGAL_1_1Line__2_1a3e8e394bf9bea0cdfd2b47b74679b44a" prot="public" virt="non-virtual"><scope>CGAL::Line_2</scope><name>y_at_x</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
