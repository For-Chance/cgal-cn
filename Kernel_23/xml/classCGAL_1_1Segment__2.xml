<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Segment__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Segment_2</compoundname>
    <includes local="no">CGAL/Segment_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a6c62f1f9e2163dfe93395fda70fd7961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Segment_2&lt; Kernel &gt;::Segment_2</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p, const Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>Segment_2</name>
        <qualifiedname>CGAL::Segment_2::Segment_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>introduces a segment <computeroutput>s</computeroutput> with source <computeroutput>p</computeroutput> and target <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The segment is directed from the source towards the target. <variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="33" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1ae14445a3219f34a43b82aec47027aafe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_2&lt; Kernel &gt;::operator==</definition>
        <argsstring>(const Segment_2&lt; Kernel &gt; &amp;q) const</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Segment_2::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Test for equality: Two segments are equal, iff their sources and targets are equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="44" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a4e4445c63f2e90194992aa86716f08e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_2&lt; Kernel &gt;::operator!=</definition>
        <argsstring>(const Segment_2&lt; Kernel &gt; &amp;q) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Segment_2::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Test for inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="49" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a4acc8326156176ca970ad46a14d5536f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::source</definition>
        <argsstring>() const</argsstring>
        <name>source</name>
        <qualifiedname>CGAL::Segment_2::source</qualifiedname>
        <briefdescription>
<para>returns the source of <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="55" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1ac144b7b0a177cc38897a3276ee696827" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::target</definition>
        <argsstring>() const</argsstring>
        <name>target</name>
        <qualifiedname>CGAL::Segment_2::target</qualifiedname>
        <briefdescription>
<para>returns the target of <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="61" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a5cf6dc3685e9985bcf753003e13d7a77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <qualifiedname>CGAL::Segment_2::min</qualifiedname>
        <briefdescription>
<para>returns the point of <computeroutput>s</computeroutput> with lexicographically smallest coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="67" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1ab50648c68ae2cde4e4db33505d49aeb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <qualifiedname>CGAL::Segment_2::max</qualifiedname>
        <briefdescription>
<para>returns the point of <computeroutput>s</computeroutput> with lexicographically largest coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="73" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1af327b20bb456c6488d33a4ca6c93f0d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::vertex</definition>
        <argsstring>(int i) const</argsstring>
        <name>vertex</name>
        <qualifiedname>CGAL::Segment_2::vertex</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns source or target of <computeroutput>s</computeroutput>: <computeroutput>vertex(0)</computeroutput> returns the source of <computeroutput>s</computeroutput>, <computeroutput>vertex(1)</computeroutput> returns the target of <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameter <computeroutput>i</computeroutput> is taken modulo 2, which gives easy access to the other vertex. <variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="82" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a8787f7015dae14c6562600d3c6e36a2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::point</definition>
        <argsstring>(int i) const</argsstring>
        <name>point</name>
        <qualifiedname>CGAL::Segment_2::point</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>vertex(i)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="88" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a4d576cc8891bce51ad77f9a94edbd95e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Point_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::operator[]</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>CGAL::Segment_2::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>vertex(i)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="94" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a0c0e17a4642d7d870b9c87905629e410" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::Segment_2&lt; Kernel &gt;::squared_length</definition>
        <argsstring>() const</argsstring>
        <name>squared_length</name>
        <qualifiedname>CGAL::Segment_2::squared_length</qualifiedname>
        <briefdescription>
<para>returns the squared length of <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="99" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1aa3d15f4614917045278d3a864e4fb8b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Direction__2" kindref="compound">Direction_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Direction_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::direction</definition>
        <argsstring>() const</argsstring>
        <name>direction</name>
        <qualifiedname>CGAL::Segment_2::direction</qualifiedname>
        <briefdescription>
<para>returns the direction from source to target of <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="104" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a7fa6e96b8e6760f4629d65e45daeb49f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Vector__2" kindref="compound">Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Vector_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::to_vector</definition>
        <argsstring>() const</argsstring>
        <name>to_vector</name>
        <qualifiedname>CGAL::Segment_2::to_vector</qualifiedname>
        <briefdescription>
<para>returns the vector <computeroutput>s.target()</computeroutput> - <computeroutput>s.source()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1abca92a76a491bb309e8d35c64ad6a4c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Segment_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::opposite</definition>
        <argsstring>() const</argsstring>
        <name>opposite</name>
        <qualifiedname>CGAL::Segment_2::opposite</qualifiedname>
        <briefdescription>
<para>returns a segment with source and target point interchanged. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="115" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1ac30d8636c4b8edbb4fa9f43a1ff39d60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Line_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::supporting_line</definition>
        <argsstring>() const</argsstring>
        <name>supporting_line</name>
        <qualifiedname>CGAL::Segment_2::supporting_line</qualifiedname>
        <briefdescription>
<para>returns the line <computeroutput>l</computeroutput> passing through <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Line <computeroutput>l</computeroutput> has the same orientation as segment <computeroutput>s</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="121" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a23a0c1be8ea62d0b24aff14b8650df9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_2&lt; Kernel &gt;::is_degenerate</definition>
        <argsstring>() const</argsstring>
        <name>is_degenerate</name>
        <qualifiedname>CGAL::Segment_2::is_degenerate</qualifiedname>
        <briefdescription>
<para>segment <computeroutput>s</computeroutput> is degenerate, if source and target are equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="131" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a5e58b295d3da03f3ceff9043569b0584" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_2&lt; Kernel &gt;::is_horizontal</definition>
        <argsstring>() const</argsstring>
        <name>is_horizontal</name>
        <qualifiedname>CGAL::Segment_2::is_horizontal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="136" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a2ca16f87b8444b1fd4f458454d84eaa9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_2&lt; Kernel &gt;::is_vertical</definition>
        <argsstring>() const</argsstring>
        <name>is_vertical</name>
        <qualifiedname>CGAL::Segment_2::is_vertical</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="141" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1ab64cf561e7384a0c70c70360875a707a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_2&lt; Kernel &gt;::has_on</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>has_on</name>
        <qualifiedname>CGAL::Segment_2::has_on</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>A point is on <computeroutput>s</computeroutput>, iff it is equal to the source or target of <computeroutput>s</computeroutput>, or if it is in the interior of <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="147" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1a893f5bd400848844a65303a9823b70c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_2&lt; Kernel &gt;::collinear_has_on</definition>
        <argsstring>(const Point_2&lt; Kernel &gt; &amp;p) const</argsstring>
        <name>collinear_has_on</name>
        <qualifiedname>CGAL::Segment_2::collinear_has_on</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>checks if point <computeroutput>p</computeroutput> is on segment <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is faster than function <computeroutput><ref refid="classCGAL_1_1Segment__2_1ab64cf561e7384a0c70c70360875a707a" kindref="member">has_on()</ref></computeroutput>. <simplesect kind="pre"><para><computeroutput>p</computeroutput> is on the supporting line of <computeroutput>s</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="154" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1ae46827f288c128bf39072bb656f576cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Bbox__2" kindref="compound">Bbox_2</ref></type>
        <definition>Bbox_2 CGAL::Segment_2&lt; Kernel &gt;::bbox</definition>
        <argsstring>() const</argsstring>
        <name>bbox</name>
        <qualifiedname>CGAL::Segment_2::bbox</qualifiedname>
        <briefdescription>
<para>returns a bounding box containing <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="165" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__2_1af9e6dd87d2425f709d5cd69357d37278" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>Segment_2&lt; Kernel &gt; CGAL::Segment_2&lt; Kernel &gt;::transform</definition>
        <argsstring>(const Aff_transformation_2&lt; Kernel &gt; &amp;t) const</argsstring>
        <name>transform</name>
        <qualifiedname>CGAL::Segment_2::transform</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Aff__transformation__2" kindref="compound">Aff_transformation_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the segment obtained by applying <computeroutput>t</computeroutput> on the source and the target of <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_2.h" line="171" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object <computeroutput>s</computeroutput> of the data type <computeroutput><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref></computeroutput> is a directed straight line segment in the two-dimensional Euclidean plane <formula id="26">$ \E^2$</formula>, i.e. a straight line segment <formula id="81">$ [p,q]$</formula> connecting two points <formula id="82">$ p,q \in \mathbb{R}^2$</formula>. </para>
    </briefdescription>
    <detaileddescription>
<para>The segment is topologically closed, i.e. the end points belong to it. Point <computeroutput>p</computeroutput> is called the <emphasis>source</emphasis> and <computeroutput>q</computeroutput> is called the <emphasis>target</emphasis> of <computeroutput>s</computeroutput>. The length of <computeroutput>s</computeroutput> is the Euclidean distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. Note that there is only a function to compute the square of the length, because otherwise we had to perform a square root operation which is not defined for all number types, which is expensive, and may not be exact.</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classKernel_1_1Segment__2" kindref="compound">Kernel::Segment_2</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput> if <computeroutput><ref refid="classKernel" kindref="compound">Kernel</ref></computeroutput> is a cartesian kernel and if <computeroutput>Kernel::FT</computeroutput> is <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput></para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="CGAL/Segment_2.h" line="21" column="1" bodyfile="CGAL/Segment_2.h" bodystart="21" bodyend="175"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Segment__2_1ae46827f288c128bf39072bb656f576cc" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>bbox</name></member>
      <member refid="classCGAL_1_1Segment__2_1a893f5bd400848844a65303a9823b70c1" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>collinear_has_on</name></member>
      <member refid="classCGAL_1_1Segment__2_1aa3d15f4614917045278d3a864e4fb8b3" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>direction</name></member>
      <member refid="classCGAL_1_1Segment__2_1ab64cf561e7384a0c70c70360875a707a" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>has_on</name></member>
      <member refid="classCGAL_1_1Segment__2_1a23a0c1be8ea62d0b24aff14b8650df9a" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>is_degenerate</name></member>
      <member refid="classCGAL_1_1Segment__2_1a5e58b295d3da03f3ceff9043569b0584" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>is_horizontal</name></member>
      <member refid="classCGAL_1_1Segment__2_1a2ca16f87b8444b1fd4f458454d84eaa9" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>is_vertical</name></member>
      <member refid="classCGAL_1_1Segment__2_1ab50648c68ae2cde4e4db33505d49aeb7" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>max</name></member>
      <member refid="classCGAL_1_1Segment__2_1a5cf6dc3685e9985bcf753003e13d7a77" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>min</name></member>
      <member refid="classCGAL_1_1Segment__2_1a4e4445c63f2e90194992aa86716f08e9" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Segment__2_1ae14445a3219f34a43b82aec47027aafe" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Segment__2_1a4d576cc8891bce51ad77f9a94edbd95e" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>operator[]</name></member>
      <member refid="classCGAL_1_1Segment__2_1abca92a76a491bb309e8d35c64ad6a4c9" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>opposite</name></member>
      <member refid="classCGAL_1_1Segment__2_1a8787f7015dae14c6562600d3c6e36a2f" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>point</name></member>
      <member refid="classCGAL_1_1Segment__2_1a6c62f1f9e2163dfe93395fda70fd7961" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>Segment_2</name></member>
      <member refid="classCGAL_1_1Segment__2_1a4acc8326156176ca970ad46a14d5536f" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>source</name></member>
      <member refid="classCGAL_1_1Segment__2_1a0c0e17a4642d7d870b9c87905629e410" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>squared_length</name></member>
      <member refid="classCGAL_1_1Segment__2_1ac30d8636c4b8edbb4fa9f43a1ff39d60" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>supporting_line</name></member>
      <member refid="classCGAL_1_1Segment__2_1ac144b7b0a177cc38897a3276ee696827" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>target</name></member>
      <member refid="classCGAL_1_1Segment__2_1a7fa6e96b8e6760f4629d65e45daeb49f" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>to_vector</name></member>
      <member refid="classCGAL_1_1Segment__2_1af9e6dd87d2425f709d5cd69357d37278" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>transform</name></member>
      <member refid="classCGAL_1_1Segment__2_1af327b20bb456c6488d33a4ca6c93f0d3" prot="public" virt="non-virtual"><scope>CGAL::Segment_2</scope><name>vertex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
