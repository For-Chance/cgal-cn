<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Aff__transformation__2" prot="public">CGAL::Aff_transformation_2</innerclass>
    <innerclass refid="classCGAL_1_1Aff__transformation__3" prot="public">CGAL::Aff_transformation_3</innerclass>
    <innerclass refid="structCGAL_1_1Ambient__dimension" prot="public">CGAL::Ambient_dimension</innerclass>
    <innerclass refid="classCGAL_1_1Bbox__2" prot="public">CGAL::Bbox_2</innerclass>
    <innerclass refid="classCGAL_1_1Bbox__3" prot="public">CGAL::Bbox_3</innerclass>
    <innerclass refid="structCGAL_1_1Cartesian" prot="public">CGAL::Cartesian</innerclass>
    <innerclass refid="classCGAL_1_1Cartesian__converter" prot="public">CGAL::Cartesian_converter</innerclass>
    <innerclass refid="classCGAL_1_1Circle__2" prot="public">CGAL::Circle_2</innerclass>
    <innerclass refid="classCGAL_1_1Circle__3" prot="public">CGAL::Circle_3</innerclass>
    <innerclass refid="structCGAL_1_1Dimension__tag" prot="public">CGAL::Dimension_tag</innerclass>
    <innerclass refid="classCGAL_1_1Direction__2" prot="public">CGAL::Direction_2</innerclass>
    <innerclass refid="classCGAL_1_1Direction__3" prot="public">CGAL::Direction_3</innerclass>
    <innerclass refid="structCGAL_1_1Dynamic__dimension__tag" prot="public">CGAL::Dynamic_dimension_tag</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" prot="public">CGAL::Exact_predicates_exact_constructions_kernel</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__kth__root" prot="public">CGAL::Exact_predicates_exact_constructions_kernel_with_kth_root</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__root__of" prot="public">CGAL::Exact_predicates_exact_constructions_kernel_with_root_of</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__sqrt" prot="public">CGAL::Exact_predicates_exact_constructions_kernel_with_sqrt</innerclass>
    <innerclass refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" prot="public">CGAL::Exact_predicates_inexact_constructions_kernel</innerclass>
    <innerclass refid="structCGAL_1_1Feature__dimension" prot="public">CGAL::Feature_dimension</innerclass>
    <innerclass refid="structCGAL_1_1Filtered__kernel" prot="public">CGAL::Filtered_kernel</innerclass>
    <innerclass refid="structCGAL_1_1Filtered__kernel__adaptor" prot="public">CGAL::Filtered_kernel_adaptor</innerclass>
    <innerclass refid="classCGAL_1_1Filtered__predicate" prot="public">CGAL::Filtered_predicate</innerclass>
    <innerclass refid="structCGAL_1_1Homogeneous" prot="public">CGAL::Homogeneous</innerclass>
    <innerclass refid="classCGAL_1_1Homogeneous__converter" prot="public">CGAL::Homogeneous_converter</innerclass>
    <innerclass refid="classCGAL_1_1Identity__transformation" prot="public">CGAL::Identity_transformation</innerclass>
    <innerclass refid="classCGAL_1_1Iso__cuboid__3" prot="public">CGAL::Iso_cuboid_3</innerclass>
    <innerclass refid="classCGAL_1_1Iso__rectangle__2" prot="public">CGAL::Iso_rectangle_2</innerclass>
    <innerclass refid="structCGAL_1_1Kernel__traits" prot="public">CGAL::Kernel_traits</innerclass>
    <innerclass refid="classCGAL_1_1Line__2" prot="public">CGAL::Line_2</innerclass>
    <innerclass refid="classCGAL_1_1Line__3" prot="public">CGAL::Line_3</innerclass>
    <innerclass refid="classCGAL_1_1Null__vector" prot="public">CGAL::Null_vector</innerclass>
    <innerclass refid="classCGAL_1_1Origin" prot="public">CGAL::Origin</innerclass>
    <innerclass refid="classCGAL_1_1Plane__3" prot="public">CGAL::Plane_3</innerclass>
    <innerclass refid="classCGAL_1_1Point__2" prot="public">CGAL::Point_2</innerclass>
    <innerclass refid="classCGAL_1_1Point__3" prot="public">CGAL::Point_3</innerclass>
    <innerclass refid="classCGAL_1_1Projection__traits__3" prot="public">CGAL::Projection_traits_3</innerclass>
    <innerclass refid="classCGAL_1_1Projection__traits__xy__3" prot="public">CGAL::Projection_traits_xy_3</innerclass>
    <innerclass refid="classCGAL_1_1Projection__traits__xz__3" prot="public">CGAL::Projection_traits_xz_3</innerclass>
    <innerclass refid="classCGAL_1_1Projection__traits__yz__3" prot="public">CGAL::Projection_traits_yz_3</innerclass>
    <innerclass refid="classCGAL_1_1Ray__2" prot="public">CGAL::Ray_2</innerclass>
    <innerclass refid="classCGAL_1_1Ray__3" prot="public">CGAL::Ray_3</innerclass>
    <innerclass refid="classCGAL_1_1Reflection" prot="public">CGAL::Reflection</innerclass>
    <innerclass refid="classCGAL_1_1Rotation" prot="public">CGAL::Rotation</innerclass>
    <innerclass refid="classCGAL_1_1Scaling" prot="public">CGAL::Scaling</innerclass>
    <innerclass refid="classCGAL_1_1Segment__2" prot="public">CGAL::Segment_2</innerclass>
    <innerclass refid="classCGAL_1_1Segment__3" prot="public">CGAL::Segment_3</innerclass>
    <innerclass refid="structCGAL_1_1Simple__cartesian" prot="public">CGAL::Simple_cartesian</innerclass>
    <innerclass refid="structCGAL_1_1Simple__homogeneous" prot="public">CGAL::Simple_homogeneous</innerclass>
    <innerclass refid="classCGAL_1_1Sphere__3" prot="public">CGAL::Sphere_3</innerclass>
    <innerclass refid="classCGAL_1_1Tetrahedron__3" prot="public">CGAL::Tetrahedron_3</innerclass>
    <innerclass refid="classCGAL_1_1Translation" prot="public">CGAL::Translation</innerclass>
    <innerclass refid="classCGAL_1_1Triangle__2" prot="public">CGAL::Triangle_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangle__3" prot="public">CGAL::Triangle_3</innerclass>
    <innerclass refid="classCGAL_1_1Vector__2" prot="public">CGAL::Vector_2</innerclass>
    <innerclass refid="classCGAL_1_1Vector__3" prot="public">CGAL::Vector_3</innerclass>
    <innerclass refid="classCGAL_1_1Weighted__point__2" prot="public">CGAL::Weighted_point_2</innerclass>
    <innerclass refid="classCGAL_1_1Weighted__point__3" prot="public">CGAL::Weighted_point_3</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__kernel__conversion_1ga86c0a5f5428e9ca692074e51df997643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt;</type>
        <definition>Point_2&lt; Homogeneous&lt; RT &gt; &gt; CGAL::cartesian_to_homogeneous</definition>
        <argsstring>(const Point_2&lt; Cartesian&lt; RT &gt; &gt; &amp;cp)</argsstring>
        <name>cartesian_to_homogeneous</name>
        <qualifiedname>CGAL::cartesian_to_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; RT &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>Functions to convert between Cartesian and homogeneous kernels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound">CGAL::Cartesian</ref>&lt;FieldNumberType&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound">CGAL::Cartesian_converter</ref>&lt;K1, K2, NTConverter&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Homogeneous" kindref="compound">CGAL::Homogeneous</ref>&lt;RingNumberType&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Homogeneous__converter" kindref="compound">CGAL::Homogeneous_converter</ref>&lt;K1, K2, RTConverter, FTConverter&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound">CGAL::Simple_cartesian</ref>&lt;FieldNumberType&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Simple__homogeneous" kindref="compound">CGAL::Simple_homogeneous</ref>&lt;RingNumberType&gt;</computeroutput></para>
</simplesect>
converts 2D point <computeroutput>cp</computeroutput> with Cartesian representation into a 2D point with homogeneous representation with the same number type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="27" column="1" declfile="CGAL/cartesian_homogeneous_conversion.h" declline="27" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga117e6839956d495d8558318f8c592113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt;</type>
        <definition>Point_3&lt; Homogeneous&lt; RT &gt; &gt; CGAL::cartesian_to_homogeneous</definition>
        <argsstring>(const Point_3&lt; Cartesian&lt; RT &gt; &gt; &amp;cp)</argsstring>
        <name>cartesian_to_homogeneous</name>
        <qualifiedname>CGAL::cartesian_to_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; RT &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>cp</computeroutput> with Cartesian representation into a 3D point with homogeneous representation with the same number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="37" column="1" declfile="CGAL/cartesian_homogeneous_conversion.h" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gaad0850326fc64ce9885a8befad7f2e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; FT &gt; &gt;</type>
        <definition>Point_2&lt; Cartesian&lt; FT &gt; &gt; CGAL::homogeneous_to_cartesian</definition>
        <argsstring>(const Point_2&lt; Homogeneous&lt; FT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_cartesian</name>
        <qualifiedname>CGAL::homogeneous_to_cartesian</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; FT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts 2D point <computeroutput>hp</computeroutput> with homogeneous representation into a 2D point with Cartesian representation with the same number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="48" column="1" declfile="CGAL/cartesian_homogeneous_conversion.h" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga5368409e52451a22241b3c955f6bccf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; FT &gt; &gt;</type>
        <definition>Point_3&lt; Cartesian&lt; FT &gt; &gt; CGAL::homogeneous_to_cartesian</definition>
        <argsstring>(const Point_3&lt; Homogeneous&lt; FT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_cartesian</name>
        <qualifiedname>CGAL::homogeneous_to_cartesian</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; FT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>hp</computeroutput> with homogeneous representation into a 3D point with Cartesian representation with the same number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="58" column="1" declfile="CGAL/cartesian_homogeneous_conversion.h" declline="58" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gae84de091ced0db5b730c830fead99865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; Quotient&lt; RT &gt; &gt; &gt;</type>
        <definition>Point_2&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; CGAL::homogeneous_to_quotient_cartesian</definition>
        <argsstring>(const Point_2&lt; Homogeneous&lt; RT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_quotient_cartesian</name>
        <qualifiedname>CGAL::homogeneous_to_quotient_cartesian</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts the 2D point <computeroutput>hp</computeroutput> with homogeneous representation with number type <computeroutput>RT</computeroutput> into a 2D point with Cartesian representation with number type <computeroutput>Quotient&lt;RT&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="69" column="1" declfile="CGAL/cartesian_homogeneous_conversion.h" declline="69" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gaaf08becb34e99c17015c255ad5e3faf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; Quotient&lt; RT &gt; &gt; &gt;</type>
        <definition>Point_3&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; CGAL::homogeneous_to_quotient_cartesian</definition>
        <argsstring>(const Point_3&lt; Homogeneous&lt; RT &gt; &gt; &amp;hp)</argsstring>
        <name>homogeneous_to_quotient_cartesian</name>
        <qualifiedname>CGAL::homogeneous_to_quotient_cartesian</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt; &amp;</type>
          <declname>hp</declname>
        </param>
        <briefdescription>
<para>converts the 3D point <computeroutput>hp</computeroutput> with homogeneous representation with number type <computeroutput>RT</computeroutput> into a 3D point with Cartesian representation with number type <computeroutput>Quotient&lt;RT&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="79" column="1" declfile="CGAL/cartesian_homogeneous_conversion.h" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1gab091304585e78321766f754440cb4e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt;</type>
        <definition>Point_2&lt; Homogeneous&lt; RT &gt; &gt; CGAL::quotient_cartesian_to_homogeneous</definition>
        <argsstring>(const Point_2&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;cp)</argsstring>
        <name>quotient_cartesian_to_homogeneous</name>
        <qualifiedname>CGAL::quotient_cartesian_to_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 2D point <computeroutput>cp</computeroutput> with Cartesian representation with number type <computeroutput>Quotient&lt;RT&gt;</computeroutput> into a 2D point with homogeneous representation with number type <computeroutput>RT</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="90" column="1" declfile="CGAL/cartesian_homogeneous_conversion.h" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__conversion_1ga60e8d4ef9422c54ddb56491a18d290a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Homogeneous" kindref="compound">Homogeneous</ref>&lt; RT &gt; &gt;</type>
        <definition>Point_3&lt; Homogeneous&lt; RT &gt; &gt; CGAL::quotient_cartesian_to_homogeneous</definition>
        <argsstring>(const Point_3&lt; Cartesian&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;cp)</argsstring>
        <name>quotient_cartesian_to_homogeneous</name>
        <qualifiedname>CGAL::quotient_cartesian_to_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt; <ref refid="structCGAL_1_1Cartesian" kindref="compound">Cartesian</ref>&lt; Quotient&lt; RT &gt; &gt; &gt; &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>converts 3D point <computeroutput>cp</computeroutput> with Cartesian representation with number type <computeroutput>Quotient&lt;RT&gt;</computeroutput> into a 3D point with homogeneous representation with number type <computeroutput>RT</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cartesian_homogeneous_conversion.h" line="102" column="1" declfile="CGAL/cartesian_homogeneous_conversion.h" declline="102" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__do__intersect__circular__grp_1ga23e2d6b82fd69230e033a1cabeb50c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; CircularKernel &gt; obj1, Type2&lt; CircularKernel &gt; obj2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>Type1&lt; CircularKernel &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; CircularKernel &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect. </para>
        </briefdescription>
        <detaileddescription>
<para>See Chapter Chapter_2D_Circular_Geometry_Kernel for details on a circular kernel instantiation.</para>
<para>When using a circular kernel, in addition to the function overloads documented <ref refid="group__do__intersect__linear__grp" kindref="compound">here</ref>, the following function overloads are also available.</para>
<para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that while for a polygon we consider the enclosed domain, for an object of type <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref></computeroutput> only the curve is considered.</para>
<para><computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;CircularKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt;CircularKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput>Line_arc_2&lt;CircularKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput>Circular_arc_2&lt;CircularKernel&gt;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>An example illustrating this is presented in Chapter Chapter_2D_Circular_Geometry_Kernel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circular_kernel_intersections.h" line="34" column="6" declfile="CGAL/Circular_kernel_intersections.h" declline="34" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__intersection__circular__grp_1ga45cfe651177ee2011c12d055a893fbc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type1</type>
          </param>
          <param>
            <type>typename Type2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Type1 &amp;obj1, const Type2 &amp;obj2, OutputIterator intersections)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Type1 &amp;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>const Type2 &amp;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>intersections</declname>
        </param>
        <briefdescription>
<para>Constructs the intersection elements between the two input objects and stores them in the OutputIterator in lexicographic order, where both, <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput>, can be either. </para>
        </briefdescription>
        <detaileddescription>
<para>See Chapter Chapter_2D_Circular_Geometry_Kernel for details on a circular kernel instantiation.</para>
<para>When using a circular kernel, in addition to the function overloads documented <ref refid="group__intersection__linear__grp" kindref="compound">here</ref>, the following function overloads are also available.</para>
<para>The iterator versions of those functions can be used in conjunction with <computeroutput>Dispatch_output_iterator</computeroutput>.</para>
<para>Since both the number of intersections, if any, and types of the intersection results depend on the arguments, the function expects an output iterator on <computeroutput>K::Intersect_2(Type1, Type2)</computeroutput> as presented below.</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;CircularKernel&gt;</computeroutput> or</para>
</listitem><listitem><para><computeroutput>Line_arc_2&lt;CircularKernel&gt;</computeroutput> or</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt;CircularKernel&gt;</computeroutput> or</para>
</listitem><listitem><para><computeroutput>Circular_arc_2&lt;CircularKernel&gt;</computeroutput></para>
<para>Depending on the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput>, these elements can be assigned to</para>
</listitem><listitem><para><computeroutput>std::pair&lt;Circular_arc_point_2&lt;CircularKernel&gt;, unsigned&gt;</computeroutput>, where the unsigned integer is the multiplicity of the corresponding intersection point between <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>,</para>
</listitem><listitem><para><computeroutput>Circular_arc_2&lt;CircularKernel&gt;</computeroutput> in case of an overlap of two circular arcs,</para>
</listitem><listitem><para><computeroutput>Line_arc_2&lt;CircularKernel&gt;</computeroutput> in case of an overlap of two line segments or</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;CircularKernel&gt;</computeroutput> or <computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt;CircularKernel&gt;</computeroutput> in case of two equal input lines or circles. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Circular_kernel_intersections.h" line="82" column="1" declfile="CGAL/Circular_kernel_intersections.h" declline="82" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>With the 2D Circular Kernel</header>
      <description><para>See 2D Circular Geometry Kernel.</para>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/global_functions_circular_kernel_2.h&gt;</highlight></codeline>
</programlisting> </para>
</description>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga31c617e3d8655fb3578f0bc9682f18e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CircularKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Circular_arc_2&lt; CircularKernel &gt; &amp;a)</argsstring>
        <name>compare_y_at_x</name>
        <qualifiedname>CGAL::compare_y_at_x</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_2&lt; CircularKernel &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Same as above, for a point and a circular arc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1402" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1402" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1gae97031deffe68932300f80df4e2ff259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CircularKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Line_arc_2&lt; CircularKernel &gt; &amp;a)</argsstring>
        <name>compare_y_at_x</name>
        <qualifiedname>CGAL::compare_y_at_x</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Line_arc_2&lt; CircularKernel &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Same as above, for a point and a line segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1408" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1408" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__do__intersect__spherical__grp_1ga89d510f4f086dc2a46466351116898c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; SphericalKernel &gt; obj1, Type2&lt; SphericalKernel &gt; obj2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>Type1&lt; SphericalKernel &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; SphericalKernel &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect. </para>
        </briefdescription>
        <detaileddescription>
<para>See Chapter Chapter_3D_Spherical_Geometry_Kernel for details on a spherical kernel instantiation.</para>
<para>When using a spherical kernel, in addition to the function overloads documented <ref refid="group__do__intersect__linear__grp" kindref="compound">here</ref>, the following function overloads are also available.</para>
<para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that while for a polygon we consider the enclosed domain, for an object of type <computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref></computeroutput> only the curve or the surface is considered.</para>
<para><computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;SphericalKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt;SphericalKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;SphericalKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;SphericalKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput>Line_arc_3&lt;SphericalKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput>Circular_arc_3&lt;SphericalKernel&gt;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>An example illustrating this is presented in Chapter Chapter_3D_Spherical_Geometry_Kernel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spherical_kernel_intersections.h" line="35" column="6" declfile="CGAL/Spherical_kernel_intersections.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__do__intersect__spherical__grp_1ga020f0d63c70182b733b1997b506f445d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; SphericalKernel &gt; obj1, Type2&lt; SphericalKernel &gt; obj2, Type3&lt; SphericalKernel &gt; obj3)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>Type1&lt; SphericalKernel &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; SphericalKernel &gt;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type>Type3&lt; SphericalKernel &gt;</type>
          <declname>obj3</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput>, <computeroutput>obj2</computeroutput> and <computeroutput>obj3</computeroutput> intersect. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>Type1</computeroutput>, <computeroutput>Type2</computeroutput> and <computeroutput>Type3</computeroutput> can be:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;SphericalKernel&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;SphericalKernel&gt;</computeroutput> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spherical_kernel_intersections.h" line="45" column="6" declfile="CGAL/Spherical_kernel_intersections.h" declline="45" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__intersection__spherical__grp_1gaf48415042b58e0d2fa6467f0af013d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalType1</type>
          </param>
          <param>
            <type>typename SphericalType1</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const SphericalType1 &amp;obj1, const SphericalType2 &amp;obj2, OutputIterator intersections)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const SphericalType1 &amp;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>const SphericalType2 &amp;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>intersections</declname>
        </param>
        <briefdescription>
<para>Constructs the intersection elements between the two input objects and stores them in the OutputIterator in lexicographic order, where both, <computeroutput>SphericalType1</computeroutput> and <computeroutput>SphericalType2</computeroutput>, can be either. </para>
        </briefdescription>
        <detaileddescription>
<para>See Chapter Chapter_3D_Spherical_Geometry_Kernel for details on a spherical kernel instantiation.</para>
<para>When using a spherical kernel, in addition to the function overloads documented <ref refid="group__intersection__linear__grp" kindref="compound">here</ref>, the following function overloads are also available.</para>
<para>The iterator versions of those functions can be used in conjunction with <computeroutput>Dispatch_output_iterator</computeroutput>.</para>
<para>Since both the number of intersections, if any, and types of the intersection results depend on the arguments, the function expects an output iterator on <computeroutput><ref refid="classKernel_1_1Intersect__3" kindref="compound">Kernel::Intersect_3(Type1, Type2)</ref></computeroutput> as presented below.</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;SphericalKernel&gt;</computeroutput>,</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;SphericalKernel&gt;</computeroutput>,</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;SphericalKernel&gt;</computeroutput>,</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt;SphericalKernel&gt;</computeroutput>,</para>
</listitem><listitem><para><computeroutput>Line_arc_3&lt;SphericalKernel&gt;</computeroutput> or</para>
</listitem><listitem><para><computeroutput>Circular_arc_3&lt;SphericalKernel&gt;</computeroutput>,</para>
</listitem></itemizedlist>
</para>
<para>and depending on the types <computeroutput>SphericalType1</computeroutput> and <computeroutput>SphericalType2</computeroutput>, the computed type can be</para>
<para><itemizedlist>
<listitem><para><computeroutput>std::pair&lt;Circular_arc_point_3&lt;SphericalKernel&gt;, unsigned&gt;</computeroutput>, where the unsigned integer is the multiplicity of the corresponding intersection point between <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>,</para>
</listitem><listitem><para><computeroutput>SphericalType1</computeroutput>, when <computeroutput>SphericalType1</computeroutput> and <computeroutput>SphericalType2</computeroutput> are equal, and if the two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> are equal,</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;SphericalKernel&gt;</computeroutput> or <computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt;SphericalKernel&gt;</computeroutput> when <computeroutput>SphericalType1</computeroutput> and <computeroutput>SphericalType2</computeroutput> are two-dimensional objects intersecting along a curve (2 planes, or 2 spheres, or one plane and one sphere),</para>
</listitem><listitem><para><computeroutput>Circular_arc_3&lt;SphericalKernel&gt;</computeroutput> in case of an overlap of two circular arcs or</para>
</listitem><listitem><para><computeroutput>Line_arc_3&lt;SphericalKernel&gt;</computeroutput> in case of an overlap of two line segments. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spherical_kernel_intersections.h" line="98" column="1" declfile="CGAL/Spherical_kernel_intersections.h" declline="98" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__intersection__spherical__grp_1gaf918dcdeaa3bc4da0c5582fb4f38fdef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type1</type>
          </param>
          <param>
            <type>typename Type2</type>
          </param>
          <param>
            <type>typename Type3</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Type1 &amp;obj1, const Type2 &amp;obj2, const Type3 &amp;obj3, OutputIterator intersections)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Type1 &amp;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>const Type2 &amp;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type>const Type3 &amp;</type>
          <declname>obj3</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>intersections</declname>
        </param>
        <briefdescription>
<para>Copies in the output iterator the intersection elements between the three objects. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>intersections</computeroutput> iterates on elements of type <computeroutput>std::variant&lt; <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>, <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>, <ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>, std::pair&lt; Circular_arc_point_3, unsigned &gt; &gt;</computeroutput>, in lexicographic order when this ordering is defined on the computed objects</para>
<para>where <computeroutput>Type1</computeroutput>, <computeroutput>Type2</computeroutput> and <computeroutput>Type3</computeroutput> can be either</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;SphericalKernel&gt;</computeroutput> or</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;SphericalKernel&gt;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>and depending of these types, the computed return value</para>
<para><itemizedlist>
<listitem><para><computeroutput>std::pair&lt;Circular_arc_point_3&lt;SphericalKernel&gt;, unsigned&gt;</computeroutput>, where the unsigned integer is the multiplicity of the corresponding intersection point,</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>&lt;SphericalKernel&gt;</computeroutput> or</para>
</listitem><listitem><para><computeroutput>Type1</computeroutput>, when <computeroutput>Type1</computeroutput>, <computeroutput>Type2</computeroutput> and <computeroutput>Type3</computeroutput> are equal, and if the three objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> and <computeroutput>obj3</computeroutput> are equal. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Spherical_kernel_intersections.h" line="127" column="1" declfile="CGAL/Spherical_kernel_intersections.h" declline="127" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" prot="public" static="no" strong="no">
        <type></type>
        <name>Angle</name>
        <qualifiedname>CGAL::Angle</qualifiedname>
        <enumvalue id="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" prot="public">
          <name>OBTUSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" prot="public">
          <name>RIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" prot="public">
          <name>ACUTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__angle__grp" kindref="compound">CGAL::angle()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="42" column="1" bodyfile="CGAL/enum.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" prot="public" static="no" strong="no">
        <type></type>
        <name>Bounded_side</name>
        <qualifiedname>CGAL::Bounded_side</qualifiedname>
        <enumvalue id="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a3a96e6da84164cc8300c9e130be23f71" prot="public">
          <name>ON_UNBOUNDED_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" prot="public">
          <name>ON_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111ad8333d35d4801c08b3a5ae9e94d7cabe" prot="public">
          <name>ON_BOUNDED_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1gad0a8110cb95f76bac65649bfe58c650b" kindref="member">CGAL::opposite</ref>(const <ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref>&amp; o)</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="48" column="1" bodyfile="CGAL/enum.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" prot="public" static="no" strong="no">
        <type></type>
        <name>Comparison_result</name>
        <qualifiedname>CGAL::Comparison_result</qualifiedname>
        <enumvalue id="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" prot="public">
          <name>SMALLER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" prot="public">
          <name>EQUAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" prot="public">
          <name>LARGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="53" column="1" bodyfile="CGAL/enum.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" prot="public" static="no" strong="no">
        <type></type>
        <name>Sign</name>
        <qualifiedname>CGAL::Sign</qualifiedname>
        <enumvalue id="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" prot="public">
          <name>NEGATIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a15dcf7100dd2016acdd8172e81a7cb09" prot="public">
          <name>ZERO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" prot="public">
          <name>POSITIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1147c0cf556939e71279546b38f2a1c5" kindref="member">CGAL::Orientation</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="59" column="1" bodyfile="CGAL/enum.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" prot="public" static="no" strong="no">
        <type></type>
        <name>Oriented_side</name>
        <qualifiedname>CGAL::Oriented_side</qualifiedname>
        <enumvalue id="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979ab906419672c7ae509b5e63158479ed85" prot="public">
          <name>ON_NEGATIVE_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" prot="public">
          <name>ON_ORIENTED_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979aec3846b620579589dcc30c8fe71cc7f0" prot="public">
          <name>ON_POSITIVE_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="75" column="1" bodyfile="CGAL/enum.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="enum" id="group__kernel__enums_1ga69d3e68aa488b8927506333b04400bdf" prot="public" static="no" strong="no">
        <type></type>
        <name>Box_parameter_space_2</name>
        <qualifiedname>CGAL::Box_parameter_space_2</qualifiedname>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfaea36d4831df16606dc880b9adb4a593b" prot="public">
          <name>LEFT_BOUNDARY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfa901615b6b6191a8b2c741fec08e749e2" prot="public">
          <name>RIGHT_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfa43ed149452c8f36052b6b337a841a6ad" prot="public">
          <name>BOTTOM_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfaa7c683e90e1420cf6ff2f7eacf933f07" prot="public">
          <name>TOP_BOUNDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfae50ce8454203d2d01d268379e26bc729" prot="public">
          <name>INTERIOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__kernel__enums_1gga69d3e68aa488b8927506333b04400bdfaab13aed2fa346ef0e65f069589d7aa32" prot="public">
          <name>EXTERIOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="128" column="1" bodyfile="CGAL/enum.h" bodystart="129" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__kernel__enums_1ga1147c0cf556939e71279546b38f2a1c5" prot="public" static="no">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Sign</ref></type>
        <definition>typedef Sign CGAL::Orientation</definition>
        <argsstring></argsstring>
        <name>Orientation</name>
        <qualifiedname>CGAL::Orientation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga5aa0906f2432d414090dd8723c10f304" kindref="member">CGAL::CLOCKWISE</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">CGAL::COUNTERCLOCKWISE</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">CGAL::COPLANAR</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="70" column="14" bodyfile="CGAL/enum.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__kernel__enums_1ga5aa0906f2432d414090dd8723c10f304" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::CLOCKWISE</definition>
        <argsstring></argsstring>
        <name>CLOCKWISE</name>
        <qualifiedname>CGAL::CLOCKWISE</qualifiedname>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">NEGATIVE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" kindref="member">CGAL::COUNTERCLOCKWISE</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="82" column="25" bodyfile="CGAL/enum.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga39fcfbab0b0f0ce9139ad1613e21d60d" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::COUNTERCLOCKWISE</definition>
        <argsstring></argsstring>
        <name>COUNTERCLOCKWISE</name>
        <qualifiedname>CGAL::COUNTERCLOCKWISE</qualifiedname>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">POSITIVE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga5aa0906f2432d414090dd8723c10f304" kindref="member">CGAL::CLOCKWISE</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="88" column="25" bodyfile="CGAL/enum.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::COLLINEAR</definition>
        <argsstring></argsstring>
        <name>COLLINEAR</name>
        <qualifiedname>CGAL::COLLINEAR</qualifiedname>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a15dcf7100dd2016acdd8172e81a7cb09" kindref="member">ZERO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="95" column="25" bodyfile="CGAL/enum.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::LEFT_TURN</definition>
        <argsstring></argsstring>
        <name>LEFT_TURN</name>
        <qualifiedname>CGAL::LEFT_TURN</qualifiedname>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">POSITIVE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="104" column="25" bodyfile="CGAL/enum.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::RIGHT_TURN</definition>
        <argsstring></argsstring>
        <name>RIGHT_TURN</name>
        <qualifiedname>CGAL::RIGHT_TURN</qualifiedname>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">NEGATIVE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="113" column="25" bodyfile="CGAL/enum.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::COPLANAR</definition>
        <argsstring></argsstring>
        <name>COPLANAR</name>
        <qualifiedname>CGAL::COPLANAR</qualifiedname>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a15dcf7100dd2016acdd8172e81a7cb09" kindref="member">ZERO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="118" column="25" bodyfile="CGAL/enum.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga84ae121de5d53cc92dc2f3ee763a0440" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Orientation</ref></type>
        <definition>const CGAL::Orientation CGAL::DEGENERATE</definition>
        <argsstring></argsstring>
        <name>DEGENERATE</name>
        <qualifiedname>CGAL::DEGENERATE</qualifiedname>
        <initializer>= <ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a15dcf7100dd2016acdd8172e81a7cb09" kindref="member">ZERO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="123" column="25" bodyfile="CGAL/enum.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga4a98ec6bd9dfd8fe8c46fea553b5d238" prot="public" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Null__vector" kindref="compound">CGAL::Null_vector</ref></type>
        <definition>const CGAL::Null_vector CGAL::NULL_VECTOR</definition>
        <argsstring></argsstring>
        <name>NULL_VECTOR</name>
        <qualifiedname>CGAL::NULL_VECTOR</qualifiedname>
        <briefdescription>
<para>A symbolic constant used to construct zero length vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="147" column="25" bodyfile="CGAL/enum.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" prot="public" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Origin" kindref="compound">CGAL::Origin</ref></type>
        <definition>const Origin CGAL::ORIGIN</definition>
        <argsstring></argsstring>
        <name>ORIGIN</name>
        <qualifiedname>CGAL::ORIGIN</qualifiedname>
        <briefdescription>
<para>A symbolic constant which denotes the point at the origin. </para>
        </briefdescription>
        <detaileddescription>
<para>This constant is used in the conversion between points and vectors.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2&lt; Cartesian&lt;Exact_NT&gt;</ref><sp/>&gt;<sp/><sp/>p(1.0,<sp/>1.0),<sp/>q;</highlight></codeline>
<codeline><highlight class="normal">Vector2&lt;<sp/>Cartesian&lt;Exact_NT&gt;<sp/>&gt;<sp/><sp/>v;</highlight></codeline>
<codeline><highlight class="normal">v<sp/>=<sp/>p<sp/>-<sp/><ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member">ORIGIN</ref>;</highlight></codeline>
<codeline><highlight class="normal">q<sp/>=<sp/><ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member">ORIGIN</ref><sp/>+<sp/>v;</highlight></codeline>
<codeline><highlight class="normal">assert(<sp/>p<sp/>==<sp/>q<sp/>);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="169" column="20" bodyfile="CGAL/enum.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__enums_1gac3993cbddb0f5186b19ad7ef8338a89e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::enum_cast</definition>
        <argsstring>(const U &amp;u)</argsstring>
        <name>enum_cast</name>
        <qualifiedname>CGAL::enum_cast</qualifiedname>
        <param>
          <type>const U &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>converts between the various enums provided by the CGAL kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>The conversion preserves the order of the values.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">CGAL::Sign</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">CGAL::Comparison_result</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga1147c0cf556939e71279546b38f2a1c5" kindref="member">CGAL::Orientation</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">CGAL::Oriented_side</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">CGAL::Bounded_side</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">CGAL::Angle</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Uncertain&lt;T&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="18" column="3" declfile="CGAL/enum.h" declline="18" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__enums_1gad0a8110cb95f76bac65649bfe58c650b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::opposite</definition>
        <argsstring>(const Oriented_side &amp;o)</argsstring>
        <name>opposite</name>
        <qualifiedname>CGAL::opposite</qualifiedname>
        <param>
          <type>const <ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>returns the opposite side (for example <computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979aec3846b620579589dcc30c8fe71cc7f0" kindref="member">CGAL::ON_POSITIVE_SIDE</ref></computeroutput> if <computeroutput>o</computeroutput>==<computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979ab906419672c7ae509b5e63158479ed85" kindref="member">CGAL::ON_NEGATIVE_SIDE</ref></computeroutput>), or <computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">CGAL::ON_ORIENTED_BOUNDARY</ref></computeroutput> if <computeroutput>o</computeroutput>==<computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">CGAL::ON_ORIENTED_BOUNDARY</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="27" column="15" declfile="CGAL/enum.h" declline="27" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__enums_1ga30e66263975bfc9a72730cba0c25367c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::opposite</definition>
        <argsstring>(const Bounded_side &amp;o)</argsstring>
        <name>opposite</name>
        <qualifiedname>CGAL::opposite</qualifiedname>
        <param>
          <type>const <ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>returns the opposite side (for example <computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111ad8333d35d4801c08b3a5ae9e94d7cabe" kindref="member">CGAL::ON_BOUNDED_SIDE</ref></computeroutput> if <computeroutput>o</computeroutput>==<computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a3a96e6da84164cc8300c9e130be23f71" kindref="member">CGAL::ON_UNBOUNDED_SIDE</ref></computeroutput>), or returns <computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" kindref="member">CGAL::ON_BOUNDARY</ref></computeroutput> if <computeroutput>o</computeroutput>==<computeroutput><ref refid="group__kernel__enums_1ggaf6030e89dadcc1f45369b0cdc5d9e111a060193157c0875fb2e6445a648f3ac1f" kindref="member">CGAL::ON_BOUNDARY</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/enum.h" line="36" column="14" declfile="CGAL/enum.h" declline="36" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__do__intersect__linear__grp_1ga9514a218a097ac392d21775368d3dd0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Type1&lt; Kernel &gt; obj1, Type2&lt; Kernel &gt; obj2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>Type1&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect. </para>
        </briefdescription>
        <detaileddescription>
<para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that for objects like triangles and polygons that enclose a bounded region, this region is part of the object.</para>
<para>The types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>Also, <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be both of type</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Circle__2" kindref="compound">Circle_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>In three-dimensional space, the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound">Bbox_3</ref></computeroutput>.</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput>.</para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput>. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="60" column="6" declfile="CGAL/intersections.h" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__do__intersect__linear__grp_1ga0fc4e7e2217631c1f9d1e193716d652f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(Plane_3&lt; Kernel &gt; obj1, Plane_3&lt; Kernel &gt; obj2, Plane_3&lt; Kernel &gt; obj3)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj3</declname>
        </param>
        <briefdescription>
<para>checks whether <computeroutput>obj1</computeroutput>, <computeroutput>obj2</computeroutput> and <computeroutput>obj3</computeroutput> intersect. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="65" column="6" declfile="CGAL/intersections.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__intersection__linear__grp_1gade00253914ac774cce3d2031c07d74fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) CGAL::intersection</definition>
        <argsstring>(Type1&lt; Kernel &gt; obj1, Type2&lt; Kernel &gt; obj2)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>Type1&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>Two objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> intersect if there is a point <computeroutput>p</computeroutput> that is part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The intersection region of those two objects is defined as the set of all points <computeroutput>p</computeroutput> that are part of both <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput>. Note that for objects like triangles and polygons that enclose a bounded region, this region is considered part of the object. If a segment lies completely inside a triangle, then those two objects intersect and the intersection region is the complete segment.</para>
<para>Here, <computeroutput>Intersect_23</computeroutput> means either <computeroutput>Intersect_2</computeroutput> or <computeroutput>Intersect_3</computeroutput>, depending on the arguments.</para>
<para>The following tables give the possible values for <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput>.</para>
<para><bold>2D Intersections</bold><linebreak/>
</para>
<para>The return type of intersecting two objects of the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be specified through the placeholder type specifier <computeroutput>auto</computeroutput>. It is equivalent to <computeroutput>std::optional&lt; std::variant&lt; T... &gt; &gt;</computeroutput>, the last column in the table providing the template parameter pack.</para>
<para> <table rows="16" cols="3"><row>
<entry thead="yes"><para>Type1  </para>
</entry><entry thead="yes"><para>Type2  </para>
</entry><entry thead="yes"><para>Return Type: <computeroutput>T...</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref> </para>
<para></para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>, or std::vector&lt;<ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&gt;  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>, or <ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>, or <ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref>, or std::vector&lt;<ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&gt;  </para>
</entry></row>
</table>
</para>
<para>Additional overloads are provided for the type <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref></computeroutput> combined with any other type with the result type being <computeroutput>std::optional&lt; std::variant&lt; <ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref> &gt; &gt;</computeroutput>. Overloads are also provided for the type <computeroutput><ref refid="classCGAL_1_1Bbox__2" kindref="compound">Bbox_2</ref></computeroutput>, for all intersections existing with the type <computeroutput><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref></computeroutput>. Note that the return type for <computeroutput><ref refid="classCGAL_1_1Bbox__2" kindref="compound">Bbox_2</ref></computeroutput> - <computeroutput><ref refid="classCGAL_1_1Bbox__2" kindref="compound">Bbox_2</ref></computeroutput> is <computeroutput><ref refid="classCGAL_1_1Bbox__2" kindref="compound">Bbox_2</ref></computeroutput> and not <computeroutput><ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">Iso_rectangle_2</ref></computeroutput>.</para>
<para><bold>3D Intersections</bold><linebreak/>
</para>
<para>The return type of intersecting two objects of the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be specified through the placeholder type specifier <computeroutput>auto</computeroutput>. It is equivalent to <computeroutput>std::optional&lt; std::variant&lt; T... &gt; &gt;</computeroutput>, the last column in the table providing the template parameter pack.</para>
<para> <table rows="28" cols="3"><row>
<entry thead="yes"><para>Type1  </para>
</entry><entry thead="yes"><para>Type2  </para>
</entry><entry thead="yes"><para>Return Type: <computeroutput>T...</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref>, or <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>, or std::vector&lt;Point_3&gt;  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>, or std::vector&lt;Point_3&gt;  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Circle__3" kindref="compound">Circle_3</ref>, or <ref refid="classCGAL_1_1Sphere__3" kindref="compound">Sphere_3</ref>  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>, or std::vector &lt; <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref> &gt;  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>, or std::vector &lt; <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref> &gt;  </para>
</entry></row>
<row>
<entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>  </para>
</entry><entry thead="no" valign="middle"><para><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref>  </para>
</entry><entry thead="no"><para><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref>, or <ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref>, or <ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref>, or std::vector &lt; <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref> &gt;  </para>
</entry></row>
</table>
</para>
<para>Additional overloads are provided for the type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref></computeroutput> combined with any other type with the result type being <computeroutput>std::optional&lt; std::variant&lt; <ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref> &gt; &gt;</computeroutput>. Overloads are also provided for the type <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound">Bbox_3</ref></computeroutput>, for all intersections existing with the type <computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref></computeroutput>. Note that the return type for <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound">Bbox_3</ref></computeroutput> - <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound">Bbox_3</ref></computeroutput> is <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound">Bbox_3</ref></computeroutput> and not <computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">Iso_cuboid_3</ref></computeroutput>.</para>
<para><bold>Examples</bold><linebreak/>
</para>
<para>The following examples demonstrate the most common use of <computeroutput><ref refid="group__intersection__circular__grp_1ga45cfe651177ee2011c12d055a893fbc8" kindref="member">intersection()</ref></computeroutput> functions with the 2D and 3D Linear Kernel.</para>
<para>In the first two examples we intersect a segment and a line. The result type can be specified through the placeholder type specifier <computeroutput>auto</computeroutput>, but you must anyway know that the result type is a <computeroutput>std::optional&lt;std::variant&lt;..&gt; &gt;</computeroutput>, in order to unpack the point or segment.</para>
<para><ulink url="https://www.boost.org/libs/optional/"><computeroutput>std::optional</computeroutput></ulink> comes in as there might be no intersection. <ulink url="https://www.boost.org/libs/variant/"><computeroutput>std::variant</computeroutput></ulink> comes in as, if there is an intersection, it is either a point or a segment.</para>
<para>As explained in the boost manual pages for <ulink url="https://www.boost.org/libs/variant/"><computeroutput>std::variant</computeroutput></ulink>, there are two ways to access the variants. The first examples uses <computeroutput>boost::get</computeroutput>.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersection_get_8cpp-example" kindref="compound">Kernel_23/intersection_get.cpp</ref> <programlisting filename="Kernel_23/intersection_get.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/intersections.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Line_2<sp/><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Intersect_2<sp/>Intersect_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref><sp/>seg(<ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>(0,0),<sp/><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>(2,2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref><sp/>lin(1,-1,0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="group__intersection__circular__grp_1ga45cfe651177ee2011c12d055a893fbc8" kindref="member">intersection</ref>(seg,<sp/>lin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>*<sp/>s<sp/>=<sp/>std::get_if&lt;Segment_2&gt;(&amp;*result))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2*<sp/>p<sp/>=<sp/>std::get_if&lt;Point_2<sp/>&gt;(&amp;*result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The second example uses <computeroutput>std::visit</computeroutput>.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersection_visitor_8cpp-example" kindref="compound">Kernel_23/intersection_visitor.cpp</ref> <programlisting filename="Kernel_23/intersection_visitor.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/intersections.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Line_2<sp/><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Intersect_2<sp/>Intersect_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Intersection_visitor<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>result_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref>&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment_2&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_2<sp/>seg(Point_2(0,0),<sp/>Point_2(1,1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Line_2<sp/>lin(1,-1,0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="group__intersection__circular__grp_1ga45cfe651177ee2011c12d055a893fbc8" kindref="member">intersection</ref>(seg,<sp/>lin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::visit(Intersection_visitor(),<sp/>*result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>A third example shows the use of the intersection function as a plain function call and with <computeroutput>Dispatch_output_iterator</computeroutput>, combined with a standard library algorithm.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Kernel_23_2intersections_8cpp-example" kindref="compound">Kernel_23/intersections.cpp</ref> <programlisting filename="Kernel_23/intersections.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_exact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/iterator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound">CGAL::Exact_predicates_exact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Segment;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Creator_uniform_2&lt;double,Point&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pt_creator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_on_segment_2&lt;Point,Pt_creator&gt;<sp/>P1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Random_points_on_circle_2&lt;Point,Pt_creator&gt;<sp/><sp/>P2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Creator_uniform_2&lt;<sp/>Point,<sp/>Segment&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Seg_creator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Join_input_iterator_2&lt;<sp/>P1,<sp/>P2,<sp/>Seg_creator&gt;<sp/><sp/>Seg_iterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Intersector{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>s;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>K::Intersect_2<sp/>intersect;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Intersector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>seg):<sp/>s(seg)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">()<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersect(s,<sp/>other);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Segment&gt;<sp/>input;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>point<sp/>generator<sp/>for<sp/>the<sp/>horizontal<sp/>segment,<sp/>length<sp/>200.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>P1<sp/>p1(<sp/>Point(-100,0),<sp/>Point(100,0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>point<sp/>generator<sp/>for<sp/>random<sp/>points<sp/>on<sp/>circle,<sp/>radius<sp/>250.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>P2<sp/>p2(<sp/>250);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>segments.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Seg_iterator<sp/>g(<sp/>p1,<sp/>p2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::copy_n(<sp/>g,<sp/>200,<sp/>std::back_inserter(input));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>splitting<sp/>results<sp/>with<sp/>Dispatch_output_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Point&gt;<sp/>points;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Segment&gt;<sp/>segments;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Dispatch_output_iterator&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;Point,Segment&gt;,<sp/>std::tuple&lt;<sp/>std::back_insert_iterator&lt;std::vector&lt;Point&gt;<sp/>&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;std::vector&lt;Segment&gt;<sp/>&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Dispatcher;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dispatcher<sp/>disp<sp/>=<sp/>CGAL::dispatch_output&lt;Point,Segment&gt;(<sp/>std::back_inserter(points),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(segments)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>intersects<sp/>the<sp/>first<sp/>segment<sp/>of<sp/>input<sp/>with<sp/>all<sp/>other<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>resulting<sp/>points<sp/>or<sp/>segments<sp/>are<sp/>written<sp/>in<sp/>the<sp/>vectors<sp/>with<sp/>the<sp/>same<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::transform(<sp/>input.begin(),<sp/>input.end(),<sp/>disp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Intersector(input.front())<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Point<sp/>intersections:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>points.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Segment<sp/>intersections:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>segments.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="390" column="1" declfile="CGAL/intersections.h" declline="390" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__intersection__linear__grp_1ga1ae668d4f2a5a7006cefc0731b89875b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) CGAL::intersection</definition>
        <argsstring>(const Plane_3&lt; Kernel &gt; &amp;pl1, const Plane_3&lt; Kernel &gt; &amp;pl2, const Plane_3&lt; Kernel &gt; &amp;pl3)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>pl3</declname>
        </param>
        <briefdescription>
<para>returns the intersection of 3 planes, which can be a point, a line, a plane, or empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/intersections.h" line="398" column="1" declfile="CGAL/intersections.h" declline="398" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga529057989da53e549b38c5a88e82967b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;u, const CGAL::Vector_2&lt; Kernel &gt; &amp;v)</argsstring>
        <name>angle</name>
        <qualifiedname>CGAL::angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the two vectors <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="14" column="7" declfile="CGAL/Kernel/global_functions.h" declline="14" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1gaacaa68822ff84b1be59d3c84b8fed9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>angle</name>
        <qualifiedname>CGAL::angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the three points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> (<computeroutput>q</computeroutput> being the vertex of the angle). </para>
        </briefdescription>
        <detaileddescription>
<para>The returned value is the same as <computeroutput>angle(p - q, r - q)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="24" column="7" declfile="CGAL/Kernel/global_functions.h" declline="24" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1gaf3848756a6457f983b39bca5f34fb989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>angle</name>
        <qualifiedname>CGAL::angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the two vectors <computeroutput>pq</computeroutput>, <computeroutput>rs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned value is the same as <computeroutput>angle(q - p, s - r)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="35" column="7" declfile="CGAL/Kernel/global_functions.h" declline="35" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga81888c6eb0e8066905d73a9868362e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>angle</name>
        <qualifiedname>CGAL::angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the two vectors <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="45" column="7" declfile="CGAL/Kernel/global_functions.h" declline="45" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga7c42d769e84f19b342c1577caec9eeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>angle</name>
        <qualifiedname>CGAL::angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the three points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> (<computeroutput>q</computeroutput> being the vertex of the angle). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="55" column="7" declfile="CGAL/Kernel/global_functions.h" declline="55" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga3675cad77d9399fdeca6f0ea463d931c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>angle</name>
        <qualifiedname>CGAL::angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the two vectors <computeroutput>pq</computeroutput>, <computeroutput>rs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned value is the same as <computeroutput>angle(q - p, s - r)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="65" column="7" declfile="CGAL/Kernel/global_functions.h" declline="65" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__angle__grp_1ga0e57f7e44fa891f84673d7251277cc79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga8be07b00890ca29c0653be379113e8b0" kindref="member">Angle</ref></type>
        <definition>Angle CGAL::angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>angle</name>
        <qualifiedname>CGAL::angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a38f38441f2d7af7e7d848bff2bf49ec2" kindref="member">CGAL::OBTUSE</ref></computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0a03813b78e3d21e482f0a763b25dfa1b6" kindref="member">CGAL::RIGHT</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga8be07b00890ca29c0653be379113e8b0ace2a11071ccbc32967b0792e5bb7377b" kindref="member">CGAL::ACUTE</ref></computeroutput> depending on the angle formed by the normal of the triangle <computeroutput>pqr</computeroutput> and the vector <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="76" column="7" declfile="CGAL/Kernel/global_functions.h" declline="76" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__approximate__angle__grp_1ga2a28592ce82e8d1ec2053a6250e3c360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::approximate_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>approximate_angle</name>
        <qualifiedname>CGAL::approximate_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns an approximation of the angle between <computeroutput>p-q</computeroutput> and <computeroutput>r-q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The angle is given in degrees. <simplesect kind="pre"><para><computeroutput>p != q</computeroutput> and <computeroutput>r != q</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="95" column="12" declfile="CGAL/Kernel/global_functions.h" declline="95" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__approximate__angle__grp_1ga252a36fb19ddcde7e4bfe4b26a1ac2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::approximate_angle</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>approximate_angle</name>
        <qualifiedname>CGAL::approximate_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns an approximation of the angle between <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The angle is given in degrees. <simplesect kind="pre"><para><computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> are not equal to the null vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="105" column="12" declfile="CGAL/Kernel/global_functions.h" declline="105" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__approximate__dihedral__angle__grp_1gadc7ae25da46f18af4db99f6871f97b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::approximate_dihedral_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>approximate_dihedral_angle</name>
        <qualifiedname>CGAL::approximate_dihedral_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns an approximation of the signed dihedral angle in the tetrahedron <computeroutput>pqrs</computeroutput> of edge <computeroutput>pq</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The sign is negative if <computeroutput>orientation(p,q,r,s)</computeroutput> is <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput> and positive otherwise. The angle is given in degrees. <simplesect kind="pre"><para><computeroutput>p,q,r</computeroutput> and <computeroutput>p,q,s</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="121" column="12" declfile="CGAL/Kernel/global_functions.h" declline="121" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__area__grp_1gad5b975e731751609655f88d287f7385a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::area</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>area</name>
        <qualifiedname>CGAL::area</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns the signed area of the triangle defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="140" column="12" declfile="CGAL/Kernel/global_functions.h" declline="140" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__are__ordered__along__line__grp_1gad0595dca20e967b66057c84f4bc9bcf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::are_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>are_ordered_along_line</name>
        <qualifiedname>CGAL::are_ordered_along_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the three points are collinear and <computeroutput>q</computeroutput> lies between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>true</computeroutput> is returned, if <computeroutput>q==p</computeroutput> or <computeroutput>q==r</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="161" column="6" declfile="CGAL/Kernel/global_functions.h" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__are__ordered__along__line__grp_1ga5a56ab0987fbf02e7e03be7ebaebe26a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::are_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>are_ordered_along_line</name>
        <qualifiedname>CGAL::are_ordered_along_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the three points are collinear and <computeroutput>q</computeroutput> lies between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>true</computeroutput> is returned, if <computeroutput>q==p</computeroutput> or <computeroutput>q==r</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="172" column="6" declfile="CGAL/Kernel/global_functions.h" declline="172" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__are__strictly__ordered__along__line__grp_1ga69aafc78b2d382efc95c186e4d5119ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::are_strictly_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>are_strictly_ordered_along_line</name>
        <qualifiedname>CGAL::are_strictly_ordered_along_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the three points are collinear and <computeroutput>q</computeroutput> lies strictly between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>false</computeroutput> is returned, if <computeroutput>q==p</computeroutput> or <computeroutput>q==r</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="193" column="6" declfile="CGAL/Kernel/global_functions.h" declline="193" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__are__strictly__ordered__along__line__grp_1ga6171a3fb098250d290f33e84399268c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::are_strictly_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>are_strictly_ordered_along_line</name>
        <qualifiedname>CGAL::are_strictly_ordered_along_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the three points are collinear and <computeroutput>q</computeroutput> lies strictly between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>false</computeroutput> is returned, if <computeroutput>q==p</computeroutput> or <computeroutput>q==r</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="204" column="6" declfile="CGAL/Kernel/global_functions.h" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga93e459977649c2430139b5778101529b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with corresponding weights <computeroutput>w1</computeroutput> and <computeroutput>1-w1</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="221" column="1" declfile="CGAL/Kernel/global_functions.h" declline="221" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gaa6a45c396e0accb1f0df10537f538d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with corresponding weights <computeroutput>w1</computeroutput> and <computeroutput>w2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2 != 0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="230" column="1" declfile="CGAL/Kernel/global_functions.h" declline="230" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gaff99ae24e88263966c203ecbe46eb567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_2&lt; Kernel &gt; &amp;p3)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput> and <computeroutput>1-w1-w2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="239" column="1" declfile="CGAL/Kernel/global_functions.h" declline="239" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga37c22a8dc59bd6b9fdfe5b471bef42d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_2&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w3</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput> and <computeroutput>w3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2+w3 != 0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="249" column="1" declfile="CGAL/Kernel/global_functions.h" declline="249" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga10f26898d449285572accf3b548f17ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_2&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3, const CGAL::Point_2&lt; Kernel &gt; &amp;p4)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput> and <computeroutput>p4</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput>, <computeroutput>w3</computeroutput> and <computeroutput>1-w1-w2-w3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="259" column="1" declfile="CGAL/Kernel/global_functions.h" declline="259" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gaaa8d6079c64dbdd0081ef2e6f8086f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_2&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_2&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3, const CGAL::Point_2&lt; Kernel &gt; &amp;p4, const Kernel::FT &amp;w4)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w4</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput> and <computeroutput>p4</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput>, <computeroutput>w3</computeroutput> and <computeroutput>w4</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2+w3+w4 != 0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="270" column="1" declfile="CGAL/Kernel/global_functions.h" declline="270" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gabc7fc4bcbd7c9a42ada2b7ec640088ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with corresponding weights <computeroutput>w1</computeroutput> and <computeroutput>1-w1</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="281" column="1" declfile="CGAL/Kernel/global_functions.h" declline="281" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gafd4201c8cb6943447755f84d01f78e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with corresponding weights <computeroutput>w1</computeroutput> and <computeroutput>w2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2 != 0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="290" column="1" declfile="CGAL/Kernel/global_functions.h" declline="290" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gafaeddc02828b4eba0377c0f558267fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput> and <computeroutput>1-w1-w2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="299" column="1" declfile="CGAL/Kernel/global_functions.h" declline="299" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gac46869387dc75521d93e48031c9fcf47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w3</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput> and <computeroutput>w3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2+w3 != 0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="309" column="1" declfile="CGAL/Kernel/global_functions.h" declline="309" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1ga9a31d7fe4a0020529f29359fd628374f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3, const CGAL::Point_3&lt; Kernel &gt; &amp;p4)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput> and <computeroutput>p4</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput>, <computeroutput>w3</computeroutput> and <computeroutput>1-w1-w2-w3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="319" column="1" declfile="CGAL/Kernel/global_functions.h" declline="319" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__barycenter__grp_1gad0b84597deb724f349828b9370a51b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::barycenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const Kernel::FT &amp;w1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const Kernel::FT &amp;w2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3, const Kernel::FT &amp;w3, const CGAL::Point_3&lt; Kernel &gt; &amp;p4, const Kernel::FT &amp;w4)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>w4</declname>
        </param>
        <briefdescription>
<para>compute the barycenter of the points <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput> and <computeroutput>p4</computeroutput> with corresponding weights <computeroutput>w1</computeroutput>, <computeroutput>w2</computeroutput>, <computeroutput>w3</computeroutput> and <computeroutput>w4</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>w1+w2+w3+w4 != 0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="330" column="1" declfile="CGAL/Kernel/global_functions.h" declline="330" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__bisector__grp_1gae2f18028215b4f35e25f2b976c7fbe18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Line_2&lt; Kernel &gt; CGAL::bisector</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>bisector</name>
        <qualifiedname>CGAL::bisector</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>constructs the bisector line of the two points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The bisector is oriented in such a way that <computeroutput>p</computeroutput> lies on its positive side. <simplesect kind="pre"><para><computeroutput>p != q</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="347" column="14" declfile="CGAL/Kernel/global_functions.h" declline="347" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bisector__grp_1ga6ab4118cb8d778c1a71baab68fee9ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Line_2&lt; Kernel &gt; CGAL::bisector</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>bisector</name>
        <qualifiedname>CGAL::bisector</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>constructs the bisector of the two lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In the general case, the bisector has the direction of the vector which is the sum of the normalized directions of the two lines, and which passes through the intersection of <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. If <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> are parallel, then the bisector is defined as the line which has the same direction as <computeroutput>l1</computeroutput>, and which is at the same distance from <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. If <computeroutput>Kernel::FT</computeroutput> is not a model of <computeroutput>FieldWithSqrt</computeroutput> an approximation of the square root will be used in this function, impacting the exactness of the result even with an (exact) multiprecision number type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="364" column="14" declfile="CGAL/Kernel/global_functions.h" declline="364" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bisector__grp_1gabbd6e8a906a35af72bb4c3cd9db0af97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Plane_3&lt; Kernel &gt; CGAL::bisector</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>bisector</name>
        <qualifiedname>CGAL::bisector</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>constructs the bisector plane of the two points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The bisector is oriented in such a way that <computeroutput>p</computeroutput> lies on its positive side. <simplesect kind="pre"><para><computeroutput>p != q</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="373" column="15" declfile="CGAL/Kernel/global_functions.h" declline="373" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__bisector__grp_1ga65430282124195ea4ab11ca496e8d641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Plane_3&lt; Kernel &gt; CGAL::bisector</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h1, const CGAL::Plane_3&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>bisector</name>
        <qualifiedname>CGAL::bisector</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>constructs the bisector of the two planes <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In the general case, the bisector has a normal vector which has the same direction as the sum of the normalized normal vectors of the two planes, and passes through the intersection of <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. If <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are parallel, then the bisector is defined as the plane which has the same oriented normal vector as <computeroutput>l1</computeroutput>, and which is at the same distance from <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. If <computeroutput>Kernel::FT</computeroutput> is not a model of <computeroutput>FieldWithSqrt</computeroutput> an approximation of the square root will be used in this function, impacting the exactness of the result even with an (exact) multiprecision number type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="390" column="15" declfile="CGAL/Kernel/global_functions.h" declline="390" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1ga3ba0496a839f97ee6cd506baff51dfe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="405" column="1" declfile="CGAL/Kernel/global_functions.h" declline="405" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1ga0c29478f8f1dd16f0ea7cdeeee60cf47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="414" column="1" declfile="CGAL/Kernel/global_functions.h" declline="414" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1ga43926e539ee3d650810ddfa52ddcdf12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Triangle_2&lt; Kernel &gt; &amp;t)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__2" kindref="compound">CGAL::Triangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the triangle <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="424" column="1" declfile="CGAL/Kernel/global_functions.h" declline="424" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1gad80c13988bf13119f04630c5a2c07cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="431" column="1" declfile="CGAL/Kernel/global_functions.h" declline="431" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1gae64da70280e9ea0b9834e2b434b055ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="440" column="1" declfile="CGAL/Kernel/global_functions.h" declline="440" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1gac6b7c5823650d2e37a03eb3129b7a542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Triangle_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__3" kindref="compound">CGAL::Triangle_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the triangle <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="450" column="1" declfile="CGAL/Kernel/global_functions.h" declline="450" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__centroid__grp_1ga1a08847d24879ea3e0a6d029845f598e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::centroid</definition>
        <argsstring>(const CGAL::Tetrahedron_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">CGAL::Tetrahedron_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the centroid of the tetrahedron <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="457" column="1" declfile="CGAL/Kernel/global_functions.h" declline="457" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga37a20bf6fba404c8478839b79f7d86fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::circumcenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compute the center of the smallest circle passing through the points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: this is the same as <computeroutput>CGAL::midpoint(p, q)</computeroutput> but is provided for homogeneity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="472" column="1" declfile="CGAL/Kernel/global_functions.h" declline="472" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga428547debb4b2a1e5f9add7eac6a0252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::circumcenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the center of the circle passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="481" column="1" declfile="CGAL/Kernel/global_functions.h" declline="481" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga79c902e4193136b21f1f34f41ec3758b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Triangle_2&lt; Kernel &gt; &amp;t)</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::circumcenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__2" kindref="compound">CGAL::Triangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the center of the circle passing through the vertices of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="491" column="1" declfile="CGAL/Kernel/global_functions.h" declline="491" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1gae7e2f5c2113dfcaacdac1c48731ec4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::circumcenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compute the center of the smallest sphere passing through the points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: this is the same as <computeroutput>CGAL::midpoint(p, q)</computeroutput> but is provided for homogeneity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="500" column="1" declfile="CGAL/Kernel/global_functions.h" declline="500" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1gaf9d9a943d799c9ecc1ceb2621ce8d338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::circumcenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the center of the circle passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="509" column="1" declfile="CGAL/Kernel/global_functions.h" declline="509" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1gaf09cd6ac1f6e2244165fd14e5649b720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Triangle_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::circumcenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangle__3" kindref="compound">CGAL::Triangle_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the center of the circle passing through the vertices of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="519" column="1" declfile="CGAL/Kernel/global_functions.h" declline="519" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1gaab15ebb35f4455debe3884c419838ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::circumcenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the center of the sphere passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are not coplanar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="527" column="1" declfile="CGAL/Kernel/global_functions.h" declline="527" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__circumcenter__grp_1ga9528d43c5ab5ea4145e97709a1e33187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::circumcenter</definition>
        <argsstring>(const CGAL::Tetrahedron_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::circumcenter</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">CGAL::Tetrahedron_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>compute the center of the sphere passing through the vertices of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t</computeroutput> is not degenerate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="538" column="1" declfile="CGAL/Kernel/global_functions.h" declline="538" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__are__ordered__along__line__grp_1ga62c50e1ef3fb7e4533720373827fd4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear_are_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear_are_ordered_along_line</name>
        <qualifiedname>CGAL::collinear_are_ordered_along_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>q</computeroutput> lies between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="554" column="6" declfile="CGAL/Kernel/global_functions.h" declline="554" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__are__ordered__along__line__grp_1ga4ea9e9123c81b5cc398fd942140599e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear_are_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear_are_ordered_along_line</name>
        <qualifiedname>CGAL::collinear_are_ordered_along_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>q</computeroutput> lies between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="563" column="6" declfile="CGAL/Kernel/global_functions.h" declline="563" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__are__strictly__ordered__along__line__grp_1ga9d8636d66af954605ce632590b3b705d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear_are_strictly_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear_are_strictly_ordered_along_line</name>
        <qualifiedname>CGAL::collinear_are_strictly_ordered_along_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>q</computeroutput> lies strictly between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="581" column="6" declfile="CGAL/Kernel/global_functions.h" declline="581" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__are__strictly__ordered__along__line__grp_1gafb68a13a9bffce3ffd211e875994839d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear_are_strictly_ordered_along_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear_are_strictly_ordered_along_line</name>
        <qualifiedname>CGAL::collinear_are_strictly_ordered_along_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>q</computeroutput> lies strictly between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="590" column="6" declfile="CGAL/Kernel/global_functions.h" declline="590" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__grp_1gadaa777c7b2f72b4321fe1ac3893efc3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear</name>
        <qualifiedname>CGAL::collinear</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="608" column="6" declfile="CGAL/Kernel/global_functions.h" declline="608" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__collinear__grp_1gaf22e6010f55de63a8aff0dd2c7b12bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::collinear</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>collinear</name>
        <qualifiedname>CGAL::collinear</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="616" column="6" declfile="CGAL/Kernel/global_functions.h" declline="616" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__global__function_1gafc40016b26f9b699ae6f4230735062b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;a, const CGAL::Point_3&lt; Kernel &gt; &amp;b, const CGAL::Point_3&lt; Kernel &gt; &amp;c, const Kernel::FT &amp;cosine)</argsstring>
        <name>compare_angle</name>
        <qualifiedname>CGAL::compare_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>cosine</declname>
        </param>
        <briefdescription>
<para>compares the angles <formula id="52">$ \theta_1$</formula> and <formula id="53">$ \theta_2$</formula>, where <formula id="52">$ \theta_1$</formula> is the angle in <formula id="54">$ [0, \pi]$</formula> of the triangle <formula id="55">$ (a, b, c)$</formula> at the vertex <computeroutput>b</computeroutput>, and <formula id="53">$ \theta_2$</formula> is the angle in <formula id="54">$ [0, \pi]$</formula> such that <formula id="56">$ cos(\theta_2) = cosine$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>a!=b &amp;&amp; c!=b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="631" column="19" declfile="CGAL/Kernel/global_functions.h" declline="631" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__dihedral__angle__grp_1ga9a70a34f86fe41a55b760967694f43a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_dihedral_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;a1, const CGAL::Point_3&lt; Kernel &gt; &amp;b1, const CGAL::Point_3&lt; Kernel &gt; &amp;c1, const CGAL::Point_3&lt; Kernel &gt; &amp;d1, const Kernel::FT &amp;cosine)</argsstring>
        <name>compare_dihedral_angle</name>
        <qualifiedname>CGAL::compare_dihedral_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>cosine</declname>
        </param>
        <briefdescription>
<para>compares the dihedral angles <formula id="52">$ \theta_1$</formula> and <formula id="53">$ \theta_2$</formula>, where <formula id="52">$ \theta_1$</formula> is the dihedral angle, in <formula id="54">$ [0, \pi]$</formula>, of the tetrahedron <computeroutput>(a1, b1, c1, d1)</computeroutput> at the edge <computeroutput>(a1, b1)</computeroutput>, and <formula id="53">$ \theta_2$</formula> is the angle in <formula id="54">$ [0, \pi]$</formula> such that <formula id="56">$ cos(\theta_2) = cosine$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is the same as <computeroutput>compare_dihedral_angle(b1-a1, c1-a1, d1-a1, cosine)</computeroutput>. <simplesect kind="pre"><para><computeroutput>a1</computeroutput>, <computeroutput>b1</computeroutput>, <computeroutput>c1</computeroutput> are not collinear, and <computeroutput>a1</computeroutput>, <computeroutput>b1</computeroutput>, <computeroutput>d1</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="649" column="19" declfile="CGAL/Kernel/global_functions.h" declline="649" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__dihedral__angle__grp_1ga52404107d79baa56301bfc8199134228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_dihedral_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;a1, const CGAL::Point_3&lt; Kernel &gt; &amp;b1, const CGAL::Point_3&lt; Kernel &gt; &amp;c1, const CGAL::Point_3&lt; Kernel &gt; &amp;d1, const CGAL::Point_3&lt; Kernel &gt; &amp;a2, const CGAL::Point_3&lt; Kernel &gt; &amp;b2, const CGAL::Point_3&lt; Kernel &gt; &amp;c2, const CGAL::Point_3&lt; Kernel &gt; &amp;d2)</argsstring>
        <name>compare_dihedral_angle</name>
        <qualifiedname>CGAL::compare_dihedral_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>compares the dihedral angles <formula id="52">$ \theta_1$</formula> and <formula id="53">$ \theta_2$</formula>, where <formula id="57">$ \theta_i$</formula> is the dihedral angle in the tetrahedron <computeroutput>(a_i, b_i, c_i, d_i)</computeroutput> at the edge <computeroutput>(a_i, b_i)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>These two angles are computed in <formula id="54">$ [0, \pi]$</formula>. The result is the same as <computeroutput>compare_dihedral_angle(b1-a1, c1-a1, d1-a1, b2-a2, c2-a2, d2-a2)</computeroutput>. <simplesect kind="pre"><para>For <formula id="58">$ i \in\{1,2\}$</formula>, <computeroutput>a_i</computeroutput>, <computeroutput>b_i</computeroutput>, <computeroutput>c_i</computeroutput> are not collinear, and <computeroutput>a_i</computeroutput>, <computeroutput>b_i</computeroutput>, <computeroutput>d_i</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="664" column="19" declfile="CGAL/Kernel/global_functions.h" declline="664" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__dihedral__angle__grp_1ga3f9c8a8863ab1411fc6484163fae4d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_dihedral_angle</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u1, const CGAL::Vector_3&lt; Kernel &gt; &amp;v1, const CGAL::Vector_3&lt; Kernel &gt; &amp;w1, const Kernel::FT &amp;cosine)</argsstring>
        <name>compare_dihedral_angle</name>
        <qualifiedname>CGAL::compare_dihedral_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const Kernel::FT &amp;</type>
          <declname>cosine</declname>
        </param>
        <briefdescription>
<para>compares the dihedral angles <formula id="52">$ \theta_1$</formula> and <formula id="53">$ \theta_2$</formula>, where <formula id="52">$ \theta_1$</formula> is the dihedral angle, in <formula id="54">$ [0, \pi]$</formula>, between the vectorial planes defined by <computeroutput>(u_1, v_1)</computeroutput> and <computeroutput>(u_1, w_1)</computeroutput>, and <formula id="53">$ \theta_2$</formula> is the angle in <formula id="54">$ [0, \pi]$</formula> such that <formula id="59">$ cos(\theta_2) =
cosine$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>u_1</computeroutput> and <computeroutput>v_1</computeroutput> are not collinear, and <computeroutput>u_1</computeroutput> and <computeroutput>w_1</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="683" column="1" declfile="CGAL/Kernel/global_functions.h" declline="683" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__dihedral__angle__grp_1ga7cb035f021001289b2da2be5bf799c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_dihedral_angle</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u1, const CGAL::Vector_3&lt; Kernel &gt; &amp;v1, const CGAL::Vector_3&lt; Kernel &gt; &amp;w1, const CGAL::Vector_3&lt; Kernel &gt; &amp;u2, const CGAL::Vector_3&lt; Kernel &gt; &amp;v2, const CGAL::Vector_3&lt; Kernel &gt; &amp;w2)</argsstring>
        <name>compare_dihedral_angle</name>
        <qualifiedname>CGAL::compare_dihedral_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w2</declname>
        </param>
        <briefdescription>
<para>compares the dihedral angles <formula id="52">$ \theta_1$</formula> and <formula id="53">$ \theta_2$</formula>, where <formula id="57">$ \theta_i$</formula> is the dihedral angle between the vectorial planes defined by <computeroutput>(u_i, v_i)</computeroutput> and <computeroutput>(u_i, w_i)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>These two angles are computed in <formula id="54">$ [0, \pi]$</formula>. <simplesect kind="pre"><para>For <formula id="58">$ i \in\{1,2\}$</formula>, <computeroutput>u_i</computeroutput> and <computeroutput>v_i</computeroutput> are not collinear, and <computeroutput>u_i</computeroutput> and <computeroutput>w_i</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="697" column="1" declfile="CGAL/Kernel/global_functions.h" declline="697" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__distance__to__point__grp_1ga51e8ac85edc4e7c4beb6a9d139f5c853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_distance_to_point</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>compare_distance_to_point</name>
        <qualifiedname>CGAL::compare_distance_to_point</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compares the distances of points <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> to point <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff <computeroutput>q</computeroutput> is closer to <computeroutput>p</computeroutput> than <computeroutput>r</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput>, iff <computeroutput>r</computeroutput> is closer to <computeroutput>p</computeroutput> than <computeroutput>q</computeroutput>, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="729" column="1" declfile="CGAL/Kernel/global_functions.h" declline="729" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__distance__to__point__grp_1ga7a005824ca304dd1f5278474f4843dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_distance_to_point</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>compare_distance_to_point</name>
        <qualifiedname>CGAL::compare_distance_to_point</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compares the distances of points <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> to point <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff <computeroutput>q</computeroutput> is closer to <computeroutput>p</computeroutput> than <computeroutput>r</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput>, iff <computeroutput>r</computeroutput> is closer to <computeroutput>p</computeroutput> than <computeroutput>q</computeroutput>, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="743" column="1" declfile="CGAL/Kernel/global_functions.h" declline="743" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__lexicographically__linear__grp_1ga241d6b0c51b2ec9ee8b7a4e04e7dd562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_lexicographically</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_lexicographically</name>
        <qualifiedname>CGAL::compare_lexicographically</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="60">$ xy$</formula> order: first <formula id="44">$ x$</formula>-coordinates are compared, if they are equal, <formula id="48">$ y$</formula>-coordinates are compared. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the same function as <computeroutput>compare_xy</computeroutput> and exists for compatibility with <computeroutput>Point_d&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="763" column="1" declfile="CGAL/Kernel/global_functions.h" declline="763" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__lexicographically__linear__grp_1gaf90bdb2a89d1e09ecf3a9e8f97671711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_lexicographically</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_lexicographically</name>
        <qualifiedname>CGAL::compare_lexicographically</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="50">$ xyz$</formula> order: first <formula id="44">$ x$</formula>-coordinates are compared, if they are equal, <formula id="48">$ y$</formula>-coordinates are compared, and if both <formula id="44">$ x$</formula>- and <formula id="48">$ y$</formula>- coordinate are equal, <formula id="49">$ z$</formula>-coordinates are compared. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the same function as <computeroutput>compare_xyz</computeroutput> and exists for compatibility with <computeroutput>Point_d&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="774" column="1" declfile="CGAL/Kernel/global_functions.h" declline="774" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__signed__distance__to__line__grp_1gaf3dbb38f621e8d62944cd1869a97f8df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_signed_distance_to_line</name>
        <qualifiedname>CGAL::compare_signed_distance_to_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>l</computeroutput> is larger than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>l</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff it is smaller, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> iff both are equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="800" column="1" declfile="CGAL/Kernel/global_functions.h" declline="800" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__signed__distance__to__line__grp_1ga9f9eaaab84172968cf94e094a13df26c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>compare_signed_distance_to_line</name>
        <qualifiedname>CGAL::compare_signed_distance_to_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> iff the signed distance of <computeroutput>r</computeroutput> and <computeroutput>l</computeroutput> is larger than the signed distance of <computeroutput>s</computeroutput> and <computeroutput>l</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff it is smaller, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> iff both are equal, where <computeroutput>l</computeroutput> is the directed line through <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="814" column="1" declfile="CGAL/Kernel/global_functions.h" declline="814" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__signed__distance__to__plane__grp_1gaa505cef98a05358ff85487d674cc0394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h, const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_signed_distance_to_plane</name>
        <qualifiedname>CGAL::compare_signed_distance_to_plane</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>h</computeroutput> is larger than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>h</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff it is smaller, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> iff both are equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="842" column="1" declfile="CGAL/Kernel/global_functions.h" declline="842" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__signed__distance__to__plane__grp_1ga63052c3cbbf565aec4bc58dd511e71d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>compare_signed_distance_to_plane</name>
        <qualifiedname>CGAL::compare_signed_distance_to_plane</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> iff the signed distance of <computeroutput>s</computeroutput> and <computeroutput>h</computeroutput> is larger than the signed distance of <computeroutput>t</computeroutput> and <computeroutput>h</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput>, iff it is smaller, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> iff both are equal, where <computeroutput>h</computeroutput> is the oriented plane through <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="857" column="1" declfile="CGAL/Kernel/global_functions.h" declline="857" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__slopes__grp_1ga9d7f9afebfb7635c676fa7bcf3ac3185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_slope</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>compare_slope</name>
        <qualifiedname>CGAL::compare_slope</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>compares the slopes of the lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="875" column="19" declfile="CGAL/Kernel/global_functions.h" declline="875" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__slopes__grp_1gad1aefd6d41881734885cb77c37af4e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_slope</definition>
        <argsstring>(const CGAL::Segment_2&lt; Kernel &gt; &amp;s1, const CGAL::Segment_2&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>compare_slope</name>
        <qualifiedname>CGAL::compare_slope</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>compares the slopes of the segments <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput>, where the slope is the variation of the <computeroutput>y</computeroutput>-coordinate from the left to the right endpoint of the segments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="884" column="19" declfile="CGAL/Kernel/global_functions.h" declline="884" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__slopes__grp_1ga8d425470625e96c831173da960ec6552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_slope</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;s1s, const CGAL::Point_2&lt; Kernel &gt; &amp;s1t, const CGAL::Point_2&lt; Kernel &gt; &amp;s2s, const CGAL::Point_2&lt; Kernel &gt; &amp;s2t)</argsstring>
        <name>compare_slope</name>
        <qualifiedname>CGAL::compare_slope</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1t</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2t</declname>
        </param>
        <briefdescription>
<para>compares the slopes of the segments <computeroutput>(s1s,s1t)</computeroutput> and <computeroutput>(s2s,s2t)</computeroutput>, where the slope is the variation of the <computeroutput>y</computeroutput>-coordinate from the left to the right endpoint of the segments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="893" column="19" declfile="CGAL/Kernel/global_functions.h" declline="893" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__slopes__grp_1gad4ad60324fe765d0ed26f56f3e2bf81e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_slope</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>compare_slope</name>
        <qualifiedname>CGAL::compare_slope</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compares the slopes of the segments <computeroutput>(p,q)</computeroutput> and <computeroutput>(r,s)</computeroutput>, where the slope is the variation of the <computeroutput>z</computeroutput>-coordinate from the first to the second point of the segment divided by the length of the segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="904" column="19" declfile="CGAL/Kernel/global_functions.h" declline="904" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__distance__grp_1ga8dbd662fc129db51e5344c2105191b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_distance</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const typename Kernel::FT &amp;d2)</argsstring>
        <name>compare_squared_distance</name>
        <qualifiedname>CGAL::compare_squared_distance</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const typename Kernel::FT &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>compares the squared distance of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> to <computeroutput>d2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="929" column="1" declfile="CGAL/Kernel/global_functions.h" declline="929" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__distance__grp_1ga75555e2894e9c943e725483a054d5cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_distance</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const typename Kernel::FT &amp;d2)</argsstring>
        <name>compare_squared_distance</name>
        <qualifiedname>CGAL::compare_squared_distance</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const typename Kernel::FT &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>compares the squared distance of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> to <computeroutput>d2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="939" column="1" declfile="CGAL/Kernel/global_functions.h" declline="939" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__radius__grp_1gaeb1716519cb30cbb97fc798e0cd00ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const typename Kernel::FT &amp;sr)</argsstring>
        <name>compare_squared_radius</name>
        <qualifiedname>CGAL::compare_squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const typename Kernel::FT &amp;</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>compares the squared radius of the sphere of radius 0 centered at <computeroutput>p</computeroutput> to <computeroutput>sr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns the opposite sign of <computeroutput>sr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="956" column="1" declfile="CGAL/Kernel/global_functions.h" declline="956" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__radius__grp_1ga3d71c0c80b5c2a89b49289e1d587fdd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const typename Kernel::FT &amp;sr)</argsstring>
        <name>compare_squared_radius</name>
        <qualifiedname>CGAL::compare_squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const typename Kernel::FT &amp;</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>compares the squared radius of the sphere defined by the points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> to <computeroutput>sr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="965" column="1" declfile="CGAL/Kernel/global_functions.h" declline="965" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__radius__grp_1ga0fa5f4a04f1c7f04f3c43a4d521019ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const typename Kernel::FT &amp;sr)</argsstring>
        <name>compare_squared_radius</name>
        <qualifiedname>CGAL::compare_squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const typename Kernel::FT &amp;</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>compares the squared radius of the sphere defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> to <computeroutput>sr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="975" column="1" declfile="CGAL/Kernel/global_functions.h" declline="975" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__squared__radius__grp_1ga811f58ab0215115643da5fe16f37cfa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const typename Kernel::FT &amp;sr)</argsstring>
        <name>compare_squared_radius</name>
        <qualifiedname>CGAL::compare_squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const typename Kernel::FT &amp;</type>
          <declname>sr</declname>
        </param>
        <briefdescription>
<para>compares the squared radius of the sphere defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>r</computeroutput> to <computeroutput>sr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="986" column="1" declfile="CGAL/Kernel/global_functions.h" declline="986" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1gade38745038a708e76421e624dc448f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1024" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1024" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1ga274dc815852583262e54dfb35d601268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1030" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1030" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1gae502ab2980aac4e37c4dd08108400618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__linear__grp_1figcompare_x" kindref="member">figcompare_x</ref> (a). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1037" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1037" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1gadd405f29b1f84e3d5ceceee2632ee536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of the intersection of line <computeroutput>l</computeroutput> with line <computeroutput>h1</computeroutput> and with line <computeroutput>h2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__linear__grp_1figcompare_x" kindref="member">figcompare_x</ref> (b). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1048" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1048" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__linear__grp_1ga84301a123a63ed4e1de35d2c19367808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> and the intersection of lines <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__linear__grp_1figcompare_x" kindref="member">figcompare_x</ref> (c). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1058" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1058" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__circular__grp_1ga02958df52814f2ff41a48f98a0550159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CircularKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1081" column="3" declfile="CGAL/Kernel/global_functions.h" declline="1081" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__circular__grp_1ga5829822afcc60c83ead02c83dc74ce0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CircularKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; CircularKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1088" column="3" declfile="CGAL/Kernel/global_functions.h" declline="1088" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__spherical__grp_1ga8e7a74c1584c377bc410425b01da2970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1109" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1109" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__spherical__grp_1gaf7039fd589b194b40d9da5aab435cc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_x</name>
        <qualifiedname>CGAL::compare_x</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1117" column="3" declfile="CGAL/Kernel/global_functions.h" declline="1117" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__linear__grp_1ga99c5707cdcbc126783a194696aad388b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <qualifiedname>CGAL::compare_xy</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="60">$ xy$</formula> order: first <formula id="44">$ x$</formula>-coordinates are compared, if they are equal, <formula id="48">$ y$</formula>-coordinates are compared. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1154" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1154" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__linear__grp_1ga6979ac7902358ad28cb66fcd9ad96791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <qualifiedname>CGAL::compare_xy</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="60">$ xy$</formula> order: first <formula id="44">$ x$</formula>-coordinates are compared, if they are equal, <formula id="48">$ y$</formula>-coordinates are compared. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1164" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__circular__grp_1gad4c4b6140a494db45913be987acebcc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CircularKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <qualifiedname>CGAL::compare_xy</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <formula id="44">$ x$</formula> and <formula id="48">$ y$</formula> Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1185" column="3" declfile="CGAL/Kernel/global_functions.h" declline="1185" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__circular__grp_1gadf28eba2f31263cd46f7d35d866e7ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CircularKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <qualifiedname>CGAL::compare_xy</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; CircularKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <formula id="44">$ x$</formula> and <formula id="48">$ y$</formula> Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1194" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1194" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__spherical__grp_1ga59723f2273da0d3ae98d287ebf3c0fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <qualifiedname>CGAL::compare_xy</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <formula id="44">$ x$</formula> and <formula id="48">$ y$</formula> Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1217" column="3" declfile="CGAL/Kernel/global_functions.h" declline="1217" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xy__spherical__grp_1ga5d43db96cb7dc2c89331153d88243785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xy</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_xy</name>
        <qualifiedname>CGAL::compare_xy</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the <formula id="44">$ x$</formula> and <formula id="48">$ y$</formula> Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1226" column="3" declfile="CGAL/Kernel/global_functions.h" declline="1226" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__at__y__grp_1gab87cbd18f319eb74f150b989f1cc98a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x_at_y</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;h)</argsstring>
        <name>compare_x_at_y</name>
        <qualifiedname>CGAL::compare_x_at_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and the horizontal projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__at__y__grp_1figcomparexaty" kindref="member">figcomparexaty</ref> (a). <simplesect kind="pre"><para><computeroutput>h</computeroutput> is not horizontal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1256" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1256" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__at__y__grp_1ga7f3809c29b2e82721b7340c8c4da2c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x_at_y</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_x_at_y</name>
        <qualifiedname>CGAL::compare_x_at_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>This function compares the <formula id="44">$ x$</formula>-coordinates of the horizontal projection of <computeroutput>p</computeroutput> on <computeroutput>h1</computeroutput> and on <computeroutput>h2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__x__at__y__grp_1figcomparexaty" kindref="member">figcomparexaty</ref> (b). <simplesect kind="pre"><para><computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are not horizontal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1266" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1266" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__at__y__grp_1ga4deab4f857e9a869266482ce37a65862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x_at_y</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h)</argsstring>
        <name>compare_x_at_y</name>
        <qualifiedname>CGAL::compare_x_at_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>p</computeroutput> be the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares the <formula id="44">$ x$</formula>-coordinates of <computeroutput>p</computeroutput> and the horizontal projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput>. See Figure <ref refid="group__compare__x__at__y__grp_1figcomparexaty" kindref="member">figcomparexaty</ref> (c). <simplesect kind="pre"><para><computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> intersect and are not horizontal; <computeroutput>h</computeroutput> is not horizontal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1278" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1278" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__x__at__y__grp_1gabf322237fb2e50bb9df33127869c74a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_x_at_y</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_x_at_y</name>
        <qualifiedname>CGAL::compare_x_at_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>p</computeroutput> be the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares the <formula id="44">$ x$</formula>-coordinates of the horizontal projection of <computeroutput>p</computeroutput> on <computeroutput>h1</computeroutput> and on <computeroutput>h2</computeroutput> See Figure <ref refid="group__compare__x__at__y__grp_1figcomparexaty" kindref="member">figcomparexaty</ref> (d). <simplesect kind="pre"><para><computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> intersect and are not horizontal; <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are not horizontal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1290" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1290" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga0570b8a2164c4f3923053d63b24b4f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;h)</argsstring>
        <name>compare_y_at_x</name>
        <qualifiedname>CGAL::compare_y_at_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__y__at__x__grp_1figcompareyatx" kindref="member">figcompareyatx</ref> (d).</para>
<para><simplesect kind="pre"><para><computeroutput>h</computeroutput> is not vertical. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1323" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1323" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga7b7f2a9e506760f69854b5dce9ab275c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_y_at_x</name>
        <qualifiedname>CGAL::compare_y_at_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>h1</computeroutput> and on <computeroutput>h2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compare__y__at__x__grp_1figcompareyatx" kindref="member">figcompareyatx</ref> (e).</para>
<para><simplesect kind="pre"><para><computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are not vertical. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1334" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1334" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1gaf2f8b7114e12573f676e8e0302e54500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h)</argsstring>
        <name>compare_y_at_x</name>
        <qualifiedname>CGAL::compare_y_at_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>p</computeroutput> be the <computeroutput>intersection</computeroutput> of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares the <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>h</computeroutput> See Figure <ref refid="group__compare__y__at__x__grp_1figcompareyatx" kindref="member">figcompareyatx</ref> (f).</para>
<para><simplesect kind="pre"><para><computeroutput>l1</computeroutput>, <computeroutput>l2</computeroutput> intersect and <computeroutput>h</computeroutput> is not vertical. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1348" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1348" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1gaff3351d5c7507c74b3e48e8b1e4c3a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_y_at_x</name>
        <qualifiedname>CGAL::compare_y_at_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>p</computeroutput> be the <computeroutput>intersection</computeroutput> of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares the <formula id="48">$ y$</formula>-coordinates of the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>h1</computeroutput> and on <computeroutput>h2</computeroutput>. See Figure <ref refid="group__compare__y__at__x__grp_1figcompareyatx" kindref="member">figcompareyatx</ref> (g). <simplesect kind="pre"><para><computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> intersect; <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are not vertical. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1360" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1360" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga05b0ffd47157a5f59142243b13961edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Segment_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>compare_y_at_x</name>
        <qualifiedname>CGAL::compare_y_at_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>s</computeroutput> is vertical, then return <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> when <computeroutput>p</computeroutput> lies on <computeroutput>s</computeroutput>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput> when <computeroutput>p</computeroutput> lies under {s}, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> otherwise. <simplesect kind="pre"><para><computeroutput>p</computeroutput> is within the x range of <computeroutput>s</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1373" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1373" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__at__x__grp_1ga93fab9114bbea4402fc7c26825347fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y_at_x</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Segment_2&lt; Kernel &gt; &amp;s1, const CGAL::Segment_2&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>compare_y_at_x</name>
        <qualifiedname>CGAL::compare_y_at_x</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of the vertical projection of <computeroutput>p</computeroutput> on <computeroutput>s1</computeroutput> and on <computeroutput>s2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>s1</computeroutput> or <computeroutput>s2</computeroutput> is vertical, then return <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member">CGAL::EQUAL</ref></computeroutput> if they intersect, otherwise return <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member">CGAL::SMALLER</ref></computeroutput> if <computeroutput>s1</computeroutput> lies below <computeroutput>s2</computeroutput>, and return <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member">CGAL::LARGER</ref></computeroutput> otherwise. <simplesect kind="pre"><para><computeroutput>p</computeroutput> is within the x range of <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1385" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1385" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1ga62a44c9df055aa0ae83ea84455152f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares Cartesian <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1448" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1448" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1gae1e416199adc1805b06c7ea9389829f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares Cartesian <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1454" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1454" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1ga07e78831d6ed3f5b614d5608ce5c9b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compary__y__linear__grp_1figcompare13" kindref="member">figcompare13</ref> (a). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1463" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1463" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1ga9768badf93898701d6f95101bd9befc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of the intersection of line <computeroutput>l</computeroutput> with line <computeroutput>h1</computeroutput> and with line <computeroutput>h2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compary__y__linear__grp_1figcompare13" kindref="member">figcompare13</ref> (b). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1473" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1473" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compary__y__linear__grp_1ga942435b4ff4a3ed0907b3c745e1c377f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2, const CGAL::Line_2&lt; Kernel &gt; &amp;h1, const CGAL::Line_2&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of the intersection of lines <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> and the intersection of lines <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="group__compary__y__linear__grp_1figcompare13" kindref="member">figcompare13</ref> (c). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1482" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1482" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__circular__grp_1ga37138f9ce1d4a565f4c73c30c3c68e81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CircularKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1504" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1504" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__circular__grp_1gaac34b0fd69305ef5b845bcf1f3246bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CircularKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;p, const CGAL::Point_2&lt; CircularKernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_2&lt; CircularKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; CircularKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1511" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1511" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__spherical__grp_1ga369f42a99f1823358d3d295e26875e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1531" column="3" declfile="CGAL/Kernel/global_functions.h" declline="1531" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__y__spherical__grp_1gaa91ade50fb9ca7e99a7b4a23b92b497e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_y</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_y</name>
        <qualifiedname>CGAL::compare_y</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="48">$ y$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1538" column="3" declfile="CGAL/Kernel/global_functions.h" declline="1538" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xyz__linear__grp_1ga85c912016468489da1decfb7a85264f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xyz</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_xyz</name>
        <qualifiedname>CGAL::compare_xyz</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="50">$ xyz$</formula> order: first <formula id="44">$ x$</formula>-coordinates are compared, if they are equal, <formula id="48">$ y$</formula>-coordinates are compared, and if both <formula id="44">$ x$</formula>- and <formula id="48">$ y$</formula>- coordinate are equal, <formula id="49">$ z$</formula>-coordinates are compared. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1575" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1575" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xyz__spherical__grp_1ga7e3a1f8a22e0bd774570d2fea9810e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xyz</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_xyz</name>
        <qualifiedname>CGAL::compare_xyz</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1594" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1594" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__xyz__spherical__grp_1ga850572d69328843cf26f9363bd3bc272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_xyz</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_xyz</name>
        <qualifiedname>CGAL::compare_xyz</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1602" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1602" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__z__linear__grp_1ga369456c72206d97ab114cd9f2e7f4af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_z</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_z</name>
        <qualifiedname>CGAL::compare_z</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ z$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1635" column="19" declfile="CGAL/Kernel/global_functions.h" declline="1635" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__z__spherical__grp_1gaf616ffb0fcc52773f71743c29e842dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_z</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_z</name>
        <qualifiedname>CGAL::compare_z</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ z$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1662" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1662" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__z__spherical__grp_1gab46d0e224d7010de3ee0b2150e0b7fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SphericalKernel</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_z</definition>
        <argsstring>(const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;p, const CGAL::Point_3&lt; SphericalKernel &gt; &amp;q)</argsstring>
        <name>compare_z</name>
        <qualifiedname>CGAL::compare_z</qualifiedname>
        <param>
          <type>const CGAL::Circular_arc_point_3&lt; SphericalKernel &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; SphericalKernel &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compares the <formula id="49">$ z$</formula>-coordinates of <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1669" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1669" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__compare__yx__grp_1gaed9bd83a324097061c5b3825ed663258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member">Comparison_result</ref></type>
        <definition>Comparison_result CGAL::compare_yx</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>compare_yx</name>
        <qualifiedname>CGAL::compare_yx</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compares the Cartesian coordinates of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> lexicographically in <formula id="61">$ yx$</formula> order: first <formula id="48">$ y$</formula>-coordinates are compared, if they are equal, <formula id="44">$ x$</formula>-coordinates are compared. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1692" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1692" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__coplanar__grp_1ga79b3b4bcb01bf81048486dfd59a22c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::coplanar</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>coplanar</name>
        <qualifiedname>CGAL::coplanar</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1707" column="6" declfile="CGAL/Kernel/global_functions.h" declline="1707" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coplanar__orientation__grp_1gaf6fa77ad91160fdbe406db839e87f543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::coplanar_orientation</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>coplanar_orientation</name>
        <qualifiedname>CGAL::coplanar_orientation</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Let <computeroutput>P</computeroutput> be the plane defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the order defines the orientation of <computeroutput>P</computeroutput>. The function computes the orientation of points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>s</computeroutput> in <computeroutput>P</computeroutput>: Iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>s</computeroutput> are collinear, <computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> is returned. Iff <computeroutput>P</computeroutput> and the plane defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>s</computeroutput> have the same orientation, <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref></computeroutput> is returned; otherwise <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput> is returned. <simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are coplanar and <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1732" column="13" declfile="CGAL/Kernel/global_functions.h" declline="1732" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__coplanar__orientation__grp_1gae6eea9e4c75a610511866cf3eb4ae139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::coplanar_orientation</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>coplanar_orientation</name>
        <qualifiedname>CGAL::coplanar_orientation</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>If <computeroutput>p,q,r</computeroutput> are collinear, then <computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> is returned. </para>
        </briefdescription>
        <detaileddescription>
<para>If not, then <computeroutput>p,q,r</computeroutput> define a plane <computeroutput>p</computeroutput>. The return value in this case is either <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref></computeroutput> or <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput>, but we don&apos;t specify it explicitly. However, we guarantee that all calls to this predicate over 3 points in <computeroutput>p</computeroutput> will return a coherent orientation if considered a 2D orientation in <computeroutput>p</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1745" column="13" declfile="CGAL/Kernel/global_functions.h" declline="1745" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__coplanar__side__of__bounded__circle__grp_1gab02e2952353223cde67697df3ac84ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::coplanar_side_of_bounded_circle</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>coplanar_side_of_bounded_circle</name>
        <qualifiedname>CGAL::coplanar_side_of_bounded_circle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns the bounded side of the circle defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> on which <computeroutput>s</computeroutput> lies. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> are coplanar and <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1765" column="14" declfile="CGAL/Kernel/global_functions.h" declline="1765" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cross__product__grp_1gab032f9890a983dff3e0a29346318176e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt; Kernel &gt; CGAL::cross_product</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>cross_product</name>
        <qualifiedname>CGAL::cross_product</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the cross product of <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1781" column="16" declfile="CGAL/Kernel/global_functions.h" declline="1781" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__determinant__grp_1ga43b04b357a2c01b2e0f1f5775fc5ebb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::determinant</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;v, const CGAL::Vector_2&lt; Kernel &gt; &amp;w)</argsstring>
        <name>determinant</name>
        <qualifiedname>CGAL::determinant</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns the determinant of <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1798" column="12" declfile="CGAL/Kernel/global_functions.h" declline="1798" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__determinant__grp_1ga607a85e1ce137513fa2904ff63290401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::determinant</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v, const CGAL::Vector_3&lt; Kernel &gt; &amp;w)</argsstring>
        <name>determinant</name>
        <qualifiedname>CGAL::determinant</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns the determinant of <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1805" column="12" declfile="CGAL/Kernel/global_functions.h" declline="1805" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__equidistant__line__grp_1gac7476ed32034ddd19dda9106b31f882f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Line__3" kindref="compound">CGAL::Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Line_3&lt; Kernel &gt; CGAL::equidistant_line</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>equidistant_line</name>
        <qualifiedname>CGAL::equidistant_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>constructs the line which is at the same distance from the three points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1834" column="14" declfile="CGAL/Kernel/global_functions.h" declline="1834" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__distance__to__point__grp_1ga1c6f2c3521bc70d4f8ed8eb88762a07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_distance_to_point</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>has_larger_distance_to_point</name>
        <qualifiedname>CGAL::has_larger_distance_to_point</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the distance between <computeroutput>q</computeroutput> and <computeroutput>p</computeroutput> is larger than the distance between <computeroutput>r</computeroutput> and <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1859" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1859" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__distance__to__point__grp_1ga8c05b8e965b22c75873c4ba0c9e0b9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_distance_to_point</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>has_larger_distance_to_point</name>
        <qualifiedname>CGAL::has_larger_distance_to_point</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the distance between <computeroutput>q</computeroutput> and <computeroutput>p</computeroutput> is larger than the distance between <computeroutput>r</computeroutput> and <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1870" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1870" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__signed__distance__to__line__grp_1ga6b3cb9555a8bea981e8283bd456d123c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>has_larger_signed_distance_to_line</name>
        <qualifiedname>CGAL::has_larger_signed_distance_to_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>l</computeroutput> is larger than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1896" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1896" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__signed__distance__to__line__grp_1ga9d810a2961d0c785e970893920085d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>has_larger_signed_distance_to_line</name>
        <qualifiedname>CGAL::has_larger_signed_distance_to_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>r</computeroutput> and <computeroutput>l</computeroutput> is larger than the signed distance of <computeroutput>s</computeroutput> and <computeroutput>l</computeroutput>, where <computeroutput>l</computeroutput> is the directed line through points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1908" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1908" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__signed__distance__to__plane__grp_1ga645bab7e870b124eb8ab9fe93ef47dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h, const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>has_larger_signed_distance_to_plane</name>
        <qualifiedname>CGAL::has_larger_signed_distance_to_plane</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>h</computeroutput> is larger than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1935" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1935" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__larger__signed__distance__to__plane__grp_1ga44f687b45a7ea420a2b84d7a55a46b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_larger_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>has_larger_signed_distance_to_plane</name>
        <qualifiedname>CGAL::has_larger_signed_distance_to_plane</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>s</computeroutput> and <computeroutput>h</computeroutput> is larger than the signed distance of <computeroutput>t</computeroutput> and <computeroutput>h</computeroutput>, where <computeroutput>h</computeroutput> is the oriented plane through <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1947" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1947" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__distance__to__point__grp_1gaced5841787740fba7ee44a531284a128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_distance_to_point</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>has_smaller_distance_to_point</name>
        <qualifiedname>CGAL::has_smaller_distance_to_point</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the distance between <computeroutput>q</computeroutput> and <computeroutput>p</computeroutput> is smaller than the distance between <computeroutput>r</computeroutput> and <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1974" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1974" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__distance__to__point__grp_1ga8c3c1514f7cebaee0645e47a476538d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_distance_to_point</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>has_smaller_distance_to_point</name>
        <qualifiedname>CGAL::has_smaller_distance_to_point</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the distance between <computeroutput>q</computeroutput> and <computeroutput>p</computeroutput> is smaller than the distance between <computeroutput>r</computeroutput> and <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="1985" column="1" declfile="CGAL/Kernel/global_functions.h" declline="1985" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__signed__distance__to__line__grp_1gae507fea54d14e701c56de815d9730444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l, const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>has_smaller_signed_distance_to_line</name>
        <qualifiedname>CGAL::has_smaller_signed_distance_to_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>l</computeroutput> is smaller than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2010" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2010" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__signed__distance__to__line__grp_1ga70ddaf8025c685beda7d33f61c3b36c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_signed_distance_to_line</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>has_smaller_signed_distance_to_line</name>
        <qualifiedname>CGAL::has_smaller_signed_distance_to_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>r</computeroutput> and <computeroutput>l</computeroutput> is smaller than the signed distance of <computeroutput>s</computeroutput> and <computeroutput>l</computeroutput>, where <computeroutput>l</computeroutput> is the oriented line through <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2022" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2022" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__signed__distance__to__plane__grp_1ga4c2f5b7428e8753d023e75e99bff1ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h, const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>has_smaller_signed_distance_to_plane</name>
        <qualifiedname>CGAL::has_smaller_signed_distance_to_plane</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>h</computeroutput> is smaller than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2048" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2048" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__has__smaller__signed__distance__to__plane__grp_1gacadf351cba0ccd154a2943dbb8b0e8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::has_smaller_signed_distance_to_plane</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>has_smaller_signed_distance_to_plane</name>
        <qualifiedname>CGAL::has_smaller_signed_distance_to_plane</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the signed distance of <computeroutput>p</computeroutput> and <computeroutput>h</computeroutput> is smaller than the signed distance of <computeroutput>q</computeroutput> and <computeroutput>h</computeroutput>, where <computeroutput>h</computeroutput> is the oriented plane through <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2060" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2060" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__l__infinity__distance__grp_1ga9e1407df1c6b4f23019b2e97cd4a390a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::l_infinity_distance</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>l_infinity_distance</name>
        <qualifiedname>CGAL::l_infinity_distance</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns the distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> in the L-infinity metric. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2090" column="12" declfile="CGAL/Kernel/global_functions.h" declline="2090" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__l__infinity__distance__grp_1gaf9f6d0f4e1243856dac35c168f6508c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::l_infinity_distance</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>l_infinity_distance</name>
        <qualifiedname>CGAL::l_infinity_distance</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns the distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> in the L-infinity metric. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2097" column="12" declfile="CGAL/Kernel/global_functions.h" declline="2097" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__left__turn__grp_1ga54cc2a847df7133bee7fd61c7b236dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::left_turn</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>left_turn</name>
        <qualifiedname>CGAL::left_turn</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> form a left turn. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2114" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xy__larger__grp_1ga0cf066e4d5572a493c7c9f9ff58c19a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xy_larger</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xy_larger</name>
        <qualifiedname>CGAL::lexicographically_xy_larger</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically larger than <computeroutput>q</computeroutput> with respect to <formula id="60">$ xy$</formula> order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2135" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2135" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xy__larger__or__equal__grp_1gad643d05f3cce01489b600ac5377e950e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xy_larger_or_equal</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xy_larger_or_equal</name>
        <qualifiedname>CGAL::lexicographically_xy_larger_or_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically not smaller than <computeroutput>q</computeroutput> with respect to <formula id="60">$ xy$</formula> order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2157" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2157" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xy__smaller__grp_1gab4ac1479fab3f0e58debc845316a52e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xy_smaller</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xy_smaller</name>
        <qualifiedname>CGAL::lexicographically_xy_smaller</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically smaller than <computeroutput>q</computeroutput> with respect to <formula id="60">$ xy$</formula> order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2177" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2177" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xy__smaller__or__equal__grp_1ga44153edeb60da6f895ce5342f277f630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xy_smaller_or_equal</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xy_smaller_or_equal</name>
        <qualifiedname>CGAL::lexicographically_xy_smaller_or_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically not larger than <computeroutput>q</computeroutput> with respect to <formula id="60">$ xy$</formula> order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2198" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2198" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xyz__smaller__grp_1ga8bf93a0885a3a693c401cd229a52c633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xyz_smaller</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xyz_smaller</name>
        <qualifiedname>CGAL::lexicographically_xyz_smaller</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically smaller than <computeroutput>q</computeroutput> with respect to <formula id="50">$ xyz$</formula> order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2216" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2216" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__lexicographically__xyz__smaller__or__equal__grp_1ga4ca673bb805f17d7f3b597e94108a113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::lexicographically_xyz_smaller_or_equal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>lexicographically_xyz_smaller_or_equal</name>
        <qualifiedname>CGAL::lexicographically_xyz_smaller_or_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput> is lexicographically not larger than <computeroutput>q</computeroutput> with respect to <formula id="50">$ xyz$</formula> order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2234" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2234" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__max__vertex__grp_1ga46562d115720a01049f3dbb778929fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::max_vertex</definition>
        <argsstring>(const CGAL::Iso_rectangle_2&lt; Kernel &gt; &amp;ir)</argsstring>
        <name>max_vertex</name>
        <qualifiedname>CGAL::max_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">CGAL::Iso_rectangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>computes the vertex with the lexicographically largest coordinates of the iso rectangle <computeroutput>ir</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2248" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2248" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__max__vertex__grp_1ga1410c073d65e5c67b159934754c9ed45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::max_vertex</definition>
        <argsstring>(const CGAL::Iso_cuboid_3&lt; Kernel &gt; &amp;ic)</argsstring>
        <name>max_vertex</name>
        <qualifiedname>CGAL::max_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">CGAL::Iso_cuboid_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
<para>computes the vertex with the lexicographically largest coordinates of the iso cuboid <computeroutput>ic</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2255" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2255" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__midpoint__grp_1ga6b971827bb460dd0611c932a7dd287f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::midpoint</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>midpoint</name>
        <qualifiedname>CGAL::midpoint</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>computes the midpoint of the segment <computeroutput>pq</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2267" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2267" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__midpoint__grp_1ga0b2a925018adf872b8afe39fdbc9915f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::midpoint</definition>
        <argsstring>(const CGAL::Segment_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>midpoint</name>
        <qualifiedname>CGAL::midpoint</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>computes the midpoint of the segment <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2275" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2275" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__midpoint__grp_1gaaa348ce932c82135def586ad3fdee373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::midpoint</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>midpoint</name>
        <qualifiedname>CGAL::midpoint</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>computes the midpoint of the segment <computeroutput>pq</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2281" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2281" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__midpoint__grp_1gab705ff35cc397db7b95b2bc1d35a8b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::midpoint</definition>
        <argsstring>(const CGAL::Segment_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>midpoint</name>
        <qualifiedname>CGAL::midpoint</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__3" kindref="compound">CGAL::Segment_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>computes the midpoint of the segment <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2287" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2287" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__min__vertex__grp_1gabd1b13ccd9cf230613dceed55f2918ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_2&lt; Kernel &gt; CGAL::min_vertex</definition>
        <argsstring>(const CGAL::Iso_rectangle_2&lt; Kernel &gt; &amp;ir)</argsstring>
        <name>min_vertex</name>
        <qualifiedname>CGAL::min_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__rectangle__2" kindref="compound">CGAL::Iso_rectangle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>computes the vertex with the lexicographically smallest coordinates of the iso rectangle <computeroutput>ir</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2300" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2300" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__min__vertex__grp_1ga69d8c57f6f04c0e84bf7cbd404747b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Point_3&lt; Kernel &gt; CGAL::min_vertex</definition>
        <argsstring>(const CGAL::Iso_cuboid_3&lt; Kernel &gt; &amp;ic)</argsstring>
        <name>min_vertex</name>
        <qualifiedname>CGAL::min_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound">CGAL::Iso_cuboid_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
<para>computes the vertex with the lexicographically smallest coordinates of the iso cuboid <computeroutput>ic</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><variablelist>
<varlistentry><term>Exactness</term></varlistentry>
<listitem><para>This construction is trivial and therefore always exact in <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound">Exact_predicates_inexact_constructions_kernel</ref></computeroutput>.</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2307" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2307" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__normal__grp_1gafe43c91d0ec7130cb673402cf8227dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt; Kernel &gt; CGAL::normal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>normal</name>
        <qualifiedname>CGAL::normal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>computes the normal vector for the vectors <computeroutput>q-p</computeroutput> and <computeroutput>r-p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> must not be collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2320" column="16" declfile="CGAL/Kernel/global_functions.h" declline="2320" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__orientation__grp_1ga91d9866cfde916ba70e5dbc596176d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>orientation</name>
        <qualifiedname>CGAL::orientation</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput>, if <computeroutput>r</computeroutput> lies to the left of the oriented line <computeroutput>l</computeroutput> defined by <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>, returns <computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> if <computeroutput>r</computeroutput> lies to the right of <computeroutput>l</computeroutput>, and returns <computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> if <computeroutput>r</computeroutput> lies on <computeroutput>l</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2339" column="13" declfile="CGAL/Kernel/global_functions.h" declline="2339" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__orientation__grp_1gaecb33819c6e8259cec78c457a7650383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;u, const CGAL::Vector_2&lt; Kernel &gt; &amp;v)</argsstring>
        <name>orientation</name>
        <qualifiedname>CGAL::orientation</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1ga803e5969acd01d45aec5acaee6f82883" kindref="member">CGAL::LEFT_TURN</ref></computeroutput> if <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> form a left turn, returns <computeroutput><ref refid="group__kernel__enums_1ga1f9d8cac74201e22d484b10384fe3bf9" kindref="member">CGAL::RIGHT_TURN</ref></computeroutput> if <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> form a right turn, and returns <computeroutput><ref refid="group__kernel__enums_1ga84f760a315c4f27cb4059db8a3a1159e" kindref="member">CGAL::COLLINEAR</ref></computeroutput> if <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2349" column="13" declfile="CGAL/Kernel/global_functions.h" declline="2349" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__orientation__grp_1ga0a65d09ea2af5f9bcfececb9aba9ca35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>orientation</name>
        <qualifiedname>CGAL::orientation</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref></computeroutput>, if <computeroutput>s</computeroutput> lies on the positive side of the oriented plane <computeroutput>h</computeroutput> defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>, returns <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput> if <computeroutput>s</computeroutput> lies on the negative side of <computeroutput>h</computeroutput>, and returns <computeroutput><ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">CGAL::COPLANAR</ref></computeroutput> if <computeroutput>s</computeroutput> lies on <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2359" column="13" declfile="CGAL/Kernel/global_functions.h" declline="2359" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__orientation__grp_1ga565faf2582847419e36f177af821011e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member">Orientation</ref></type>
        <definition>Orientation CGAL::orientation</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v, const CGAL::Vector_3&lt; Kernel &gt; &amp;w)</argsstring>
        <name>orientation</name>
        <qualifiedname>CGAL::orientation</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a3aef56502334293e3ad25e166d74bb2a" kindref="member">CGAL::NEGATIVE</ref></computeroutput> if <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput> are negatively oriented, <computeroutput><ref refid="group__kernel__enums_1gga59bee58a806ccde81562ea315ff75525a963eefff16725de743f4022f4e23fc0d" kindref="member">CGAL::POSITIVE</ref></computeroutput> if <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput> are positively oriented, and <computeroutput><ref refid="group__kernel__enums_1ga56587f3c15032c9127a9fe81c038b0d7" kindref="member">CGAL::COPLANAR</ref></computeroutput> if <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput> are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2370" column="13" declfile="CGAL/Kernel/global_functions.h" declline="2370" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__orthogonal__vector__grp_1ga94c6b113c3d1dcd196c4e83eeb153941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt; Kernel &gt; CGAL::orthogonal_vector</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;p)</argsstring>
        <name>orthogonal_vector</name>
        <qualifiedname>CGAL::orthogonal_vector</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>computes an orthogonal vector of the plane <computeroutput>p</computeroutput>, which is directed to the positive side of this plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2388" column="16" declfile="CGAL/Kernel/global_functions.h" declline="2388" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__orthogonal__vector__grp_1ga1698efc20e2a9ada89118ec3fe887777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt; Kernel &gt; CGAL::orthogonal_vector</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>orthogonal_vector</name>
        <qualifiedname>CGAL::orthogonal_vector</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>computes an orthogonal vector of the plane defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>, which is directed to the positive side of this plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2395" column="16" declfile="CGAL/Kernel/global_functions.h" declline="2395" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1gaf8b045ed5b2d7e892f6371ff6093ce5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Line_2&lt; Kernel &gt; &amp;l1, const CGAL::Line_2&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>parallel</name>
        <qualifiedname>CGAL::parallel</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2412" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2412" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1ga40204dc3851914ada523ba7a02033ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Ray_2&lt; Kernel &gt; &amp;r1, const CGAL::Ray_2&lt; Kernel &gt; &amp;r2)</argsstring>
        <name>parallel</name>
        <qualifiedname>CGAL::parallel</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__2" kindref="compound">CGAL::Ray_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__2" kindref="compound">CGAL::Ray_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>r1</computeroutput> and <computeroutput>r2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2420" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2420" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1gae0d355e2a6bfdabee4f756eb8ba6b99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Segment_2&lt; Kernel &gt; &amp;s1, const CGAL::Segment_2&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>parallel</name>
        <qualifiedname>CGAL::parallel</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2428" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2428" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1gaeb6bfe961d6a3c29470b828000437695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Line_3&lt; Kernel &gt; &amp;l1, const CGAL::Line_3&lt; Kernel &gt; &amp;l2)</argsstring>
        <name>parallel</name>
        <qualifiedname>CGAL::parallel</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__3" kindref="compound">CGAL::Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Line__3" kindref="compound">CGAL::Line_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>l1</computeroutput> and <computeroutput>l2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2436" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2436" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1ga55cbad9fbbb52748d75a1272184207b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Plane_3&lt; Kernel &gt; &amp;h1, const CGAL::Plane_3&lt; Kernel &gt; &amp;h2)</argsstring>
        <name>parallel</name>
        <qualifiedname>CGAL::parallel</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2444" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2444" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1gae16f0e8fffcdff942d0a2e8a8fda7d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Ray_3&lt; Kernel &gt; &amp;r1, const CGAL::Ray_3&lt; Kernel &gt; &amp;r2)</argsstring>
        <name>parallel</name>
        <qualifiedname>CGAL::parallel</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__3" kindref="compound">CGAL::Ray_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Ray__3" kindref="compound">CGAL::Ray_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>r1</computeroutput> and <computeroutput>r2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2452" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2452" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__parallel__grp_1ga99661a71ebf67dc44fdbd2011177ae01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::parallel</definition>
        <argsstring>(const CGAL::Segment_3&lt; Kernel &gt; &amp;s1, const CGAL::Segment_3&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>parallel</name>
        <qualifiedname>CGAL::parallel</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__3" kindref="compound">CGAL::Segment_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__3" kindref="compound">CGAL::Segment_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, if <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput> are parallel or if one of those (or both) is degenerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2460" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2460" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__radical__plane__grp_1ga054555e8e0fcb48fa7bdf1b98e05ee99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Plane__3" kindref="compound">CGAL::Plane_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Plane_3&lt; Kernel &gt; CGAL::radical_plane</definition>
        <argsstring>(const CGAL::Sphere_3&lt; Kernel &gt; &amp;s1, const CGAL::Sphere_3&lt; Kernel &gt; &amp;s2)</argsstring>
        <name>radical_plane</name>
        <qualifiedname>CGAL::radical_plane</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sphere__3" kindref="compound">CGAL::Sphere_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>returns the radical plane of the two spheres. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>s1 and s2 are not cocentric. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2472" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2472" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__radical__line__grp_1ga520538c23b92629f7967beea3e1bb691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Line__2" kindref="compound">CGAL::Line_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Line_2&lt; Kernel &gt; CGAL::radical_line</definition>
        <argsstring>(const CGAL::Circle_2&lt; Kernel &gt; &amp;c1, const CGAL::Circle_2&lt; Kernel &gt; &amp;c2)</argsstring>
        <name>radical_line</name>
        <qualifiedname>CGAL::radical_line</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">CGAL::Circle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Circle__2" kindref="compound">CGAL::Circle_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>returns the radical line of the two circles. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput> are not cocentric. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2487" column="14" declfile="CGAL/Kernel/global_functions.h" declline="2487" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__right__turn__grp_1ga0ad6e42d5e16269b43122503521f447a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::right_turn</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>right_turn</name>
        <qualifiedname>CGAL::right_turn</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> form a right turn. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2509" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2509" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__scalar__product__grp_1gacab514ee2b6517d8a0b0fe4cc0a28295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::scalar_product</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;u, const CGAL::Vector_2&lt; Kernel &gt; &amp;v)</argsstring>
        <name>scalar_product</name>
        <qualifiedname>CGAL::scalar_product</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the scalar product of <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2525" column="12" declfile="CGAL/Kernel/global_functions.h" declline="2525" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__scalar__product__grp_1ga4f960db92fe46468f8ba3377f69f64bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::scalar_product</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;u, const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>scalar_product</name>
        <qualifiedname>CGAL::scalar_product</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the scalar product of <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2532" column="12" declfile="CGAL/Kernel/global_functions.h" declline="2532" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__circle__grp_1ga0e5c29a7810ca3cc1d92e3854ee9bf00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_circle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_circle</name>
        <qualifiedname>CGAL::side_of_bounded_circle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>t</computeroutput> to the circle defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The order of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> does not matter. <simplesect kind="pre"><para><computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2550" column="14" declfile="CGAL/Kernel/global_functions.h" declline="2550" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__circle__grp_1ga1a28c423cc75775dd0799f80700506c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_circle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_circle</name>
        <qualifiedname>CGAL::side_of_bounded_circle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the position of the point <computeroutput>t</computeroutput> relative to the circle that has <computeroutput>pq</computeroutput> as its diameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2561" column="14" declfile="CGAL/Kernel/global_functions.h" declline="2561" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__sphere__grp_1gac0b860dea5e5b831e810ed5a25fad802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_sphere</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_sphere</name>
        <qualifiedname>CGAL::side_of_bounded_sphere</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>t</computeroutput> to the sphere defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The order of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> does not matter. <simplesect kind="pre"><para><computeroutput>p, q, r</computeroutput> and <computeroutput>s</computeroutput> are not coplanar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2583" column="14" declfile="CGAL/Kernel/global_functions.h" declline="2583" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__sphere__grp_1gaa23c2a763ef75f120f43ee5db09f7fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_sphere</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_sphere</name>
        <qualifiedname>CGAL::side_of_bounded_sphere</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the position of the point <computeroutput>t</computeroutput> relative to the sphere passing through <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> and whose center is in the plane defined by these three points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2596" column="14" declfile="CGAL/Kernel/global_functions.h" declline="2596" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__bounded__sphere__grp_1ga5e7dc3dd99618777cdef9d6a823822fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::side_of_bounded_sphere</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;t)</argsstring>
        <name>side_of_bounded_sphere</name>
        <qualifiedname>CGAL::side_of_bounded_sphere</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the position of the point <computeroutput>t</computeroutput> relative to the sphere that has <computeroutput>pq</computeroutput> as its diameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2607" column="14" declfile="CGAL/Kernel/global_functions.h" declline="2607" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__oriented__circle__grp_1gaa1ff7e181e3ba191d405fe716e02ba38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::side_of_oriented_circle</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r, const CGAL::Point_2&lt; Kernel &gt; &amp;test)</argsstring>
        <name>side_of_oriented_circle</name>
        <qualifiedname>CGAL::side_of_oriented_circle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>test</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>test</computeroutput> to the oriented circle defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The order of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> is important, since it determines the orientation of the implicitly constructed circle.</para>
<para>If <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput> are collinear, the circle degenerates in a line. <computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">CGAL::ON_ORIENTED_BOUNDARY</ref></computeroutput> is returned if <computeroutput>test</computeroutput> is also collinear or if two points are identical, otherwise, <computeroutput>side_of_oriented_circle(r, q, test, p)</computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2634" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2634" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__side__of__oriented__sphere__grp_1ga3b3afd1f878c2269e34bbd4e49a85317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::side_of_oriented_sphere</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s, const CGAL::Point_3&lt; Kernel &gt; &amp;test)</argsstring>
        <name>side_of_oriented_sphere</name>
        <qualifiedname>CGAL::side_of_oriented_sphere</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>test</declname>
        </param>
        <briefdescription>
<para>returns the relative position of point <computeroutput>test</computeroutput> to the oriented sphere defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The order of the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, and <computeroutput>s</computeroutput> is important, since it determines the orientation of the implicitly constructed sphere. If the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput> are positive oriented, positive side is the bounded interior of the sphere.</para>
<para>In case of degeneracies, <computeroutput><ref refid="group__kernel__enums_1gga5006dd2552d97fa577d81bd819c0f979a45220491cf36139beffd09434aa31256" kindref="member">CGAL::ON_ORIENTED_BOUNDARY</ref></computeroutput> is returned if all points are coplanar. Otherwise, there is a cyclic permutation of the five points that puts four non coplanar points first, it is used to answer the predicate: e.g. <computeroutput>CGAL::side_of_oriented_sphere(q, r, s, test, p)</computeroutput> is returned if <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput>, <computeroutput>s</computeroutput>, and <computeroutput>test</computeroutput> are non coplanar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2664" column="15" declfile="CGAL/Kernel/global_functions.h" declline="2664" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__area__grp_1ga4a78403d9db87ffea0efec851fea117c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::squared_area</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>squared_area</name>
        <qualifiedname>CGAL::squared_area</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>returns the squared area of the triangle defined by the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2683" column="12" declfile="CGAL/Kernel/global_functions.h" declline="2683" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__length__grp_1ga087e4ab1508d37f963b7a21bfae183fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_length</definition>
        <argsstring>(const CGAL::Vector_2&lt; Kernel &gt; &amp;v)</argsstring>
        <name>squared_length</name>
        <qualifiedname>CGAL::squared_length</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__2" kindref="compound">CGAL::Vector_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>compute the squared length of vector <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2704" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2704" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__length__grp_1ga64edbde8622fec7f5af6338018d3d56f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_length</definition>
        <argsstring>(const CGAL::Segment_2&lt; Kernel &gt; &amp;s)</argsstring>
        <name>squared_length</name>
        <qualifiedname>CGAL::squared_length</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__2" kindref="compound">CGAL::Segment_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the squared length of segment <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2711" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2711" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__length__grp_1ga900e29278394948952f59de7ff163b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_length</definition>
        <argsstring>(const CGAL::Vector_3&lt; Kernel &gt; &amp;v)</argsstring>
        <name>squared_length</name>
        <qualifiedname>CGAL::squared_length</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>compute the squared length of vector <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2718" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2718" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__length__grp_1gaad156e1cc780af1d39f05b346bf22fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_length</definition>
        <argsstring>(const CGAL::Segment_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>squared_length</name>
        <qualifiedname>CGAL::squared_length</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__3" kindref="compound">CGAL::Segment_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the squared length of segment <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2725" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2725" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1ga3145805e8a5b1bac1b103c3bbb52d1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q, const CGAL::Point_2&lt; Kernel &gt; &amp;r)</argsstring>
        <name>squared_radius</name>
        <qualifiedname>CGAL::squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the circle passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2744" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2744" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1gaba7777a559d3fbd8adcbe4a4dd983ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>squared_radius</name>
        <qualifiedname>CGAL::squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the smallest circle passing through <computeroutput>p</computeroutput>, and <computeroutput>q</computeroutput>, i.e. one fourth of the squared distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2754" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2754" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1gab253118245ae039b575d17bfe9ab42c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p)</argsstring>
        <name>squared_radius</name>
        <qualifiedname>CGAL::squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the smallest circle passing through <computeroutput>p</computeroutput>, i.e. <formula id="62">$ 0$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2763" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2763" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1gab3c9f8a3d059e67d623e1e1e36ed3896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r, const CGAL::Point_3&lt; Kernel &gt; &amp;s)</argsstring>
        <name>squared_radius</name>
        <qualifiedname>CGAL::squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the sphere passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>r</computeroutput> and <computeroutput>s</computeroutput> are not coplanar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2771" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2771" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1ga5967e2435b1310bd11faed446e0c8184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>squared_radius</name>
        <qualifiedname>CGAL::squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the sphere passing through the points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> and whose center is in the same plane as those three points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2782" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2782" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1gabb7bff11b3e660e7817ff903db61f28c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>squared_radius</name>
        <qualifiedname>CGAL::squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the smallest circle passing through <computeroutput>p</computeroutput>, and <computeroutput>q</computeroutput>, i.e. one fourth of the squared distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2792" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2792" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__radius__grp_1ga35e79cbee82e910f786783e6b35fed4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::squared_radius</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p)</argsstring>
        <name>squared_radius</name>
        <qualifiedname>CGAL::squared_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>compute the squared radius of the smallest circle passing through <computeroutput>p</computeroutput>, i.e. <formula id="62">$ 0$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2801" column="1" declfile="CGAL/Kernel/global_functions.h" declline="2801" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__unit__normal__grp_1ga2dd531ada431e654de186b792ad28c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound">CGAL::Vector_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
        <definition>CGAL::Vector_3&lt; Kernel &gt; CGAL::unit_normal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q, const CGAL::Point_3&lt; Kernel &gt; &amp;r)</argsstring>
        <name>unit_normal</name>
        <qualifiedname>CGAL::unit_normal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>computes the unit normal vector for the vectors <computeroutput>q-p</computeroutput> and <computeroutput>r-p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The points <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> must not be collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2813" column="16" declfile="CGAL/Kernel/global_functions.h" declline="2813" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__volume__grp_1ga4ba6790576ca34b8421e120ec7562d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::volume</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p0, const CGAL::Point_3&lt; Kernel &gt; &amp;p1, const CGAL::Point_3&lt; Kernel &gt; &amp;p2, const CGAL::Point_3&lt; Kernel &gt; &amp;p3)</argsstring>
        <name>volume</name>
        <qualifiedname>CGAL::volume</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>Computes the signed volume of the tetrahedron defined by the four points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2829" column="12" declfile="CGAL/Kernel/global_functions.h" declline="2829" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__x__equal__grp_1gab4f8fb5007b5a620bfb127f2ba322bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::x_equal</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>x_equal</name>
        <qualifiedname>CGAL::x_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>x</computeroutput>-coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2848" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2848" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x__equal__grp_1ga7517cf957b48bad706d7a871de9d0927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::x_equal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>x_equal</name>
        <qualifiedname>CGAL::x_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>x</computeroutput>-coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2856" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2856" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__y__equal__grp_1ga9d8eace6afac8a35cacd81966adbc51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::y_equal</definition>
        <argsstring>(const CGAL::Point_2&lt; Kernel &gt; &amp;p, const CGAL::Point_2&lt; Kernel &gt; &amp;q)</argsstring>
        <name>y_equal</name>
        <qualifiedname>CGAL::y_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__2" kindref="compound">CGAL::Point_2</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>y</computeroutput>-coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2876" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2876" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__y__equal__grp_1gacc77baaaac56b1344fd43f6082f4a11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::y_equal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>y_equal</name>
        <qualifiedname>CGAL::y_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>y</computeroutput>-coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2884" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2884" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__z__equal__grp_1ga70c2660284fdacf56fa7f399895ec9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::z_equal</definition>
        <argsstring>(const CGAL::Point_3&lt; Kernel &gt; &amp;p, const CGAL::Point_3&lt; Kernel &gt; &amp;q)</argsstring>
        <name>z_equal</name>
        <qualifiedname>CGAL::z_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound">CGAL::Point_3</ref>&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> have the same <computeroutput>z</computeroutput>-coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Kernel/global_functions.h" line="2903" column="6" declfile="CGAL/Kernel/global_functions.h" declline="2903" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__rational__rotation__approximation__grp_1gac7990dcba1e282368c6140c0afae456b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>RingNumberType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::rational_rotation_approximation</definition>
        <argsstring>(const RingNumberType &amp;dirx, const RingNumberType &amp;diry, RingNumberType &amp;sin_num, RingNumberType &amp;cos_num, RingNumberType &amp;denom, const RingNumberType &amp;eps_num, const RingNumberType &amp;eps_den)</argsstring>
        <name>rational_rotation_approximation</name>
        <qualifiedname>CGAL::rational_rotation_approximation</qualifiedname>
        <param>
          <type>const RingNumberType &amp;</type>
          <declname>dirx</declname>
        </param>
        <param>
          <type>const RingNumberType &amp;</type>
          <declname>diry</declname>
        </param>
        <param>
          <type>RingNumberType &amp;</type>
          <declname>sin_num</declname>
        </param>
        <param>
          <type>RingNumberType &amp;</type>
          <declname>cos_num</declname>
        </param>
        <param>
          <type>RingNumberType &amp;</type>
          <declname>denom</declname>
        </param>
        <param>
          <type>const RingNumberType &amp;</type>
          <declname>eps_num</declname>
        </param>
        <param>
          <type>const RingNumberType &amp;</type>
          <declname>eps_den</declname>
        </param>
        <briefdescription>
<para>computes integers <computeroutput>sin_num</computeroutput>, <computeroutput>cos_num</computeroutput> and <computeroutput>denom</computeroutput>, such that <computeroutput>sin_num</computeroutput>/<computeroutput>denom</computeroutput> approximates the sine of direction <formula id="79">$ ($</formula><computeroutput>dirx</computeroutput>,<computeroutput>diry</computeroutput> <formula id="80">$ )$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The difference between the sine and the approximating rational is bounded by <computeroutput>eps_num</computeroutput>/<computeroutput>eps_den</computeroutput>. <simplesect kind="pre"><para><computeroutput>eps_num != 0</computeroutput>.</para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>The approximation is based on Farey sequences as described in the rational rotation method presented by Canny and Ressler at the 8th SoCG 1992. We use a slower version which needs no division operation in the approximation.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Aff__transformation__2" kindref="compound">CGAL::Aff_transformation_2</ref>&lt;<ref refid="classKernel" kindref="compound">Kernel</ref>&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/rational_rotation.h" line="23" column="1" declfile="CGAL/rational_rotation.h" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classKernel" kindref="compound">Kernel</ref></type>
          </param>
        </templateparamlist>
        <type>Kernel::FT</type>
        <definition>Kernel::FT CGAL::squared_distance</definition>
        <argsstring>(Type1&lt; Kernel &gt; obj1, Type2&lt; Kernel &gt; obj2)</argsstring>
        <name>squared_distance</name>
        <qualifiedname>CGAL::squared_distance</qualifiedname>
        <param>
          <type>Type1&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>Type2&lt; <ref refid="classKernel" kindref="compound">Kernel</ref> &gt;</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
<para>computes the square of the Euclidean distance between two geometric objects. </para>
        </briefdescription>
        <detaileddescription>
<para>For arbitrary geometric objects <computeroutput>obj1</computeroutput> and <computeroutput>obj2</computeroutput> the squared distance is defined as the minimal <computeroutput>squared_distance(p1, p2)</computeroutput>, where <computeroutput>p1</computeroutput> is a point of <computeroutput>obj1</computeroutput> and <computeroutput>p2</computeroutput> is a point of <computeroutput>obj2</computeroutput>. Note that for objects that have an inside (a bounded region), this inside is part of the object. So, the squared distance from a point inside is zero, not the squared distance to the closest point on the boundary.</para>
<para>In 2D, the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound">Point_2</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__2" kindref="compound">Line_2</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__2" kindref="compound">Ray_2</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__2" kindref="compound">Segment_2</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Triangle__2" kindref="compound">Triangle_2</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para>as well as any combination of <computeroutput><ref refid="classKernel_1_1Point__2" kindref="compound">Kernel::Point_2</ref></computeroutput> and <computeroutput>Kernel::Weighted_point_2</computeroutput></para>
<para>In 3D, the types <computeroutput>Type1</computeroutput> and <computeroutput>Type2</computeroutput> can be any of the following:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Line__3" kindref="compound">Line_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Ray__3" kindref="compound">Ray_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__3" kindref="compound">Segment_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound">Plane_3</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para>as well as the following combinations:<itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref></computeroutput>/<computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound">Point_3</ref></computeroutput>/<computeroutput><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Weighted__point__3" kindref="compound">Weighted_point_3</ref></computeroutput>/<computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Weighted__point__3" kindref="compound">Weighted_point_3</ref></computeroutput>/<computeroutput><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound">Tetrahedron_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref></computeroutput>/<computeroutput><ref refid="classCGAL_1_1Triangle__3" kindref="compound">Triangle_3</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__compare__distance__to__point__grp" kindref="compound">CGAL::compare_distance_to_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__compare__signed__distance__to__line__grp" kindref="compound">CGAL::compare_signed_distance_to_line()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__compare__signed__distance__to__plane__grp" kindref="compound">CGAL::compare_signed_distance_to_plane()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__larger__distance__to__point__grp" kindref="compound">CGAL::has_larger_distance_to_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__larger__signed__distance__to__line__grp" kindref="compound">CGAL::has_larger_signed_distance_to_line()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__larger__signed__distance__to__plane__grp" kindref="compound">CGAL::has_larger_signed_distance_to_plane()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__smaller__distance__to__point__grp" kindref="compound">CGAL::has_smaller_distance_to_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__smaller__signed__distance__to__line__grp" kindref="compound">CGAL::has_smaller_signed_distance_to_line()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__has__smaller__signed__distance__to__plane__grp" kindref="compound">CGAL::has_smaller_signed_distance_to_plane()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/squared_distance_2.h" line="59" column="12" declfile="CGAL/squared_distance_2.h" declline="59" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Aff_transformation_2.h" line="1" column="1"/>
  </compounddef>
</doxygen>
