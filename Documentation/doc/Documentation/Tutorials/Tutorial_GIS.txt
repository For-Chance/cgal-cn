namespace CGAL {
/*!
\example Classification/gis_tutorial_example.cpp
*/

/*!

\page tuto_gis GIS（地理信息系统）
\cgalAutoToc

\author Simon Giraudot

在GIS应用中常用的传感器（如激光雷达LIDAR）会生成密集的点云数据。这类应用通常需要使用更高级的数据结构，例如不规则三角网（Triangulated Irregular Network, TIN），它可以作为数字高程模型（Digital Elevation Model, DEM）的基础，特别是用于生成数字地形模型（Digital Terrain Model, DTM）。点云数据还可以通过分类信息进行扩充，将点分为地面、植被和建筑物等用户自定义的类别。

不同文献中对某些数据结构的定义可能有所不同。在本教程中，我们采用以下术语定义：

- TIN：不规则三角网，是一种基于点在水平面上投影连接形成的二维三角剖分结构。

- DSM：数字表面模型（Digital Surface Model），表示包含建筑物和植被在内的完整扫描表面模型。我们使用TIN来存储DSM。

- DTM：数字地形模型，表示不包含建筑物和植被等地物的裸地表面模型。我们同时使用TIN和栅格来存储DTM。

- DEM：数字高程模型，是一个更广泛的术语，包括DSM和DTM。

本教程将演示以下处理流程：首先从输入的点云数据计算出以TIN形式存储的DSM。然后，过滤掉对应于建筑物立面或植被噪声的过大面片。保留对应于地面的大型连通分量。填充空洞并对获得的DEM进行重新网格化。从中生成栅格DEM和等高线。最后，执行有监督的三类别分类，将点分为植被、建筑物和地面。

\section TutorialGIS_TIN 不规则三角网（TIN）

CGAL提供了多种三角剖分数据结构和算法。TIN可以通过结合二维Delaunay三角剖分和投影特征来生成：使用点在选定平面（通常是XY平面）上的二维位置计算三角剖分结构，同时保留点的三维位置用于可视化和测量。

因此，TIN数据结构可以简单地定义如下：

\snippet Classification/gis_tutorial_example.cpp TIN DS

\section TutorialGIS_DSM 数字表面模型（DSM）

可以使用流操作符轻松地将多种格式（XYZ、OFF、PLY、LAS）的点云数据加载到`CGAL::Point_set_3`结构中。然后可以直接生成存储为TIN的DSM：

\snippet Classification/gis_tutorial_example.cpp Init DSM

由于CGAL的Delaunay三角剖分是`FaceGraph`的一个模型，因此可以直接将生成的TIN转换为`CGAL::Surface_mesh`等网格结构，并保存为这种结构支持的任何格式：

\snippet Classification/gis_tutorial_example.cpp Save DSM

\cgalFigureRef{TutorialGISFigTIN}展示了在旧金山数据集（参见\ref TutorialGIS_Reference）上计算得到的DSM示例。

\cgalFigureBegin{TutorialGISFigTIN, tin.jpg}
输入点云和输出DSM。
\cgalFigureEnd

\section TutorialGIS_DTM 数字地形模型（DTM）

生成的DSM被用作DTM计算的基础，即在过滤掉非地面点后形成另一个TIN表示的地面。

作为示例，我们提供一个简单的DTM估计方法，包含以下步骤：

1. 对面片高度进行阈值处理，去除高程突变
2. 将其他面片聚类为连通分量
3. 过滤掉小于用户定义阈值的所有分量

该算法依赖两个参数：高度阈值（对应建筑物的最小高度）和周长阈值（对应建筑物在二维投影上的最大尺寸）。

\subsection TutorialGIS_DTM_info 带信息的TIN

得益于CGAL Delaunay三角剖分灵活的API，我们的TIN可以在顶点和/或面上添加信息。在本例中，每个顶点记录输入点云中对应点的索引（这将用于后续过滤地面点），每个面则被赋予其连通分量的索引。

\snippet Classification/gis_tutorial_example.cpp TIN_with_info

\subsection TutorialGIS_DTM_components 识别连通分量

通过洪水填充算法识别连通分量：从一个种子面开始，将所有相邻面加入当前连通分量，除非它们的高度超过用户定义的阈值。

\snippet Classification/gis_tutorial_example.cpp Components

这个带有连通分量信息的TIN可以保存为彩色网格：

\snippet Classification/gis_tutorial_example.cpp Save TIN with info

\cgalFigureRef{TutorialGISFigComponents}展示了一个按连通分量着色的TIN示例。

\cgalFigureBegin{TutorialGISFigComponents, components.jpg}
按连通分量着色的TIN。超过高度阈值的面片不属于任何分量，显示为灰色。
\cgalFigureEnd

\subsection TutorialGIS_DTM_filtering 过滤

可以通过以下方式移除小于最大建筑物的分量：

\snippet Classification/gis_tutorial_example.cpp Filtering

\subsection Tutorial_DTM_hole_filling 空洞填充和重新网格化

由于简单地移除建筑物覆盖的大面积区域内的顶点会导致Delaunay面片过大，无法很好地表示DTM的3D特征，因此可以通过额外的步骤来生成更好的网格形状：移除大于阈值的面片，然后使用空洞填充算法对空洞进行三角剖分、细化和平滑处理。

以下代码片段将TIN复制到网格中，同时过滤掉过大的面片，然后识别空洞并填充除最大空洞（外部轮廓）之外的所有空洞。

\snippet Classification/gis_tutorial_example.cpp Hole filling

最后还可以进行各向同性重网格化，以生成更规则的网格，不受2D Delaunay面片形状的约束。

\snippet Classification/gis_tutorial_example.cpp Remeshing

\cgalFigureRef{TutorialGISFigProc}展示了这些不同步骤如何影响输出网格，\cgalFigureRef{TutorialGISFigDTM}展示了DTM各向同性网格。

\cgalFigureBegin{TutorialGISFigProc, dtm_proc.jpg}
原始DTM和后处理
\cgalFigureEnd

\cgalFigureBegin{TutorialGISFigDTM, dtm.jpg}
最终DTM。
\cgalFigureEnd

\section TutorialGIS_Raster 栅格化

TIN数据结构可以与重心坐标结合使用，以便在任何需要的分辨率下对顶点中嵌入的信息进行插值和栅格化高程图。

由于最后两个步骤（空洞填充和重网格化）是在3D网格上执行的，我们的DTM作为2.5D表示的假设可能不再有效。因此，我们首先使用最后计算的各向同性DTM网格的顶点重建TIN。

以下代码片段生成一个使用彩虹渐变的PPM格式（简单位图格式）高程栅格图像：

\snippet Classification/gis_tutorial_example.cpp Rastering

\cgalFigureRef{TutorialGISFigRastering}展示了一个使用彩虹渐变表示高程的栅格图像示例。

\cgalFigureBegin{TutorialGISFigRastering, raster.jpg}
使用彩虹渐变可视化高程，从浅蓝色（低值）到深红色（高值）。
\cgalFigureEnd

\section TutorialGIS_Contour 等高线生成

CGAL还可以用于提取TIN上定义函数的等值线。这里我们演示如何提取高程的等值线来构建地形图。

\subsection TutorialGIS_Contour_Extraction 构建等高线图

第一步是从三角剖分的所有面中提取每个等值线穿过该面的部分，形式为线段。以下函数用于测试一个等值是否穿过面片，并提取等值线：

\snippet Classification/gis_tutorial_example.cpp Contouring functions

利用这些函数，我们可以创建一个线段图，后续将其处理成一组折线。为此，我们使用[boost::adjacency_list](https://www.boost.org/doc/libs/1_72_0/libs/graph/doc/adjacency_list.html)结构，并维护端点位置到图顶点的映射。

以下代码计算点云最小和最大高度之间均匀分布的50个等值，并创建包含所有等值线的图：

\snippet Classification/gis_tutorial_example.cpp Contouring extraction

\subsection TutorialGIS_Contour_Splitting 分割为折线

创建图后，使用函数\link split_graph_into_polylines() `CGAL::split_graph_into_polylines()` \endlink可以轻松地将其分割为折线：

\snippet Classification/gis_tutorial_example.cpp Contouring split

该函数需要一个访问器，在开始折线、向其添加点和结束时被调用。在我们的例子中，定义这样的类很简单：

\snippet Classification/gis_tutorial_example.cpp Contouring visitor

\subsection TutorialGIS_Contour_Simplifying 简化

由于输出可能比较嘈杂，用户可能希望简化折线。CGAL提供了一个折线简化算法，可以保证简化后的折线不会相交。该算法利用`CGAL::Constrained_triangulation_plus_2`，将折线作为约束集合嵌入：

\snippet Classification/gis_tutorial_example.cpp CDT

以下代码基于到原始折线的平方距离进行简化，当没有更多顶点可以在不超过平均间距4倍的情况下移除时停止。

\snippet Classification/gis_tutorial_example.cpp Contouring simplify

\cgalFigureRef{TutorialGISFigContours}展示了等高线及其简化示例。

\cgalFigureBegin{TutorialGISFigContours, contours.png}
使用50个均匀间隔的等值生成等高线。上图：原始等高线（148k个顶点）和使用等于输入点云平均间距的容差进行简化（保留3.4%的原始折线顶点）。下图：使用4倍平均间距的容差（保留1.3%的顶点）和10倍平均间距的容差（保留0.9%的顶点）进行简化。所有情况下的折线都不相交。
\cgalFigureEnd

\section TutorialGIS_Classify 分类

CGAL提供了分类包，可用于将点云分割为用户定义的标签集。目前CGAL中可用的最先进分类器是来自ETHZ的随机森林。作为一个有监督分类器，它需要训练集。

以下代码片段展示了如何使用手动选择的训练集来训练随机森林分类器，并计算通过图割算法正则化的分类结果：

\snippet Classification/gis_tutorial_example.cpp Classification

\cgalFigureRef{TutorialGISFigClassif}展示了训练集和分类结果示例。

\cgalFigureBegin{TutorialGISFigClassif, classif_tuto.jpg}
上图：手动分类的点云切片。下图：在3个手动分类切片上训练后，通过图割正则化的分类结果。
\cgalFigureEnd

\section TutorialGIS_Code 完整代码示例

本教程中使用的所有代码片段可以组合成一个完整的GIS处理流程（需要包含正确的头文件）。我们提供了一个实现本教程所有步骤的完整代码示例。

\include Classification/gis_tutorial_example.cpp

\section TutorialGIS_Reference 参考文献

本教程基于以下CGAL包：

- \ref PkgTriangulation2Ref
- \ref PkgPointSet3Ref
- \ref PkgPointSetProcessing3Ref
- \ref PkgSurface_mesh
- \ref PkgBGLRef
- \ref PkgPolygonMeshProcessingRef
- \ref PkgPolylineSimplification2Ref
- \ref PkgClassificationRef

本教程使用的数据集来自https://www.usgs.gov/数据库，采用美国政府公共领域许可。

*/
}
