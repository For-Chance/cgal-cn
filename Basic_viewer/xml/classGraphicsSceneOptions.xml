<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classGraphicsSceneOptions" kind="class" language="C++" prot="public">
    <compoundname>GraphicsSceneOptions</compoundname>
    <includes local="no">Concepts/GraphicsSceneOptions.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type GraphicsSceneOptions::DS</definition>
        <argsstring></argsstring>
        <name>DS</name>
        <qualifiedname>GraphicsSceneOptions::DS</qualifiedname>
        <briefdescription>
<para>A data structure of CGAL. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="18" column="28" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGraphicsSceneOptions_1aa4177bc780e5c54fe17fb3354045368a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type GraphicsSceneOptions::vertex_descriptor</definition>
        <argsstring></argsstring>
        <name>vertex_descriptor</name>
        <qualifiedname>GraphicsSceneOptions::vertex_descriptor</qualifiedname>
        <briefdescription>
<para>A descriptor of vertices of <computeroutput>DS</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="23" column="28" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGraphicsSceneOptions_1afb51b413c93b2580848e2d05db89a1bf" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type GraphicsSceneOptions::edge_descriptor</definition>
        <argsstring></argsstring>
        <name>edge_descriptor</name>
        <qualifiedname>GraphicsSceneOptions::edge_descriptor</qualifiedname>
        <briefdescription>
<para>A descriptor of edges of <computeroutput>DS</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="28" column="28" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGraphicsSceneOptions_1ad75689fd10ca1c173c049770aeaabf4c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type GraphicsSceneOptions::face_descriptor</definition>
        <argsstring></argsstring>
        <name>face_descriptor</name>
        <qualifiedname>GraphicsSceneOptions::face_descriptor</qualifiedname>
        <briefdescription>
<para>A descriptor of faces of <computeroutput>DS</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="33" column="27" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGraphicsSceneOptions_1a24d254374859b51a1e1691d6c2e78cc7" prot="public" static="no" mutable="no">
        <type>std::function&lt; bool(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1aa4177bc780e5c54fe17fb3354045368a" kindref="member">vertex_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;bool(const DS &amp;, vertex_descriptor)&gt; GraphicsSceneOptions::ignore_vertex</definition>
        <argsstring></argsstring>
        <name>ignore_vertex</name>
        <qualifiedname>GraphicsSceneOptions::ignore_vertex</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns <computeroutput>true</computeroutput> if the given vertex must be ignored, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="37" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1a7352292590092c888f66c1b9aa35004f" prot="public" static="no" mutable="no">
        <type>std::function&lt; bool(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1afb51b413c93b2580848e2d05db89a1bf" kindref="member">edge_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;bool(const DS &amp;, edge_descriptor)&gt; GraphicsSceneOptions::ignore_edge</definition>
        <argsstring></argsstring>
        <name>ignore_edge</name>
        <qualifiedname>GraphicsSceneOptions::ignore_edge</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns <computeroutput>true</computeroutput> if the given edge must be ignored, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="41" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1a044dae7df0ec604af9c505ba26a2b112" prot="public" static="no" mutable="no">
        <type>std::function&lt; bool(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1ad75689fd10ca1c173c049770aeaabf4c" kindref="member">face_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;bool(const DS &amp;, face_descriptor)&gt; GraphicsSceneOptions::ignore_face</definition>
        <argsstring></argsstring>
        <name>ignore_face</name>
        <qualifiedname>GraphicsSceneOptions::ignore_face</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns <computeroutput>true</computeroutput> if the given face must be ignored, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="45" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1a4090c4b399a075d6cecf2ada59cfa450" prot="public" static="no" mutable="no">
        <type>std::function&lt; bool(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1aa4177bc780e5c54fe17fb3354045368a" kindref="member">vertex_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;bool(const DS &amp;, vertex_descriptor)&gt; GraphicsSceneOptions::is_vertex_colored</definition>
        <argsstring></argsstring>
        <name>is_vertex_colored</name>
        <qualifiedname>GraphicsSceneOptions::is_vertex_colored</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns <computeroutput>true</computeroutput> if the given vertex is colored, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> by default. For non colored vertices, this is the role of the user of a graphic scene to decide which color must be used (cf. for example <computeroutput>Basic_viewer</computeroutput>, <computeroutput>vertices_mono_color</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="50" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1ab0fa700ee3c7ec7ea9fcf3976ed967e0" prot="public" static="no" mutable="no">
        <type>std::function&lt; bool(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1afb51b413c93b2580848e2d05db89a1bf" kindref="member">edge_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;bool(const DS &amp;, edge_descriptor)&gt; GraphicsSceneOptions::is_edge_colored</definition>
        <argsstring></argsstring>
        <name>is_edge_colored</name>
        <qualifiedname>GraphicsSceneOptions::is_edge_colored</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns <computeroutput>true</computeroutput> if the given edge is colored, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>For non colored edges, this is the role of the user of a graphic scene to decide which color must be used (cf. for example <computeroutput>Basic_viewer</computeroutput>, <computeroutput>edges_mono_color</computeroutput>). Returns <computeroutput>false</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="55" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1ae1da61761d5945016843b21b4ba2d2e5" prot="public" static="no" mutable="no">
        <type>std::function&lt; bool(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1ad75689fd10ca1c173c049770aeaabf4c" kindref="member">face_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;bool(const DS &amp;, face_descriptor)&gt; GraphicsSceneOptions::is_face_colored</definition>
        <argsstring></argsstring>
        <name>is_face_colored</name>
        <qualifiedname>GraphicsSceneOptions::is_face_colored</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns <computeroutput>true</computeroutput> if the given face is colored, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>For non colored faces, this is the role of the user of a graphic scene to decide which color must be used (cf. for example <computeroutput>Basic_viewer</computeroutput>, <computeroutput>faces_mono_color</computeroutput>). Returns <computeroutput>false</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="60" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1ac97ddda5fa91b79687a3089f478f2241" prot="public" static="no" mutable="no">
        <type>std::function&lt; bool(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1ad75689fd10ca1c173c049770aeaabf4c" kindref="member">face_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;bool(const DS &amp;, face_descriptor)&gt; GraphicsSceneOptions::is_face_wireframe</definition>
        <argsstring></argsstring>
        <name>is_face_wireframe</name>
        <qualifiedname>GraphicsSceneOptions::is_face_wireframe</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns <computeroutput>true</computeroutput> if the given face is in wireframe, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="64" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1a7438dd75f0124673401a18f596bd78d7" prot="public" static="no" mutable="no">
        <type>std::function&lt; CGAL::IO::Color(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1aa4177bc780e5c54fe17fb3354045368a" kindref="member">vertex_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;CGAL::IO::Color(const DS &amp;, vertex_descriptor)&gt; GraphicsSceneOptions::vertex_color</definition>
        <argsstring></argsstring>
        <name>vertex_color</name>
        <qualifiedname>GraphicsSceneOptions::vertex_color</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns the color of the given vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>nullptr</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="68" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1a46aeb5acf38865628262ad3614f95769" prot="public" static="no" mutable="no">
        <type>std::function&lt; CGAL::IO::Color(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1afb51b413c93b2580848e2d05db89a1bf" kindref="member">edge_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;CGAL::IO::Color(const DS &amp;, edge_descriptor)&gt; GraphicsSceneOptions::edge_color</definition>
        <argsstring></argsstring>
        <name>edge_color</name>
        <qualifiedname>GraphicsSceneOptions::edge_color</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns the color of the given edge. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>nullptr</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="72" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphicsSceneOptions_1a074f658c338efad4da30dbe036861537" prot="public" static="no" mutable="no">
        <type>std::function&lt; CGAL::IO::Color(const <ref refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" kindref="member">DS</ref> &amp;, <ref refid="classGraphicsSceneOptions_1ad75689fd10ca1c173c049770aeaabf4c" kindref="member">face_descriptor</ref>)&gt;</type>
        <definition>std::function&lt;CGAL::IO::Color(const DS &amp;, face_descriptor)&gt; GraphicsSceneOptions::face_color</definition>
        <argsstring></argsstring>
        <name>face_color</name>
        <qualifiedname>GraphicsSceneOptions::face_color</qualifiedname>
        <briefdescription>
<para><computeroutput>std::function</computeroutput> that returns the color of the given face. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>nullptr</computeroutput> by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="76" column="17" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGraphicsSceneOptions_1aac5df80d0ac22c4437654f79e55301eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphicsSceneOptions::ignore_all_vertices</definition>
        <argsstring>(bool b)</argsstring>
        <name>ignore_all_vertices</name>
        <qualifiedname>GraphicsSceneOptions::ignore_all_vertices</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>ignores all vertices when <computeroutput>b</computeroutput> is <computeroutput>true</computeroutput>; otherwise ignores only vertices for which <computeroutput><ref refid="classGraphicsSceneOptions_1a24d254374859b51a1e1691d6c2e78cc7" kindref="member">ignore_vertex()</ref></computeroutput> returns <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="79" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classGraphicsSceneOptions_1a6714475acc0516b04dff22ba996111e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphicsSceneOptions::ignore_all_edges</definition>
        <argsstring>(bool b)</argsstring>
        <name>ignore_all_edges</name>
        <qualifiedname>GraphicsSceneOptions::ignore_all_edges</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>ignores all edges when <computeroutput>b</computeroutput> is <computeroutput>true</computeroutput>; otherwise ignores only edges for which <computeroutput><ref refid="classGraphicsSceneOptions_1a7352292590092c888f66c1b9aa35004f" kindref="member">ignore_edge()</ref></computeroutput> returns <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="82" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classGraphicsSceneOptions_1a4c60091012e0dc8c862942c19b8ad680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphicsSceneOptions::ignore_all_faces</definition>
        <argsstring>(bool b)</argsstring>
        <name>ignore_all_faces</name>
        <qualifiedname>GraphicsSceneOptions::ignore_all_faces</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>ignores all faces when <computeroutput>b</computeroutput> is <computeroutput>true</computeroutput>; otherwise ignores only faces for which <computeroutput><ref refid="classGraphicsSceneOptions_1a044dae7df0ec604af9c505ba26a2b112" kindref="member">ignore_face()</ref></computeroutput> returns <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/GraphicsSceneOptions.h" line="85" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classGraphicsSceneOptions" kindref="compound">GraphicsSceneOptions</ref></computeroutput> defines data and methods used to tune the way that the cells of a given data structure of CGAL are considered for drawing or to be added into a graphics scene. </para>
    </briefdescription>
    <detaileddescription>
<para>The different <computeroutput>std::function</computeroutput> can be modified to change for example the behavior of the drawing.</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><ref refid="structCGAL_1_1Graphics__scene__options" kindref="compound"><computeroutput>CGAL::Graphics_scene_options&lt;DS, VertexDescriptor, EdgeDescriptor, FaceDescriptor&gt;</computeroutput></ref> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/GraphicsSceneOptions.h" line="12" column="1" bodyfile="Concepts/GraphicsSceneOptions.h" bodystart="13" bodyend="86"/>
    <listofallmembers>
      <member refid="classGraphicsSceneOptions_1a9ec4e632508c741f6af1ba535ac4afca" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>DS</name></member>
      <member refid="classGraphicsSceneOptions_1a46aeb5acf38865628262ad3614f95769" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>edge_color</name></member>
      <member refid="classGraphicsSceneOptions_1afb51b413c93b2580848e2d05db89a1bf" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>edge_descriptor</name></member>
      <member refid="classGraphicsSceneOptions_1a074f658c338efad4da30dbe036861537" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>face_color</name></member>
      <member refid="classGraphicsSceneOptions_1ad75689fd10ca1c173c049770aeaabf4c" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>face_descriptor</name></member>
      <member refid="classGraphicsSceneOptions_1a6714475acc0516b04dff22ba996111e8" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>ignore_all_edges</name></member>
      <member refid="classGraphicsSceneOptions_1a4c60091012e0dc8c862942c19b8ad680" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>ignore_all_faces</name></member>
      <member refid="classGraphicsSceneOptions_1aac5df80d0ac22c4437654f79e55301eb" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>ignore_all_vertices</name></member>
      <member refid="classGraphicsSceneOptions_1a7352292590092c888f66c1b9aa35004f" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>ignore_edge</name></member>
      <member refid="classGraphicsSceneOptions_1a044dae7df0ec604af9c505ba26a2b112" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>ignore_face</name></member>
      <member refid="classGraphicsSceneOptions_1a24d254374859b51a1e1691d6c2e78cc7" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>ignore_vertex</name></member>
      <member refid="classGraphicsSceneOptions_1ab0fa700ee3c7ec7ea9fcf3976ed967e0" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>is_edge_colored</name></member>
      <member refid="classGraphicsSceneOptions_1ae1da61761d5945016843b21b4ba2d2e5" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>is_face_colored</name></member>
      <member refid="classGraphicsSceneOptions_1ac97ddda5fa91b79687a3089f478f2241" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>is_face_wireframe</name></member>
      <member refid="classGraphicsSceneOptions_1a4090c4b399a075d6cecf2ada59cfa450" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>is_vertex_colored</name></member>
      <member refid="classGraphicsSceneOptions_1a7438dd75f0124673401a18f596bd78d7" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>vertex_color</name></member>
      <member refid="classGraphicsSceneOptions_1aa4177bc780e5c54fe17fb3354045368a" prot="public" virt="non-virtual"><scope>GraphicsSceneOptions</scope><name>vertex_descriptor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
