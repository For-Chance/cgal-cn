<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgBarycentricCoordinates2RefFunctions" kind="group">
    <compoundname>PkgBarycentricCoordinates2RefFunctions</compoundname>
    <title>Free Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1ga4724a05781aa56db0faff8cd3013c924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VertexRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; OutIterator, bool &gt;</type>
        <definition>std::pair&lt; OutIterator, bool &gt; CGAL::Barycentric_coordinates::boundary_coordinates_2</definition>
        <argsstring>(const VertexRange &amp;polygon, const typename GeomTraits::Point_2 &amp;query, OutIterator c_begin, const GeomTraits &amp;traits, const PointMap point_map)</argsstring>
        <name>boundary_coordinates_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::boundary_coordinates_2</qualifiedname>
        <param>
          <type>const VertexRange &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>c_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>computes 2D boundary coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes boundary barycentric coordinates at a given <computeroutput>query</computeroutput> point with respect to the vertices of a simple <computeroutput>polygon</computeroutput>, that is one coordinate per vertex. The coordinates are stored in a destination range beginning at <computeroutput>c_begin</computeroutput>.</para>
<para>If <computeroutput>query</computeroutput> is at the vertex, the corresponding coordinate is set to one, while all other coordinates are zero. If <computeroutput>query</computeroutput> is on the edge, the two corresponding coordinates are segment coordinates, while all other coordinates are set to zero. If <computeroutput>query</computeroutput> is not on the boundary, all the coordinates are set to zero.</para>
<para>Internally, <computeroutput><ref refid="group__PkgBarycentricCoordinates2RefFunctions_1gab856ca68d37f58e6cdf74c8aac6f4245" kindref="member">segment_coordinates_2()</ref></computeroutput> are used.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VertexRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is <computeroutput>VertexRange::value_type</computeroutput> and value type is <computeroutput>GeomTraits::Point_2</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>VertexRange</computeroutput> with 2D points, which form a simple polygon</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed coordinates</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point_map</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>PointMap</computeroutput> that maps a vertex from <computeroutput>polygon</computeroutput> to <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last coordinate stored + the flag indicating whether the query point belongs to the polygon boundary</para>
</simplesect>
<simplesect kind="pre"><para>polygon.size() &gt;= 3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/boundary_coordinates_2.h" line="82" column="13" bodyfile="CGAL/Barycentric_coordinates_2/boundary_coordinates_2.h" bodystart="82" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1ga9a6e1dc1b7208e2a0baf321616b3f229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VertexRange</type>
          </param>
          <param>
            <type>typename Query_2</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename PointMap</type>
            <defval><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;Query_2&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; OutIterator, bool &gt;</type>
        <definition>std::pair&lt; OutIterator, bool &gt; CGAL::Barycentric_coordinates::boundary_coordinates_2</definition>
        <argsstring>(const VertexRange &amp;polygon, const Query_2 &amp;query, OutIterator c_begin, const PointMap point_map=PointMap())</argsstring>
        <name>boundary_coordinates_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::boundary_coordinates_2</qualifiedname>
        <param>
          <type>const VertexRange &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const Query_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>c_begin</declname>
        </param>
        <param>
          <type>const PointMap</type>
          <declname>point_map</declname>
          <defval>PointMap()</defval>
        </param>
        <briefdescription>
<para>computes 2D boundary coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overload of the function <computeroutput>boundary_coordinates_2</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VertexRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Query_2</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classKernel_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is <computeroutput>VertexRange::value_type</computeroutput> and value type is <computeroutput>Query_2</computeroutput>. The default is <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>VertexRange</computeroutput> with 2D points, which form a simple polygon</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed coordinates</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point_map</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>PointMap</computeroutput> that maps a vertex from <computeroutput>polygon</computeroutput> to <computeroutput>Query_2</computeroutput>; the default initialization is provided</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last coordinate stored + the flag indicating whether the query point belongs to the polygon boundary</para>
</simplesect>
<simplesect kind="pre"><para>polygon.size() &gt;= 3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/boundary_coordinates_2.h" line="146" column="13" bodyfile="CGAL/Barycentric_coordinates_2/boundary_coordinates_2.h" bodystart="146" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1gafa8833d919e532373b01c9ca09d9a0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Barycentric_coordinates::discrete_harmonic_weights_2</definition>
        <argsstring>(const PointRange &amp;polygon, const typename GeomTraits::Point_2 &amp;query, OutIterator w_begin, const GeomTraits &amp;traits, const Computation_policy_2 policy=Computation_policy_2::FAST_WITH_EDGE_CASES)</argsstring>
        <name>discrete_harmonic_weights_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::discrete_harmonic_weights_2</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>w_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const Computation_policy_2</type>
          <declname>policy</declname>
          <defval>Computation_policy_2::FAST_WITH_EDGE_CASES</defval>
        </param>
        <briefdescription>
<para>computes 2D discrete harmonic weights. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes 2D discrete harmonic weights at a given <computeroutput>query</computeroutput> point with respect to the vertices of a strictly convex <computeroutput>polygon</computeroutput>, that is one weight per vertex. The weights are stored in a destination range beginning at <computeroutput>w_begin</computeroutput>.</para>
<para>Internally, the class <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1Discrete__harmonic__coordinates__2" kindref="compound">Discrete_harmonic_coordinates_2</ref></computeroutput> is used. If one wants to process multiple query points, it is better to use that class. When using the free function, internal memory is allocated for each query point, while when using the class, it is allocated only once, which is much more efficient. However, for a few query points, it is easier to use this function. It can also be used when the processing time is not a concern.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> and value type is <computeroutput>GeomTraits::Point_2</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>PointRange</computeroutput> with 2D points, which form a strictly convex polygon</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed weights</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the <computeroutput>Computation_policy_2</computeroutput>; the default is <computeroutput><ref refid="namespaceCGAL_1_1Barycentric__coordinates_1a478bbcec416216b2274ee4b4e97b0e6cac2ce1f5e0688bb715ade15feb7cbe0dd" kindref="member">Computation_policy_2::FAST_WITH_EDGE_CASES</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last weight stored</para>
</simplesect>
<simplesect kind="pre"><para>polygon.size() &gt;= 3 </para>
</simplesect>
<simplesect kind="pre"><para>polygon is simple </para>
</simplesect>
<simplesect kind="pre"><para>polygon is strictly convex </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/Discrete_harmonic_coordinates_2.h" line="432" column="15" bodyfile="CGAL/Barycentric_coordinates_2/Discrete_harmonic_coordinates_2.h" bodystart="432" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1ga5193aef30c20b3cba4a654d790104956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Barycentric_coordinates::discrete_harmonic_coordinates_2</definition>
        <argsstring>(const PointRange &amp;polygon, const typename GeomTraits::Point_2 &amp;query, OutIterator c_begin, const GeomTraits &amp;traits, const Computation_policy_2 policy=Computation_policy_2::PRECISE_WITH_EDGE_CASES)</argsstring>
        <name>discrete_harmonic_coordinates_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::discrete_harmonic_coordinates_2</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>c_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const Computation_policy_2</type>
          <declname>policy</declname>
          <defval>Computation_policy_2::PRECISE_WITH_EDGE_CASES</defval>
        </param>
        <briefdescription>
<para>computes 2D discrete harmonic coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes 2D discrete harmonic coordinates at a given <computeroutput>query</computeroutput> point with respect to the vertices of a strictly convex <computeroutput>polygon</computeroutput>, that is one coordinate per vertex. The coordinates are stored in a destination range beginning at <computeroutput>c_begin</computeroutput>.</para>
<para>Internally, the class <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1Discrete__harmonic__coordinates__2" kindref="compound">Discrete_harmonic_coordinates_2</ref></computeroutput> is used. If one wants to process multiple query points, it is better to use that class. When using the free function, internal memory is allocated for each query point, while when using the class, it is allocated only once, which is much more efficient. However, for a few query points, it is easier to use this function. It can also be used when the processing time is not a concern.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> and value type is <computeroutput>GeomTraits::Point_2</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>PointRange</computeroutput> with 2D points, which form a strictly convex polygon</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed coordinates</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the <computeroutput>Computation_policy_2</computeroutput>; the default is <computeroutput><ref refid="namespaceCGAL_1_1Barycentric__coordinates_1a478bbcec416216b2274ee4b4e97b0e6ca3842e7673b7db161a2821dd8c72cffae" kindref="member">Computation_policy_2::PRECISE_WITH_EDGE_CASES</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last coordinate stored</para>
</simplesect>
<simplesect kind="pre"><para>polygon.size() &gt;= 3 </para>
</simplesect>
<simplesect kind="pre"><para>polygon is simple </para>
</simplesect>
<simplesect kind="pre"><para>polygon is strictly convex </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/Discrete_harmonic_coordinates_2.h" line="519" column="15" bodyfile="CGAL/Barycentric_coordinates_2/Discrete_harmonic_coordinates_2.h" bodystart="519" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1gafbdbabfb7975c977d28dc3850b7bac2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Barycentric_coordinates::mean_value_weights_2</definition>
        <argsstring>(const PointRange &amp;polygon, const typename GeomTraits::Point_2 &amp;query, OutIterator w_begin, const GeomTraits &amp;traits, const Computation_policy_2 policy=Computation_policy_2::FAST_WITH_EDGE_CASES)</argsstring>
        <name>mean_value_weights_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::mean_value_weights_2</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>w_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const Computation_policy_2</type>
          <declname>policy</declname>
          <defval>Computation_policy_2::FAST_WITH_EDGE_CASES</defval>
        </param>
        <briefdescription>
<para>computes 2D mean value weights. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes 2D mean value weights at a given <computeroutput>query</computeroutput> point with respect to the vertices of a simple <computeroutput>polygon</computeroutput>, that is one weight per vertex. The weights are stored in a destination range beginning at <computeroutput>w_begin</computeroutput>.</para>
<para>Internally, the class <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1Mean__value__coordinates__2" kindref="compound">Mean_value_coordinates_2</ref></computeroutput> is used. If one wants to process multiple query points, it is better to use that class. When using the free function, internal memory is allocated for each query point, while when using the class, it is allocated only once, which is much more efficient. However, for a few query points, it is easier to use this function. It can also be used when the processing time is not a concern.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> and value type is <computeroutput>GeomTraits::Point_2</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>PointRange</computeroutput> with 2D points, which form a simple polygon</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed weights</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the <computeroutput>Computation_policy_2</computeroutput>; the default is <computeroutput><ref refid="namespaceCGAL_1_1Barycentric__coordinates_1a478bbcec416216b2274ee4b4e97b0e6cac2ce1f5e0688bb715ade15feb7cbe0dd" kindref="member">Computation_policy_2::FAST_WITH_EDGE_CASES</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last weight stored</para>
</simplesect>
<simplesect kind="pre"><para>polygon.size() &gt;= 3 </para>
</simplesect>
<simplesect kind="pre"><para>polygon is simple </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/Mean_value_coordinates_2.h" line="472" column="15" bodyfile="CGAL/Barycentric_coordinates_2/Mean_value_coordinates_2.h" bodystart="472" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1gad9337f53ea56d65708bb42e4ee3415aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Barycentric_coordinates::mean_value_coordinates_2</definition>
        <argsstring>(const PointRange &amp;polygon, const typename GeomTraits::Point_2 &amp;query, OutIterator c_begin, const GeomTraits &amp;traits, const Computation_policy_2 policy=Computation_policy_2::PRECISE_WITH_EDGE_CASES)</argsstring>
        <name>mean_value_coordinates_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::mean_value_coordinates_2</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>c_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const Computation_policy_2</type>
          <declname>policy</declname>
          <defval>Computation_policy_2::PRECISE_WITH_EDGE_CASES</defval>
        </param>
        <briefdescription>
<para>computes 2D mean value coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes 2D mean value coordinates at a given <computeroutput>query</computeroutput> point with respect to the vertices of a simple <computeroutput>polygon</computeroutput>, that is one coordinate per vertex. The coordinates are stored in a destination range beginning at <computeroutput>c_begin</computeroutput>.</para>
<para>Internally, the class <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1Mean__value__coordinates__2" kindref="compound">Mean_value_coordinates_2</ref></computeroutput> is used. If one wants to process multiple query points, it is better to use that class. When using the free function, internal memory is allocated for each query point, while when using the class, it is allocated only once, which is much more efficient. However, for a few query points, it is easier to use this function. It can also be used when the processing time is not a concern.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> and value type is <computeroutput>GeomTraits::Point_2</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>PointRange</computeroutput> with 2D points, which form a simple polygon</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed coordinates</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the <computeroutput>Computation_policy_2</computeroutput>; the default is <computeroutput><ref refid="namespaceCGAL_1_1Barycentric__coordinates_1a478bbcec416216b2274ee4b4e97b0e6ca3842e7673b7db161a2821dd8c72cffae" kindref="member">Computation_policy_2::PRECISE_WITH_EDGE_CASES</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last coordinate stored</para>
</simplesect>
<simplesect kind="pre"><para>polygon.size() &gt;= 3 </para>
</simplesect>
<simplesect kind="pre"><para>polygon is simple </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/Mean_value_coordinates_2.h" line="558" column="15" bodyfile="CGAL/Barycentric_coordinates_2/Mean_value_coordinates_2.h" bodystart="558" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1gab856ca68d37f58e6cdf74c8aac6f4245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Barycentric_coordinates::segment_coordinates_2</definition>
        <argsstring>(const typename GeomTraits::Point_2 &amp;p0, const typename GeomTraits::Point_2 &amp;p1, const typename GeomTraits::Point_2 &amp;query, OutIterator c_begin, const GeomTraits &amp;traits)</argsstring>
        <name>segment_coordinates_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::segment_coordinates_2</qualifiedname>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>c_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes segment coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes barycentric coordinates at a given <computeroutput>query</computeroutput> point with respect to the end points <computeroutput>p0</computeroutput> and <computeroutput>p1</computeroutput> of a segment that is one coordinate per end point. The coordinates are stored in a destination range beginning at <computeroutput>c_begin</computeroutput>.</para>
<para>After the coordinates <formula id="63">$b_0$</formula> and <formula id="64">$b_1$</formula> are computed, the query point <formula id="5">$q$</formula> can be obtained as <formula id="65">$q = b_0p_0 + b_1p_1$</formula>. If <formula id="5">$q$</formula> does not belong to the line through <formula id="66">$p_0$</formula> and <formula id="67">$p_1$</formula>, it is projected onto this line, and only then the coordinates are computed. See more details in the user manual <ref refid="index_1compute_seg_coord" kindref="member">here</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p0</parametername>
</parameternamelist>
<parameterdescription>
<para>the first vertex of a segment</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>the second vertex of a segment</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed coordinates</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last coordinate stored</para>
</simplesect>
<simplesect kind="pre"><para>p0 != p1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/segment_coordinates_2.h" line="70" column="15" bodyfile="CGAL/Barycentric_coordinates_2/segment_coordinates_2.h" bodystart="70" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1gaa378786f8996dbcefe7923ebb711e4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Barycentric_coordinates::triangle_coordinates_2</definition>
        <argsstring>(const typename GeomTraits::Point_2 &amp;p0, const typename GeomTraits::Point_2 &amp;p1, const typename GeomTraits::Point_2 &amp;p2, const typename GeomTraits::Point_2 &amp;query, OutIterator c_begin, const GeomTraits &amp;traits)</argsstring>
        <name>triangle_coordinates_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::triangle_coordinates_2</qualifiedname>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>c_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes triangle coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes barycentric coordinates at a given <computeroutput>query</computeroutput> point with respect to the points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, and <computeroutput>p2</computeroutput>, which form a triangle, that is one coordinate per point. The coordinates are stored in a destination range beginning at <computeroutput>c_begin</computeroutput>.</para>
<para>After the coordinates <formula id="63">$b_0$</formula>, <formula id="64">$b_1$</formula>, and <formula id="68">$b_2$</formula> are computed, the query point <formula id="5">$q$</formula> can be obtained as <formula id="69">$q = b_0p_0 + b_1p_1 + b_2p_2$</formula>. See more details in the user manual <ref refid="index_1compute_tri_coord" kindref="member">here</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p0</parametername>
</parameternamelist>
<parameterdescription>
<para>the first vertex of a triangle</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>the second vertex of a triangle</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>the third vertex of a triangle</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed coordinates</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last coordinate stored</para>
</simplesect>
<simplesect kind="pre"><para>area_2(p0, p1, p2) != 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/triangle_coordinates_2.h" line="72" column="15" bodyfile="CGAL/Barycentric_coordinates_2/triangle_coordinates_2.h" bodystart="72" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1ga9489ed3ac8913fdaa9fa8d5d4cb22258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Barycentric_coordinates::wachspress_weights_2</definition>
        <argsstring>(const PointRange &amp;polygon, const typename GeomTraits::Point_2 &amp;query, OutIterator w_begin, const GeomTraits &amp;traits, const Computation_policy_2 policy=Computation_policy_2::FAST_WITH_EDGE_CASES)</argsstring>
        <name>wachspress_weights_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::wachspress_weights_2</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>w_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const Computation_policy_2</type>
          <declname>policy</declname>
          <defval>Computation_policy_2::FAST_WITH_EDGE_CASES</defval>
        </param>
        <briefdescription>
<para>computes 2D Wachspress weights. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes 2D Wachspress weights at a given <computeroutput>query</computeroutput> point with respect to the vertices of a strictly convex <computeroutput>polygon</computeroutput>, that is one weight per vertex. The weights are stored in a destination range beginning at <computeroutput>w_begin</computeroutput>.</para>
<para>Internally, the class <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1Wachspress__coordinates__2" kindref="compound">Wachspress_coordinates_2</ref></computeroutput> is used. If one wants to process multiple query points, it is better to use that class. When using the free function, internal memory is allocated for each query point, while when using the class, it is allocated only once, which is much more efficient. However, for a few query points, it is easier to use this function. It can also be used when the processing time is not a concern.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> and value type is <computeroutput>GeomTraits::Point_2</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>PointRange</computeroutput> with 2D points, which form a strictly convex polygon</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed weights</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the <computeroutput>Computation_policy_2</computeroutput>; the default is <computeroutput><ref refid="namespaceCGAL_1_1Barycentric__coordinates_1a478bbcec416216b2274ee4b4e97b0e6cac2ce1f5e0688bb715ade15feb7cbe0dd" kindref="member">Computation_policy_2::FAST_WITH_EDGE_CASES</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last weight stored</para>
</simplesect>
<simplesect kind="pre"><para>polygon.size() &gt;= 3 </para>
</simplesect>
<simplesect kind="pre"><para>polygon is simple </para>
</simplesect>
<simplesect kind="pre"><para>polygon is strictly convex </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/Wachspress_coordinates_2.h" line="420" column="15" bodyfile="CGAL/Barycentric_coordinates_2/Wachspress_coordinates_2.h" bodystart="420" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBarycentricCoordinates2RefFunctions_1ga2b78df5ac4952fef00a0f132c2ab946f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename GeomTraits</type>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Barycentric_coordinates::wachspress_coordinates_2</definition>
        <argsstring>(const PointRange &amp;polygon, const typename GeomTraits::Point_2 &amp;query, OutIterator c_begin, const GeomTraits &amp;traits, const Computation_policy_2 policy=Computation_policy_2::PRECISE_WITH_EDGE_CASES)</argsstring>
        <name>wachspress_coordinates_2</name>
        <qualifiedname>CGAL::Barycentric_coordinates::wachspress_coordinates_2</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const typename GeomTraits::Point_2 &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>c_begin</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const Computation_policy_2</type>
          <declname>policy</declname>
          <defval>Computation_policy_2::PRECISE_WITH_EDGE_CASES</defval>
        </param>
        <briefdescription>
<para>computes 2D Wachspress coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes 2D Wachspress coordinates at a given <computeroutput>query</computeroutput> point with respect to the vertices of a strictly convex <computeroutput>polygon</computeroutput>, that is one coordinate per vertex. The coordinates are stored in a destination range beginning at <computeroutput>c_begin</computeroutput>.</para>
<para>Internally, the class <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1Wachspress__coordinates__2" kindref="compound">Wachspress_coordinates_2</ref></computeroutput> is used. If one wants to process multiple query points, it is better to use that class. When using the free function, internal memory is allocated for each query point, while when using the class, it is allocated only once, which is much more efficient. However, for a few query points, it is easier to use this function. It can also be used when the processing time is not a concern.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> and value type is <computeroutput>GeomTraits::Point_2</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts values of type <computeroutput>GeomTraits::FT</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Barycentric__coordinates_1_1BarycentricTraits__2" kindref="compound">BarycentricTraits_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>PointRange</computeroutput> with 2D points, which form a strictly convex polygon</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a query point</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the beginning of the destination range with the computed coordinates</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits class with geometric objects, predicates, and constructions; this parameter can be omitted if the traits class can be deduced from the point type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the <computeroutput>Computation_policy_2</computeroutput>; the default is <computeroutput><ref refid="namespaceCGAL_1_1Barycentric__coordinates_1a478bbcec416216b2274ee4b4e97b0e6ca3842e7673b7db161a2821dd8c72cffae" kindref="member">Computation_policy_2::PRECISE_WITH_EDGE_CASES</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last coordinate stored</para>
</simplesect>
<simplesect kind="pre"><para>polygon.size() &gt;= 3 </para>
</simplesect>
<simplesect kind="pre"><para>polygon is simple </para>
</simplesect>
<simplesect kind="pre"><para>polygon is strictly convex </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Barycentric_coordinates_2/Wachspress_coordinates_2.h" line="507" column="15" bodyfile="CGAL/Barycentric_coordinates_2/Wachspress_coordinates_2.h" bodystart="507" bodyend="518"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Free functions to compute barycentric weights and coordinates. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
