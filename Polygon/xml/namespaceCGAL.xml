<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1General__polygon__with__holes__2" prot="public">CGAL::General_polygon_with_holes_2</innerclass>
    <innerclass refid="classCGAL_1_1Multipolygon__with__holes__2" prot="public">CGAL::Multipolygon_with_holes_2</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__2" prot="public">CGAL::Polygon_2</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__2____Segment__ptr" prot="public">CGAL::Polygon_2__Segment_ptr</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__2__const__edge__circulator" prot="public">CGAL::Polygon_2_const_edge_circulator</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__2__edge__iterator" prot="public">CGAL::Polygon_2_edge_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__circulator" prot="public">CGAL::Polygon_circulator</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__traits__2" prot="public">CGAL::Polygon_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__with__holes__2" prot="public">CGAL::Polygon_with_holes_2</innerclass>
    <innernamespace refid="namespaceCGAL_1_1draw__function__for__p2">CGAL::draw_function_for_p2</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1draw__function__for__ph2__with__holes">CGAL::draw_function_for_ph2_with_holes</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1i__polygon">CGAL::i_polygon</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgDrawMultipolygonWithHoles2_1ga7a72d863f3aeeaa8849843d80a148fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MPH</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const MPH &amp;aph)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const MPH &amp;</type>
          <declname>aph</declname>
        </param>
        <briefdescription>
<para>opens a new window and draws <computeroutput>aph</computeroutput>, an instance of the <computeroutput><ref refid="classCGAL_1_1Multipolygon__with__holes__2" kindref="compound">CGAL::Multipolygon_with_holes_2</ref></computeroutput> class. </para>
        </briefdescription>
        <detaileddescription>
<para>A call to this function is blocking, that is the program continues as soon as the user closes the window. This function requires <computeroutput>CGAL_Qt6</computeroutput>, and is only available if the macro <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput> is defined. Linking with the cmake target <computeroutput>CGAL::CGAL_Basic_viewer</computeroutput> will link with <computeroutput>CGAL_Qt6</computeroutput> and add the definition <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PH</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of the <computeroutput><ref refid="classCGAL_1_1Multipolygon__with__holes__2" kindref="compound">CGAL::Multipolygon_with_holes_2</ref></computeroutput> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aph</parametername>
</parameternamelist>
<parameterdescription>
<para>the multipolygon with holes to draw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_multipolygon_with_holes_2.h" line="41" column="6" declfile="CGAL/draw_multipolygon_with_holes_2.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygon2_1ga56a8df4559b043b885be909514e6069f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const P &amp;p, const GSOptions &amp;gso)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>opens a new window and draws a 2D polygon. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the drawing are taken from the optional graphics scene options parameter.</para>
<para>A call to this function blocks the execution of the program until the drawing window is closed. This function requires <computeroutput>CGAL_Qt6</computeroutput>, and is only available if the macro <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput> is defined. Linking with the cmake target <computeroutput>CGAL::CGAL_Basic_viewer</computeroutput> will link with <computeroutput>CGAL_Qt6</computeroutput> and add the definition <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>GraphicsSceneOptions</computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class T, class C, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::draw(const CGAL::Polygon_2&lt;T, C&gt;&amp; p, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_2.h" line="54" column="6" declfile="CGAL/draw_polygon_2.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygon2_1gabd190ae8e99ec09b3222cf48e7423476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const P &amp;p)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawMultipolygonWithHoles2_1ga7a72d863f3aeeaa8849843d80a148fed" kindref="member">CGAL::draw</ref>(p, Graphics_scene_options{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_2.h" line="62" column="8" declfile="CGAL/draw_polygon_2.h" declline="62" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygon2_1ga0cd9860fd91978ad7f95d1f802cde68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const P &amp;p, CGAL::Graphics_scene &amp;gs, const GSOptions &amp;gso)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>adds the vertices, edges and faces of <computeroutput>p</computeroutput> into the given graphic scene <computeroutput>gs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the cells are taken from the optional graphics scene options parameter <computeroutput>gso</computeroutput>. Note that <computeroutput>gs</computeroutput> is not cleared before being filled (to enable to draw several data structures in the same basic viewer).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>GraphicsSceneOptions</computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2D polygon to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gs</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphic scene to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class T, class C, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::add_to_graphics_scene(const CGAL::Polygon_2&lt;T, C&gt;&amp; p, CGAL::Graphics_scene&amp; gs, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_2.h" line="87" column="6" declfile="CGAL/draw_polygon_2.h" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygon2_1gab8a72ab4d5af412ba0a0a4e82dcc0903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const P &amp;p, CGAL::Graphics_scene &amp;gs)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawPolygon2_1ga0cd9860fd91978ad7f95d1f802cde68e" kindref="member">CGAL::add_to_graphics_scene</ref>(p, gs, Graphics_scene_options{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_2.h" line="97" column="6" declfile="CGAL/draw_polygon_2.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="draw__polygon__2_8h_1ad7a60c0a6e168ef61d69e514fca6356d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const CGAL_P2_TYPE &amp;ap2, CGAL::Graphics_scene &amp;graphics_scene, const GSOptions &amp;gso)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const CGAL_P2_TYPE &amp;</type>
          <declname>ap2</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>graphics_scene</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_2.h" line="161" column="6" bodyfile="CGAL/draw_polygon_2.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="draw__polygon__2_8h_1a11b109baeff1c62b897eddfd2abb0ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const CGAL_P2_TYPE &amp;ap2, CGAL::Graphics_scene &amp;graphics_scene)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const CGAL_P2_TYPE &amp;</type>
          <declname>ap2</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>graphics_scene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_2.h" line="167" column="6" bodyfile="CGAL/draw_polygon_2.h" bodystart="167" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygonWithHoles2_1ga2764f312546fdfa684e01491a2a39ca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PH</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const PH &amp;ph, const GSOptions &amp;gso)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const PH &amp;</type>
          <declname>ph</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>opens a new window and draws a 2D polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the drawing are taken from the optional graphics scene options parameter.</para>
<para>A call to this function blocks the execution of the program until the drawing window is closed. This function requires <computeroutput>CGAL_Qt6</computeroutput>, and is only available if the macro <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput> is defined. Linking with the cmake target <computeroutput>CGAL::CGAL_Basic_viewer</computeroutput> will link with <computeroutput>CGAL_Qt6</computeroutput> and add the definition <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PH</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">CGAL::Polygon_with_holes_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>GraphicsSceneOptions</computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ph</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon with holes to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class T, class C, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::draw(const CGAL::Polygon_with_holes_2&lt;T, C&gt;&amp; ph, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_with_holes_2.h" line="54" column="6" declfile="CGAL/draw_polygon_with_holes_2.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygonWithHoles2_1ga193d9e80d08f50d95155c1939ff8bbd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PH</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const PH &amp;ph)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const PH &amp;</type>
          <declname>ph</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawMultipolygonWithHoles2_1ga7a72d863f3aeeaa8849843d80a148fed" kindref="member">CGAL::draw</ref>(ph, Graphics_scene_options{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_with_holes_2.h" line="62" column="8" declfile="CGAL/draw_polygon_with_holes_2.h" declline="62" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygonWithHoles2_1ga11d7e86ba194061e726b11b642a01861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PH</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const PH &amp;ph, CGAL::Graphics_scene &amp;gs, const GSOptions &amp;gso)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const PH &amp;</type>
          <declname>ph</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>adds the vertices, edges and faces of <computeroutput>ph</computeroutput> into the given graphic scene <computeroutput>gs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the cells are taken from the optional graphics scene options parameter <computeroutput>gso</computeroutput>. Note that <computeroutput>gs</computeroutput> is not cleared before being filled (to enable to draw several data structures in the same basic viewer).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PH</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">CGAL::Polygon_with_holes_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>GraphicsSceneOptions</computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ph</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon with holes to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gs</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphic scene to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class T, class C, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::add_to_graphics_scene(const CGAL::Polygon_with_holes_2&lt;T, C&gt;&amp; ph, CGAL::Graphics_scene&amp; gs, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_with_holes_2.h" line="87" column="6" declfile="CGAL/draw_polygon_with_holes_2.h" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygonWithHoles2_1ga8119276239bb0e45faead3ca7f9f2f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PH</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const PH &amp;ph, CGAL::Graphics_scene &amp;gs)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const PH &amp;</type>
          <declname>ph</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawPolygon2_1ga0cd9860fd91978ad7f95d1f802cde68e" kindref="member">CGAL::add_to_graphics_scene</ref>(ph, gs, Graphics_scene_options{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_with_holes_2.h" line="97" column="6" declfile="CGAL/draw_polygon_with_holes_2.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="draw__polygon__with__holes__2_8h_1ade829e441cbae618d279f87042af7e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const CGAL_P2_WITH_HOLES_TYPE &amp;p2, CGAL::Graphics_scene &amp;graphics_scene, const GSOptions &amp;gs_options)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const CGAL_P2_WITH_HOLES_TYPE &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>graphics_scene</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gs_options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_with_holes_2.h" line="195" column="6" bodyfile="CGAL/draw_polygon_with_holes_2.h" bodystart="195" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="draw__polygon__with__holes__2_8h_1ae68818cf64a168512b794ee379eb2820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const CGAL_P2_WITH_HOLES_TYPE &amp;p2, CGAL::Graphics_scene &amp;graphics_scene)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const CGAL_P2_WITH_HOLES_TYPE &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>graphics_scene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_with_holes_2.h" line="204" column="6" bodyfile="CGAL/draw_polygon_with_holes_2.h" bodystart="204" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="Multipolygon__with__holes__2_8h_1a31953c56c1bfb18623a12248f4fbfff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator==</definition>
        <argsstring>(const Multipolygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p1, const Multipolygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p2)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Multipolygon__with__holes__2" kindref="compound">Multipolygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Multipolygon__with__holes__2" kindref="compound">Multipolygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Multipolygon_with_holes_2.h" line="130" column="6" bodyfile="CGAL/Multipolygon_with_holes_2.h" bodystart="130" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="Multipolygon__with__holes__2_8h_1a6caa03ec12f8607d2bc8cf2eb1b6fed9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator!=</definition>
        <argsstring>(const Multipolygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p1, const Multipolygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Multipolygon__with__holes__2" kindref="compound">Multipolygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Multipolygon__with__holes__2" kindref="compound">Multipolygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Multipolygon_with_holes_2.h" line="162" column="13" bodyfile="CGAL/Multipolygon_with_holes_2.h" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="Multipolygon__with__holes__2_8h_1a2459ff400b76e4db28e3f4d6dc43e1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Transformation</type>
          </param>
          <param>
            <type>class Kernel</type>
          </param>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Multipolygon__with__holes__2" kindref="compound">Multipolygon_with_holes_2</ref>&lt; Kernel, Container &gt;</type>
        <definition>Multipolygon_with_holes_2&lt; Kernel, Container &gt; CGAL::transform</definition>
        <argsstring>(const Transformation &amp;t, const Multipolygon_with_holes_2&lt; Kernel, Container &gt; &amp;mp)</argsstring>
        <name>transform</name>
        <qualifiedname>CGAL::transform</qualifiedname>
        <param>
          <type>const Transformation &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Multipolygon__with__holes__2" kindref="compound">Multipolygon_with_holes_2</ref>&lt; Kernel, Container &gt; &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Multipolygon_with_holes_2.h" line="217" column="27" bodyfile="CGAL/Multipolygon_with_holes_2.h" bodystart="217" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2_8h_1a4c4687ba52d502c0e76fa1d446f845dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits_P</type>
          </param>
          <param>
            <type>class Container1_P</type>
          </param>
          <param>
            <type>class Container2_P</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator!=</definition>
        <argsstring>(const Polygon_2&lt; Traits_P, Container1_P &gt; &amp;x, const Polygon_2&lt; Traits_P, Container2_P &gt; &amp;y)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Traits_P, Container1_P &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Traits_P, Container2_P &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2.h" line="618" column="1" bodyfile="CGAL/Polygon_2.h" bodystart="618" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__edge__iterator_8h_1a17c4f5b92e8d918a2b9fe820d0c81ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
          <param>
            <type>class ConstructSegment</type>
          </param>
        </templateparamlist>
        <type>Container_::difference_type</type>
        <definition>Container_::difference_type CGAL::distance_type</definition>
        <argsstring>(const Polygon_2_edge_iterator&lt; Traits_, Container_, Container_ &gt; &amp;)</argsstring>
        <name>distance_type</name>
        <qualifiedname>CGAL::distance_type</qualifiedname>
        <param>
          <type>const Polygon_2_edge_iterator&lt; Traits_, Container_, Container_ &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2/Polygon_2_edge_iterator.h" line="185" column="1" bodyfile="CGAL/Polygon_2/Polygon_2_edge_iterator.h" bodystart="185" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__edge__iterator_8h_1ac3070cbe62f7e0a1c2a6b83755e5fa0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>Traits_::Segment_2 *</type>
        <definition>Traits_::Segment_2 * CGAL::value_type</definition>
        <argsstring>(const Polygon_2_edge_iterator&lt; Traits_, Container_, Tag_true &gt; &amp;)</argsstring>
        <name>value_type</name>
        <qualifiedname>CGAL::value_type</qualifiedname>
        <param>
          <type>const Polygon_2_edge_iterator&lt; Traits_, Container_, Tag_true &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2/Polygon_2_edge_iterator.h" line="190" column="1" bodyfile="CGAL/Polygon_2/Polygon_2_edge_iterator.h" bodystart="190" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__impl_8h_1a7e494ffa48578bbc73e68df0fbbc3f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits_P</type>
          </param>
          <param>
            <type>class Container1_P</type>
          </param>
          <param>
            <type>class Container2_P</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator==</definition>
        <argsstring>(const Polygon_2&lt; Traits_P, Container1_P &gt; &amp;x, const Polygon_2&lt; Traits_P, Container2_P &gt; &amp;y)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Traits_P, Container1_P &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Traits_P, Container2_P &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2/Polygon_2_impl.h" line="37" column="6" bodyfile="CGAL/Polygon_2/Polygon_2_impl.h" bodystart="37" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__impl_8h_1a2de09d9f82dc4dbfaa406dc5bc907060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits_P</type>
          </param>
          <param>
            <type>class Container_P</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; CGAL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Polygon_2&lt; Traits_P, Container_P &gt; &amp;p)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Traits_P, Container_P &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2/Polygon_2_impl.h" line="83" column="1" bodyfile="CGAL/Polygon_2/Polygon_2_impl.h" bodystart="83" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__impl_8h_1a4cc5dd088f779c4098ef64a76ba1e52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits_P</type>
          </param>
          <param>
            <type>class Container_P</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Polygon_2&lt; Traits_P, Container_P &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Traits_P, Container_P &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2/Polygon_2_impl.h" line="110" column="1" bodyfile="CGAL/Polygon_2/Polygon_2_impl.h" bodystart="111" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__impl_8h_1a9b551e8a0544c48dd95e1fc1cedbaf18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Transformation</type>
          </param>
          <param>
            <type>class Traits_P</type>
          </param>
          <param>
            <type>class Container_P</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Traits_P, Container_P &gt;</type>
        <definition>Polygon_2&lt; Traits_P, Container_P &gt; CGAL::transform</definition>
        <argsstring>(const Transformation &amp;t, const Polygon_2&lt; Traits_P, Container_P &gt; &amp;p)</argsstring>
        <name>transform</name>
        <qualifiedname>CGAL::transform</qualifiedname>
        <param>
          <type>const Transformation &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Traits_P, Container_P &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2/Polygon_2_impl.h" line="146" column="1" bodyfile="CGAL/Polygon_2/Polygon_2_impl.h" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__simplicity_8h_1aa2896ac0cc5c3a48240dd7cf61050ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_simple_polygon</definition>
        <argsstring>(Iterator points_begin, Iterator points_end, const PolygonTraits &amp;polygon_traits)</argsstring>
        <name>is_simple_polygon</name>
        <qualifiedname>CGAL::is_simple_polygon</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>points_begin</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>points_end</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>polygon_traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2/Polygon_2_simplicity.h" line="474" column="6" bodyfile="CGAL/Polygon_2/Polygon_2_simplicity.h" bodystart="474" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__vertex__circulator_8h_1ab466e64806b273cae4bc11d9bc219fde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ctnr</type>
          </param>
        </templateparamlist>
        <type>Polygon_circulator&lt; Ctnr &gt;</type>
        <definition>Polygon_circulator&lt; Ctnr &gt; CGAL::operator+</definition>
        <argsstring>(typename Polygon_circulator&lt; Ctnr &gt;::difference_type n, const Polygon_circulator&lt; Ctnr &gt; &amp;c)</argsstring>
        <name>operator+</name>
        <qualifiedname>CGAL::operator+</qualifiedname>
        <param>
          <type>typename Polygon_circulator&lt; Ctnr &gt;::difference_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const Polygon_circulator&lt; Ctnr &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2/Polygon_2_vertex_circulator.h" line="156" column="1" bodyfile="CGAL/Polygon_2/Polygon_2_vertex_circulator.h" bodystart="156" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1gaba98c3174a5695d8dda64546d577434b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>ForwardIterator</type>
        <definition>ForwardIterator CGAL::left_vertex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const PolygonTraits &amp;traits)</argsstring>
        <name>left_vertex_2</name>
        <qualifiedname>CGAL::left_vertex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Returns an iterator to the leftmost point from the range <computeroutput>[first,last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In case of a tie, the point with the smallest <computeroutput>y</computeroutput>-coordinate is taken.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the members <computeroutput>Less_xy_2</computeroutput> and <computeroutput>less_xy_2_object()</computeroutput> are used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>Traits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba7ccdd910a46e904b41705fd2d3a219" kindref="member">CGAL::right_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba4fe8c4e465d92d4f5d3e457933dd49" kindref="member">CGAL::top_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1ga633436132f3f1843631ef5971d1910bc" kindref="member">CGAL::bottom_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="56" column="17" declfile="CGAL/Polygon_2_algorithms.h" declline="56" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1gaba7ccdd910a46e904b41705fd2d3a219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>ForwardIterator</type>
        <definition>ForwardIterator CGAL::right_vertex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const PolygonTraits &amp;traits)</argsstring>
        <name>right_vertex_2</name>
        <qualifiedname>CGAL::right_vertex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Returns an iterator to the rightmost point from the range <computeroutput>[first,last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In case of a tie, the point with the largest <computeroutput>y</computeroutput>-coordinate is taken.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. In fact, only the members <computeroutput>Less_xy_2</computeroutput> and <computeroutput>less_xy_2_object()</computeroutput> are used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have<computeroutput>Traits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba98c3174a5695d8dda64546d577434b" kindref="member">CGAL::left_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba4fe8c4e465d92d4f5d3e457933dd49" kindref="member">CGAL::top_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1ga633436132f3f1843631ef5971d1910bc" kindref="member">CGAL::bottom_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="76" column="17" declfile="CGAL/Polygon_2_algorithms.h" declline="76" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1gaba4fe8c4e465d92d4f5d3e457933dd49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>ForwardIterator</type>
        <definition>ForwardIterator CGAL::top_vertex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const PolygonTraits &amp;traits)</argsstring>
        <name>top_vertex_2</name>
        <qualifiedname>CGAL::top_vertex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Returns an iterator to the topmost point from the range <computeroutput>[first,last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In case of a tie, the point with the largest <computeroutput>x</computeroutput>-coordinate is taken.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the members <computeroutput>Less_yx_2</computeroutput> and <computeroutput>less_yx_2_object()</computeroutput> are used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>Traits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba98c3174a5695d8dda64546d577434b" kindref="member">CGAL::left_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba7ccdd910a46e904b41705fd2d3a219" kindref="member">CGAL::right_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1ga633436132f3f1843631ef5971d1910bc" kindref="member">CGAL::bottom_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="95" column="17" declfile="CGAL/Polygon_2_algorithms.h" declline="95" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1ga633436132f3f1843631ef5971d1910bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>ForwardIterator</type>
        <definition>ForwardIterator CGAL::bottom_vertex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const PolygonTraits &amp;traits)</argsstring>
        <name>bottom_vertex_2</name>
        <qualifiedname>CGAL::bottom_vertex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Returns an iterator to the bottommost point from the range <computeroutput>[first,last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In case of a tie, the point with the smallest <computeroutput>x</computeroutput>-coordinate is taken.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the members <computeroutput>Less_yx_2</computeroutput> and <computeroutput>less_yx_2_object()</computeroutput> are used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>Traits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba98c3174a5695d8dda64546d577434b" kindref="member">CGAL::left_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba7ccdd910a46e904b41705fd2d3a219" kindref="member">CGAL::right_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gaba4fe8c4e465d92d4f5d3e457933dd49" kindref="member">CGAL::top_vertex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="115" column="17" declfile="CGAL/Polygon_2_algorithms.h" declline="115" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1ga7923eb473d7765a2d6c18f5eabcd86ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::area_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, typename PolygonTraits::FT &amp;result, const PolygonTraits &amp;traits)</argsstring>
        <name>area_2</name>
        <qualifiedname>CGAL::area_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>typename PolygonTraits::FT &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Computes the signed area of the polygon defined by the range of points <computeroutput>[first,last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The area is returned in the parameter <computeroutput>result</computeroutput>. The sign is positive for counterclockwise polygons, negative for clockwise polygons. If the polygon is not simple, the area is not well defined. The functionality is also available by the <computeroutput><ref refid="group__PkgPolygon2Functions_1ga586de8b7ad4562a88c2d31f59346b5ae" kindref="member">polygon_area_2()</ref></computeroutput> function, which returns the area instead of taking it as a parameter.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the following members of this traits class are used:<itemizedlist>
<listitem><para><computeroutput>Compute_area_2</computeroutput> : Computes the signed area of the oriented triangle defined by 3 <computeroutput>Point_2</computeroutput> passed as arguments.</para>
</listitem><listitem><para><computeroutput>FT</computeroutput></para>
</listitem><listitem><para><computeroutput>compute_area_2_object()</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>Traits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1ga586de8b7ad4562a88c2d31f59346b5ae" kindref="member">CGAL::polygon_area_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gad1cb4044f1c59db27c1a06cb47957acb" kindref="member">CGAL::orientation_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="141" column="1" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="141" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1ga586de8b7ad4562a88c2d31f59346b5ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>PolygonTraits::FT</type>
        <definition>PolygonTraits::FT CGAL::polygon_area_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const PolygonTraits &amp;traits)</argsstring>
        <name>polygon_area_2</name>
        <qualifiedname>CGAL::polygon_area_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Computes the signed area of the polygon defined by the range of points <computeroutput>[first,last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The sign is positive for counterclockwise polygons, negative for clockwise polygons. If the polygon is not simple, the area is not well defined.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the following members of this traits class are used:<itemizedlist>
<listitem><para><computeroutput>Compute_area_2</computeroutput> : Computes the signed area of the oriented triangle defined by 3 <computeroutput>Point_2</computeroutput> passed as arguments.</para>
</listitem><listitem><para><computeroutput>FT</computeroutput></para>
</listitem><listitem><para><computeroutput>compute_area_2_object</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>Traits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gad1cb4044f1c59db27c1a06cb47957acb" kindref="member">CGAL::orientation_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="181" column="1" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="181" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1ga1963be778c0ae556273448def847f2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_convex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const PolygonTraits &amp;traits)</argsstring>
        <name>is_convex_2</name>
        <qualifiedname>CGAL::is_convex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Checks if the polygon is convex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the following members of this traits class are used:<itemizedlist>
<listitem><para><computeroutput>Less_xy_2</computeroutput></para>
</listitem><listitem><para><computeroutput>Orientation_2</computeroutput></para>
</listitem><listitem><para><computeroutput>less_xy_2_object</computeroutput></para>
</listitem><listitem><para><computeroutput>orientation_2_object</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>PolygonTraits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="217" column="6" declfile="CGAL/Polygon_2_algorithms.h" declline="217" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1ga2ffbb0de6a90657d9ec4e39c82875643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_simple_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const PolygonTraits &amp;traits)</argsstring>
        <name>is_simple_2</name>
        <qualifiedname>CGAL::is_simple_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Checks if the polygon defined by the iterator range <computeroutput>[first,last)</computeroutput> is simple, that is, if the edges do not intersect, except consecutive edges in their common vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the following members of this traits class are used:<itemizedlist>
<listitem><para><computeroutput>Point_2</computeroutput></para>
</listitem><listitem><para><computeroutput>Less_xy_2</computeroutput></para>
</listitem><listitem><para><computeroutput>Orientation_2</computeroutput></para>
</listitem><listitem><para><computeroutput>less_xy_2_object()</computeroutput></para>
</listitem><listitem><para><computeroutput>orientation_2_object()</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>PolygonTraits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Implementation</bold><linebreak/>
</para>
<para>The simplicity test is implemented by means of a plane sweep algorithm. The algorithm is quite robust when used with inexact number types. The running time is <formula id="0">$O(n log n)$</formula>, where n is the number of vertices of the polygon.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="245" column="6" declfile="CGAL/Polygon_2_algorithms.h" declline="245" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1gad7360f5104eaee7647dada4973cbb993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class Point</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point &amp;point, const Traits &amp;traits)</argsstring>
        <name>oriented_side_2</name>
        <qualifiedname>CGAL::oriented_side_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Computes on which side of a polygon a point lies. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the following members of this traits class are used:<itemizedlist>
<listitem><para><computeroutput>Less_xy_2</computeroutput></para>
</listitem><listitem><para><computeroutput>Compare_x_2</computeroutput></para>
</listitem><listitem><para><computeroutput>Compare_y_2</computeroutput></para>
</listitem><listitem><para><computeroutput>Orientation_2</computeroutput></para>
</listitem><listitem><para><computeroutput>less_xy_2_object()</computeroutput></para>
</listitem><listitem><para><computeroutput>compare_x_2_object()</computeroutput></para>
</listitem><listitem><para><computeroutput>compare_y_2_object()</computeroutput></para>
</listitem><listitem><para><computeroutput>orientation_2_object()</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>PolygonTraits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1ga0cbb36e051264c152189a057ea385578" kindref="member">CGAL::bounded_side_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1ga2ffbb0de6a90657d9ec4e39c82875643" kindref="member">CGAL::is_simple_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>Oriented_side</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="272" column="15" declfile="CGAL/Polygon_2_algorithms.h" declline="272" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1ga0cbb36e051264c152189a057ea385578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class Point</type>
          </param>
          <param>
            <type>class PolygonTraits</type>
          </param>
        </templateparamlist>
        <type>Bounded_side</type>
        <definition>Bounded_side CGAL::bounded_side_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Point &amp;point, const PolygonTraits &amp;traits)</argsstring>
        <name>bounded_side_2</name>
        <qualifiedname>CGAL::bounded_side_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const PolygonTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Computes if a point lies inside a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para>The polygon is defined by the sequence of points <computeroutput>[first,last)</computeroutput>. Being inside is defined by the odd-even rule. If we take a ray starting at the point and extending to infinity (in any direction), we count the number of intersections. If this number is odd, the point is inside, otherwise it is outside. If the point is on a polygon edge, a special value is returned. A simple polygon divides the plane in an unbounded and a bounded region. According to the definition points in the bounded region are inside the polygon.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the following members of this traits class are used:<itemizedlist>
<listitem><para><computeroutput>Compare_x_2</computeroutput></para>
</listitem><listitem><para><computeroutput>Compare_y_2</computeroutput></para>
</listitem><listitem><para><computeroutput>Orientation_2</computeroutput></para>
</listitem><listitem><para><computeroutput>compare_x_2_object()</computeroutput></para>
</listitem><listitem><para><computeroutput>compare_y_2_object()</computeroutput></para>
</listitem><listitem><para><computeroutput>orientation_2_object()</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>Traits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Implementation</bold><linebreak/>
</para>
<para>The running time is linear in the number of vertices of the polygon. A horizontal ray is taken to count the number of intersections. Special care is taken that the result is correct even if there are degeneracies (if the ray passes through a vertex).</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1gad7360f5104eaee7647dada4973cbb993" kindref="member">CGAL::oriented_side_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Bounded_side</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="311" column="14" declfile="CGAL/Polygon_2_algorithms.h" declline="311" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygon2Functions_1gad1cb4044f1c59db27c1a06cb47957acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>Orientation</type>
        <definition>Orientation CGAL::orientation_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const Traits &amp;traits)</argsstring>
        <name>orientation_2</name>
        <qualifiedname>CGAL::orientation_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Computes if a polygon is clockwise or counterclockwise oriented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>is_simple_2(first, last, traits);</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the concept <computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput>. Only the following members of this traits class are used:<itemizedlist>
<listitem><para><computeroutput>Less_xy_2</computeroutput></para>
</listitem><listitem><para><computeroutput>less_xy_2_object()</computeroutput></para>
</listitem><listitem><para><computeroutput>orientation_2_object()</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ForwardIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have<computeroutput>Traits::Point_2</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="classPolygonTraits__2" kindref="compound">PolygonTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygon2Functions_1ga2ffbb0de6a90657d9ec4e39c82875643" kindref="member">CGAL::is_simple_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__2" kindref="compound">CGAL::Polygon_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Orientation</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="334" column="13" declfile="CGAL/Polygon_2_algorithms.h" declline="334" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1a74f9948fd624c104dfaabd2fa12949ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>ForwardIterator</type>
        <definition>ForwardIterator CGAL::left_vertex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>left_vertex_2</name>
        <qualifiedname>CGAL::left_vertex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="346" column="17" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="346" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1a973edd7b9eedfa521629ee3ed883d515" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>ForwardIterator</type>
        <definition>ForwardIterator CGAL::right_vertex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>right_vertex_2</name>
        <qualifiedname>CGAL::right_vertex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="357" column="17" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="357" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1a309ddf376acbf239b666acb1fffaf524" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>ForwardIterator</type>
        <definition>ForwardIterator CGAL::top_vertex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>top_vertex_2</name>
        <qualifiedname>CGAL::top_vertex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="368" column="17" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="368" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1adfedfe09c78fe169456a39ba1504c433" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>ForwardIterator</type>
        <definition>ForwardIterator CGAL::bottom_vertex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>bottom_vertex_2</name>
        <qualifiedname>CGAL::bottom_vertex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="379" column="17" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="379" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1ad6367b8fea0e1729a06866fd9c7932f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class Numbertype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::area_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, Numbertype &amp;result)</argsstring>
        <name>area_2</name>
        <qualifiedname>CGAL::area_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Numbertype &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="389" column="6" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="389" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1a8acf3109ae106f948fff5980ce991c89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_convex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>is_convex_2</name>
        <qualifiedname>CGAL::is_convex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="402" column="6" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="402" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1ab46462ec29d38c69417d035a9f261288" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_simple_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>is_simple_2</name>
        <qualifiedname>CGAL::is_simple_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="414" column="6" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="414" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1a96936de633e509c08427eddabf349f00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const typename std::iterator_traits&lt; ForwardIterator &gt;::value_type &amp;point)</argsstring>
        <name>oriented_side_2</name>
        <qualifiedname>CGAL::oriented_side_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const typename std::iterator_traits&lt; ForwardIterator &gt;::value_type &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="424" column="15" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="424" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1a7acb1ed4b30e30c2898341099dbd2267" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>Bounded_side</type>
        <definition>Bounded_side CGAL::bounded_side_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, const typename std::iterator_traits&lt; ForwardIterator &gt;::value_type &amp;point)</argsstring>
        <name>bounded_side_2</name>
        <qualifiedname>CGAL::bounded_side_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const typename std::iterator_traits&lt; ForwardIterator &gt;::value_type &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="437" column="14" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="437" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__2__algorithms_8h_1a185f0ea61128e8c264736c2bf6f2c076" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>Orientation</type>
        <definition>Orientation CGAL::orientation_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>orientation_2</name>
        <qualifiedname>CGAL::orientation_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_2_algorithms.h" line="451" column="13" bodyfile="CGAL/Polygon_2_algorithms.h" bodystart="451" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__with__holes__2_8h_1a7bb4f355517a26a1bee17c7772bb712c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Transformation</type>
          </param>
          <param>
            <type>class Kernel</type>
          </param>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel, Container &gt;</type>
        <definition>Polygon_with_holes_2&lt; Kernel, Container &gt; CGAL::transform</definition>
        <argsstring>(const Transformation &amp;t, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pwh)</argsstring>
        <name>transform</name>
        <qualifiedname>CGAL::transform</qualifiedname>
        <param>
          <type>const Transformation &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel, Container &gt; &amp;</type>
          <declname>pwh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_with_holes_2.h" line="94" column="24" bodyfile="CGAL/Polygon_with_holes_2.h" bodystart="94" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__with__holes__2_8h_1a9594fe76a28197a9cb357d82e276f03a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator==</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p1, const Polygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p2)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_with_holes_2.h" line="212" column="6" bodyfile="CGAL/Polygon_with_holes_2.h" bodystart="212" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__with__holes__2_8h_1af19a817f6a0f420146854f075d403c76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator!=</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p1, const Polygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_with_holes_2.h" line="250" column="13" bodyfile="CGAL/Polygon_with_holes_2.h" bodystart="250" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__with__holes__2_8h_1aa5c8bf341800b171722b51fb5b0c40c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator==</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p1, const Polygon_2&lt; Kernel_, Container_ &gt; &amp;p2)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_with_holes_2.h" line="260" column="6" bodyfile="CGAL/Polygon_with_holes_2.h" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__with__holes__2_8h_1ae8573178fd0a2548150ec26c6cc63deb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator==</definition>
        <argsstring>(const Polygon_2&lt; Kernel_, Container_ &gt; &amp;p1, const Polygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p2)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_with_holes_2.h" line="267" column="13" bodyfile="CGAL/Polygon_with_holes_2.h" bodystart="267" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__with__holes__2_8h_1a4d27615e3ec7c97912df43b1de290bdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator!=</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p1, const Polygon_2&lt; Kernel_, Container_ &gt; &amp;p2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_with_holes_2.h" line="274" column="13" bodyfile="CGAL/Polygon_with_holes_2.h" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="Polygon__with__holes__2_8h_1adf0dbf05e6973c191dc340f071c7e523" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel_</type>
          </param>
          <param>
            <type>class Container_</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::operator!=</definition>
        <argsstring>(const Polygon_2&lt; Kernel_, Container_ &gt; &amp;p1, const Polygon_with_holes_2&lt; Kernel_, Container_ &gt; &amp;p2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__2" kindref="compound">Polygon_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polygon__with__holes__2" kindref="compound">Polygon_with_holes_2</ref>&lt; Kernel_, Container_ &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_with_holes_2.h" line="281" column="13" bodyfile="CGAL/Polygon_with_holes_2.h" bodystart="281" bodyend="285"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Polygon.txt" line="1" column="1"/>
  </compounddef>
</doxygen>
