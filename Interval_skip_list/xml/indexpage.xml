<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1Chapter_Interval_Skip_List"/><anchor id="index_1ChapterIntervalskiplist"/><htmlonly block="yes"> &lt;div id=&quot;autotoc&quot; class=&quot;toc&quot;&gt;&lt;/div&gt; </htmlonly> <simplesect kind="author"><para>Andreas Fabri</para>
</simplesect>
</para>
<sect1 id="index_1Interval_skip_listDefinition">
<title>Definition</title>
<para>An interval skip list is a data structure for finding all intervals that contain a point, and for stabbing queries, that is for answering the question whether a given point is contained in an interval or not. The implementation we provide is dynamic, that is the user can freely mix calls to the methods <computeroutput>insert(..)</computeroutput>, <computeroutput>remove(..)</computeroutput>, <computeroutput>find_intervals(..)</computeroutput>, and <computeroutput>is_contained(..)</computeroutput></para>
<para>The interval skip list class is parameterized with an interval class.</para>
<para>The data structure was introduced by Hanson <ref refid="citelist_1CITEREF_h-islds-91" kindref="member">[1]</ref>, and it is called interval skip list, because it is an extension of the randomized list structure known as skip list <ref refid="citelist_1CITEREF_p-slpab-90" kindref="member">[2]</ref>.</para>
</sect1>
<sect1 id="index_1Interval_skip_listExample">
<title>Example Programs</title>
<para><anchor id="index_1sectionIntervalskiplistExamples"/> We give two examples. The first one uses a basic interval class. In the second example we create an interval skip list for the <formula id="5">$ z$</formula>-ranges of the faces of a terrain, allowing to answer level queries.</para>
<sect2 id="index_1Interval_skip_listFirstExamplewithSimple">
<title>First Example with Simple Interval</title>
<para>The first example reads two numbers <computeroutput>n</computeroutput> and <computeroutput>d</computeroutput> from <computeroutput>std::cin</computeroutput>. It creates <computeroutput>n</computeroutput> intervals of length <computeroutput>d</computeroutput> with the left endpoint at <computeroutput>n</computeroutput>. It then reads out the intervals for the 1-dimensional points with coordinates <formula id="6">$ 0 ... n+d$</formula>.</para>
<para>The interval skip list class has as template argument an interval class. In this example we use the class <computeroutput><ref refid="classCGAL_1_1Interval__skip__list__interval" kindref="compound">Interval_skip_list_interval</ref></computeroutput>.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Interval_skip_list_2intervals_8cpp-example" kindref="compound">Interval_skip_list/intervals.cpp</ref> <programlisting filename="Interval_skip_list/intervals.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Interval_skip_list.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Interval_skip_list_interval.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/algorithm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Interval__skip__list__interval" kindref="compound">CGAL::Interval_skip_list_interval&lt;double&gt;</ref><sp/><ref refid="classInterval" kindref="compound">Interval</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Interval__skip__list" kindref="compound">CGAL::Interval_skip_list&lt;Interval&gt;</ref><sp/><ref refid="classCGAL_1_1Interval__skip__list" kindref="compound">Interval_skip_list</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Interval__skip__list" kindref="compound">Interval_skip_list</ref><sp/>isl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n,<sp/>d;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cin<sp/>&gt;&gt;<sp/>n<sp/>&gt;&gt;<sp/>d;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Interval&gt;<sp/>intervals(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>intervals[i]<sp/>=<sp/><ref refid="classInterval" kindref="compound">Interval</ref>(i,<sp/>i+d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__STLAlgos_1ga03da480625f380d4d06ea64de211add4" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::cpp98::random_shuffle</ref>(intervals.begin(),<sp/>intervals.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>isl.<ref refid="classCGAL_1_1Interval__skip__list_1a452f3f75ff3c03212e48203070741eb0" kindref="member">insert</ref>(intervals.begin(),<sp/>intervals.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n+d;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;Interval&gt;<sp/>L;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>isl.<ref refid="classCGAL_1_1Interval__skip__list_1a49a0eca03e485d3ef328c328eec18cb5" kindref="member">find_intervals</ref>(i,<sp/>std::back_inserter(L));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::list&lt;Interval&gt;::iterator<sp/>it<sp/>=<sp/>L.begin();<sp/>it<sp/>!=<sp/>L.end();<sp/>it++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>isl.<ref refid="classCGAL_1_1Interval__skip__list_1a657e004bd4fe5b3539e43fb0ea7b0d95" kindref="member">remove</ref>(intervals[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1Interval_skip_listExamplewithFacesofaTriangulated">
<title>Example with Faces of a Triangulated Terrain</title>
<para>The second example creates an interval skip list that allows to find all the faces of a terrain intersected by an horizontal plane at a given height. The data points for the terrain are read from a file.</para>
<para>As model for the interval concept, we use a class that is a wrapper around a face handle of a triangulated terrain. Lower and upper bound of the interval are smallest and largest <formula id="5">$ z$</formula>-coordinate of the face.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Interval_skip_list_2isl_terrain_8cpp-example" kindref="compound">Interval_skip_list/isl_terrain.cpp</ref> <programlisting filename="Interval_skip_list/isl_terrain.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Delaunay_triangulation_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Projection_traits_xy_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Interval_skip_list.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Level_interval.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>EIK;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>EIK::Point_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Projection__traits__xy__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Projection_traits_xy_3&lt;EIK&gt;</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Delaunay_triangulation_2&lt;K&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Delaunay;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Delaunay::Face_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Delaunay::Finite_faces_iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Finite_faces_iterator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Level__interval" kindref="compound">CGAL::Level_interval&lt;Face_handle&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classInterval" kindref="compound">Interval</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Interval__skip__list" kindref="compound">CGAL::Interval_skip_list&lt;Interval&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Interval__skip__list" kindref="compound">Interval_skip_list</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>fin(</highlight><highlight class="stringliteral">&quot;terrain.pts&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>elevation<sp/>ranges<sp/>from<sp/>0<sp/>to<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Delaunay<sp/>dt;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dt.insert(std::istream_iterator&lt;Point_3&gt;(fin),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istream_iterator&lt;Point_3&gt;());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Interval__skip__list" kindref="compound">Interval_skip_list</ref><sp/>isl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Finite_faces_iterator<sp/>fh<sp/>=<sp/>dt.finite_faces_begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fh<sp/>!=<sp/>dt.finite_faces_end();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++fh){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>isl.<ref refid="classCGAL_1_1Interval__skip__list_1a452f3f75ff3c03212e48203070741eb0" kindref="member">insert</ref>(<ref refid="classInterval" kindref="compound">Interval</ref>(fh));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Interval&gt;<sp/>level;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>isl.<ref refid="classCGAL_1_1Interval__skip__list_1a49a0eca03e485d3ef328c328eec18cb5" kindref="member">find_intervals</ref>(50,<sp/>std::back_inserter(level));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::list&lt;Interval&gt;::iterator<sp/>it<sp/>=<sp/>level.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>level.end();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>dt.triangle(it-&gt;face_handle())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="Interval_skip_list.txt"/>
  </compounddef>
</doxygen>
