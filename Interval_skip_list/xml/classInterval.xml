<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classInterval" kind="class" language="C++" prot="public">
    <compoundname>Interval</compoundname>
    <includes local="no">Concepts/Interval.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classInterval_1ab0d9bb9bd358241a89e8de776182b418" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type Interval::Value</definition>
        <argsstring></argsstring>
        <name>Value</name>
        <qualifiedname>Interval::Value</qualifiedname>
        <briefdescription>
<para>The type of the lower and upper bound of the interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Interval.h" line="40" column="26" bodyfile="Concepts/Interval.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classInterval_1ae48b9a9e9f672f81977627b609e32429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Interval::Interval</definition>
        <argsstring>()</argsstring>
        <name>Interval</name>
        <qualifiedname>Interval::Interval</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Interval.h" line="30" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classInterval_1a6aa5b4ae98fe19fea087bab6c7c09632" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classInterval_1ab0d9bb9bd358241a89e8de776182b418" kindref="member">Value</ref></type>
        <definition>Value Interval::inf</definition>
        <argsstring>() const</argsstring>
        <name>inf</name>
        <qualifiedname>Interval::inf</qualifiedname>
        <briefdescription>
<para>Returns the lower bound. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Interval.h" line="50" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1aab00953c8c8b4fe5dad90fc33f28aa12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classInterval_1ab0d9bb9bd358241a89e8de776182b418" kindref="member">Value</ref></type>
        <definition>Value Interval::sup</definition>
        <argsstring>() const</argsstring>
        <name>sup</name>
        <qualifiedname>Interval::sup</qualifiedname>
        <briefdescription>
<para>Returns the upper bound. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Interval.h" line="55" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1ac3ea821cd42f8559a4cb701138b925fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::contains</definition>
        <argsstring>(const Value &amp;v) const</argsstring>
        <name>contains</name>
        <qualifiedname>Interval::contains</qualifiedname>
        <param>
          <type>const <ref refid="classInterval_1ab0d9bb9bd358241a89e8de776182b418" kindref="member">Value</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput>, iff the interval contains <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Interval.h" line="60" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a3b23065ccea2485752ccc356d295be6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::contains_interval</definition>
        <argsstring>(const Value &amp;i, const Value &amp;s) const</argsstring>
        <name>contains_interval</name>
        <qualifiedname>Interval::contains_interval</qualifiedname>
        <param>
          <type>const <ref refid="classInterval_1ab0d9bb9bd358241a89e8de776182b418" kindref="member">Value</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classInterval_1ab0d9bb9bd358241a89e8de776182b418" kindref="member">Value</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput>, iff the interval contains <computeroutput>(i,s)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Interval.h" line="65" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a76dc246cf31111b417849385fe545151" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::operator==</definition>
        <argsstring>(const Interval &amp;I) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Interval::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classInterval" kindref="compound">Interval</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
<para>Equality test. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Interval.h" line="70" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a3b48bfb3ac0ce9a6d958efa8e1ee48ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::operator!=</definition>
        <argsstring>(const Interval &amp;I) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Interval::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classInterval" kindref="compound">Interval</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
<para>Inequality test. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Interval.h" line="75" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classInterval" kindref="compound">Interval</ref></computeroutput> describes the requirements for the template argument <computeroutput><ref refid="classInterval" kindref="compound">Interval</ref></computeroutput> of a <computeroutput>Interval_skip_list&lt;<ref refid="classInterval" kindref="compound">Interval</ref>&gt;</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para>The concept does not specify, whether the interval is open or closed. It is up to the implementer of a model for this concept to define that.</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Interval__skip__list__interval" kindref="compound">CGAL::Interval_skip_list_interval</ref>&lt;Value&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Level__interval" kindref="compound">CGAL::Level_interval</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput>Interval_skip_list</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/Interval.h" line="21" column="1" bodyfile="Concepts/Interval.h" bodystart="21" bodyend="79"/>
    <listofallmembers>
      <member refid="classInterval_1ac3ea821cd42f8559a4cb701138b925fa" prot="public" virt="non-virtual"><scope>Interval</scope><name>contains</name></member>
      <member refid="classInterval_1a3b23065ccea2485752ccc356d295be6c" prot="public" virt="non-virtual"><scope>Interval</scope><name>contains_interval</name></member>
      <member refid="classInterval_1a6aa5b4ae98fe19fea087bab6c7c09632" prot="public" virt="non-virtual"><scope>Interval</scope><name>inf</name></member>
      <member refid="classInterval_1ae48b9a9e9f672f81977627b609e32429" prot="public" virt="non-virtual"><scope>Interval</scope><name>Interval</name></member>
      <member refid="classInterval_1a3b48bfb3ac0ce9a6d958efa8e1ee48ab" prot="public" virt="non-virtual"><scope>Interval</scope><name>operator!=</name></member>
      <member refid="classInterval_1a76dc246cf31111b417849385fe545151" prot="public" virt="non-virtual"><scope>Interval</scope><name>operator==</name></member>
      <member refid="classInterval_1aab00953c8c8b4fe5dad90fc33f28aa12" prot="public" virt="non-virtual"><scope>Interval</scope><name>sup</name></member>
      <member refid="classInterval_1ab0d9bb9bd358241a89e8de776182b418" prot="public" virt="non-virtual"><scope>Interval</scope><name>Value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
