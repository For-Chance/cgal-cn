<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Orthtree" prot="public">CGAL::Orthtree</innerclass>
    <innerclass refid="structCGAL_1_1Orthtree__traits" prot="public">CGAL::Orthtree_traits</innerclass>
    <innerclass refid="structCGAL_1_1Orthtree__traits__base" prot="public">CGAL::Orthtree_traits_base</innerclass>
    <innerclass refid="structCGAL_1_1Orthtree__traits__base_3_01GeomTraits_00_012_01_4" prot="public">CGAL::Orthtree_traits_base&lt; GeomTraits, 2 &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Orthtree__traits__base_3_01GeomTraits_00_013_01_4" prot="public">CGAL::Orthtree_traits_base&lt; GeomTraits, 3 &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Orthtree__traits__face__graph" prot="public">CGAL::Orthtree_traits_face_graph</innerclass>
    <innerclass refid="structCGAL_1_1Orthtree__traits__point" prot="public">CGAL::Orthtree_traits_point</innerclass>
    <innerclass refid="structCGAL_1_1Orthtree__traits__polygons" prot="public">CGAL::Orthtree_traits_polygons</innerclass>
    <innernamespace refid="namespaceCGAL_1_1Orthtree__impl">CGAL::Orthtree_impl</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Orthtrees">CGAL::Orthtrees</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__PkgOrthtreeRef_1ga937c2cf9aa6adc991f40c30071f0adad" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename GeomTraits</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PointMap</type>
            <defval>Identity_property_map&lt;typename std::iterator_traits&lt;typename PointRange::iterator&gt;::value_type&gt;</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>cubic_nodes</declname>
            <defname>cubic_nodes</defname>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref>&lt; <ref refid="structCGAL_1_1Orthtree__traits__point" kindref="compound">Orthtree_traits_point</ref>&lt; GeomTraits, PointRange, PointMap, cubic_nodes, 3 &gt; &gt;</type>
        <definition>using CGAL::Octree = typedef Orthtree&lt;Orthtree_traits_point&lt;GeomTraits, PointRange, PointMap, cubic_nodes, 3&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Octree</name>
        <qualifiedname>CGAL::Octree</qualifiedname>
        <briefdescription>
<para>Alias that specializes the <computeroutput><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref></computeroutput> class to a 3D octree storing 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Kernel</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Range</computeroutput> whose value type is the key type of <computeroutput>PointMap</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose value type is <computeroutput>GeomTraits::Point_3</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cubic_nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to enforce cubic nodes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Octree.h" line="38" column="1" bodyfile="CGAL/Octree.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgOrthtreeRef_1gae24e1ab33fb7912f5554ff339ee26424" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename GeomTraits</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PointMap</type>
            <defval>Identity_property_map &lt;typename std::iterator_traits&lt;typename PointRange::iterator&gt;::value_type&gt;</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>squared_nodes</declname>
            <defname>squared_nodes</defname>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref>&lt; <ref refid="structCGAL_1_1Orthtree__traits__point" kindref="compound">Orthtree_traits_point</ref>&lt; GeomTraits, PointRange, PointMap, squared_nodes, 2 &gt; &gt;</type>
        <definition>using CGAL::Quadtree = typedef Orthtree&lt;Orthtree_traits_point&lt;GeomTraits, PointRange, PointMap, squared_nodes, 2&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Quadtree</name>
        <qualifiedname>CGAL::Quadtree</qualifiedname>
        <briefdescription>
<para>Alias that specializes the <computeroutput><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref></computeroutput> class to a 2D quadtree storing 2D points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Range</computeroutput> whose value type is the key type of <computeroutput>PointMap</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>ReadablePropertyMap</computeroutput> whose value type is <computeroutput>GeomTraits::Point_2</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>square_nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to enforce square nodes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Quadtree.h" line="38" column="1" bodyfile="CGAL/Quadtree.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Orthtree__traits__point_8h_1abd70f7bc8238fabc020eb9b8eba6b382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tree</type>
          </param>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::reassign_points</definition>
        <argsstring>(Tree &amp;tree, PointMap &amp;point_map, typename Tree::Node_index n, const typename Tree::Point &amp;center, typename Tree::Node_data points, std::bitset&lt; Tree::dimension &gt; coord={}, std::size_t dimension=0)</argsstring>
        <name>reassign_points</name>
        <qualifiedname>CGAL::reassign_points</qualifiedname>
        <param>
          <type>Tree &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>PointMap &amp;</type>
          <declname>point_map</declname>
        </param>
        <param>
          <type>typename Tree::Node_index</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const typename Tree::Point &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>typename Tree::Node_data</type>
          <declname>points</declname>
        </param>
        <param>
          <type>std::bitset&lt; Tree::dimension &gt;</type>
          <declname>coord</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>dimension</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree_traits_point.h" line="25" column="6" bodyfile="CGAL/Orthtree_traits_point.h" bodystart="25" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Orthtree.txt" line="1" column="1"/>
  </compounddef>
</doxygen>
