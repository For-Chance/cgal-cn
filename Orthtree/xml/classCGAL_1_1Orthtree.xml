<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Orthtree" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Orthtree</compoundname>
    <includes local="no">CGAL/Orthtree.h</includes>
    <templateparamlist>
      <param>
        <type>typename GeomTraits</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Traits Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a8bdee414dfdfd7da5a08ea7b7bf7ceca" prot="public" static="no">
        <type>typename Traits::Kernel</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Kernel =  typename Traits::Kernel</definition>
        <argsstring></argsstring>
        <name>Kernel</name>
        <qualifiedname>CGAL::Orthtree::Kernel</qualifiedname>
        <briefdescription>
<para><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="134" column="3" bodyfile="CGAL/Orthtree.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a30f0f420b76eb8580b805bb091853841" prot="public" static="no">
        <type>typename Traits::FT</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::FT =  typename Traits::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <qualifiedname>CGAL::Orthtree::FT</qualifiedname>
        <briefdescription>
<para>Number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="135" column="3" bodyfile="CGAL/Orthtree.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a4ac2d10c702ee9ddc4284fb06b214e57" prot="public" static="no">
        <type>typename Traits::Point_d</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Point =  typename Traits::Point_d</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <qualifiedname>CGAL::Orthtree::Point</qualifiedname>
        <briefdescription>
<para>Point type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="136" column="3" bodyfile="CGAL/Orthtree.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1ac87e5e05fe5ef3ccad8d9290f4ec0ff4" prot="public" static="no">
        <type>typename Traits::Bbox_d</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Bbox =  typename Traits::Bbox_d</definition>
        <argsstring></argsstring>
        <name>Bbox</name>
        <qualifiedname>CGAL::Orthtree::Bbox</qualifiedname>
        <briefdescription>
<para>Bounding box type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="137" column="3" bodyfile="CGAL/Orthtree.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1af4dc25d22b8a1740ac781a81be9ba76e" prot="public" static="no">
        <type>typename Traits::Sphere_d</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Sphere =  typename Traits::Sphere_d</definition>
        <argsstring></argsstring>
        <name>Sphere</name>
        <qualifiedname>CGAL::Orthtree::Sphere</qualifiedname>
        <briefdescription>
<para>Sphere type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="138" column="3" bodyfile="CGAL/Orthtree.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a99c2e9168773b25d932d2570c12f6118" prot="public" static="no">
        <type>typename Traits::Adjacency</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Adjacency =  typename Traits::Adjacency</definition>
        <argsstring></argsstring>
        <name>Adjacency</name>
        <qualifiedname>CGAL::Orthtree::Adjacency</qualifiedname>
        <briefdescription>
<para>Adjacency type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="139" column="3" bodyfile="CGAL/Orthtree.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" prot="public" static="no">
        <type>typename Traits::Node_index</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Node_index =  typename Traits::Node_index</definition>
        <argsstring></argsstring>
        <name>Node_index</name>
        <qualifiedname>CGAL::Orthtree::Node_index</qualifiedname>
        <briefdescription>
<para><ref refid="classIndex" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Index</ref> of a given node in the tree; the root always has index 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="141" column="3" bodyfile="CGAL/Orthtree.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1aa547e4a0b876084eb67616d002450fe0" prot="public" static="no">
        <type>std::conditional_t&lt; <ref refid="classCGAL_1_1Orthtree_1a9a7eb5739c197b8360937690759f0c44" kindref="member">has_data</ref>, typename GeomTraits::Node_data, void * &gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Node_data =  std::conditional_t&lt;has_data,typename GeomTraits::Node_data,void*&gt;</definition>
        <argsstring></argsstring>
        <name>Node_data</name>
        <qualifiedname>CGAL::Orthtree::Node_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="145" column="3" bodyfile="CGAL/Orthtree.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1a9a7eb5739c197b8360937690759f0c44" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool CGAL::Orthtree&lt; GeomTraits &gt;::has_data</definition>
        <argsstring></argsstring>
        <name>has_data</name>
        <qualifiedname>CGAL::Orthtree::has_data</qualifiedname>
        <initializer>= bool_value</initializer>
        <briefdescription>
<para><computeroutput>true</computeroutput> if <computeroutput>GeomTraits</computeroutput> is a model of <computeroutput><ref refid="classOrthtreeTraitsWithData" kindref="compound">OrthtreeTraitsWithData</ref></computeroutput> and <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="130" column="32" bodyfile="CGAL/Orthtree.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1aa9950180d4635885babc5caf33854062" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool CGAL::Orthtree&lt; GeomTraits &gt;::supports_neighbor_search</definition>
        <argsstring></argsstring>
        <name>supports_neighbor_search</name>
        <qualifiedname>CGAL::Orthtree::supports_neighbor_search</qualifiedname>
        <initializer>= bool_value</initializer>
        <briefdescription>
<para><computeroutput>true</computeroutput> if <computeroutput>GeomTraits</computeroutput> is a model of <computeroutput><ref refid="classCollectionPartitioningOrthtreeTraits" kindref="compound">CollectionPartitioningOrthtreeTraits</ref></computeroutput> and <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="131" column="32" bodyfile="CGAL/Orthtree.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1a96402476020b5d7e434465ccf69f9904" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int CGAL::Orthtree&lt; GeomTraits &gt;::dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <qualifiedname>CGAL::Orthtree::dimension</qualifiedname>
        <initializer>= Traits::dimension</initializer>
        <briefdescription>
<para>Dimension of the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="133" column="24" bodyfile="CGAL/Orthtree.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Public Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref>&lt; Traits &gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Self =  Orthtree&lt;Traits&gt;</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <qualifiedname>CGAL::Orthtree::Self</qualifiedname>
        <briefdescription>
<para>Self alias for convenience. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="156" column="3" bodyfile="CGAL/Orthtree.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a4d495b3fdb62a8ec35d179ce179c80b3" prot="public" static="no">
        <type>std::bitset&lt; <ref refid="classCGAL_1_1Orthtree_1a96402476020b5d7e434465ccf69f9904" kindref="member">dimension</ref> &gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Local_coordinates =  std::bitset&lt;dimension&gt;</definition>
        <argsstring></argsstring>
        <name>Local_coordinates</name>
        <qualifiedname>CGAL::Orthtree::Local_coordinates</qualifiedname>
        <briefdescription>
<para>Set of bits representing this node&apos;s relationship to its parent. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to an array of Booleans, where index[0] is whether <computeroutput>x</computeroutput> is greater, index[1] is whether <computeroutput>y</computeroutput> is greater, index[2] is whether <computeroutput>z</computeroutput> is greater, and so on for higher dimensions if needed. Used to represent a node&apos;s relationship to the center of its parent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="171" column="3" bodyfile="CGAL/Orthtree.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1af129281538a90126489849d2594ebb8d" prot="public" static="no">
        <type>std::array&lt; std::uint32_t, <ref refid="classCGAL_1_1Orthtree_1a96402476020b5d7e434465ccf69f9904" kindref="member">dimension</ref> &gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Global_coordinates =  std::array&lt;std::uint32_t, dimension&gt;</definition>
        <argsstring></argsstring>
        <name>Global_coordinates</name>
        <qualifiedname>CGAL::Orthtree::Global_coordinates</qualifiedname>
        <briefdescription>
<para>Coordinates representing this node&apos;s relationship with the rest of the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>Each value <computeroutput>(x, y, z, ...)</computeroutput> of global coordinates is calculated by doubling the parent&apos;s global coordinates and adding the local coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="180" column="3" bodyfile="CGAL/Orthtree.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a17cefc00b4625f5bd9c82e9ad710fc57" prot="public" static="no">
        <type>std::function&lt; bool(<ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref>, const <ref refid="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" kindref="member">Self</ref> &amp;)&gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Split_predicate =  std::function&lt;bool(Node_index, const Self&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>Split_predicate</name>
        <qualifiedname>CGAL::Orthtree::Split_predicate</qualifiedname>
        <briefdescription>
<para>A predicate that determines whether a node must be split when refining a tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="185" column="3" bodyfile="CGAL/Orthtree.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1ac64ad58ab63542e47220d1ecef4a2818" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Node_index_range =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Node_index_range</name>
        <qualifiedname>CGAL::Orthtree::Node_index_range</qualifiedname>
        <briefdescription>
<para>A model of <computeroutput><ref refid="classForwardRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardRange</ref></computeroutput> whose value type is <computeroutput>Node_index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="191" column="3" bodyfile="CGAL/Orthtree.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a38528c13ec0ee505bef5533cd99b3b3a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Property_map =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Property_map</name>
        <qualifiedname>CGAL::Orthtree::Property_map</qualifiedname>
        <briefdescription>
<para>A model of <computeroutput><ref refid="classLvaluePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LvaluePropertyMap</ref></computeroutput> with <computeroutput>Node_index</computeroutput> as key type and <computeroutput>T</computeroutput> as value type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="201" column="3" bodyfile="CGAL/Orthtree.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1ad1a116e9dec0f9ee204744510952925a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int CGAL::Orthtree&lt; GeomTraits &gt;::degree</definition>
        <argsstring></argsstring>
        <name>degree</name>
        <qualifiedname>CGAL::Orthtree::degree</qualifiedname>
        <initializer>= (2 &lt;&lt; (<ref refid="classCGAL_1_1Orthtree_1a96402476020b5d7e434465ccf69f9904" kindref="member">dimension</ref> - 1))</initializer>
        <briefdescription>
<para>Degree of the tree (number of children of non-leaf nodes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="161" column="24" bodyfile="CGAL/Orthtree.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructor</header>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1aeec5c5e64b90b82003558b3dec2de212" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Orthtree&lt; GeomTraits &gt;::Orthtree</definition>
        <argsstring>(Traits traits)</argsstring>
        <name>Orthtree</name>
        <qualifiedname>CGAL::Orthtree::Orthtree</qualifiedname>
        <param>
          <type>Traits</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>constructs an orthtree for a traits instance. </para>
        </briefdescription>
        <detaileddescription>
<para>The constructed orthtree has a root node with no children, containing the contents determined by <computeroutput>Construct_root_node_contents</computeroutput> from the traits class. That root node has a bounding box determined by <computeroutput>Construct_root_node_bbox</computeroutput> from the traits class, which typically encloses its contents.</para>
<para>This single-node orthtree is valid and compatible with all orthtree functionality, but any performance benefits are unlikely to be realized until <computeroutput><ref refid="classCGAL_1_1Orthtree_1aacc01689e01cf63ddbf033c73fa96b55" kindref="member">refine()</ref></computeroutput> is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>the traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="251" column="12" bodyfile="CGAL/Orthtree.h" bodystart="251" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a1876e99f0262b5a73c1d7cd49841595d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;sizeof...(Args)&gt;= 2</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Orthtree&lt; GeomTraits &gt;::Orthtree</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>Orthtree</name>
        <qualifiedname>CGAL::Orthtree::Orthtree</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>constructs an orthtree from a set of arguments provided to the traits constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="282" column="12" bodyfile="CGAL/Orthtree.h" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a7abedde5717ef6de879852c024ff7c87" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Orthtree&lt; GeomTraits &gt;::Orthtree</definition>
        <argsstring>(const Orthtree &amp;other)</argsstring>
        <name>Orthtree</name>
        <qualifiedname>CGAL::Orthtree::Orthtree</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="287" column="12" bodyfile="CGAL/Orthtree.h" bodystart="287" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1af08d75a0935cf8af33cbc942259c6fd6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Orthtree&lt; GeomTraits &gt;::Orthtree</definition>
        <argsstring>(Orthtree &amp;&amp;other)</argsstring>
        <name>Orthtree</name>
        <qualifiedname>CGAL::Orthtree::Orthtree</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="298" column="12" bodyfile="CGAL/Orthtree.h" bodystart="298" bodyend="309"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tree Building</header>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1aacc01689e01cf63ddbf033c73fa96b55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Orthtree&lt; GeomTraits &gt;::refine</definition>
        <argsstring>(const Split_predicate &amp;split_predicate)</argsstring>
        <name>refine</name>
        <qualifiedname>CGAL::Orthtree::refine</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1a17cefc00b4625f5bd9c82e9ad710fc57" kindref="member">Split_predicate</ref> &amp;</type>
          <declname>split_predicate</declname>
        </param>
        <briefdescription>
<para>recursively subdivides the orthtree until it meets the given criteria. </para>
        </briefdescription>
        <detaileddescription>
<para>The split predicate should return <computeroutput>true</computeroutput> if a leaf node should be split and <computeroutput>false</computeroutput> otherwise.</para>
<para>This function may be called several times with different predicates: in that case, nodes already split are left unaltered, while nodes that were not split and for which <computeroutput>split_predicate</computeroutput> returns <computeroutput>true</computeroutput> are split.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>split_predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether or not a leaf node needs to be subdivided. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="336" column="8" bodyfile="CGAL/Orthtree.h" bodystart="336" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a8f19f4c125a74e8ee71269a288e551f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Orthtree&lt; GeomTraits &gt;::refine</definition>
        <argsstring>(size_t max_depth=10, size_t bucket_size=20)</argsstring>
        <name>refine</name>
        <qualifiedname>CGAL::Orthtree::refine</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>max_depth</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>bucket_size</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>convenience overload that refines an orthtree using a maximum depth and maximum number of contained elements in a node as split predicate. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to calling <computeroutput>refine(Orthtrees::Maximum_depth_and_maximum_contained_elements(max_depth,
bucket_size))</computeroutput>.</para>
<para>The refinement is stopped as soon as one of the conditions is violated: if a node contains more elements than <computeroutput>bucket_size</computeroutput> but is already at <computeroutput>max_depth</computeroutput>, it is not split. Similarly, a node that is at a depth smaller than <computeroutput>max_depth</computeroutput> but already contains fewer elements than <computeroutput>bucket_size</computeroutput>, it is not split.</para>
<para><simplesect kind="warning"><para>This convenience method is only appropriate for trees with traits classes where <computeroutput>Node_data</computeroutput> is a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. <computeroutput><ref refid="classRandomAccessRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessRange</ref></computeroutput> is suggested for performance.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>deepest a tree is allowed to be (nodes at this depth will not be split). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bucket_size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of items a node is allowed to contain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="388" column="8" bodyfile="CGAL/Orthtree.h" bodystart="388" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a163f19e9594282378fe8059d6b48fc88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Orthtree&lt; GeomTraits &gt;::grade</definition>
        <argsstring>()</argsstring>
        <name>grade</name>
        <qualifiedname>CGAL::Orthtree::grade</qualifiedname>
        <briefdescription>
<para>refines the orthtree such that the difference of depth between two immediate neighbor leaves is never more than 1. </para>
        </briefdescription>
        <detaileddescription>
<para>This is done only by adding nodes, nodes are never removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="398" column="8" bodyfile="CGAL/Orthtree.h" bodystart="398" bodyend="450"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors</header>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a08f31128cd8cd87146a5829b79d130b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Traits &amp;</type>
        <definition>const Traits &amp; CGAL::Orthtree&lt; GeomTraits &gt;::traits</definition>
        <argsstring>() const</argsstring>
        <name>traits</name>
        <qualifiedname>CGAL::Orthtree::traits</qualifiedname>
        <briefdescription>
<para>provides direct read-only access to the tree traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="460" column="16" bodyfile="CGAL/Orthtree.h" bodystart="460" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1acb22ce8df61c3ad539cf24390472f80e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::root</definition>
        <argsstring>() const</argsstring>
        <name>root</name>
        <qualifiedname>CGAL::Orthtree::root</qualifiedname>
        <briefdescription>
<para>provides access to the root node, and by extension the rest of the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="466" column="14" bodyfile="CGAL/Orthtree.h" bodystart="466" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a534e65d99fe77796e84df929249b3f33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Orthtree&lt; GeomTraits &gt;::depth</definition>
        <argsstring>() const</argsstring>
        <name>depth</name>
        <qualifiedname>CGAL::Orthtree::depth</qualifiedname>
        <briefdescription>
<para>returns the deepest level reached by a leaf node in this tree (root being level 0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="471" column="15" bodyfile="CGAL/Orthtree.h" bodystart="471" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a92abb1c566bb8e967a9d24bae321dac9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Traversal</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Orthtree_1ac64ad58ab63542e47220d1ecef4a2818" kindref="member">Node_index_range</ref></type>
        <definition>Node_index_range CGAL::Orthtree&lt; GeomTraits &gt;::traverse</definition>
        <argsstring>(Traversal traversal) const</argsstring>
        <name>traverse</name>
        <qualifiedname>CGAL::Orthtree::traverse</qualifiedname>
        <param>
          <type>Traversal</type>
          <declname>traversal</declname>
        </param>
        <briefdescription>
<para>constructs a node index range using a tree-traversal function. </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows iteration over the nodes of the tree with a user-selected order (preorder, postorder, leaves-only, etc.).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traversal</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOrthtreeTraversal" kindref="compound">OrthtreeTraversal</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>traversal</parametername>
</parameternamelist>
<parameterdescription>
<para>class defining the traversal strategy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput><ref refid="classForwardRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardRange</ref></computeroutput> over the node indices of the tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="486" column="20" bodyfile="CGAL/Orthtree.h" bodystart="486" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1af3eaf7030f7d87317bd490b44aac17a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Traversal</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Orthtree_1ac64ad58ab63542e47220d1ecef4a2818" kindref="member">Node_index_range</ref></type>
        <definition>Node_index_range CGAL::Orthtree&lt; GeomTraits &gt;::traverse</definition>
        <argsstring>(Args &amp;&amp;...args) const</argsstring>
        <name>traverse</name>
        <qualifiedname>CGAL::Orthtree::traverse</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>convenience method for using a traversal without constructing it yourself </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traversal</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOrthtreeTraversal" kindref="compound">OrthtreeTraversal</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to to pass to the traversal&apos;s constructor, excluding the first (always an orthtree reference)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput><ref refid="classForwardRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardRange</ref></computeroutput> over the node indices of the tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="509" column="20" bodyfile="CGAL/Orthtree.h" bodystart="509" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a65d55b9b37ef19965ca3c6cfbcf9cbcc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1a30f0f420b76eb8580b805bb091853841" kindref="member">FT</ref></type>
        <definition>FT CGAL::Orthtree&lt; GeomTraits &gt;::compute_cartesian_coordinate</definition>
        <argsstring>(std::uint32_t gc, std::size_t depth, int ci) const</argsstring>
        <name>compute_cartesian_coordinate</name>
        <qualifiedname>CGAL::Orthtree::compute_cartesian_coordinate</qualifiedname>
        <param>
          <type>std::uint32_t</type>
          <declname>gc</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ci</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="515" column="3" bodyfile="CGAL/Orthtree.h" bodystart="515" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1ab0f9bff7f067845ad4cdb18aab3c55ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1ac87e5e05fe5ef3ccad8d9290f4ec0ff4" kindref="member">Bbox</ref></type>
        <definition>Bbox CGAL::Orthtree&lt; GeomTraits &gt;::bbox</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>bbox</name>
        <qualifiedname>CGAL::Orthtree::bbox</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>constructs the bounding box of a node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The object constructed is not the bounding box of the node&apos;s contents, but the bounding box of the node itself.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>node to generate a bounding box for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the bounding box of the node n </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="552" column="8" bodyfile="CGAL/Orthtree.h" bodystart="552" bodyend="564"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Custom Properties</header>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a1eed57ab7422c76fd3421b89e6916c96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classCGAL_1_1Orthtree_1a38528c13ec0ee505bef5533cd99b3b3a" kindref="member">Property_map</ref>&lt; T &gt;, bool &gt;</type>
        <definition>std::pair&lt; Property_map&lt; T &gt;, bool &gt; CGAL::Orthtree&lt; GeomTraits &gt;::add_property</definition>
        <argsstring>(const std::string &amp;name, const T default_value=T())</argsstring>
        <name>add_property</name>
        <qualifiedname>CGAL::Orthtree::add_property</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>default_value</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>gets a property for nodes, adding it if it does not already exist. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the property to add</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the new property </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value assigned to nodes for this property</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pair of the property map and a Boolean which is <computeroutput>true</computeroutput> if the property needed to be created </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="582" column="13" bodyfile="CGAL/Orthtree.h" bodystart="582" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1ae45690e71f4fbac4daae927808ed6f26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; <ref refid="classCGAL_1_1Orthtree_1a38528c13ec0ee505bef5533cd99b3b3a" kindref="member">Property_map</ref>&lt; T &gt; &gt;</type>
        <definition>std::optional&lt; Property_map&lt; T &gt; &gt; CGAL::Orthtree&lt; GeomTraits &gt;::property</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>property</name>
        <qualifiedname>CGAL::Orthtree::property</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>gets a property of the nodes if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the property to retrieve</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an optional containing the property map if it exists </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="597" column="17" bodyfile="CGAL/Orthtree.h" bodystart="597" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a1e17168f52e398517e7332f9a39273ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; CGAL::Orthtree&lt; GeomTraits &gt;::properties</definition>
        <argsstring>() const</argsstring>
        <name>properties</name>
        <qualifiedname>CGAL::Orthtree::properties</qualifiedname>
        <briefdescription>
<para>returns a vector of all property names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="608" column="15" bodyfile="CGAL/Orthtree.h" bodystart="608" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1ab22254f287d37c8dfe3db38fa6ba32af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Orthtree&lt; GeomTraits &gt;::remove_property</definition>
        <argsstring>(Property_map&lt; T &gt; property)</argsstring>
        <name>remove_property</name>
        <qualifiedname>CGAL::Orthtree::remove_property</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1a38528c13ec0ee505bef5533cd99b3b3a" kindref="member">Property_map</ref>&lt; T &gt;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>removes the node property from the tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the property to remove</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>the property to be removed from the tree.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if property was a valid property of the tree. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="622" column="8" bodyfile="CGAL/Orthtree.h" bodystart="622" bodyend="624"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1aaf2c3ef04be6579f4b3ba91c2ef1e3fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::locate</definition>
        <argsstring>(const Point &amp;point) const</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Orthtree::locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1a4ac2d10c702ee9ddc4284fb06b214e57" kindref="member">Point</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>finds the leaf node which contains a particular point in space. </para>
        </briefdescription>
        <detaileddescription>
<para>Traverses the orthtree and finds the leaf cell that has a domain enclosing the point passed. The point passed must be within the region enclosed by the orthtree (bbox of the root node). The point is contained in the lower cell of each direction if its coordinate is lower than the center.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>query point.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the node which contains the point. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="643" column="14" bodyfile="CGAL/Orthtree.h" bodystart="643" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1af82d344b5233588e4d52240ccaad0193" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Orthtree&lt; GeomTraits &gt;::nearest_k_neighbors</definition>
        <argsstring>(const Point &amp;query, std::size_t k, OutputIterator output) const -&gt; std::enable_if_t&lt; supports_neighbor_search, OutputIterator &gt;</argsstring>
        <name>nearest_k_neighbors</name>
        <qualifiedname>CGAL::Orthtree::nearest_k_neighbors</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1a4ac2d10c702ee9ddc4284fb06b214e57" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>finds the <computeroutput>k</computeroutput> nearest neighbors of the point <computeroutput>query</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Nearest neighbors are outputted in order of increasing distance to <computeroutput>query</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts <computeroutput>GeomTraits::Node_data_element</computeroutput> objects.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>query point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbors to find </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Nearest neighbor searches requires <computeroutput>GeomTraits</computeroutput> to be a model of <computeroutput><ref refid="classCollectionPartitioningOrthtreeTraits" kindref="compound">CollectionPartitioningOrthtreeTraits</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="685" column="8" bodyfile="CGAL/Orthtree.h" bodystart="685" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a280c920b53dca4db5e510b9e7c966127" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Orthtree&lt; GeomTraits &gt;::neighbors_within_radius</definition>
        <argsstring>(const Sphere &amp;query, OutputIterator output) const -&gt; std::enable_if_t&lt; supports_neighbor_search, OutputIterator &gt;</argsstring>
        <name>neighbors_within_radius</name>
        <qualifiedname>CGAL::Orthtree::neighbors_within_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af4dc25d22b8a1740ac781a81be9ba76e" kindref="member">Sphere</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>finds the elements in the sphere <computeroutput>query</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Elements are outputted in order of increasing distance to the center of the sphere.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts <computeroutput>GeomTraits::Node_data_element</computeroutput> objects.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>query sphere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Nearest neighbor searches requires <computeroutput>GeomTraits</computeroutput> to be a model of <computeroutput><ref refid="classCollectionPartitioningOrthtreeTraits" kindref="compound">CollectionPartitioningOrthtreeTraits</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="708" column="8" bodyfile="CGAL/Orthtree.h" bodystart="708" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a89ba0af67829c962d00c52055488ebfa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Orthtree&lt; GeomTraits &gt;::nearest_k_neighbors_within_radius</definition>
        <argsstring>(const Sphere &amp;query, std::size_t k, OutputIterator output) const -&gt; std::enable_if_t&lt; supports_neighbor_search, OutputIterator &gt;</argsstring>
        <name>nearest_k_neighbors_within_radius</name>
        <qualifiedname>CGAL::Orthtree::nearest_k_neighbors_within_radius</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af4dc25d22b8a1740ac781a81be9ba76e" kindref="member">Sphere</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>finds at most <computeroutput>k</computeroutput> elements within a specific radius that are nearest to the center of the sphere <computeroutput>query</computeroutput>: if <computeroutput>query</computeroutput> does not contain at least <computeroutput>k</computeroutput> elements, only contained elements will be returned. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is useful when the user already knows how sparse the elements are, or if they do not care about elements that are too far away. Setting a small radius may have performance benefits.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts <computeroutput>GeomTraits::Node_data_element</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>the region to search within </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to find </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator to add the found elements to (in order of increasing distance)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Nearest neighbor searches requires <computeroutput>GeomTraits</computeroutput> to be a model of <computeroutput><ref refid="classCollectionPartitioningOrthtreeTraits" kindref="compound">CollectionPartitioningOrthtreeTraits</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="730" column="8" bodyfile="CGAL/Orthtree.h" bodystart="730" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a595f6d7c735f4c60c2c65e5ed2ef293c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Orthtree&lt; GeomTraits &gt;::intersected_nodes</definition>
        <argsstring>(const Query &amp;query, OutputIterator output) const</argsstring>
        <name>intersected_nodes</name>
        <qualifiedname>CGAL::Orthtree::intersected_nodes</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>finds the leaf nodes that intersect with any primitive. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>this function requires the function <computeroutput>bool CGAL::do_intersect(QueryType, Traits::Bbox_d)</computeroutput> to be defined.</para>
</simplesect>
This function finds all the intersecting leaf nodes and writes their indices to the output iterator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>the primitive class (e.g., sphere, ray) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts <computeroutput>Node_index</computeroutput> types</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>the intersecting primitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output iterator after writing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="776" column="18" bodyfile="CGAL/Orthtree.h" bodystart="776" bodyend="778"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1add758c075edb135d4caf214d9bf1f339" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Orthtree&lt; GeomTraits &gt;::operator==</definition>
        <argsstring>(const Self &amp;rhs) const</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Orthtree::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" kindref="member">Self</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares the topology of the orthtree with that of <computeroutput>rhs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Trees may be considered equivalent even if they have different contents. Equivalent trees must have the same root bounding box and the same node structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the other orthtree</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the trees have the same topology, and <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="795" column="8" bodyfile="CGAL/Orthtree.h" bodystart="795" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a8fe93cebf6492978c288c75b3c9003c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Orthtree&lt; GeomTraits &gt;::operator!=</definition>
        <argsstring>(const Self &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Orthtree::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" kindref="member">Self</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares the topology of the orthtree with that of <computeroutput>rhs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the other orthtree</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if the trees have the same topology, and <computeroutput>true</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="816" column="8" bodyfile="CGAL/Orthtree.h" bodystart="816" bodyend="818"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Node Access</header>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1ab811676ae7087731372c2ed0b801ebf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Orthtree&lt; GeomTraits &gt;::is_leaf</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>is_leaf</name>
        <qualifiedname>CGAL::Orthtree::is_leaf</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>determines whether the node specified by index <computeroutput>n</computeroutput> is a leaf node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="828" column="8" bodyfile="CGAL/Orthtree.h" bodystart="828" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a7c7ec0670e949163125e32d96f94e33f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Orthtree&lt; GeomTraits &gt;::is_root</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>is_root</name>
        <qualifiedname>CGAL::Orthtree::is_root</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>determines whether the node specified by index <computeroutput>n</computeroutput> is the root node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="835" column="8" bodyfile="CGAL/Orthtree.h" bodystart="835" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a25752f941cfeb52ba393b44cbe599803" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Orthtree&lt; GeomTraits &gt;::depth</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>depth</name>
        <qualifiedname>CGAL::Orthtree::depth</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>determines the depth of the node specified. </para>
        </briefdescription>
        <detaileddescription>
<para>The root node has depth 0, its children have depth 1, and so on.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the node to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the depth of the node n within its tree. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="848" column="15" bodyfile="CGAL/Orthtree.h" bodystart="848" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a999b2b3c258e04af375c24b374249b48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::conditional_t&lt; <ref refid="classCGAL_1_1Orthtree_1a9a7eb5739c197b8360937690759f0c44" kindref="member">has_data</ref>, Node_data &amp;, void * &gt; &amp;</type>
        <definition>std::conditional_t&lt; has_data, Node_data &amp;, void * &gt; &amp; CGAL::Orthtree&lt; GeomTraits &gt;::data</definition>
        <argsstring>(Node_index n)</argsstring>
        <name>data</name>
        <qualifiedname>CGAL::Orthtree::data</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>retrieves a reference to the <computeroutput>Node_data</computeroutput> associated with the node specified by <computeroutput>n</computeroutput> if <computeroutput>GeomTraits</computeroutput> is a model of <computeroutput>OrthtreeTraitswithData</computeroutput>, and <computeroutput>nullptr</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="856" column="22" bodyfile="CGAL/Orthtree.h" bodystart="856" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a0e89107a952303d1a1902b8e9822e610" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::conditional_t&lt; <ref refid="classCGAL_1_1Orthtree_1a9a7eb5739c197b8360937690759f0c44" kindref="member">has_data</ref>, const Node_data &amp;, void * &gt;</type>
        <definition>std::conditional_t&lt; has_data, const Node_data &amp;, void * &gt; CGAL::Orthtree&lt; GeomTraits &gt;::data</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>data</name>
        <qualifiedname>CGAL::Orthtree::data</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>retrieves a const reference to the <computeroutput>Node_data</computeroutput> associated with the node specified by <computeroutput>n</computeroutput> if <computeroutput>GeomTraits</computeroutput> is a model of <computeroutput>OrthtreeTraitswithData</computeroutput>, and <computeroutput>nullptr</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="864" column="22" bodyfile="CGAL/Orthtree.h" bodystart="864" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a3e4a2e01980082bc81557db90b1f62b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1af129281538a90126489849d2594ebb8d" kindref="member">Global_coordinates</ref></type>
        <definition>Global_coordinates CGAL::Orthtree&lt; GeomTraits &gt;::global_coordinates</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>global_coordinates</name>
        <qualifiedname>CGAL::Orthtree::global_coordinates</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>retrieves the global coordinates of the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="871" column="22" bodyfile="CGAL/Orthtree.h" bodystart="871" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a4e1c2ffce4d3914ded18a721db37b61d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1a4d495b3fdb62a8ec35d179ce179c80b3" kindref="member">Local_coordinates</ref></type>
        <definition>Local_coordinates CGAL::Orthtree&lt; GeomTraits &gt;::local_coordinates</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>local_coordinates</name>
        <qualifiedname>CGAL::Orthtree::local_coordinates</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>retrieves the local coordinates of the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="878" column="21" bodyfile="CGAL/Orthtree.h" bodystart="878" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a99c0b6f1e97ff888d076787915353e83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::parent</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>parent</name>
        <qualifiedname>CGAL::Orthtree::parent</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>returns this n&apos;s parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>!is_root()</computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the node to retrieve the parent of</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the parent of node n </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="894" column="14" bodyfile="CGAL/Orthtree.h" bodystart="894" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1ad1d35de554997f6d08976054edec8cf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::child</definition>
        <argsstring>(Node_index n, std::size_t i) const</argsstring>
        <name>child</name>
        <qualifiedname>CGAL::Orthtree::child</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns a node&apos;s <computeroutput>i</computeroutput>th child. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>!is_leaf()</computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the node to retrieve the child of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>in [0, 2^D) specifying the child to retrieve</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the <computeroutput>i</computeroutput>th child of node n </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="909" column="14" bodyfile="CGAL/Orthtree.h" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a8f8a423081c7471015bf967265797623" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Indices</declname>
            <defname>Indices</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::descendant</definition>
        <argsstring>(Node_index node, Indices... indices)</argsstring>
        <name>descendant</name>
        <qualifiedname>CGAL::Orthtree::descendant</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>Indices...</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>retrieves an arbitrary descendant of the node specified by <computeroutput>node</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Convenience function to avoid the need to call <computeroutput>orthtree.child(orthtree.child(node, 0), 1)</computeroutput>.</para>
<para>Each index in <computeroutput>indices</computeroutput> specifies which child to enter as descending the tree from <computeroutput>node</computeroutput> down. Indices are evaluated in the order they appear as parameters, so <computeroutput>descendant(root, 0, 1)</computeroutput> returns the second child of the first child of the root.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to descend </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>the integer indices specifying the descent to perform</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the specified descendant node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="929" column="14" bodyfile="CGAL/Orthtree.h" bodystart="929" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a3feac2246ded1dcb863706912936116e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Indices</declname>
            <defname>Indices</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::node</definition>
        <argsstring>(Indices... indices)</argsstring>
        <name>node</name>
        <qualifiedname>CGAL::Orthtree::node</qualifiedname>
        <param>
          <type>Indices...</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>convenience function for retrieving arbitrary nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <computeroutput>tree.descendant(tree.root(), indices...)</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>the integer indices specifying the descent to perform, starting from the root</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the specified node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="943" column="14" bodyfile="CGAL/Orthtree.h" bodystart="943" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a2d6ef6d88bef37f49493164b047480b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::optional&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt;</type>
        <definition>const std::optional&lt; Node_index &gt; CGAL::Orthtree&lt; GeomTraits &gt;::next_sibling</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>next_sibling</name>
        <qualifiedname>CGAL::Orthtree::next_sibling</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>finds the next sibling in the parent of the node specified by the index <computeroutput>n</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Traverses the tree in increasing order of local index (e.g., 000, 001, 010, etc.)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the node to find the sibling of</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the next sibling of n if n is not the last node in its parent, otherwise <computeroutput>std::nullopt</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="957" column="23" bodyfile="CGAL/Orthtree.h" bodystart="957" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1aa679a68fd0288cd04202b75622037813" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::optional&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt;</type>
        <definition>const std::optional&lt; Node_index &gt; CGAL::Orthtree&lt; GeomTraits &gt;::next_sibling_up</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>next_sibling_up</name>
        <qualifiedname>CGAL::Orthtree::next_sibling_up</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>finds the next sibling of the parent of the node specified by <computeroutput>n</computeroutput> if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the index node to find the sibling up of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the next sibling of the parent of n if n is not the root and its parent has a sibling, otherwise nothing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="981" column="23" bodyfile="CGAL/Orthtree.h" bodystart="981" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1ac45a90aeb90f0716e0e48f16d44a7555" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::deepest_first_child</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>deepest_first_child</name>
        <qualifiedname>CGAL::Orthtree::deepest_first_child</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>finds the leaf node reached when descending the tree and always choosing child 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the starting point of a depth-first traversal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the node to find the deepest first child of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the deepest first child of node n. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1006" column="14" bodyfile="CGAL/Orthtree.h" bodystart="1006" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a7ca35569da094a083a415cb5f0fc0ff6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt;</type>
        <definition>std::optional&lt; Node_index &gt; CGAL::Orthtree&lt; GeomTraits &gt;::first_child_at_depth</definition>
        <argsstring>(Node_index n, std::size_t d) const</argsstring>
        <name>first_child_at_depth</name>
        <qualifiedname>CGAL::Orthtree::first_child_at_depth</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>finds node reached when descending the tree to a depth <computeroutput>d</computeroutput> and always choosing child 0. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <computeroutput><ref refid="classCGAL_1_1Orthtree_1ac45a90aeb90f0716e0e48f16d44a7555" kindref="member">deepest_first_child()</ref></computeroutput>, but does go to a fixed depth.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the node to find the <computeroutput>d</computeroutput>th first child of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth to descend to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the <computeroutput>d</computeroutput>th first child, nothing if the tree is not deep enough. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1025" column="17" bodyfile="CGAL/Orthtree.h" bodystart="1025" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1ac8c8cf31c4ea90a655d1c88d857036cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Orthtree&lt; GeomTraits &gt;::split</definition>
        <argsstring>(Node_index n)</argsstring>
        <name>split</name>
        <qualifiedname>CGAL::Orthtree::split</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>splits a node into subnodes. </para>
        </briefdescription>
        <detaileddescription>
<para>Only leaf nodes should be split. When a node is split it is no longer a leaf node. The full set of <computeroutput>degree</computeroutput> children are constructed automatically, and their values are set. Contents of this node are <emphasis>not</emphasis> propagated automatically, this is responsibility of the <computeroutput>distribute_node_contents_object</computeroutput> in the traits class.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the node to split </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1056" column="8" bodyfile="CGAL/Orthtree.h" bodystart="1056" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1ac000a527e1dd660d1e29df0491006a05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1a4ac2d10c702ee9ddc4284fb06b214e57" kindref="member">Point</ref></type>
        <definition>Point CGAL::Orthtree&lt; GeomTraits &gt;::barycenter</definition>
        <argsstring>(Node_index n) const</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::Orthtree::barycenter</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>returns the center point of a node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the node to find the center point for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the center point of node n </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1103" column="9" bodyfile="CGAL/Orthtree.h" bodystart="1103" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a39aa961c73bd0166276d755bd4743b75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt;</type>
        <definition>std::optional&lt; Node_index &gt; CGAL::Orthtree&lt; GeomTraits &gt;::adjacent_node</definition>
        <argsstring>(Node_index n, const Local_coordinates &amp;direction) const</argsstring>
        <name>adjacent_node</name>
        <qualifiedname>CGAL::Orthtree::adjacent_node</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1a4d495b3fdb62a8ec35d179ce179c80b3" kindref="member">Local_coordinates</ref> &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>finds the directly adjacent node in a specific direction </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>direction.to_ulong &lt; 2 * dimension</computeroutput></para>
</simplesect>
Adjacent nodes are found according to several properties:<itemizedlist>
<listitem><para>adjacent nodes may be larger than the seek node, but never smaller</para>
</listitem><listitem><para>a node has at most <computeroutput>2 * dimension</computeroutput> different adjacent nodes (in 3D: left, right, up, down, front, back)</para>
</listitem><listitem><para>adjacent nodes are not required to be leaf nodes</para>
</listitem></itemizedlist>
</para>
<para>Here&apos;s a diagram demonstrating the concept for a quadtree:</para>
<para><programlisting><codeline><highlight class="normal">+---------------+---------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-------+-------+---+---+-------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/>A<sp/><sp/><sp/>|<sp/><sp/>(S)<sp/><sp/>+---A---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+---+---+-------+---+---+-------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+---+---+<sp/><sp/><sp/>A<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+---+---+-------+-------+-------+</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>(S) : Seek node</para>
</listitem><listitem><para>A : Adjacent node</para>
</listitem></itemizedlist>
</para>
<para>Note how the top adjacent node is larger than the seek node. The right adjacent node is the same size, even though it contains further subdivisions.</para>
<para>This implementation returns the adjacent node if it&apos;s found. If there is no adjacent node in that direction, it returns a null node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the node to find a neighbor of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>which way to find the adjacent node relative to this one. Each successive bit selects the direction for the corresponding dimension: for an octree in 3D, 010 means: negative direction in X, position direction in Y, negative direction in Z.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the adjacent node if it exists, nothing otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1207" column="17" bodyfile="CGAL/Orthtree.h" bodystart="1207" bodyend="1248"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a8e3777412132429918d4f9b2070cd9ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt;</type>
        <definition>std::optional&lt; Node_index &gt; CGAL::Orthtree&lt; GeomTraits &gt;::adjacent_node</definition>
        <argsstring>(Node_index n, Adjacency adjacency) const</argsstring>
        <name>adjacent_node</name>
        <qualifiedname>CGAL::Orthtree::adjacent_node</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1a99c2e9168773b25d932d2570c12f6118" kindref="member">Adjacency</ref></type>
          <declname>adjacency</declname>
        </param>
        <briefdescription>
<para>equivalent to <computeroutput><ref refid="classCGAL_1_1Orthtree_1a39aa961c73bd0166276d755bd4743b75" kindref="member">adjacent_node()</ref></computeroutput>, with an adjacency direction rather than a bitset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the node to find a neighbor of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adjacency</parametername>
</parameternamelist>
<parameterdescription>
<para>which way to find the adjacent node relative to this one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1256" column="17" bodyfile="CGAL/Orthtree.h" bodystart="1256" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a2be1272f2efa404da4243dfa3ef99440" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CGAL::Orthtree&lt; GeomTraits &gt;::is_topology_equal</definition>
        <argsstring>(Node_index lhsNode, const Self &amp;lhsTree, Node_index rhsNode, const Self &amp;rhsTree)</argsstring>
        <name>is_topology_equal</name>
        <qualifiedname>CGAL::Orthtree::is_topology_equal</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>lhsNode</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" kindref="member">Self</ref> &amp;</type>
          <declname>lhsTree</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>rhsNode</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" kindref="member">Self</ref> &amp;</type>
          <declname>rhsTree</declname>
        </param>
        <briefdescription>
<para>determines whether a pair of subtrees have the same topology. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhsNode</parametername>
</parameternamelist>
<parameterdescription>
<para>index of a node in lhsTree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lhsTree</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsNode</parametername>
</parameternamelist>
<parameterdescription>
<para>index of a node in rhsTree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsTree</parametername>
</parameternamelist>
<parameterdescription>
<para>another <ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if lhsNode and rhsNode have the same topology, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1123" column="15" bodyfile="CGAL/Orthtree.h" bodystart="1123" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1afcc2b401378db6162911e013eecb924a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CGAL::Orthtree&lt; GeomTraits &gt;::is_topology_equal</definition>
        <argsstring>(const Self &amp;lhs, const Self &amp;rhs)</argsstring>
        <name>is_topology_equal</name>
        <qualifiedname>CGAL::Orthtree::is_topology_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" kindref="member">Self</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" kindref="member">Self</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>helper function for calling <computeroutput><ref refid="classCGAL_1_1Orthtree_1a2be1272f2efa404da4243dfa3ef99440" kindref="member">is_topology_equal()</ref></computeroutput> on the root nodes of two trees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>another <ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>lhs</computeroutput> and <computeroutput>rhs</computeroutput> have the same topology, and <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1152" column="15" bodyfile="CGAL/Orthtree.h" bodystart="1152" bodyend="1154"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1add67bb9c45c45fdb4d4b56fe897314ea" prot="private" static="no">
        <type>Orthtrees::internal::Cartesian_ranges&lt; Traits &gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Cartesian_ranges =  Orthtrees::internal::Cartesian_ranges&lt;Traits&gt;</definition>
        <argsstring></argsstring>
        <name>Cartesian_ranges</name>
        <qualifiedname>CGAL::Orthtree::Cartesian_ranges</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="211" column="3" bodyfile="CGAL/Orthtree.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a3b939187f6f8ebfe727d4df0fc5dd23a" prot="private" static="no">
        <type>Properties::Experimental::Property_container&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Node_property_container =  Properties::Experimental::Property_container&lt;Node_index&gt;</definition>
        <argsstring></argsstring>
        <name>Node_property_container</name>
        <qualifiedname>CGAL::Orthtree::Node_property_container</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="212" column="3" bodyfile="CGAL/Orthtree.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1adad91abd95c5c01f65e1f6dd1b5511b4" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename Properties::Experimental::Property_container&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt;::template Array&lt; T &gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Property_array =  typename Properties::Experimental::Property_container&lt;Node_index&gt;::template Array&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>Property_array</name>
        <qualifiedname>CGAL::Orthtree::Property_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="215" column="3" bodyfile="CGAL/Orthtree.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Orthtree_1a8adb4a3be29b30378d41c0696b6d8e44" prot="private" static="no">
        <type>std::array&lt; <ref refid="classCGAL_1_1Orthtree_1a30f0f420b76eb8580b805bb091853841" kindref="member">FT</ref>, <ref refid="classCGAL_1_1Orthtree_1a96402476020b5d7e434465ccf69f9904" kindref="member">dimension</ref> &gt;</type>
        <definition>using CGAL::Orthtree&lt; GeomTraits &gt;::Bbox_dimensions =  std::array&lt;FT, dimension&gt;</definition>
        <argsstring></argsstring>
        <name>Bbox_dimensions</name>
        <qualifiedname>CGAL::Orthtree::Bbox_dimensions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="226" column="3" bodyfile="CGAL/Orthtree.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1aec4fac7ceeb196afd1c36459cc647a02" prot="private" static="no" mutable="no">
        <type>Traits</type>
        <definition>Traits CGAL::Orthtree&lt; GeomTraits &gt;::m_traits</definition>
        <argsstring></argsstring>
        <name>m_traits</name>
        <qualifiedname>CGAL::Orthtree::m_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="217" column="10" bodyfile="CGAL/Orthtree.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1a7f2a8dc2902e5f285db50ec7e08c70de" prot="private" static="no" mutable="no">
        <type>Node_property_container</type>
        <definition>Node_property_container CGAL::Orthtree&lt; GeomTraits &gt;::m_node_properties</definition>
        <argsstring></argsstring>
        <name>m_node_properties</name>
        <qualifiedname>CGAL::Orthtree::m_node_properties</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="219" column="27" bodyfile="CGAL/Orthtree.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1a1da760ef578a447704a6eb10e4a28cb8" prot="private" static="no" mutable="no">
        <type>Orthtree_impl::Node_data_wrapper&lt; Traits, <ref refid="classCGAL_1_1Orthtree_1a9a7eb5739c197b8360937690759f0c44" kindref="member">has_data</ref> &gt;</type>
        <definition>Orthtree_impl::Node_data_wrapper&lt;Traits, has_data&gt; CGAL::Orthtree&lt; GeomTraits &gt;::m_node_contents</definition>
        <argsstring></argsstring>
        <name>m_node_contents</name>
        <qualifiedname>CGAL::Orthtree::m_node_contents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="220" column="36" bodyfile="CGAL/Orthtree.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1ad911bd60a3605f77dad625212242bd0a" prot="private" static="no" mutable="no">
        <type>Property_array&lt; std::uint8_t &gt; &amp;</type>
        <definition>Property_array&lt;std::uint8_t&gt;&amp; CGAL::Orthtree&lt; GeomTraits &gt;::m_node_depths</definition>
        <argsstring></argsstring>
        <name>m_node_depths</name>
        <qualifiedname>CGAL::Orthtree::m_node_depths</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="221" column="18" bodyfile="CGAL/Orthtree.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1af3da8b3f9b4bba70cbf5193e91b88663" prot="private" static="no" mutable="no">
        <type>Property_array&lt; <ref refid="classCGAL_1_1Orthtree_1af129281538a90126489849d2594ebb8d" kindref="member">Global_coordinates</ref> &gt; &amp;</type>
        <definition>Property_array&lt;Global_coordinates&gt;&amp; CGAL::Orthtree&lt; GeomTraits &gt;::m_node_coordinates</definition>
        <argsstring></argsstring>
        <name>m_node_coordinates</name>
        <qualifiedname>CGAL::Orthtree::m_node_coordinates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="222" column="18" bodyfile="CGAL/Orthtree.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1ac6d6455aa02dfd4dceae36d8db8b1ade" prot="private" static="no" mutable="no">
        <type>Property_array&lt; std::optional&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt; &gt; &amp;</type>
        <definition>Property_array&lt;std::optional&lt;Node_index&gt; &gt;&amp; CGAL::Orthtree&lt; GeomTraits &gt;::m_node_parents</definition>
        <argsstring></argsstring>
        <name>m_node_parents</name>
        <qualifiedname>CGAL::Orthtree::m_node_parents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="223" column="18" bodyfile="CGAL/Orthtree.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1a03d51fd828d4be310e81d2031bcce537" prot="private" static="no" mutable="no">
        <type>Property_array&lt; std::optional&lt; <ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref> &gt; &gt; &amp;</type>
        <definition>Property_array&lt;std::optional&lt;Node_index&gt; &gt;&amp; CGAL::Orthtree&lt; GeomTraits &gt;::m_node_children</definition>
        <argsstring></argsstring>
        <name>m_node_children</name>
        <qualifiedname>CGAL::Orthtree::m_node_children</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="224" column="18" bodyfile="CGAL/Orthtree.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1a1a20986e505463927e06103ab30edf6c" prot="private" static="no" mutable="no">
        <type><ref refid="classCGAL_1_1Orthtree_1ac87e5e05fe5ef3ccad8d9290f4ec0ff4" kindref="member">Bbox</ref></type>
        <definition>Bbox CGAL::Orthtree&lt; GeomTraits &gt;::m_bbox</definition>
        <argsstring></argsstring>
        <name>m_bbox</name>
        <qualifiedname>CGAL::Orthtree::m_bbox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="227" column="8" bodyfile="CGAL/Orthtree.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1a967867628f306a43479ec26c66e52341" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Bbox_dimensions &gt;</type>
        <definition>std::vector&lt;Bbox_dimensions&gt; CGAL::Orthtree&lt; GeomTraits &gt;::m_side_per_depth</definition>
        <argsstring></argsstring>
        <name>m_side_per_depth</name>
        <qualifiedname>CGAL::Orthtree::m_side_per_depth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="228" column="15" bodyfile="CGAL/Orthtree.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Orthtree_1a187c399e84b6a7914581d5192546755d" prot="private" static="no" mutable="no">
        <type>Cartesian_ranges</type>
        <definition>Cartesian_ranges CGAL::Orthtree&lt; GeomTraits &gt;::cartesian_range</definition>
        <argsstring></argsstring>
        <name>cartesian_range</name>
        <qualifiedname>CGAL::Orthtree::cartesian_range</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="230" column="20" bodyfile="CGAL/Orthtree.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a3e22236377637264ff0992bf9fd10d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref> &amp;</type>
        <definition>Orthtree &amp; CGAL::Orthtree&lt; GeomTraits &gt;::operator=</definition>
        <argsstring>(const Orthtree &amp;other)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Orthtree::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="317" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1adfa4128141c5768cfea6dc9b1ad26d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref> &amp;</type>
        <definition>Orthtree &amp; CGAL::Orthtree&lt; GeomTraits &gt;::operator=</definition>
        <argsstring>(Orthtree &amp;&amp;other)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Orthtree::operator=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree" kindref="compound">Orthtree</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="319" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a2f7ff1b79cd8bc6f4ae4efd2b3311221" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::recursive_descendant</definition>
        <argsstring>(Node_index node, std::size_t i)</argsstring>
        <name>recursive_descendant</name>
        <qualifiedname>CGAL::Orthtree::recursive_descendant</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1264" column="14" bodyfile="CGAL/Orthtree.h" bodystart="1264" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a3f42c4f82a996fcc8d7d309004138213" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Indices</declname>
            <defname>Indices</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
        <definition>Node_index CGAL::Orthtree&lt; GeomTraits &gt;::recursive_descendant</definition>
        <argsstring>(Node_index node, std::size_t i, Indices... remaining_indices)</argsstring>
        <name>recursive_descendant</name>
        <qualifiedname>CGAL::Orthtree::recursive_descendant</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Indices...</type>
          <declname>remaining_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1267" column="14" bodyfile="CGAL/Orthtree.h" bodystart="1267" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1aeb0e2a2f65ea6adf457b995c13916888" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Orthtree&lt; GeomTraits &gt;::do_intersect</definition>
        <argsstring>(Node_index n, const Sphere &amp;sphere) const</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::Orthtree::do_intersect</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Orthtree_1af4dc25d22b8a1740ac781a81be9ba76e" kindref="member">Sphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1271" column="8" bodyfile="CGAL/Orthtree.h" bodystart="1271" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a72e83db77e1217c92985b03f682e2030" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
          <param>
            <type>typename Node_output_iterator</type>
          </param>
        </templateparamlist>
        <type>Node_output_iterator</type>
        <definition>Node_output_iterator CGAL::Orthtree&lt; GeomTraits &gt;::intersected_nodes_recursive</definition>
        <argsstring>(const Query &amp;query, Node_index node, Node_output_iterator output) const</argsstring>
        <name>intersected_nodes_recursive</name>
        <qualifiedname>CGAL::Orthtree::intersected_nodes_recursive</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>Node_output_iterator</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1281" column="24" bodyfile="CGAL/Orthtree.h" bodystart="1281" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Orthtree_1a8a97fe1c82523e515120a75137411c3b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Orthtree&lt; GeomTraits &gt;::nearest_k_neighbors_recursive</definition>
        <argsstring>(Sphere &amp;search_bounds, Node_index node, std::vector&lt; Result &gt; &amp;results, std::size_t k, FT epsilon=0) const -&gt; std::enable_if_t&lt; supports_neighbor_search &gt;</argsstring>
        <name>nearest_k_neighbors_recursive</name>
        <qualifiedname>CGAL::Orthtree::nearest_k_neighbors_recursive</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1af4dc25d22b8a1740ac781a81be9ba76e" kindref="member">Sphere</ref> &amp;</type>
          <declname>search_bounds</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" kindref="member">Node_index</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; Result &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Orthtree_1a30f0f420b76eb8580b805bb091853841" kindref="member">FT</ref></type>
          <declname>epsilon</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Orthtree.h" line="1302" column="8" bodyfile="CGAL/Orthtree.h" bodystart="1302" bodyend="1399"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A data structure using an axis-aligned hyperrectangle decomposition of dD space for efficient access and computation. </para>
    </briefdescription>
    <detaileddescription>
<para>It builds a hierarchy of nodes which subdivides the space. Each node represents an axis-aligned hyperrectangle region of space. The contents of nodes depend on the traits class, non-leaf nodes also contain <formula id="1">$2^{dim}$</formula> other nodes which further subdivide the region.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgOrthtreeRef_1gae24e1ab33fb7912f5554ff339ee26424" kindref="member">CGAL::Quadtree</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgOrthtreeRef_1ga937c2cf9aa6adc991f40c30071f0adad" kindref="member">CGAL::Octree</ref></computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classOrthtreeTraits" kindref="compound">OrthtreeTraits</ref></computeroutput> or <computeroutput><ref refid="classOrthtreeTraitsWithData" kindref="compound">OrthtreeTraitsWithData</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="CGAL/Orthtree.h" line="117" column="1" bodyfile="CGAL/Orthtree.h" bodystart="117" bodyend="1475"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Orthtree_1a1eed57ab7422c76fd3421b89e6916c96" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>add_property</name></member>
      <member refid="classCGAL_1_1Orthtree_1a99c2e9168773b25d932d2570c12f6118" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Adjacency</name></member>
      <member refid="classCGAL_1_1Orthtree_1a39aa961c73bd0166276d755bd4743b75" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>adjacent_node</name></member>
      <member refid="classCGAL_1_1Orthtree_1a8e3777412132429918d4f9b2070cd9ba" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>adjacent_node</name></member>
      <member refid="classCGAL_1_1Orthtree_1ac000a527e1dd660d1e29df0491006a05" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>barycenter</name></member>
      <member refid="classCGAL_1_1Orthtree_1ac87e5e05fe5ef3ccad8d9290f4ec0ff4" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Bbox</name></member>
      <member refid="classCGAL_1_1Orthtree_1ab0f9bff7f067845ad4cdb18aab3c55ea" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>bbox</name></member>
      <member refid="classCGAL_1_1Orthtree_1a8adb4a3be29b30378d41c0696b6d8e44" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Bbox_dimensions</name></member>
      <member refid="classCGAL_1_1Orthtree_1a187c399e84b6a7914581d5192546755d" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>cartesian_range</name></member>
      <member refid="classCGAL_1_1Orthtree_1add67bb9c45c45fdb4d4b56fe897314ea" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Cartesian_ranges</name></member>
      <member refid="classCGAL_1_1Orthtree_1ad1d35de554997f6d08976054edec8cf6" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>child</name></member>
      <member refid="classCGAL_1_1Orthtree_1a65d55b9b37ef19965ca3c6cfbcf9cbcc" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>compute_cartesian_coordinate</name></member>
      <member refid="classCGAL_1_1Orthtree_1a999b2b3c258e04af375c24b374249b48" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>data</name></member>
      <member refid="classCGAL_1_1Orthtree_1a0e89107a952303d1a1902b8e9822e610" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>data</name></member>
      <member refid="classCGAL_1_1Orthtree_1ac45a90aeb90f0716e0e48f16d44a7555" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>deepest_first_child</name></member>
      <member refid="classCGAL_1_1Orthtree_1ad1a116e9dec0f9ee204744510952925a" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>degree</name></member>
      <member refid="classCGAL_1_1Orthtree_1a534e65d99fe77796e84df929249b3f33" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>depth</name></member>
      <member refid="classCGAL_1_1Orthtree_1a25752f941cfeb52ba393b44cbe599803" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>depth</name></member>
      <member refid="classCGAL_1_1Orthtree_1a8f8a423081c7471015bf967265797623" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>descendant</name></member>
      <member refid="classCGAL_1_1Orthtree_1a96402476020b5d7e434465ccf69f9904" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Orthtree_1aeb0e2a2f65ea6adf457b995c13916888" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>do_intersect</name></member>
      <member refid="classCGAL_1_1Orthtree_1a7ca35569da094a083a415cb5f0fc0ff6" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>first_child_at_depth</name></member>
      <member refid="classCGAL_1_1Orthtree_1a30f0f420b76eb8580b805bb091853841" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>FT</name></member>
      <member refid="classCGAL_1_1Orthtree_1af129281538a90126489849d2594ebb8d" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Global_coordinates</name></member>
      <member refid="classCGAL_1_1Orthtree_1a3e4a2e01980082bc81557db90b1f62b1" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>global_coordinates</name></member>
      <member refid="classCGAL_1_1Orthtree_1a163f19e9594282378fe8059d6b48fc88" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>grade</name></member>
      <member refid="classCGAL_1_1Orthtree_1a9a7eb5739c197b8360937690759f0c44" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>has_data</name></member>
      <member refid="classCGAL_1_1Orthtree_1a595f6d7c735f4c60c2c65e5ed2ef293c" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>intersected_nodes</name></member>
      <member refid="classCGAL_1_1Orthtree_1a72e83db77e1217c92985b03f682e2030" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>intersected_nodes_recursive</name></member>
      <member refid="classCGAL_1_1Orthtree_1ab811676ae7087731372c2ed0b801ebf8" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>is_leaf</name></member>
      <member refid="classCGAL_1_1Orthtree_1a7c7ec0670e949163125e32d96f94e33f" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>is_root</name></member>
      <member refid="classCGAL_1_1Orthtree_1a2be1272f2efa404da4243dfa3ef99440" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>is_topology_equal</name></member>
      <member refid="classCGAL_1_1Orthtree_1afcc2b401378db6162911e013eecb924a" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>is_topology_equal</name></member>
      <member refid="classCGAL_1_1Orthtree_1a8bdee414dfdfd7da5a08ea7b7bf7ceca" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Kernel</name></member>
      <member refid="classCGAL_1_1Orthtree_1a4e1c2ffce4d3914ded18a721db37b61d" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>local_coordinates</name></member>
      <member refid="classCGAL_1_1Orthtree_1a4d495b3fdb62a8ec35d179ce179c80b3" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Local_coordinates</name></member>
      <member refid="classCGAL_1_1Orthtree_1aaf2c3ef04be6579f4b3ba91c2ef1e3fb" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Orthtree_1a1a20986e505463927e06103ab30edf6c" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_bbox</name></member>
      <member refid="classCGAL_1_1Orthtree_1a03d51fd828d4be310e81d2031bcce537" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_node_children</name></member>
      <member refid="classCGAL_1_1Orthtree_1a1da760ef578a447704a6eb10e4a28cb8" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_node_contents</name></member>
      <member refid="classCGAL_1_1Orthtree_1af3da8b3f9b4bba70cbf5193e91b88663" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_node_coordinates</name></member>
      <member refid="classCGAL_1_1Orthtree_1ad911bd60a3605f77dad625212242bd0a" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_node_depths</name></member>
      <member refid="classCGAL_1_1Orthtree_1ac6d6455aa02dfd4dceae36d8db8b1ade" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_node_parents</name></member>
      <member refid="classCGAL_1_1Orthtree_1a7f2a8dc2902e5f285db50ec7e08c70de" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_node_properties</name></member>
      <member refid="classCGAL_1_1Orthtree_1a967867628f306a43479ec26c66e52341" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_side_per_depth</name></member>
      <member refid="classCGAL_1_1Orthtree_1aec4fac7ceeb196afd1c36459cc647a02" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>m_traits</name></member>
      <member refid="classCGAL_1_1Orthtree_1af82d344b5233588e4d52240ccaad0193" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>nearest_k_neighbors</name></member>
      <member refid="classCGAL_1_1Orthtree_1a8a97fe1c82523e515120a75137411c3b" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>nearest_k_neighbors_recursive</name></member>
      <member refid="classCGAL_1_1Orthtree_1a89ba0af67829c962d00c52055488ebfa" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>nearest_k_neighbors_within_radius</name></member>
      <member refid="classCGAL_1_1Orthtree_1a280c920b53dca4db5e510b9e7c966127" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>neighbors_within_radius</name></member>
      <member refid="classCGAL_1_1Orthtree_1a2d6ef6d88bef37f49493164b047480b9" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>next_sibling</name></member>
      <member refid="classCGAL_1_1Orthtree_1aa679a68fd0288cd04202b75622037813" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>next_sibling_up</name></member>
      <member refid="classCGAL_1_1Orthtree_1a3feac2246ded1dcb863706912936116e" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>node</name></member>
      <member refid="classCGAL_1_1Orthtree_1aa547e4a0b876084eb67616d002450fe0" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Node_data</name></member>
      <member refid="classCGAL_1_1Orthtree_1aa68903c2bac01150edfd9f781bc35b8c" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Node_index</name></member>
      <member refid="classCGAL_1_1Orthtree_1ac64ad58ab63542e47220d1ecef4a2818" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Node_index_range</name></member>
      <member refid="classCGAL_1_1Orthtree_1a3b939187f6f8ebfe727d4df0fc5dd23a" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Node_property_container</name></member>
      <member refid="classCGAL_1_1Orthtree_1a8fe93cebf6492978c288c75b3c9003c0" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Orthtree_1a3e22236377637264ff0992bf9fd10d52" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Orthtree_1adfa4128141c5768cfea6dc9b1ad26d86" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Orthtree_1add758c075edb135d4caf214d9bf1f339" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Orthtree_1aeec5c5e64b90b82003558b3dec2de212" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Orthtree</name></member>
      <member refid="classCGAL_1_1Orthtree_1a1876e99f0262b5a73c1d7cd49841595d" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Orthtree</name></member>
      <member refid="classCGAL_1_1Orthtree_1a7abedde5717ef6de879852c024ff7c87" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Orthtree</name></member>
      <member refid="classCGAL_1_1Orthtree_1af08d75a0935cf8af33cbc942259c6fd6" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Orthtree</name></member>
      <member refid="classCGAL_1_1Orthtree_1a99c0b6f1e97ff888d076787915353e83" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>parent</name></member>
      <member refid="classCGAL_1_1Orthtree_1a4ac2d10c702ee9ddc4284fb06b214e57" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Orthtree_1a1e17168f52e398517e7332f9a39273ec" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>properties</name></member>
      <member refid="classCGAL_1_1Orthtree_1ae45690e71f4fbac4daae927808ed6f26" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>property</name></member>
      <member refid="classCGAL_1_1Orthtree_1adad91abd95c5c01f65e1f6dd1b5511b4" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Property_array</name></member>
      <member refid="classCGAL_1_1Orthtree_1a38528c13ec0ee505bef5533cd99b3b3a" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Property_map</name></member>
      <member refid="classCGAL_1_1Orthtree_1a2f7ff1b79cd8bc6f4ae4efd2b3311221" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>recursive_descendant</name></member>
      <member refid="classCGAL_1_1Orthtree_1a3f42c4f82a996fcc8d7d309004138213" prot="private" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>recursive_descendant</name></member>
      <member refid="classCGAL_1_1Orthtree_1aacc01689e01cf63ddbf033c73fa96b55" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>refine</name></member>
      <member refid="classCGAL_1_1Orthtree_1a8f19f4c125a74e8ee71269a288e551f9" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>refine</name></member>
      <member refid="classCGAL_1_1Orthtree_1ab22254f287d37c8dfe3db38fa6ba32af" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>remove_property</name></member>
      <member refid="classCGAL_1_1Orthtree_1acb22ce8df61c3ad539cf24390472f80e" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>root</name></member>
      <member refid="classCGAL_1_1Orthtree_1af5b48b697d9de75fdd133590b31b0aa5" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Self</name></member>
      <member refid="classCGAL_1_1Orthtree_1af4dc25d22b8a1740ac781a81be9ba76e" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Sphere</name></member>
      <member refid="classCGAL_1_1Orthtree_1ac8c8cf31c4ea90a655d1c88d857036cf" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>split</name></member>
      <member refid="classCGAL_1_1Orthtree_1a17cefc00b4625f5bd9c82e9ad710fc57" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>Split_predicate</name></member>
      <member refid="classCGAL_1_1Orthtree_1aa9950180d4635885babc5caf33854062" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>supports_neighbor_search</name></member>
      <member refid="classCGAL_1_1Orthtree_1a08f31128cd8cd87146a5829b79d130b3" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>traits</name></member>
      <member refid="classCGAL_1_1Orthtree_1a92abb1c566bb8e967a9d24bae321dac9" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>traverse</name></member>
      <member refid="classCGAL_1_1Orthtree_1af3eaf7030f7d87317bd490b44aac17a3" prot="public" virt="non-virtual"><scope>CGAL::Orthtree</scope><name>traverse</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
