<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgSurfaceMeshSegmentationRef_1ga455877137a269a61c1b980609adeac78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class SDFPropertyMap</type>
          </param>
          <param>
            <type>class PointPropertyMap</type>
            <defval>typename boost::property_map&lt;TriangleMesh, boost::vertex_point_t&gt;::type</defval>
          </param>
          <param>
            <type>class GeomTraits</type>
            <defval>typename Kernel_traits&lt;typename boost::property_traits&lt;PointPropertyMap&gt;::value_type&gt;::Kernel</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt; double, double &gt; CGAL::sdf_values</definition>
        <argsstring>(const TriangleMesh &amp;triangle_mesh, SDFPropertyMap sdf_values_map, double cone_angle=2.0/3.0 *CGAL_PI, std::size_t number_of_rays=25, bool postprocess=true, PointPropertyMap ppmap=PointPropertyMap(), GeomTraits traits=GeomTraits())</argsstring>
        <name>sdf_values</name>
        <qualifiedname>CGAL::sdf_values</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>triangle_mesh</declname>
        </param>
        <param>
          <type>SDFPropertyMap</type>
          <declname>sdf_values_map</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cone_angle</declname>
          <defval>2.0/3.0 *CGAL_PI</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>number_of_rays</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>postprocess</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>PointPropertyMap</type>
          <declname>ppmap</declname>
          <defval>PointPropertyMap()</defval>
        </param>
        <param>
          <type>GeomTraits</type>
          <declname>traits</declname>
          <defval>GeomTraits()</defval>
        </param>
        <briefdescription>
<para>Function computing the Shape Diameter Function over a surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements the Shape Diameter Function (SDF) as described in <ref refid="citelist_1CITEREF_Shapira2008Consistent" kindref="member">[4]</ref>. It is possible to compute raw SDF values (without post-processing). In such a case, -1 is used to indicate when no SDF value could be computed for a facet.</para>
<para><simplesect kind="pre"><para><computeroutput>is_triangle_mesh(triangle_mesh)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>FaceListGraph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SDFPropertyMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key and <computeroutput>double</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classSegmentationGeomTraits" kindref="compound">SegmentationGeomTraits</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointPropertyMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key and <computeroutput>GeomTraits::Point_3</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>triangle_mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>surface mesh on which SDF values are computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sdf_values_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDF value of each facet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cone_angle</parametername>
</parameternamelist>
<parameterdescription>
<para>opening angle in radians for the cone of each facet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_rays</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rays picked in the cone of each facet. In our experiments, we observe that increasing the number of rays beyond the default has little effect on the quality of the segmentation result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>postprocess</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, <computeroutput><ref refid="group__PkgSurfaceMeshSegmentationRef_1gaf57d1108ef1f1a6315e5e406006a4a3d" kindref="member">CGAL::sdf_values_postprocessing()</ref></computeroutput> is called on raw SDF value computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>traits class </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppmap</parametername>
</parameternamelist>
<parameterdescription>
<para>point property map. An overload is provided with <computeroutput>get(boost::vertex_point,triangle_mesh)</computeroutput> as default.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>minimum and maximum raw SDF values if <computeroutput>postprocess</computeroutput> is <computeroutput>true</computeroutput>, otherwise minimum and maximum SDF values (before linear normalization) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/mesh_segmentation.h" line="96" column="1" bodyfile="CGAL/mesh_segmentation.h" bodystart="96" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceMeshSegmentationRef_1gaf57d1108ef1f1a6315e5e406006a4a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class SDFPropertyMap</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt; double, double &gt; CGAL::sdf_values_postprocessing</definition>
        <argsstring>(const TriangleMesh &amp;triangle_mesh, SDFPropertyMap sdf_values_map)</argsstring>
        <name>sdf_values_postprocessing</name>
        <qualifiedname>CGAL::sdf_values_postprocessing</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>triangle_mesh</declname>
        </param>
        <param>
          <type>SDFPropertyMap</type>
          <declname>sdf_values_map</declname>
        </param>
        <briefdescription>
<para>Function post-processing raw SDF values computed per facet. </para>
        </briefdescription>
        <detaileddescription>
<para>Post-processing steps applied :<itemizedlist>
<listitem><para>Facets with -1 SDF values are assigned the average SDF value of their edge-adjacent neighbors. If there is still a facet having -1 SDF value, the minimum valid SDF value assigned to it. Note that this step is not inherited from the paper. The main reason for not assigning 0 to facets with no SDF values (i.e. -1) is that it can obstruct log-normalization process which takes place at the beginning of <computeroutput><ref refid="group__PkgSurfaceMeshSegmentationRef_1ga8a429857a748922d0e8460619db69764" kindref="member">CGAL::segmentation_from_sdf_values()</ref></computeroutput>.</para>
</listitem><listitem><para>SDF values are smoothed with bilateral filtering.</para>
</listitem><listitem><para>SDF values are linearly normalized between [0,1].</para>
</listitem></itemizedlist>
</para>
<para>See the section <ref refid="index_1Surface_mesh_segmentationPostprocessing" kindref="member">Post-processing of Raw SDF Values</ref> for more details.</para>
<para><simplesect kind="pre"><para><computeroutput>is_triangle_mesh(triangle_mesh)</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>Raw values should be greater or equal to 0. -1 indicates when no value could be computed</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>FaceListGraph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SDFPropertyMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key and <computeroutput>double</computeroutput> as value type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>triangle_mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>surface mesh on which SDF values are computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sdf_values_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDF value of each facet</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>minimum and maximum SDF values before linear normalization </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/mesh_segmentation.h" line="135" column="1" bodyfile="CGAL/mesh_segmentation.h" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceMeshSegmentationRef_1ga8a429857a748922d0e8460619db69764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class SDFPropertyMap</type>
          </param>
          <param>
            <type>class SegmentPropertyMap</type>
          </param>
          <param>
            <type>class PointPropertyMap</type>
            <defval>typename boost::property_map&lt;TriangleMesh, boost::vertex_point_t&gt;::type</defval>
          </param>
          <param>
            <type>class GeomTraits</type>
            <defval>typename Kernel_traits&lt;typename boost::property_traits&lt;PointPropertyMap&gt;::value_type&gt;::Kernel</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::segmentation_from_sdf_values</definition>
        <argsstring>(const TriangleMesh &amp;triangle_mesh, SDFPropertyMap sdf_values_map, SegmentPropertyMap segment_ids, std::size_t number_of_clusters=5, double smoothing_lambda=0.26, bool output_cluster_ids=false, PointPropertyMap ppmap=PointPropertyMap(), GeomTraits traits=GeomTraits())</argsstring>
        <name>segmentation_from_sdf_values</name>
        <qualifiedname>CGAL::segmentation_from_sdf_values</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>triangle_mesh</declname>
        </param>
        <param>
          <type>SDFPropertyMap</type>
          <declname>sdf_values_map</declname>
        </param>
        <param>
          <type>SegmentPropertyMap</type>
          <declname>segment_ids</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>number_of_clusters</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>double</type>
          <declname>smoothing_lambda</declname>
          <defval>0.26</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>output_cluster_ids</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>PointPropertyMap</type>
          <declname>ppmap</declname>
          <defval>PointPropertyMap()</defval>
        </param>
        <param>
          <type>GeomTraits</type>
          <declname>traits</declname>
          <defval>GeomTraits()</defval>
        </param>
        <briefdescription>
<para>Function computing the segmentation of a surface mesh given an SDF value per facet. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills a property map which associates a segment-id (in [0, number of segments -1]) or a cluster-id (in [0, <computeroutput>number_of_clusters</computeroutput> -1]) to each facet. A segment is a set of connected facets which are placed under the same cluster (see <ref refid="index_1fig__Cluster_vs_segment" kindref="member">fig__Cluster_vs_segment</ref>).</para>
<para><simplesect kind="note"><para>Log-normalization is applied on <computeroutput>sdf_values_map</computeroutput> before segmentation. As described in the original paper <ref refid="citelist_1CITEREF_Shapira2008Consistent" kindref="member">[4]</ref>, this normalization is done to preserve thin parts of the mesh by increasing the distance between smaller SDF values and reducing it between larger ones. </para>
</simplesect>
<simplesect kind="note"><para>There is no direct relation between the parameter <computeroutput>number_of_clusters</computeroutput> and the final number of segments after segmentation. However, setting a large number of clusters will result in a detailed segmentation of the mesh with a large number of segments.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>is_triangle_mesh(triangle_mesh)</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>number_of_clusters &gt; 0</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>FaceListGraph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SDFPropertyMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key and <computeroutput>double</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SegmentPropertyMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key and <computeroutput>std::size_t</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classSegmentationGeomTraits" kindref="compound">SegmentationGeomTraits</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointPropertyMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key and <computeroutput>GeomTraits::Point_3</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>triangle_mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>surface mesh corresponding to the SDF values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdf_values_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDF value of each facet between [0-1] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">segment_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>the segment or cluster id of each facet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_clusters</parametername>
</parameternamelist>
<parameterdescription>
<para>number of clusters for the soft clustering </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>smoothing_lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>factor which indicates the importance of the surface features for the energy minimization. It is recommended to choose a value in the interval [0,1]. See the section <ref refid="index_1Surface_mesh_segmentationGraphCut" kindref="member">Hard clustering</ref> for more details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_cluster_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>false</computeroutput> fill <computeroutput>segment_ids</computeroutput> with segment-ids, and with cluster-ids otherwise (see <ref refid="index_1fig__Cluster_vs_segment" kindref="member">fig__Cluster_vs_segment</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>traits class </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppmap</parametername>
</parameternamelist>
<parameterdescription>
<para>point property map. An overload is provided with <computeroutput>get(boost::vertex_point,triangle_mesh)</computeroutput> as default.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of segments if <computeroutput>output_cluster_ids</computeroutput> is set to <computeroutput>false</computeroutput> and <computeroutput>number_of_clusters</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/mesh_segmentation.h" line="191" column="1" bodyfile="CGAL/mesh_segmentation.h" bodystart="191" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSurfaceMeshSegmentationRef_1gabc864f396347009726b858434c6d8659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class SegmentPropertyMap</type>
          </param>
          <param>
            <type>class PointPropertyMap</type>
            <defval>typename boost::property_map&lt;TriangleMesh, boost::vertex_point_t&gt;::type</defval>
          </param>
          <param>
            <type>class GeomTraits</type>
            <defval>typename Kernel_traits&lt;typename boost::property_traits&lt;PointPropertyMap&gt;::value_type&gt;::Kernel</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::segmentation_via_sdf_values</definition>
        <argsstring>(const TriangleMesh &amp;triangle_mesh, SegmentPropertyMap segment_ids, double cone_angle=2.0/3.0 *CGAL_PI, std::size_t number_of_rays=25, std::size_t number_of_clusters=5, double smoothing_lambda=0.26, bool output_cluster_ids=false, PointPropertyMap ppmap=PointPropertyMap(), GeomTraits traits=GeomTraits())</argsstring>
        <name>segmentation_via_sdf_values</name>
        <qualifiedname>CGAL::segmentation_via_sdf_values</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>triangle_mesh</declname>
        </param>
        <param>
          <type>SegmentPropertyMap</type>
          <declname>segment_ids</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cone_angle</declname>
          <defval>2.0/3.0 *CGAL_PI</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>number_of_rays</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>number_of_clusters</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>double</type>
          <declname>smoothing_lambda</declname>
          <defval>0.26</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>output_cluster_ids</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>PointPropertyMap</type>
          <declname>ppmap</declname>
          <defval>PointPropertyMap()</defval>
        </param>
        <param>
          <type>GeomTraits</type>
          <declname>traits</declname>
          <defval>GeomTraits()</defval>
        </param>
        <briefdescription>
<para>Function computing the segmentation of a surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is equivalent to calling the functions <computeroutput><ref refid="group__PkgSurfaceMeshSegmentationRef_1ga455877137a269a61c1b980609adeac78" kindref="member">CGAL::sdf_values()</ref></computeroutput> and <computeroutput><ref refid="group__PkgSurfaceMeshSegmentationRef_1ga8a429857a748922d0e8460619db69764" kindref="member">CGAL::segmentation_from_sdf_values()</ref></computeroutput> with the same parameters.</para>
<para><simplesect kind="note"><para>There is no direct relation between the parameter <computeroutput>number_of_clusters</computeroutput> and the final number of segments after segmentation. However, setting a large number of clusters will result in a detailed segmentation of the mesh with a large number of segments. </para>
</simplesect>
<simplesect kind="note"><para>For computing segmentations of the mesh with different parameters (i.e. number of levels, and smoothing lambda), it is more efficient to first compute the SDF values using <computeroutput><ref refid="group__PkgSurfaceMeshSegmentationRef_1ga455877137a269a61c1b980609adeac78" kindref="member">CGAL::sdf_values()</ref></computeroutput> and use them in different calls to <computeroutput><ref refid="group__PkgSurfaceMeshSegmentationRef_1ga8a429857a748922d0e8460619db69764" kindref="member">CGAL::segmentation_from_sdf_values()</ref></computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>is_triangle_mesh(triangle_mesh)</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>number_of_clusters &gt; 0</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>FaceListGraph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SegmentPropertyMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key and <computeroutput>std::size_t</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classSegmentationGeomTraits" kindref="compound">SegmentationGeomTraits</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointPropertyMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key and <computeroutput>GeomTraits::Point_3</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>triangle_mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>surface mesh on which SDF values are computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">segment_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>the segment or cluster id of each facet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cone_angle</parametername>
</parameternamelist>
<parameterdescription>
<para>opening angle in radians for the cone of each facet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_rays</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rays picked in the cone of each facet. In our experiments, we observe that increasing the number of rays beyond the default has a little effect on the quality of the segmentation result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_clusters</parametername>
</parameternamelist>
<parameterdescription>
<para>number of clusters for the soft clustering </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>smoothing_lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>factor which indicates the importance of the surface features for the energy minimization. It is recommended to choose a value in the interval [0,1]. See the section <ref refid="index_1Surface_mesh_segmentationGraphCut" kindref="member">Hard clustering</ref> for more details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_cluster_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>false</computeroutput> fill <computeroutput>segment_ids</computeroutput> with segment-ids, and with cluster-ids otherwise (see <ref refid="index_1fig__Cluster_vs_segment" kindref="member">fig__Cluster_vs_segment</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>traits class </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppmap</parametername>
</parameternamelist>
<parameterdescription>
<para>point property map. An overload is provided with <computeroutput>get(boost::vertex_point,triangle_mesh)</computeroutput> as default.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of segments if <computeroutput>output_cluster_ids</computeroutput> is set to <computeroutput>false</computeroutput> and <computeroutput>number_of_clusters</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/mesh_segmentation.h" line="286" column="1" bodyfile="CGAL/mesh_segmentation.h" bodystart="286" bodyend="299"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Surface_Mesh_Segmentation.txt" line="1" column="1"/>
  </compounddef>
</doxygen>
