<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Object" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Object</compoundname>
    <includes local="no">CGAL/Object.h</includes>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <description><para>Objects of type <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound">Object</ref></computeroutput> are normally created using the global function <computeroutput><ref refid="classCGAL_1_1Object_1a542143c3bc5408e43f552dfe5cce9092" kindref="member">make_object()</ref></computeroutput>. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Object_1a9aa74740c3aaa46b506357668080fda8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Object::Object</definition>
        <argsstring>()</argsstring>
        <name>Object</name>
        <qualifiedname>CGAL::Object::Object</qualifiedname>
        <briefdescription>
<para>introduces an empty object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1a968986e9c7acdc3f3984206eaac1e6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Object::Object</definition>
        <argsstring>(const Object &amp;o)</argsstring>
        <name>Object</name>
        <qualifiedname>CGAL::Object::Object</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Object" kindref="compound">Object</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1ad09b12b6c8fa8be2f7a0e39feb659edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Object::Object</definition>
        <argsstring>(std::variant&lt; T... &gt;)</argsstring>
        <name>Object</name>
        <qualifiedname>CGAL::Object::Object</qualifiedname>
        <param>
          <type>std::variant&lt; T... &gt;</type>
        </param>
        <briefdescription>
<para>Implicit converting constructor for compatibility with <computeroutput>std::variant</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1aec6773242ca8e25a4a7b63d9317c453f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Object::Object</definition>
        <argsstring>(std::optional&lt; std::variant&lt; T... &gt; &gt;)</argsstring>
        <name>Object</name>
        <qualifiedname>CGAL::Object::Object</qualifiedname>
        <param>
          <type>std::optional&lt; std::variant&lt; T... &gt; &gt;</type>
        </param>
        <briefdescription>
<para>Implicit converting constructor for compatibility with <computeroutput>std::optional</computeroutput> and <computeroutput>std::variant</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="122" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Object_1a9340944012cabd733aabed7dea145179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Object" kindref="compound">Object</ref> &amp;</type>
        <definition>Object &amp; CGAL::Object::operator=</definition>
        <argsstring>(const Object &amp;o)</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Object::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Object" kindref="compound">Object</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="132" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1a610357f4a3f6b11455a7af767ce82d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Object::empty</definition>
        <argsstring>()</argsstring>
        <name>empty</name>
        <qualifiedname>CGAL::Object::empty</qualifiedname>
        <briefdescription>
<para>returns true, if <computeroutput>obj</computeroutput> does not contain an object of type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="143" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1ab551ec4d2225ca284383a4a5055baca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Object::is</definition>
        <argsstring>()</argsstring>
        <name>is</name>
        <qualifiedname>CGAL::Object::is</qualifiedname>
        <briefdescription>
<para>returns true, iff <computeroutput>obj</computeroutput> contains an object of type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="152" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1afcc406ddff2eaf08c4bab5c849f87f05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::type_info &amp;</type>
        <definition>const std::type_info &amp; CGAL::Object::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>CGAL::Object::type</qualifiedname>
        <briefdescription>
<para>returns the type information of the contained type, or <computeroutput>typeid(void)</computeroutput> if empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="165" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Object_1a542143c3bc5408e43f552dfe5cce9092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Object" kindref="compound">Object</ref></type>
        <definition>Object make_object</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>make_object</name>
        <qualifiedname>CGAL::Object::make_object</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Creates an object that contains <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="178" column="20" declfile="CGAL/Object.h" declline="178" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1a6cd03d486c93493970fc5c35c0eb72e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool assign</definition>
        <argsstring>(T &amp;c, const Object &amp;o)</argsstring>
        <name>assign</name>
        <qualifiedname>CGAL::Object::assign</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Object" kindref="compound">Object</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>assigns <computeroutput>o</computeroutput> to <computeroutput>c</computeroutput> if <computeroutput>o</computeroutput> was constructed from an object of type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput>, if the assignment was possible. For efficiency reasons, we recommend using <computeroutput>object_cast</computeroutput> instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="189" column="18" declfile="CGAL/Object.h" declline="189" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1aeb2187f31a9d68626ec0766160f11381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T * object_cast</definition>
        <argsstring>(const Object *o)</argsstring>
        <name>object_cast</name>
        <qualifiedname>CGAL::Object::object_cast</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Object" kindref="compound">Object</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns a pointer to the object of type <computeroutput>T</computeroutput> stored by <computeroutput>o</computeroutput>, if any, otherwise returns <computeroutput>NULL</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="196" column="22" declfile="CGAL/Object.h" declline="196" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Object_1afffe29c518841eaf9d9fe3c65cd163c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T object_cast</definition>
        <argsstring>(const Object &amp;o)</argsstring>
        <name>object_cast</name>
        <qualifiedname>CGAL::Object::object_cast</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Object" kindref="compound">Object</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns a copy of the object of type <computeroutput>T</computeroutput> stored by <computeroutput>o</computeroutput>, if any, otherwise throws an exception of type <computeroutput>Bad_object_cast</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Object.h" line="203" column="15" declfile="CGAL/Object.h" declline="203" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Some functions can return different types of objects. </para>
    </briefdescription>
    <detaileddescription>
<para>A typical C++ solution to this problem is to derive all possible return types from a common base class, to return a pointer to this class and to perform a dynamic cast on this pointer. The class <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound">Object</ref></computeroutput> provides an abstraction. An object <computeroutput>obj</computeroutput> of the class <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound">Object</ref></computeroutput> can represent an arbitrary class. The only operations it provides is to make copies and assignments, so that you can put them in lists or arrays. Note that <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound">Object</ref></computeroutput> is NOT a common base class for the elementary classes. Therefore, there is no automatic conversion from these classes to <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound">Object</ref></computeroutput>. Rather this is done with the global function <computeroutput><ref refid="classCGAL_1_1Object_1a542143c3bc5408e43f552dfe5cce9092" kindref="member">make_object()</ref></computeroutput>. This encapsulation mechanism requires the use of <computeroutput>assign</computeroutput> or <computeroutput>object_cast</computeroutput> to use the functionality of the encapsulated class.</para>
<para>This class is similar in spirit to <computeroutput>std::any</computeroutput>.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>In the following example, the object class is used as return value for the intersection computation, as there are possibly different return values.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Cartesian&lt;double&gt;<sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Point_2<sp/>point;</highlight></codeline>
<codeline><highlight class="normal">Segment_2<sp/>segment,<sp/>segment_1,<sp/>segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cin<sp/>&gt;&gt;<sp/>segment_1<sp/>&gt;&gt;<sp/>segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Object_1a9aa74740c3aaa46b506357668080fda8" kindref="member">Object</ref><sp/>obj<sp/>=<sp/><ref refid="group__intersection__linear__grp_1gade00253914ac774cce3d2031c07d74fe" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">intersection</ref>(segment_1,<sp/>segment_2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCGAL_1_1Object_1a6cd03d486c93493970fc5c35c0eb72e4" kindref="member">assign</ref>(point,<sp/>obj))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//do<sp/>something<sp/>with<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCGAL_1_1Object_1a6cd03d486c93493970fc5c35c0eb72e4" kindref="member">assign</ref>(segment,<sp/>obj))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//there<sp/>was<sp/>no<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>A more efficient way to access the object is to use <computeroutput>object_cast</computeroutput>, which allows to skip a default construction and assignment:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Cartesian&lt;double&gt;<sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Segment_2<sp/>Segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Segment_2<sp/>segment_1,<sp/>segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cin<sp/>&gt;&gt;<sp/>segment_1<sp/>&gt;&gt;<sp/>segment_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Object_1a9aa74740c3aaa46b506357668080fda8" kindref="member">Object</ref><sp/>obj<sp/>=<sp/><ref refid="group__intersection__linear__grp_1gade00253914ac774cce3d2031c07d74fe" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">intersection</ref>(segment_1,<sp/>segment_2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point_2<sp/>*<sp/>point<sp/>=<sp/>object_cast&lt;Point_2&gt;(&amp;obj))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>*point</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Segment_2<sp/>*<sp/>segment<sp/>=<sp/>object_cast&lt;Segment_2&gt;(&amp;obj))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>*segment</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>was<sp/>no<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The intersection routine itself looks roughly as follows:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Kernel<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Object_1a9aa74740c3aaa46b506357668080fda8" kindref="member">Object</ref><sp/><ref refid="group__intersection__linear__grp_1gade00253914ac774cce3d2031c07d74fe" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">intersection</ref>(Segment_2&lt;Kernel&gt;<sp/>s1,<sp/>Segment_2&lt;Kernel&gt;<sp/>s2)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>intersection_is_a_point<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Point_2&lt;Kernel&gt;<sp/>p<sp/>=<sp/>...<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Object_1a542143c3bc5408e43f552dfe5cce9092" kindref="member">make_object</ref>(p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>intersection_is_a_segment<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Segment_2&lt;Kernel&gt;<sp/>s<sp/>=<sp/>...<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Object_1a542143c3bc5408e43f552dfe5cce9092" kindref="member">make_object</ref>(s);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Object_1a9aa74740c3aaa46b506357668080fda8" kindref="member">Object</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="CGAL/Object.h" line="95" column="1" bodyfile="CGAL/Object.h" bodystart="95" bodyend="169"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Object_1a6cd03d486c93493970fc5c35c0eb72e4" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>assign</name></member>
      <member refid="classCGAL_1_1Object_1a610357f4a3f6b11455a7af767ce82d13" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>empty</name></member>
      <member refid="classCGAL_1_1Object_1ab551ec4d2225ca284383a4a5055baca9" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>is</name></member>
      <member refid="classCGAL_1_1Object_1a542143c3bc5408e43f552dfe5cce9092" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>make_object</name></member>
      <member refid="classCGAL_1_1Object_1a9aa74740c3aaa46b506357668080fda8" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>Object</name></member>
      <member refid="classCGAL_1_1Object_1a968986e9c7acdc3f3984206eaac1e6a6" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>Object</name></member>
      <member refid="classCGAL_1_1Object_1ad09b12b6c8fa8be2f7a0e39feb659edd" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>Object</name></member>
      <member refid="classCGAL_1_1Object_1aec6773242ca8e25a4a7b63d9317c453f" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>Object</name></member>
      <member refid="classCGAL_1_1Object_1aeb2187f31a9d68626ec0766160f11381" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>object_cast</name></member>
      <member refid="classCGAL_1_1Object_1afffe29c518841eaf9d9fe3c65cd163c4" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>object_cast</name></member>
      <member refid="classCGAL_1_1Object_1a9340944012cabd733aabed7dea145179" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Object_1afcc406ddff2eaf08c4bab5c849f87f05" prot="public" virt="non-virtual"><scope>CGAL::Object</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
