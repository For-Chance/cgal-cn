<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="structCGAL_1_1Concurrent__compact__container__traits" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Concurrent_compact_container_traits</compoundname>
    <includes local="no">CGAL/Concurrent_compact_container.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="structCGAL_1_1Concurrent__compact__container__traits_1af0fcefcb537ab4f286a44500214b1b3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * CGAL::Concurrent_compact_container_traits&lt; T &gt;::pointer</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>pointer</name>
        <qualifiedname>CGAL::Concurrent_compact_container_traits::pointer</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns the pointer held by <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The template version defines this function as: <computeroutput>return t.for_compact_container();</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="36" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Concurrent__compact__container__traits_1a7cc9b0a63f1c93f8644a8d4fcfc8f3cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CGAL::Concurrent_compact_container_traits&lt; T &gt;::set_pointer</definition>
        <argsstring>(T &amp;t, void *p)</argsstring>
        <name>set_pointer</name>
        <qualifiedname>CGAL::Concurrent_compact_container_traits::set_pointer</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Sets the pointer held by <computeroutput>t</computeroutput> to <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The template version defines this function as: <computeroutput>t.for_compact_container(p);</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Concurrent_compact_container.h" line="47" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The traits class <computeroutput><ref refid="structCGAL_1_1Concurrent__compact__container__traits" kindref="compound">Concurrent_compact_container_traits</ref></computeroutput> provides the way to access the internal pointer required for <computeroutput>T</computeroutput> to be used in a <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref>&lt;T, Allocator&gt;</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para>Note that this pointer needs to be accessible even when the object is not constructed, which means it has to reside in the same memory place as <computeroutput>T</computeroutput>.</para>
<para>You can specialize this class for your own type <computeroutput>T</computeroutput> if the default template is not suitable.</para>
<para>You can also use <computeroutput><ref refid="classCGAL_1_1Compact__container__base" kindref="compound">Compact_container_base</ref></computeroutput> as base class for your own types <computeroutput>T</computeroutput> to make them usable with the default <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref></computeroutput>.</para>
<para><bold>Parameters</bold><linebreak/>
</para>
<para><computeroutput>T</computeroutput> is any type providing the following member functions: <computeroutput>void * t.for_compact_container() const;</computeroutput> <computeroutput>void t.for_compact_container(void *);</computeroutput>. </para>
    </detaileddescription>
    <location file="CGAL/Concurrent_compact_container.h" line="28" column="1" bodyfile="CGAL/Concurrent_compact_container.h" bodystart="28" bodyend="51"/>
    <listofallmembers>
      <member refid="structCGAL_1_1Concurrent__compact__container__traits_1af0fcefcb537ab4f286a44500214b1b3d" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container_traits</scope><name>pointer</name></member>
      <member refid="structCGAL_1_1Concurrent__compact__container__traits_1a7cc9b0a63f1c93f8644a8d4fcfc8f3cb" prot="public" virt="non-virtual"><scope>CGAL::Concurrent_compact_container_traits</scope><name>set_pointer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
