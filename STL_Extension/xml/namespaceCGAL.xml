<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="structCGAL_1_1Boolean__tag" prot="public">CGAL::Boolean_tag</innerclass>
    <innerclass refid="structCGAL_1_1Cast__function__object" prot="public">CGAL::Cast_function_object</innerclass>
    <innerclass refid="classCGAL_1_1CC__safe__handle" prot="public">CGAL::CC_safe_handle</innerclass>
    <innerclass refid="structCGAL_1_1Compact" prot="public">CGAL::Compact</innerclass>
    <innerclass refid="classCGAL_1_1Compact__container" prot="public">CGAL::Compact_container</innerclass>
    <innerclass refid="classCGAL_1_1Compact__container__base" prot="public">CGAL::Compact_container_base</innerclass>
    <innerclass refid="structCGAL_1_1Compact__container__traits" prot="public">CGAL::Compact_container_traits</innerclass>
    <innerclass refid="classCGAL_1_1Compare__to__less" prot="public">CGAL::Compare_to_less</innerclass>
    <innerclass refid="classCGAL_1_1Concurrent__compact__container" prot="public">CGAL::Concurrent_compact_container</innerclass>
    <innerclass refid="structCGAL_1_1Concurrent__compact__container__traits" prot="public">CGAL::Concurrent_compact_container_traits</innerclass>
    <innerclass refid="classCGAL_1_1Const__oneset__iterator" prot="public">CGAL::Const_oneset_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Construct__array" prot="public">CGAL::Construct_array</innerclass>
    <innerclass refid="classCGAL_1_1Counting__iterator" prot="public">CGAL::Counting_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Creator__1" prot="public">CGAL::Creator_1</innerclass>
    <innerclass refid="classCGAL_1_1Creator__2" prot="public">CGAL::Creator_2</innerclass>
    <innerclass refid="classCGAL_1_1Creator__3" prot="public">CGAL::Creator_3</innerclass>
    <innerclass refid="classCGAL_1_1Creator__4" prot="public">CGAL::Creator_4</innerclass>
    <innerclass refid="classCGAL_1_1Creator__5" prot="public">CGAL::Creator_5</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__2" prot="public">CGAL::Creator_uniform_2</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__3" prot="public">CGAL::Creator_uniform_3</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__4" prot="public">CGAL::Creator_uniform_4</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__5" prot="public">CGAL::Creator_uniform_5</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__6" prot="public">CGAL::Creator_uniform_6</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__7" prot="public">CGAL::Creator_uniform_7</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__8" prot="public">CGAL::Creator_uniform_8</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__9" prot="public">CGAL::Creator_uniform_9</innerclass>
    <innerclass refid="classCGAL_1_1Creator__uniform__d" prot="public">CGAL::Creator_uniform_d</innerclass>
    <innerclass refid="structCGAL_1_1Default" prot="public">CGAL::Default</innerclass>
    <innerclass refid="structCGAL_1_1Dereference" prot="public">CGAL::Dereference</innerclass>
    <innerclass refid="classCGAL_1_1Dispatch__or__drop__output__iterator" prot="public">CGAL::Dispatch_or_drop_output_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Dispatch__output__iterator" prot="public">CGAL::Dispatch_output_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Emptyset__iterator" prot="public">CGAL::Emptyset_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Fast" prot="public">CGAL::Fast</innerclass>
    <innerclass refid="structCGAL_1_1Filter__iterator" prot="public">CGAL::Filter_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Fourtuple" prot="public">CGAL::Fourtuple</innerclass>
    <innerclass refid="structCGAL_1_1Get__address" prot="public">CGAL::Get_address</innerclass>
    <innerclass refid="structCGAL_1_1Identity" prot="public">CGAL::Identity</innerclass>
    <innerclass refid="classCGAL_1_1In__place__list" prot="public">CGAL::In_place_list</innerclass>
    <innerclass refid="classCGAL_1_1In__place__list__base" prot="public">CGAL::In_place_list_base</innerclass>
    <innerclass refid="classCGAL_1_1Insert__iterator" prot="public">CGAL::Insert_iterator</innerclass>
    <innerclass refid="classCGAL_1_1Inverse__index" prot="public">CGAL::Inverse_index</innerclass>
    <innerclass refid="classCGAL_1_1Iterator__range" prot="public">CGAL::Iterator_range</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__1" prot="public">CGAL::Join_input_iterator_1</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__2" prot="public">CGAL::Join_input_iterator_2</innerclass>
    <innerclass refid="classCGAL_1_1Join__input__iterator__3" prot="public">CGAL::Join_input_iterator_3</innerclass>
    <innerclass refid="structCGAL_1_1Location__policy" prot="public">CGAL::Location_policy</innerclass>
    <innerclass refid="structCGAL_1_1Manifold__tag" prot="public">CGAL::Manifold_tag</innerclass>
    <innerclass refid="structCGAL_1_1Manifold__with__boundary__tag" prot="public">CGAL::Manifold_with_boundary_tag</innerclass>
    <innerclass refid="classCGAL_1_1Multiset" prot="public">CGAL::Multiset</innerclass>
    <innerclass refid="classCGAL_1_1N__step__adaptor" prot="public">CGAL::N_step_adaptor</innerclass>
    <innerclass refid="structCGAL_1_1Non__manifold__tag" prot="public">CGAL::Non_manifold_tag</innerclass>
    <innerclass refid="structCGAL_1_1Null__functor" prot="public">CGAL::Null_functor</innerclass>
    <innerclass refid="structCGAL_1_1Null__tag" prot="public">CGAL::Null_tag</innerclass>
    <innerclass refid="classCGAL_1_1Object" prot="public">CGAL::Object</innerclass>
    <innerclass refid="classCGAL_1_1Oneset__iterator" prot="public">CGAL::Oneset_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Parallel__if__available__tag" prot="public">CGAL::Parallel_if_available_tag</innerclass>
    <innerclass refid="structCGAL_1_1Parallel__tag" prot="public">CGAL::Parallel_tag</innerclass>
    <innerclass refid="structCGAL_1_1Project__facet" prot="public">CGAL::Project_facet</innerclass>
    <innerclass refid="structCGAL_1_1Project__next" prot="public">CGAL::Project_next</innerclass>
    <innerclass refid="structCGAL_1_1Project__next__opposite" prot="public">CGAL::Project_next_opposite</innerclass>
    <innerclass refid="structCGAL_1_1Project__normal" prot="public">CGAL::Project_normal</innerclass>
    <innerclass refid="structCGAL_1_1Project__opposite__prev" prot="public">CGAL::Project_opposite_prev</innerclass>
    <innerclass refid="structCGAL_1_1Project__plane" prot="public">CGAL::Project_plane</innerclass>
    <innerclass refid="structCGAL_1_1Project__point" prot="public">CGAL::Project_point</innerclass>
    <innerclass refid="structCGAL_1_1Project__prev" prot="public">CGAL::Project_prev</innerclass>
    <innerclass refid="structCGAL_1_1Project__vertex" prot="public">CGAL::Project_vertex</innerclass>
    <innerclass refid="classCGAL_1_1Quadruple" prot="public">CGAL::Quadruple</innerclass>
    <innerclass refid="classCGAL_1_1Random__access__adaptor" prot="public">CGAL::Random_access_adaptor</innerclass>
    <innerclass refid="classCGAL_1_1Random__access__value__adaptor" prot="public">CGAL::Random_access_value_adaptor</innerclass>
    <innerclass refid="structCGAL_1_1Sequential__tag" prot="public">CGAL::Sequential_tag</innerclass>
    <innerclass refid="classCGAL_1_1Sixtuple" prot="public">CGAL::Sixtuple</innerclass>
    <innerclass refid="classCGAL_1_1Spatial__lock__grid__3" prot="public">CGAL::Spatial_lock_grid_3</innerclass>
    <innerclass refid="classCGAL_1_1Threetuple" prot="public">CGAL::Threetuple</innerclass>
    <innerclass refid="classCGAL_1_1Triple" prot="public">CGAL::Triple</innerclass>
    <innerclass refid="classCGAL_1_1Twotuple" prot="public">CGAL::Twotuple</innerclass>
    <innerclass refid="classCGAL_1_1Uncertain" prot="public">CGAL::Uncertain</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits" prot="public">CGAL::value_type_traits</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1back__insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::back_insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1front__insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::front_insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1value__type__traits_3_01std_1_1insert__iterator_3_01Container_01_4_01_4" prot="public">CGAL::value_type_traits&lt; std::insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innernamespace refid="namespaceCGAL_1_1cpp11">CGAL::cpp11</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1cpp98">CGAL::cpp98</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1parameters">CGAL::parameters</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="enum" id="group__PkgSTLExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" prot="public" static="no" strong="no">
        <type></type>
        <name>Failure_behaviour</name>
        <qualifiedname>CGAL::Failure_behaviour</qualifiedname>
        <enumvalue id="group__PkgSTLExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deeafd47edae67791f804b5f1b616f2782ff" prot="public">
          <name>ABORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSTLExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea03e7a9436476c257881f8ce46db26f7d" prot="public">
          <name>EXIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSTLExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deeaf7034bd0320b9bca60e23c0be889d728" prot="public">
          <name>EXIT_WITH_SUCCESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSTLExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea697442e04c769afa5f8506d7dd378ed4" prot="public">
          <name>CONTINUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgSTLExtensionAssertions_1ggac5eee7bb7edcc41dd3251042c5934deea47ef91f2d5d0efcdc748c65519d3532d" prot="public">
          <name>THROW_EXCEPTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/assertions_behaviour.h" line="12" column="1" bodyfile="CGAL/assertions_behaviour.h" bodystart="12" bodyend="13"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgSTLExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* CGAL::Failure_function) (const char *type, const char *expression, const char *file, int line, const char *explanation)</definition>
        <argsstring>)(const char *type, const char *expression, const char *file, int line, const char *explanation)</argsstring>
        <name>Failure_function</name>
        <qualifiedname>CGAL::Failure_function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>is a string that contains one of the words precondition, postcondition, assertion or warning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>contains the expression that was violated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>contain the place where the check was made. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>explanation</parametername>
</parameternamelist>
<parameterdescription>
<para>contains an explanation of what was checked. It can be <computeroutput>null_ptr</computeroutput>, in which case the expression is thought to be descriptive enough. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/assertions_behaviour.h" line="26" column="5" bodyfile="CGAL/assertions_behaviour.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSTLExtensionAssertions_1gaf17f67aed4fb6c658ec7cb3f96f9d838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgSTLExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member">Failure_function</ref></type>
        <definition>Failure_function CGAL::set_error_handler</definition>
        <argsstring>(Failure_function handler)</argsstring>
        <name>set_error_handler</name>
        <qualifiedname>CGAL::set_error_handler</qualifiedname>
        <param>
          <type><ref refid="group__PkgSTLExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member">Failure_function</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>This function is not thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/assertions_behaviour.h" line="35" column="1" declfile="CGAL/assertions_behaviour.h" declline="35" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSTLExtensionAssertions_1ga7bf05b83505d915fb23cb23337b34c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgSTLExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member">Failure_function</ref></type>
        <definition>Failure_function CGAL::set_warning_handler</definition>
        <argsstring>(Failure_function handler)</argsstring>
        <name>set_warning_handler</name>
        <qualifiedname>CGAL::set_warning_handler</qualifiedname>
        <param>
          <type><ref refid="group__PkgSTLExtensionAssertions_1ga22c85e11e31ba1f9954022947822983d" kindref="member">Failure_function</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>This function is not thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/assertions_behaviour.h" line="42" column="1" declfile="CGAL/assertions_behaviour.h" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSTLExtensionAssertions_1ga57511207f5935f17b3264e2d03124027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgSTLExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member">Failure_behaviour</ref></type>
        <definition>Failure_behaviour CGAL::set_error_behaviour</definition>
        <argsstring>(Failure_behaviour eb)</argsstring>
        <name>set_error_behaviour</name>
        <qualifiedname>CGAL::set_error_behaviour</qualifiedname>
        <param>
          <type><ref refid="group__PkgSTLExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member">Failure_behaviour</ref></type>
          <declname>eb</declname>
        </param>
        <briefdescription>
<para>This function is not thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/assertions_behaviour.h" line="49" column="1" declfile="CGAL/assertions_behaviour.h" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSTLExtensionAssertions_1gaeb4e85bca7bfc12e7fd086bf36a39a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PkgSTLExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member">Failure_behaviour</ref></type>
        <definition>Failure_behaviour CGAL::set_warning_behaviour</definition>
        <argsstring>(Failure_behaviour eb)</argsstring>
        <name>set_warning_behaviour</name>
        <qualifiedname>CGAL::set_warning_behaviour</qualifiedname>
        <param>
          <type><ref refid="group__PkgSTLExtensionAssertions_1gac5eee7bb7edcc41dd3251042c5934dee" kindref="member">Failure_behaviour</ref></type>
          <declname>eb</declname>
        </param>
        <briefdescription>
<para>This function is not thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/assertions_behaviour.h" line="56" column="1" declfile="CGAL/assertions_behaviour.h" declline="56" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__PkgSTLExtensionUtilities_1ga96bf435aef680d59e1bcb722239222dd" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Location__policy" kindref="compound">Location_policy</ref>&lt; <ref refid="structCGAL_1_1Compact" kindref="compound">Compact</ref> &gt;</type>
        <definition>typedef Location_policy&lt;Compact&gt; CGAL::Compact_location</definition>
        <argsstring></argsstring>
        <name>Compact_location</name>
        <qualifiedname>CGAL::Compact_location</qualifiedname>
        <briefdescription>
<para>A typedef to <computeroutput><ref refid="structCGAL_1_1Location__policy" kindref="compound">Location_policy</ref>&lt;<ref refid="structCGAL_1_1Compact" kindref="compound">Compact</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Compact" kindref="compound">Compact</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Fast" kindref="compound">Fast</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Location__policy" kindref="compound">Location_policy</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgSTLExtensionUtilities_1ga8f61a2b71f265bad92d78ae606afc830" kindref="member">Fast_location</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Location_policy.h" line="15" column="27" bodyfile="CGAL/Location_policy.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgSTLExtensionUtilities_1ga8f61a2b71f265bad92d78ae606afc830" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Location__policy" kindref="compound">Location_policy</ref>&lt; <ref refid="structCGAL_1_1Fast" kindref="compound">Fast</ref> &gt;</type>
        <definition>typedef Location_policy&lt;Fast&gt; CGAL::Fast_location</definition>
        <argsstring></argsstring>
        <name>Fast_location</name>
        <qualifiedname>CGAL::Fast_location</qualifiedname>
        <briefdescription>
<para>A typedef to <computeroutput><ref refid="structCGAL_1_1Location__policy" kindref="compound">Location_policy</ref>&lt;<ref refid="structCGAL_1_1Fast" kindref="compound">Fast</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Compact" kindref="compound">Compact</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Fast" kindref="compound">Fast</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Location__policy" kindref="compound">Location_policy</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgSTLExtensionUtilities_1ga96bf435aef680d59e1bcb722239222dd" kindref="member">Compact_location</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Location_policy.h" line="32" column="27" bodyfile="CGAL/Location_policy.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgSTLExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Boolean__tag" kindref="compound">CGAL::Boolean_tag</ref>&lt; false &gt;</type>
        <definition>typedef CGAL::Boolean_tag&lt;false&gt; CGAL::Tag_false</definition>
        <argsstring></argsstring>
        <name>Tag_false</name>
        <qualifiedname>CGAL::Tag_false</qualifiedname>
        <briefdescription>
<para>The typedef <computeroutput>Tag_false</computeroutput> is <computeroutput><ref refid="structCGAL_1_1Boolean__tag" kindref="compound">Boolean_tag</ref>&lt;false&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is used to indicate, for example, that a certain feature is not available in a class.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Boolean__tag" kindref="compound">CGAL::Boolean_tag</ref>&lt;bool value&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member">CGAL::Tag_true</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/tags.h" line="41" column="27" bodyfile="CGAL/tags.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Boolean__tag" kindref="compound">CGAL::Boolean_tag</ref>&lt; true &gt;</type>
        <definition>typedef CGAL::Boolean_tag&lt;true&gt; CGAL::Tag_true</definition>
        <argsstring></argsstring>
        <name>Tag_true</name>
        <qualifiedname>CGAL::Tag_true</qualifiedname>
        <briefdescription>
<para>The typedef <computeroutput>Tag_true</computeroutput> is <computeroutput><ref refid="structCGAL_1_1Boolean__tag" kindref="compound">Boolean_tag</ref>&lt;true&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is used to indicate, for example, that a certain feature is available in a class.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Boolean__tag" kindref="compound">CGAL::Boolean_tag</ref>&lt;bool value&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgSTLExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member">CGAL::Tag_false</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/tags.h" line="54" column="27" bodyfile="CGAL/tags.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__STLAlgos_1ga2f3822e4faf8eca315ef0f49c373d05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; ForwardIterator, ForwardIterator &gt;</type>
        <definition>std::pair&lt; ForwardIterator, ForwardIterator &gt; CGAL::min_max_element</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>min_max_element</name>
        <qualifiedname>CGAL::min_max_element</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Computes the minimal and the maximal element of a range. </para>
        </briefdescription>
        <detaileddescription>
<para>It is modeled after the STL functions <ulink url="https://en.cppreference.com/w/cpp/algorithm/min_element"><computeroutput>std::min_element</computeroutput></ulink> and <ulink url="https://en.cppreference.com/w/cpp/algorithm/max_element"><computeroutput>std::max_element</computeroutput></ulink>. The advantage of <computeroutput><ref refid="group__STLAlgos_1ga2f3822e4faf8eca315ef0f49c373d05a" kindref="member">min_max_element()</ref></computeroutput> compared to calling both STL functions is that one only iterates once over the sequence. This is more efficient especially for large and/or complex sequences.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>The following example program computes the minimal and maximal element of the sequence <computeroutput>(3,\,6,\,5)</computeroutput>. Hence the output is <computeroutput>min = 3, max = 6</computeroutput>.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="STL_Extension_2min_max_element_example_8cpp-example" kindref="compound">STL_Extension/min_max_element_example.cpp</ref> <programlisting filename="STL_Extension/min_max_element_example.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/algorithm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::vector;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::pair;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::cout;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="group__STLAlgos_1ga2f3822e4faf8eca315ef0f49c373d05a" kindref="member">CGAL::min_max_element</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vector&lt;<sp/>int<sp/>&gt;<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>int<sp/>&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pair&lt;<sp/>iterator,<sp/>iterator<sp/>&gt;<sp/>p<sp/>=<sp/><ref refid="group__STLAlgos_1ga2f3822e4faf8eca315ef0f49c373d05a" kindref="member">min_max_element</ref>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;min<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>max<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p.second<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>a pair of iterators where the first component refers to the minimal and the second component refers to the maximal element in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>). The ordering is defined by <computeroutput>operator&lt;</computeroutput> on the value type of <computeroutput>ForwardIterator</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="34" column="2" declfile="CGAL/algorithm.h" declline="34" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="group__STLAlgos_1gaf404b198e27ef4018bc5185c9e7da751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class CompareMin</type>
          </param>
          <param>
            <type>class CompareMax</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; ForwardIterator, ForwardIterator &gt;</type>
        <definition>std::pair&lt; ForwardIterator, ForwardIterator &gt; CGAL::min_max_element</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, CompareMin comp_min, CompareMax comp_max)</argsstring>
        <name>min_max_element</name>
        <qualifiedname>CGAL::min_max_element</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>CompareMin</type>
          <declname>comp_min</declname>
        </param>
        <param>
          <type>CompareMax</type>
          <declname>comp_max</declname>
        </param>
        <briefdescription>
<para>Computes the minimal and the maximal element of a range. </para>
        </briefdescription>
        <detaileddescription>
<para>It is modeled after the STL functions <ulink url="https://en.cppreference.com/w/cpp/algorithm/min_element"><computeroutput>std::min_element</computeroutput></ulink> and <ulink url="https://en.cppreference.com/w/cpp/algorithm/max_element"><computeroutput>std::max_element</computeroutput></ulink>. The advantage of <computeroutput><ref refid="group__STLAlgos_1ga2f3822e4faf8eca315ef0f49c373d05a" kindref="member">min_max_element()</ref></computeroutput> compared to calling both STL functions is that one only iterates once over the sequence. This is more efficient especially for large and/or complex sequences.</para>
<para><simplesect kind="return"><para>a pair of iterators where the first component refers to the minimal and the second component refers to the maximal element in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>).</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CompareMin</parametername>
</parameternamelist>
<parameterdescription>
<para>is an adaptable binary function object: <computeroutput>VT</computeroutput> <formula id="0">$ \times$</formula> <computeroutput>VT</computeroutput> <formula id="1">$ \rightarrow$</formula> <computeroutput>bool</computeroutput> where <computeroutput>VT</computeroutput> is the value type of <computeroutput>ForwardIterator</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompareMax</parametername>
</parameternamelist>
<parameterdescription>
<para>is an adaptable binary function object: <computeroutput>VT</computeroutput> <formula id="0">$ \times$</formula> <computeroutput>VT</computeroutput> <formula id="1">$ \rightarrow$</formula> <computeroutput>bool</computeroutput> where <computeroutput>VT</computeroutput> is the value type of <computeroutput>ForwardIterator</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/algorithm.h" line="65" column="1" declfile="CGAL/algorithm.h" declline="65" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSTLExtensionRef_1ga08aa4fa93a53622eae19f823e8e141df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, N &gt;</type>
        <definition>std::array&lt; T, N &gt; CGAL::make_array</definition>
        <argsstring>(const T &amp;...)</argsstring>
        <name>make_array</name>
        <qualifiedname>CGAL::make_array</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::array&lt;T, N&gt;</computeroutput> where <computeroutput>N</computeroutput> is the number of arguments given to the function. The position of each argument in the array is the same as its position in the argument list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/array.h" line="10" column="24" declfile="CGAL/array.h" declline="10" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__CompactContainer_1ga8377419c541b788f98a962e1d7ed8df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CC_iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1CC__safe__handle" kindref="compound">CC_safe_handle</ref>&lt; CC_iterator &gt;</type>
        <definition>CC_safe_handle&lt; CC_iterator &gt; CGAL::make_cc_safe_handle</definition>
        <argsstring>(CC_iterator iterator)</argsstring>
        <name>make_cc_safe_handle</name>
        <qualifiedname>CGAL::make_cc_safe_handle</qualifiedname>
        <param>
          <type>CC_iterator</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>The class <computeroutput>make_cc_safe_handle</computeroutput> function allows to build a <computeroutput><ref refid="classCGAL_1_1CC__safe__handle" kindref="compound">CC_safe_handle</ref></computeroutput> from an iterator on a <computeroutput><ref refid="classCGAL_1_1Compact__container" kindref="compound">Compact_container</ref></computeroutput> (or <computeroutput><ref refid="classCGAL_1_1Concurrent__compact__container" kindref="compound">Concurrent_compact_container</ref></computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1CC__safe__handle" kindref="compound">CC_safe_handle</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/CC_safe_handle.h" line="63" column="16" declfile="CGAL/CC_safe_handle.h" declline="63" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__projectionobjects_1gaa343b4e41668290985efff5def93ca7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Compare__to__less" kindref="compound">Compare_to_less</ref>&lt; F &gt;</type>
        <definition>Compare_to_less&lt; F &gt; CGAL::compare_to_less</definition>
        <argsstring>(const F &amp;f)</argsstring>
        <name>compare_to_less</name>
        <qualifiedname>CGAL::compare_to_less</qualifiedname>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Changes a functor returning a <computeroutput>Comparison_result</computeroutput> to one which returns a bool. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned functor will return <computeroutput>true</computeroutput> iff the original one returns <computeroutput>SMALLER</computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Compare__to__less" kindref="compound">CGAL::Compare_to_less</ref>&lt;F&gt;</computeroutput></para>
</simplesect>
returns a functor equivalent to <computeroutput>f</computeroutput>, but which returns a bool instead of a <computeroutput>Comparison_result</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/function_objects.h" line="135" column="1" declfile="CGAL/function_objects.h" declline="135" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1ac87cfb03dd80e388d2fe53af9e53e9ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound">Iterator_range</ref>&lt; T &gt;</type>
        <definition>Iterator_range&lt; T &gt; CGAL::make_range</definition>
        <argsstring>(const T &amp;b, const T &amp;e)</argsstring>
        <name>make_range</name>
        <qualifiedname>CGAL::make_range</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Iterator_range.h" line="66" column="3" bodyfile="CGAL/Iterator_range.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a20aeec74989e860c5f20c11a844aad53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::range_begin</definition>
        <argsstring>(Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_begin</name>
        <qualifiedname>CGAL::range_begin</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Iterator_range.h" line="72" column="12" bodyfile="CGAL/Iterator_range.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1acd0d74e5e80884f3c33b663e1e576435" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::range_end</definition>
        <argsstring>(Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_end</name>
        <qualifiedname>CGAL::range_end</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Iterator_range.h" line="78" column="12" bodyfile="CGAL/Iterator_range.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1af0be841eaa3070123a308353961d2695" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::range_begin</definition>
        <argsstring>(const Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_begin</name>
        <qualifiedname>CGAL::range_begin</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Iterator__range" kindref="compound">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Iterator_range.h" line="84" column="12" bodyfile="CGAL/Iterator_range.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a97c1af46c1e40a2f68495e0947e681b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::range_end</definition>
        <argsstring>(const Iterator_range&lt; T &gt; &amp;x)</argsstring>
        <name>range_end</name>
        <qualifiedname>CGAL::range_end</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Iterator__range" kindref="compound">Iterator_range</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Iterator_range.h" line="90" column="12" bodyfile="CGAL/Iterator_range.h" bodystart="90" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/algorithm.h" line="5" column="1"/>
  </compounddef>
</doxygen>
