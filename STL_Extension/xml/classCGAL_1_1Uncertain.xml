<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Uncertain" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Uncertain</compoundname>
    <includes local="no">CGAL/Uncertain.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Uncertain_1a9583a94fac04b37203345ba4c635f3ca" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Uncertain&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>CGAL::Uncertain::value_type</qualifiedname>
        <briefdescription>
<para>The type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="58" column="26" bodyfile="CGAL/Uncertain.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Uncertain_1af1ba462d4a7faf1b1d35cc7c798da5ca" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Uncertain&lt; T &gt;::Uncertain_conversion_exception</definition>
        <argsstring></argsstring>
        <name>Uncertain_conversion_exception</name>
        <qualifiedname>CGAL::Uncertain::Uncertain_conversion_exception</qualifiedname>
        <briefdescription>
<para>The type of the exception thrown for uncertain conversions. </para>
        </briefdescription>
        <detaileddescription>
<para>It is a typedef to the type <computeroutput>CGAL::Uncertain_conversion_exception</computeroutput> which derives from <computeroutput>std::range_error</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="69" column="26" bodyfile="CGAL/Uncertain.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a419044c5edf548fba4311588499ffd40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Uncertain&lt; T &gt;::Uncertain</definition>
        <argsstring>()</argsstring>
        <name>Uncertain</name>
        <qualifiedname>CGAL::Uncertain::Uncertain</qualifiedname>
        <briefdescription>
<para>introduces a certain object with value <computeroutput>T()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a4c3a785e7dbaaeac6ae2e5274311a1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Uncertain&lt; T &gt;::Uncertain</definition>
        <argsstring>(T t)</argsstring>
        <name>Uncertain</name>
        <qualifiedname>CGAL::Uncertain::Uncertain</qualifiedname>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>introduces a certain object with value <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1af6e4f6e332530e1591472e398c22eb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref> &amp;</type>
        <definition>Uncertain &amp; CGAL::Uncertain&lt; T &gt;::operator=</definition>
        <argsstring>(T t)</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Uncertain::operator=</qualifiedname>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>assigns the certain value <computeroutput>t</computeroutput> to <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="101" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a8a7f6c066b7643180fc7c6c54887c791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Uncertain&lt; T &gt;::Uncertain</definition>
        <argsstring>(T i, T s)</argsstring>
        <name>Uncertain</name>
        <qualifiedname>CGAL::Uncertain::Uncertain</qualifiedname>
        <param>
          <type>T</type>
          <declname>i</declname>
        </param>
        <param>
          <type>T</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>introduces an object representing the range with lower bound <computeroutput>i</computeroutput> and upper bound <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="16">$ i&lt;= s$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="114" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <description><para>The following functions are meant to be used very rarely, they provide ways to inspect the content of an <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;T&gt;</computeroutput> object. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1aadfe4670d91863370b5850358e74138b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::Uncertain&lt; T &gt;::inf</definition>
        <argsstring>() const</argsstring>
        <name>inf</name>
        <qualifiedname>CGAL::Uncertain::inf</qualifiedname>
        <briefdescription>
<para>returns the lower bound of the range represented by <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="128" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a4f6dd65c7edfdbb7fc831df2d16f2370" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::Uncertain&lt; T &gt;::sup</definition>
        <argsstring>() const</argsstring>
        <name>sup</name>
        <qualifiedname>CGAL::Uncertain::sup</qualifiedname>
        <briefdescription>
<para>returns the upper bound of the range represented by <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="133" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a6d5f114dc7150c86a6a50e0f6eddd149" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Uncertain&lt; T &gt;::is_same</definition>
        <argsstring>(Uncertain u) const</argsstring>
        <name>is_same</name>
        <qualifiedname>CGAL::Uncertain::is_same</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns true whether <computeroutput>u</computeroutput> and <computeroutput>u</computeroutput> are the same range (equality as sets). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="138" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Uncertainty Testing and Conversion</header>
      <description><para>There are several ways to extract the content of an <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref></computeroutput> object.</para>
<para>The simplest way is to rely on the implicit conversion from <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;T&gt;</computeroutput> to <computeroutput>T</computeroutput>. In this case, no special code has to be written, apart from an exception handler (anywhere higher in the call stack) to manage the uncertain case. The more involved one is more efficient, but requires manual treatment of the uncertain case, such as:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">Uncertain&lt;bool&gt;<sp/>b<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCGAL_1_1Uncertain_1ad6216622e449e7a0b988704540a1fd42" kindref="member">is_certain</ref>(b))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cert_b<sp/>=<sp/><ref refid="classCGAL_1_1Uncertain_1a4cd0abdd5560826bf9b33bb80818b247" kindref="member">get_certain</ref>(b);<sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>certain<sp/>bool<sp/>it<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">...<sp/></highlight><highlight class="comment">//<sp/>b<sp/>is<sp/>indeterminate</highlight></codeline>
</programlisting></para>
<para>Another option is :</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">Uncertain&lt;bool&gt;<sp/>b<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCGAL_1_1Uncertain_1ad0895d249db0e47191671237593867f8" kindref="member">certainly</ref>(b))</highlight></codeline>
<codeline><highlight class="normal">...<sp/></highlight><highlight class="comment">//<sp/>b<sp/>is<sp/>certainly<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCGAL_1_1Uncertain_1a0e9150d771bef0339f7a467936975673" kindref="member">certainly_not</ref>(b))</highlight></codeline>
<codeline><highlight class="normal">...<sp/></highlight><highlight class="comment">//<sp/>b<sp/>is<sp/>certainly<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...<sp/></highlight><highlight class="comment">//<sp/>b<sp/>is<sp/>indeterminate</highlight></codeline>
</programlisting></para>
<para>There are many other handy functions which can be used for easier usage depending on the context. They are listed in the sequel. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad6216622e449e7a0b988704540a1fd42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Uncertain&lt; T &gt;::is_certain</definition>
        <argsstring>() const</argsstring>
        <name>is_certain</name>
        <qualifiedname>CGAL::Uncertain::is_certain</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the value is certain, that is, it is unique, the range is a singleton, that is <computeroutput>u.inf() == u.sup()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="183" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ac02688a943e0b8fa77ca69922d5c3cc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CGAL::Uncertain&lt; T &gt;::make_certain</definition>
        <argsstring>() const</argsstring>
        <name>make_certain</name>
        <qualifiedname>CGAL::Uncertain::make_certain</qualifiedname>
        <briefdescription>
<para>if <computeroutput>u.is_certain()</computeroutput>, then returns the certain value which is represented. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, throws an exception of type <computeroutput>Uncertain_conversion_exception</computeroutput>. A profile counter of the number of such exceptions thrown during the execution of the program is available with <computeroutput>CGAL_PROFILE</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="191" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a191ba852ab7091c8c1463da168ff319b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Uncertain&lt; T &gt;::operator T</definition>
        <argsstring>() const</argsstring>
        <name>operator T</name>
        <qualifiedname>CGAL::Uncertain::operator T</qualifiedname>
        <briefdescription>
<para>conversion operator to <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It does and returns the same thing as <computeroutput>u</computeroutput>. <computeroutput><ref refid="classCGAL_1_1Uncertain_1ac02688a943e0b8fa77ca69922d5c3cc8" kindref="member">make_certain()</ref></computeroutput>. Note that relying on the automatic conversion can throw exceptions, which defeats the purpose of propagating uncertainty. Nevertheless, in many cases, it is hard to avoid it, for example for the <computeroutput>&amp;&amp;</computeroutput> and <formula id="17">$ ||$</formula> operators for <computeroutput>bool</computeroutput> (see below). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Overloaded Operators</header>
      <description><para>The overloaded operators and functions are defined as preserving the set-inclusion property.</para>
<para>Similarly to interval arithmetic, the returned range is guaranteed to contain the result of the operation over all values of the input range(s). In the following documentation we express this as the extension of the corresponding function over the type <computeroutput>T</computeroutput>. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a28e68e573f682463e1e7b23988d74f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator==</definition>
        <argsstring>(Uncertain&lt; T &gt; u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Uncertain::operator==</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the extension of the equality operator over <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="222" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a1d249f5798596bfe84a7f7b7556041d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator==</definition>
        <argsstring>(Uncertain&lt; T &gt; u, T v)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Uncertain::operator==</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u == make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="228" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ab7db5e96b7571807ebac90f21bc5e87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator==</definition>
        <argsstring>(T u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Uncertain::operator==</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>v == u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="234" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a5f345b146fd0abfceab15ad5688393d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator!=</definition>
        <argsstring>(Uncertain&lt; T &gt; u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Uncertain::operator!=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the extension of the inequality operator over <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="240" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ac3a618bb4f7104eb9797170528463be9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator!=</definition>
        <argsstring>(Uncertain&lt; T &gt; u, T v)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Uncertain::operator!=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u != make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="246" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ae0b233c3712e1ac7f95062670ea3173e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator!=</definition>
        <argsstring>(T u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Uncertain::operator!=</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>v != u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="252" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Overloaded Operators for Uncertain&lt;bool&gt;</header>
      <description><para>The overloaded operators and functions are defined as preserving the set-inclusion property.</para>
<para>Similarly to interval arithmetic, the returned range is guaranteed to contain the result of the operation over all values of the input range(s). In the following documentation we express this as the extension of the corresponding function over the type <computeroutput>T</computeroutput>.</para>
<para><simplesect kind="note"><para>The logical operators <formula id="18">$ \&amp;\&amp;$</formula> and <formula id="17">$ ||$</formula> are not overloaded on purpose. The reason is that, when <computeroutput>f() &amp;&amp; g()</computeroutput> is evaluated and they return <computeroutput>bool</computeroutput>, then <computeroutput>g()</computeroutput> is only evaluated when <computeroutput>f()</computeroutput> returns <computeroutput>true</computeroutput>. One could have a dependency so that <computeroutput>g()</computeroutput> has an internal precondition that required that <computeroutput>f()</computeroutput> had returned <computeroutput>true</computeroutput>. The overloaded operators for user-defined types can not provide this short-circuiting property, and so, if the overloaded operators where provided, then <computeroutput>g()</computeroutput> would be evaluated, no matter the result of <computeroutput>f()</computeroutput>, which could lead to an unwanted situation, or a performance loss. The <formula id="19">$ \&amp;$</formula> and <formula id="20">$ |$</formula> operators do not have this short-circuiting property, and are therefore overloaded safely.</para>
</simplesect>
When translating normal code to use and propagate uncertainty, such as :</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Logical<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(p.x()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(p.y()<sp/>==<sp/>0)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logical<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">if<sp/>(<sp/>(q.x()<sp/>==<sp/>0)<sp/>||<sp/>(q.y()<sp/>==<sp/>0)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting></para>
<para>One can do, for example :</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Logical<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Uncertain&lt;bool&gt;<sp/>tmp<sp/>=<sp/>(p.x()<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Uncertain&lt;bool&gt;<sp/>res<sp/>=<sp/><ref refid="classCGAL_1_1Uncertain_1a0e9150d771bef0339f7a467936975673" kindref="member">certainly_not</ref>(tmp)<sp/>?<sp/><ref refid="classCGAL_1_1Uncertain_1a8c5dc97c377959afb04a4ff63106f625" kindref="member">make_uncertain</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/>tmp<sp/>&amp;<sp/>(p.y()<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>res</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logical<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Uncertain&lt;bool&gt;<sp/>tmp<sp/>=<sp/>(q.x()<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Uncertain&lt;bool&gt;<sp/>res<sp/>=<sp/><ref refid="classCGAL_1_1Uncertain_1ad0895d249db0e47191671237593867f8" kindref="member">certainly</ref>(tmp)<sp/>?<sp/><ref refid="classCGAL_1_1Uncertain_1a8c5dc97c377959afb04a4ff63106f625" kindref="member">make_uncertain</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>:<sp/>tmp<sp/>|<sp/>(q.y()<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>res</highlight></codeline>
</programlisting></para>
<para>This ensures that the first expression is not evaluated twice, and that the second is evaluated only if needed.</para>
<para>This behavior can also be emulated through the use of macros, but only using non-standard features (&quot;statement expressions&quot;, such as provided by GCC). The macros <computeroutput>CGAL_AND</computeroutput> and <computeroutput>CGAL_OR</computeroutput> are provided that perform the lazy evaluation of these logical operations. On compilers that do not support statement expressions, the macros simply expand to the <formula id="18">$ \&amp;\&amp;$</formula> and <formula id="17">$ ||$</formula> operators (which will throw an exception instead of propagating the uncertainty).</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Logical<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Uncertain&lt;bool&gt;<sp/>res<sp/>=<sp/>CGAL_AND(<sp/>p.x()<sp/>==<sp/>0<sp/>,<sp/>p.y()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>res</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logical<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Uncertain&lt;bool&gt;<sp/>res<sp/>=<sp/>CGAL_OR(<sp/>q.x()<sp/>==<sp/>0<sp/>,<sp/>q.y()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>res</highlight></codeline>
</programlisting> </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a7a54d767adac09e9a7ca97f5f82a5e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator!</definition>
        <argsstring>(Uncertain&lt; bool &gt; u)</argsstring>
        <name>operator!</name>
        <qualifiedname>CGAL::Uncertain::operator!</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns the range containing the negated values of <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="341" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a0caa99a28e25b7f2463e29fc66a317f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator|</definition>
        <argsstring>(Uncertain&lt; bool &gt; u, Uncertain&lt; bool &gt; v)</argsstring>
        <name>operator|</name>
        <qualifiedname>CGAL::Uncertain::operator|</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the range containing the values computed as logical or from <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="347" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a7a9b897ebb7c03c715af794baa4f6a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator|</definition>
        <argsstring>(Uncertain&lt; bool &gt; u, bool v)</argsstring>
        <name>operator|</name>
        <qualifiedname>CGAL::Uncertain::operator|</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u | make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="353" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad9f4f16930d7c2492f26ccab64a6da61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator|</definition>
        <argsstring>(bool u, Uncertain&lt; bool &gt; v)</argsstring>
        <name>operator|</name>
        <qualifiedname>CGAL::Uncertain::operator|</qualifiedname>
        <param>
          <type>bool</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>v | u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="359" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1abba43914e1f60da2f1c2baf2e8224f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&amp;</definition>
        <argsstring>(Uncertain&lt; bool &gt; u, Uncertain&lt; bool &gt; v)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>CGAL::Uncertain::operator&amp;</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the range containing the values computed as logical and from <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="365" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a346793b02075338097583977e82085fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&amp;</definition>
        <argsstring>(Uncertain&lt; bool &gt; u, bool v)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>CGAL::Uncertain::operator&amp;</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u &amp; make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="371" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad3e53e5a088abe6beafa9e8ecb430b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&amp;</definition>
        <argsstring>(bool u, Uncertain&lt; bool &gt; v)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>CGAL::Uncertain::operator&amp;</qualifiedname>
        <param>
          <type>bool</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>v &amp; u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="377" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Overloaded Operators and Functions for Uncertain&lt;enum T&gt; Only</header>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1afb8bfd0ebc7f6ebdd63238b2ea623fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&lt;</definition>
        <argsstring>(Uncertain&lt; T &gt; u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>CGAL::Uncertain::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the extension of the less-than operator over <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="377" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ada98a666fb4303149b2a9f458b87f7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&lt;</definition>
        <argsstring>(Uncertain&lt; T &gt; u, T v)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>CGAL::Uncertain::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u &lt; make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="377" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ae3287b3c3547a3d004cba671cdaf3910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&lt;</definition>
        <argsstring>(T u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>CGAL::Uncertain::operator&lt;</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>make_uncertain(u) &lt; v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="377" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a9309e0c6925c00e0cb2c41a63c05cf8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&gt;</definition>
        <argsstring>(Uncertain&lt; T &gt; u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>CGAL::Uncertain::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the extension of the greater-than operator over <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="411" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad6b02383921d42f9f9cb7ea2205eeb38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&gt;</definition>
        <argsstring>(Uncertain&lt; T &gt; u, T v)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>CGAL::Uncertain::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u &gt; make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="418" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad2b9cdb445a23536b6a921875c4954ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&gt;</definition>
        <argsstring>(T u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>CGAL::Uncertain::operator&gt;</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>make_uncertain(u) &gt; v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="425" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a966cc1f1ae449053214908ce1ea45300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&lt;=</definition>
        <argsstring>(Uncertain&lt; T &gt; u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>CGAL::Uncertain::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the extension of the less-than or equal operator over <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="425" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a14bd7e969a5f81961999676117c3619e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&lt;=</definition>
        <argsstring>(Uncertain&lt; T &gt; u, T v)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>CGAL::Uncertain::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u &lt;= make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="425" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a336f6f907c0ea69727f06fc01701a08b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&lt;=</definition>
        <argsstring>(T u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>CGAL::Uncertain::operator&lt;=</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>make_uncertain(u) &lt;= v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="425" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a0f06e616d33f4433eeb856d92e08153d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&gt;=</definition>
        <argsstring>(Uncertain&lt; T &gt; u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>CGAL::Uncertain::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the extension of the greater-than or equal operator over <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="453" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a51f9828a80010665e10767936bef540e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&gt;=</definition>
        <argsstring>(Uncertain&lt; T &gt; u, T v)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>CGAL::Uncertain::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u &gt; make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="460" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a5a42efa42bc7852647b5a77010c50330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
        <definition>Uncertain&lt; bool &gt; CGAL::Uncertain&lt; T &gt;::operator&gt;=</definition>
        <argsstring>(T u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>CGAL::Uncertain::operator&gt;=</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>make_uncertain(u) &gt;= v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="467" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1aeb5f587922dfed9e3484a0767064635a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
        <definition>Uncertain&lt; T &gt; CGAL::Uncertain&lt; T &gt;::operator*</definition>
        <argsstring>(Uncertain&lt; T &gt; u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator*</name>
        <qualifiedname>CGAL::Uncertain::operator*</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns the extension of the multiplication operator over <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This requires <computeroutput>T</computeroutput> to have a multiplication operator as well. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="475" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a7f4d6aee71e89cb94bc752b27aebbaf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
        <definition>Uncertain&lt; T &gt; CGAL::Uncertain&lt; T &gt;::operator*</definition>
        <argsstring>(Uncertain&lt; T &gt; u, T v)</argsstring>
        <name>operator*</name>
        <qualifiedname>CGAL::Uncertain::operator*</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u * make_uncertain(v)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="482" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a47497f00d7692d169c699f19bf64ae8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
        <definition>Uncertain&lt; T &gt; CGAL::Uncertain&lt; T &gt;::operator&lt;</definition>
        <argsstring>(T u, Uncertain&lt; T &gt; v)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>CGAL::Uncertain::operator&lt;</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>make_uncertain(u) * v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="482" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad4123384957febc86c9cd2866dcd08a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
        <definition>Uncertain&lt; T &gt; CGAL::Uncertain&lt; T &gt;::operator-</definition>
        <argsstring>(Uncertain&lt; T &gt; u)</argsstring>
        <name>operator-</name>
        <qualifiedname>CGAL::Uncertain::operator-</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns the extension of the unary minus operator over <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="496" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a706f7518f1e5daf862b83b47bbad848c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
        <definition>Uncertain&lt; T &gt; CGAL::Uncertain&lt; T &gt;::enum_cast</definition>
        <argsstring>(Uncertain&lt; U &gt; u)</argsstring>
        <name>enum_cast</name>
        <qualifiedname>CGAL::Uncertain::enum_cast</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; U &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns the extension of the <computeroutput>enum_cast&lt;T&gt;</computeroutput> function over <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="503" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a9c94b5311d3a5304e16c580334ee84c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
        <definition>static Uncertain&lt; T &gt; CGAL::Uncertain&lt; T &gt;::indeterminate</definition>
        <argsstring>()</argsstring>
        <name>indeterminate</name>
        <qualifiedname>CGAL::Uncertain::indeterminate</qualifiedname>
        <briefdescription>
<para>returns an indeterminate range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="207" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a5a1e38fa766e8b63d0c7aeea685ec63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T inf</definition>
        <argsstring>(Uncertain&lt; T &gt; u)</argsstring>
        <name>inf</name>
        <qualifiedname>CGAL::Uncertain::inf</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u.inf()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="513" column="15" declfile="CGAL/Uncertain.h" declline="513" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1aec1e939054be8a7658d0b73b4da3e1d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T sup</definition>
        <argsstring>(Uncertain&lt; T &gt; u)</argsstring>
        <name>sup</name>
        <qualifiedname>CGAL::Uncertain::sup</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u.sup()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="519" column="15" declfile="CGAL/Uncertain.h" declline="519" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a9b720421ed44e4611ccc01fa457173b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_certain</definition>
        <argsstring>(T t)</argsstring>
        <name>is_certain</name>
        <qualifiedname>CGAL::Uncertain::is_certain</qualifiedname>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="525" column="18" declfile="CGAL/Uncertain.h" declline="525" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1af665be6fa89854145710a5d141f8519c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_certain</definition>
        <argsstring>(Uncertain&lt; T &gt; u)</argsstring>
        <name>is_certain</name>
        <qualifiedname>CGAL::Uncertain::is_certain</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u.is_certain</computeroutput>(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="531" column="18" declfile="CGAL/Uncertain.h" declline="531" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a73311919bfff3aad3a724a5815575565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>U</type>
        <definition>U indeterminate</definition>
        <argsstring>()</argsstring>
        <name>indeterminate</name>
        <qualifiedname>CGAL::Uncertain::indeterminate</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>U::indeterminate()</computeroutput> if <computeroutput>U</computeroutput> is <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;T&gt;</computeroutput>, and <computeroutput>U()</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="539" column="15" declfile="CGAL/Uncertain.h" declline="539" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a73a3dec812e479d16688e37029040682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_indeterminate</definition>
        <argsstring>(T u)</argsstring>
        <name>is_indeterminate</name>
        <qualifiedname>CGAL::Uncertain::is_indeterminate</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="545" column="18" declfile="CGAL/Uncertain.h" declline="545" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1aea3e3109f32bdaf99e7d896634e09a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_indeterminate</definition>
        <argsstring>(Uncertain&lt; T &gt; u)</argsstring>
        <name>is_indeterminate</name>
        <qualifiedname>CGAL::Uncertain::is_indeterminate</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>!is_certain(u)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="551" column="18" declfile="CGAL/Uncertain.h" declline="551" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a4cd0abdd5560826bf9b33bb80818b247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T get_certain</definition>
        <argsstring>(T t)</argsstring>
        <name>get_certain</name>
        <qualifiedname>CGAL::Uncertain::get_certain</qualifiedname>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="557" column="15" declfile="CGAL/Uncertain.h" declline="557" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad314715ba07eab93e2c29adead953f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T get_certain</definition>
        <argsstring>(Uncertain&lt; T &gt; u)</argsstring>
        <name>get_certain</name>
        <qualifiedname>CGAL::Uncertain::get_certain</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u.make_certain</computeroutput>(). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>u.is_certain</computeroutput>(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="563" column="15" declfile="CGAL/Uncertain.h" declline="563" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ac7e26624301533fab59aa968e113e787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T make_certain</definition>
        <argsstring>(T t)</argsstring>
        <name>make_certain</name>
        <qualifiedname>CGAL::Uncertain::make_certain</qualifiedname>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="569" column="15" declfile="CGAL/Uncertain.h" declline="569" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1aac0743cbafe7f12e07aae977485d6eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T make_certain</definition>
        <argsstring>(Uncertain&lt; T &gt; u)</argsstring>
        <name>make_certain</name>
        <qualifiedname>CGAL::Uncertain::make_certain</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u.make_certain</computeroutput>(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="575" column="15" declfile="CGAL/Uncertain.h" declline="575" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a8c5dc97c377959afb04a4ff63106f625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
        <definition>Uncertain&lt; T &gt; make_uncertain</definition>
        <argsstring>(T t)</argsstring>
        <name>make_uncertain</name>
        <qualifiedname>CGAL::Uncertain::make_uncertain</qualifiedname>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;T&gt;(u)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="581" column="23" declfile="CGAL/Uncertain.h" declline="581" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a8c51d07321b6009371b3fcc06eed922c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
        <definition>Uncertain&lt; T &gt; make_uncertain</definition>
        <argsstring>(Uncertain&lt; T &gt; u)</argsstring>
        <name>make_uncertain</name>
        <qualifiedname>CGAL::Uncertain::make_uncertain</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; T &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="587" column="23" declfile="CGAL/Uncertain.h" declline="587" declcolumn="23"/>
      </memberdef>
      <memberdef kind="define" id="classCGAL_1_1Uncertain_1a21a641dd6760727247711de560335dd3" prot="public" static="no">
        <name>CGAL_AND_3</name>
        <qualifiedname>CGAL::Uncertain::CGAL_AND_3</qualifiedname>
        <briefdescription>
<para>Boolean operation with 3 arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="593" column="1" bodyfile="CGAL/Uncertain.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="classCGAL_1_1Uncertain_1a2c9fe0e306b259573f2b3edebd88b267" prot="public" static="no">
        <name>CGAL_OR_3</name>
        <qualifiedname>CGAL::Uncertain::CGAL_OR_3</qualifiedname>
        <briefdescription>
<para>Boolean operation with 3 arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="599" column="1" bodyfile="CGAL/Uncertain.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad0895d249db0e47191671237593867f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool certainly</definition>
        <argsstring>(Uncertain&lt; bool &gt; u)</argsstring>
        <name>certainly</name>
        <qualifiedname>CGAL::Uncertain::certainly</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>u.is_certain()</computeroutput>, and the <computeroutput>u.make_certain</computeroutput>() returns <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="606" column="6" declfile="CGAL/Uncertain.h" declline="606" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a4d20ff3929fb0965eb6b4ccf60d8929e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool certainly</definition>
        <argsstring>(bool u)</argsstring>
        <name>certainly</name>
        <qualifiedname>CGAL::Uncertain::certainly</qualifiedname>
        <param>
          <type>bool</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="612" column="6" declfile="CGAL/Uncertain.h" declline="612" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad366333cc1f81b34aa6e67596d6422bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool possibly</definition>
        <argsstring>(Uncertain&lt; bool &gt; u)</argsstring>
        <name>possibly</name>
        <qualifiedname>CGAL::Uncertain::possibly</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>u.is_certain()</computeroutput> returns <computeroutput>false</computeroutput>, or if <computeroutput>u.make_certain</computeroutput>() returns <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="619" column="6" declfile="CGAL/Uncertain.h" declline="619" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a4b338d06338c6a54c7cbf8bf51f9e14c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool possibly</definition>
        <argsstring>(bool u)</argsstring>
        <name>possibly</name>
        <qualifiedname>CGAL::Uncertain::possibly</qualifiedname>
        <param>
          <type>bool</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="625" column="6" declfile="CGAL/Uncertain.h" declline="625" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1a0e9150d771bef0339f7a467936975673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool certainly_not</definition>
        <argsstring>(Uncertain&lt; bool &gt; u)</argsstring>
        <name>certainly_not</name>
        <qualifiedname>CGAL::Uncertain::certainly_not</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>u.is_certain()</computeroutput>, and the <computeroutput>u.make_certain</computeroutput>() returns <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="632" column="6" declfile="CGAL/Uncertain.h" declline="632" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ae812b5159a6a1a264c1100e3bfe175b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool certainly_not</definition>
        <argsstring>(bool u)</argsstring>
        <name>certainly_not</name>
        <qualifiedname>CGAL::Uncertain::certainly_not</qualifiedname>
        <param>
          <type>bool</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>!u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="638" column="6" declfile="CGAL/Uncertain.h" declline="638" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1af2eeddce35a87770d2d30b660e86cfb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool possibly_not</definition>
        <argsstring>(Uncertain&lt; bool &gt; u)</argsstring>
        <name>possibly_not</name>
        <qualifiedname>CGAL::Uncertain::possibly_not</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt; bool &gt;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff <computeroutput>u.is_certain()</computeroutput> returns <computeroutput>false</computeroutput>, or if <computeroutput>u.make_certain</computeroutput>() returns <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="645" column="6" declfile="CGAL/Uncertain.h" declline="645" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Uncertain_1ad8363cebaa1233b86b9dd30c327c8588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool possibly_not</definition>
        <argsstring>(bool u)</argsstring>
        <name>possibly_not</name>
        <qualifiedname>CGAL::Uncertain::possibly_not</qualifiedname>
        <param>
          <type>bool</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>!u</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Uncertain.h" line="651" column="6" declfile="CGAL/Uncertain.h" declline="651" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref></computeroutput> represents an uncertainty on the value of type <computeroutput>T</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para>This uncertainty is represented by a non-empty range of values of type <computeroutput>T</computeroutput>.</para>
<para>The idea is that sometimes you are not sure of the result of a function, and you would like to communicate that to the caller. <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;T&gt;</computeroutput> allows just that.</para>
<para><computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;T&gt;</computeroutput> is also meant to be used as a drop-in replacement for <computeroutput>T</computeroutput> in some template contexts, as much as possible. This is why it provides overloaded operators and functions to naturally extend the Boolean operations for <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;bool&gt;</computeroutput> for example, or the operations on enumeration types.</para>
<para><computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;T&gt;</computeroutput> is used in CGAL as the return type of geometric predicates when the number type used is interval arithmetic like <computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Number_types.tag">Interval_nt</ref></computeroutput>. End users typically do not see it, as it is hidden in the implementation of the filtered predicates provided by the various filtered kernels, but it is important that providers of predicates that are meant to be filtered by <computeroutput><ref refid="classCGAL_1_1Filtered__predicate" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Filtered_predicate</ref></computeroutput>, know about it.</para>
<para>Note concerning CGAL assertions: assertions checking an expression of type <computeroutput><ref refid="classCGAL_1_1Uncertain" kindref="compound">Uncertain</ref>&lt;bool&gt;</computeroutput> will trigger an assertion failure only if the assertion is certainly <computeroutput>false</computeroutput>. In case of an indeterminate value, the assertion is not triggered. This means that we assume, in case of doubt, that there is no error.</para>
<para>It can also be used in other contexts as well, as it is a general tool. This can be seen as support for non-deterministic programming. Finally, note that this class has some common points with <computeroutput>boost::tribool</computeroutput>.</para>
<para><bold>Parameters</bold><linebreak/>
</para>
<para>The parameter <computeroutput>T</computeroutput> can either be <computeroutput>bool</computeroutput> or one of the three-valued (-1, 0, 1) enumeration types: <computeroutput>Sign</computeroutput>, <computeroutput>Comparison_result</computeroutput>, <computeroutput>Orientation</computeroutput>, <computeroutput>Oriented_side</computeroutput>, <computeroutput>Bounded_side</computeroutput> or <computeroutput>Angle</computeroutput>.</para>
<para>Some functions are defined only when <computeroutput>T</computeroutput> is <computeroutput>bool</computeroutput> or alternatively when it is one of the enumeration types listed previously.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Interval__nt" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Number_types.tag">CGAL::Interval_nt</ref>&lt;bool&gt;</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="CGAL/Uncertain.h" line="50" column="1" bodyfile="CGAL/Uncertain.h" bodystart="50" bodyend="507"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Uncertain_1ad0895d249db0e47191671237593867f8" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>certainly</name></member>
      <member refid="classCGAL_1_1Uncertain_1a4d20ff3929fb0965eb6b4ccf60d8929e" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>certainly</name></member>
      <member refid="classCGAL_1_1Uncertain_1a0e9150d771bef0339f7a467936975673" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>certainly_not</name></member>
      <member refid="classCGAL_1_1Uncertain_1ae812b5159a6a1a264c1100e3bfe175b9" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>certainly_not</name></member>
      <member refid="classCGAL_1_1Uncertain_1a21a641dd6760727247711de560335dd3" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>CGAL_AND_3</name></member>
      <member refid="classCGAL_1_1Uncertain_1a2c9fe0e306b259573f2b3edebd88b267" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>CGAL_OR_3</name></member>
      <member refid="classCGAL_1_1Uncertain_1a706f7518f1e5daf862b83b47bbad848c" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>enum_cast</name></member>
      <member refid="classCGAL_1_1Uncertain_1a4cd0abdd5560826bf9b33bb80818b247" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>get_certain</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad314715ba07eab93e2c29adead953f11" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>get_certain</name></member>
      <member refid="classCGAL_1_1Uncertain_1a9c94b5311d3a5304e16c580334ee84c0" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>indeterminate</name></member>
      <member refid="classCGAL_1_1Uncertain_1a73311919bfff3aad3a724a5815575565" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>indeterminate</name></member>
      <member refid="classCGAL_1_1Uncertain_1aadfe4670d91863370b5850358e74138b" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>inf</name></member>
      <member refid="classCGAL_1_1Uncertain_1a5a1e38fa766e8b63d0c7aeea685ec63d" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>inf</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad6216622e449e7a0b988704540a1fd42" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>is_certain</name></member>
      <member refid="classCGAL_1_1Uncertain_1a9b720421ed44e4611ccc01fa457173b2" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>is_certain</name></member>
      <member refid="classCGAL_1_1Uncertain_1af665be6fa89854145710a5d141f8519c" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>is_certain</name></member>
      <member refid="classCGAL_1_1Uncertain_1a73a3dec812e479d16688e37029040682" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>is_indeterminate</name></member>
      <member refid="classCGAL_1_1Uncertain_1aea3e3109f32bdaf99e7d896634e09a4b" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>is_indeterminate</name></member>
      <member refid="classCGAL_1_1Uncertain_1a6d5f114dc7150c86a6a50e0f6eddd149" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>is_same</name></member>
      <member refid="classCGAL_1_1Uncertain_1ac02688a943e0b8fa77ca69922d5c3cc8" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>make_certain</name></member>
      <member refid="classCGAL_1_1Uncertain_1ac7e26624301533fab59aa968e113e787" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>make_certain</name></member>
      <member refid="classCGAL_1_1Uncertain_1aac0743cbafe7f12e07aae977485d6eb5" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>make_certain</name></member>
      <member refid="classCGAL_1_1Uncertain_1a8c5dc97c377959afb04a4ff63106f625" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>make_uncertain</name></member>
      <member refid="classCGAL_1_1Uncertain_1a8c51d07321b6009371b3fcc06eed922c" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>make_uncertain</name></member>
      <member refid="classCGAL_1_1Uncertain_1a191ba852ab7091c8c1463da168ff319b" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator T</name></member>
      <member refid="classCGAL_1_1Uncertain_1a7a54d767adac09e9a7ca97f5f82a5e43" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator!</name></member>
      <member refid="classCGAL_1_1Uncertain_1a5f345b146fd0abfceab15ad5688393d5" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Uncertain_1ac3a618bb4f7104eb9797170528463be9" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Uncertain_1ae0b233c3712e1ac7f95062670ea3173e" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Uncertain_1abba43914e1f60da2f1c2baf2e8224f5e" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&amp;</name></member>
      <member refid="classCGAL_1_1Uncertain_1a346793b02075338097583977e82085fa" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&amp;</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad3e53e5a088abe6beafa9e8ecb430b03" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&amp;</name></member>
      <member refid="classCGAL_1_1Uncertain_1aeb5f587922dfed9e3484a0767064635a" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator*</name></member>
      <member refid="classCGAL_1_1Uncertain_1a7f4d6aee71e89cb94bc752b27aebbaf2" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator*</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad4123384957febc86c9cd2866dcd08a7" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator-</name></member>
      <member refid="classCGAL_1_1Uncertain_1afb8bfd0ebc7f6ebdd63238b2ea623fe7" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Uncertain_1ada98a666fb4303149b2a9f458b87f7b0" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Uncertain_1ae3287b3c3547a3d004cba671cdaf3910" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Uncertain_1a47497f00d7692d169c699f19bf64ae8d" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Uncertain_1a966cc1f1ae449053214908ce1ea45300" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&lt;=</name></member>
      <member refid="classCGAL_1_1Uncertain_1a14bd7e969a5f81961999676117c3619e" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&lt;=</name></member>
      <member refid="classCGAL_1_1Uncertain_1a336f6f907c0ea69727f06fc01701a08b" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&lt;=</name></member>
      <member refid="classCGAL_1_1Uncertain_1af6e4f6e332530e1591472e398c22eb15" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Uncertain_1a28e68e573f682463e1e7b23988d74f86" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Uncertain_1a1d249f5798596bfe84a7f7b7556041d2" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Uncertain_1ab7db5e96b7571807ebac90f21bc5e87e" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Uncertain_1a9309e0c6925c00e0cb2c41a63c05cf8e" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&gt;</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad6b02383921d42f9f9cb7ea2205eeb38" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&gt;</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad2b9cdb445a23536b6a921875c4954ce" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&gt;</name></member>
      <member refid="classCGAL_1_1Uncertain_1a0f06e616d33f4433eeb856d92e08153d" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&gt;=</name></member>
      <member refid="classCGAL_1_1Uncertain_1a51f9828a80010665e10767936bef540e" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&gt;=</name></member>
      <member refid="classCGAL_1_1Uncertain_1a5a42efa42bc7852647b5a77010c50330" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator&gt;=</name></member>
      <member refid="classCGAL_1_1Uncertain_1a0caa99a28e25b7f2463e29fc66a317f1" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator|</name></member>
      <member refid="classCGAL_1_1Uncertain_1a7a9b897ebb7c03c715af794baa4f6a58" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator|</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad9f4f16930d7c2492f26ccab64a6da61" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>operator|</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad366333cc1f81b34aa6e67596d6422bc" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>possibly</name></member>
      <member refid="classCGAL_1_1Uncertain_1a4b338d06338c6a54c7cbf8bf51f9e14c" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>possibly</name></member>
      <member refid="classCGAL_1_1Uncertain_1af2eeddce35a87770d2d30b660e86cfb6" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>possibly_not</name></member>
      <member refid="classCGAL_1_1Uncertain_1ad8363cebaa1233b86b9dd30c327c8588" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>possibly_not</name></member>
      <member refid="classCGAL_1_1Uncertain_1a4f6dd65c7edfdbb7fc831df2d16f2370" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>sup</name></member>
      <member refid="classCGAL_1_1Uncertain_1aec1e939054be8a7658d0b73b4da3e1d4" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>sup</name></member>
      <member refid="classCGAL_1_1Uncertain_1a419044c5edf548fba4311588499ffd40" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>Uncertain</name></member>
      <member refid="classCGAL_1_1Uncertain_1a4c3a785e7dbaaeac6ae2e5274311a1ab" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>Uncertain</name></member>
      <member refid="classCGAL_1_1Uncertain_1a8a7f6c066b7643180fc7c6c54887c791" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>Uncertain</name></member>
      <member refid="classCGAL_1_1Uncertain_1af1ba462d4a7faf1b1d35cc7c798da5ca" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>Uncertain_conversion_exception</name></member>
      <member refid="classCGAL_1_1Uncertain_1a9583a94fac04b37203345ba4c635f3ca" prot="public" virt="non-virtual"><scope>CGAL::Uncertain</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
