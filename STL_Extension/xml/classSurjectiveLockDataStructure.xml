<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classSurjectiveLockDataStructure" kind="class" language="C++" prot="public">
    <compoundname>SurjectiveLockDataStructure</compoundname>
    <includes local="no">Concepts/SurjectiveLockDataStructure.h</includes>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classSurjectiveLockDataStructure_1a8be4390119e3ff3c5269458ca1789bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SurjectiveLockDataStructure::is_locked</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>is_locked</name>
        <qualifiedname>SurjectiveLockDataStructure::is_locked</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Test if <computeroutput>object</computeroutput> is locked (by this thread or by any other thread). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SurjectiveLockDataStructure.h" line="36" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classSurjectiveLockDataStructure_1a734a1d77fccaa9aa3fe035f504bcfedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SurjectiveLockDataStructure::is_locked_by_this_thread</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>is_locked_by_this_thread</name>
        <qualifiedname>SurjectiveLockDataStructure::is_locked_by_this_thread</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Test if <computeroutput>object</computeroutput> is locked by this thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SurjectiveLockDataStructure.h" line="40" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classSurjectiveLockDataStructure_1a9e89c82fdac27fbca1c7dde34a22900d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SurjectiveLockDataStructure::try_lock</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>try_lock</name>
        <qualifiedname>SurjectiveLockDataStructure::try_lock</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Try to lock <computeroutput>object</computeroutput>. Returns <computeroutput>true</computeroutput> if the object is already locked by this thread or if the object could be locked. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SurjectiveLockDataStructure.h" line="44" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classSurjectiveLockDataStructure_1a7f449f8f7aef7991af60d7f3c56c5ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>no_spin</declname>
            <defname>no_spin</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SurjectiveLockDataStructure::try_lock</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>try_lock</name>
        <qualifiedname>SurjectiveLockDataStructure::try_lock</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Try to lock <computeroutput>object</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the object is already locked by this thread or if the object could be locked. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>no_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, force non-blocking operation (in any case, the function will return immediately, i.e. it will not wait for the resource to be free). If <computeroutput>false</computeroutput>, use the default behavior (same as previous function). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SurjectiveLockDataStructure.h" line="52" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classSurjectiveLockDataStructure_1ac0a0acb5759fe2b73894defb2d63c29c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SurjectiveLockDataStructure::unlock_everything_locked_by_this_thread</definition>
        <argsstring>()</argsstring>
        <name>unlock_everything_locked_by_this_thread</name>
        <qualifiedname>SurjectiveLockDataStructure::unlock_everything_locked_by_this_thread</qualifiedname>
        <briefdescription>
<para>Unlock everything that is locked by this thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SurjectiveLockDataStructure.h" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classSurjectiveLockDataStructure_1a4ed08cb60942e923043c2899e3121047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SurjectiveLockDataStructure::unlock_everything_locked_by_this_thread_but_one</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>unlock_everything_locked_by_this_thread_but_one</name>
        <qualifiedname>SurjectiveLockDataStructure::unlock_everything_locked_by_this_thread_but_one</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Unlock everything that is locked by this thread except <computeroutput>S(object)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SurjectiveLockDataStructure.h" line="59" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classSurjectiveLockDataStructure" kindref="compound">SurjectiveLockDataStructure</ref></computeroutput> describes functionalities of a data structure whose goal is to lock objects in a multi-threaded environment. Such data structures are intended to be used by concurrent algorithms. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para>Note that it is allowed to "lock too much". E.g., the data structure might be a voxel grid and locking a point might be locking the voxel containing this point. Thus, a point may also be locked because another point in the same voxel has been locked. The only requirement is that when a thread owns the lock of an object, no other thread can lock the same object.</para>
<para>We call <computeroutput>S</computeroutput> the surjective function such that <computeroutput>S(object)</computeroutput> is the "thing" that is locked when one tries to lock <computeroutput>object</computeroutput>. In the previous example, <computeroutput>S(point)</computeroutput> is the voxel containing <computeroutput>point</computeroutput>.</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Spatial__lock__grid__3" kindref="compound">CGAL::Spatial_lock_grid_3</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/SurjectiveLockDataStructure.h" line="29" column="1" bodyfile="Concepts/SurjectiveLockDataStructure.h" bodystart="29" bodyend="61"/>
    <listofallmembers>
      <member refid="classSurjectiveLockDataStructure_1a8be4390119e3ff3c5269458ca1789bd3" prot="public" virt="non-virtual"><scope>SurjectiveLockDataStructure</scope><name>is_locked</name></member>
      <member refid="classSurjectiveLockDataStructure_1a734a1d77fccaa9aa3fe035f504bcfedc" prot="public" virt="non-virtual"><scope>SurjectiveLockDataStructure</scope><name>is_locked_by_this_thread</name></member>
      <member refid="classSurjectiveLockDataStructure_1a9e89c82fdac27fbca1c7dde34a22900d" prot="public" virt="non-virtual"><scope>SurjectiveLockDataStructure</scope><name>try_lock</name></member>
      <member refid="classSurjectiveLockDataStructure_1a7f449f8f7aef7991af60d7f3c56c5ece" prot="public" virt="non-virtual"><scope>SurjectiveLockDataStructure</scope><name>try_lock</name></member>
      <member refid="classSurjectiveLockDataStructure_1ac0a0acb5759fe2b73894defb2d63c29c" prot="public" virt="non-virtual"><scope>SurjectiveLockDataStructure</scope><name>unlock_everything_locked_by_this_thread</name></member>
      <member refid="classSurjectiveLockDataStructure_1a4ed08cb60942e923043c2899e3121047" prot="public" virt="non-virtual"><scope>SurjectiveLockDataStructure</scope><name>unlock_everything_locked_by_this_thread_but_one</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
