<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classNonnegativeLinearProgram" kind="class" language="C++" prot="public">
    <compoundname>NonnegativeLinearProgram</compoundname>
    <includes local="no">Concepts/NonnegativeLinearProgram.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classNonnegativeLinearProgram_1a855ccf7dc5132798216ba85388afd42c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeLinearProgram::A_iterator</definition>
        <argsstring></argsstring>
        <name>A_iterator</name>
        <qualifiedname>NonnegativeLinearProgram::A_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go columnwise over the constraint matrix <formula id="5">$ A$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The value type is a random access iterator type for an individual column that goes over the entries in that column. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="66" column="26" bodyfile="Concepts/NonnegativeLinearProgram.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classNonnegativeLinearProgram_1aad425ddd881bdc183773d8f80b9477af" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeLinearProgram::B_iterator</definition>
        <argsstring></argsstring>
        <name>B_iterator</name>
        <qualifiedname>NonnegativeLinearProgram::B_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the entries of the right-hand side <formula id="7">$ \qpb$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="72" column="26" bodyfile="Concepts/NonnegativeLinearProgram.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classNonnegativeLinearProgram_1afdb1372094a2bbda80c605317c499149" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeLinearProgram::R_iterator</definition>
        <argsstring></argsstring>
        <name>R_iterator</name>
        <qualifiedname>NonnegativeLinearProgram::R_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the relations <formula id="9">$ \qprel$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The value type of <computeroutput>R_iterator</computeroutput> is <computeroutput><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Comparison_result</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="79" column="26" bodyfile="Concepts/NonnegativeLinearProgram.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classNonnegativeLinearProgram_1a4863e6b264f39e389fd78b6c2e7a64d8" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type NonnegativeLinearProgram::C_iterator</definition>
        <argsstring></argsstring>
        <name>C_iterator</name>
        <qualifiedname>NonnegativeLinearProgram::C_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the entries of the linear objective function vector <formula id="91">$ c$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="85" column="26" bodyfile="Concepts/NonnegativeLinearProgram.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classNonnegativeLinearProgram_1ae58e47a409396f493c7ebaf987357023" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int NonnegativeLinearProgram::get_n</definition>
        <argsstring>() const</argsstring>
        <name>get_n</name>
        <qualifiedname>NonnegativeLinearProgram::get_n</qualifiedname>
        <briefdescription>
<para>returns the number <formula id="3">$ n$</formula> of variables (number of columns of <formula id="5">$ A$</formula>) in <computeroutput>lp</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="96" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeLinearProgram_1a68b8bba0a369948be031f5379f24012f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int NonnegativeLinearProgram::get_m</definition>
        <argsstring>() const</argsstring>
        <name>get_m</name>
        <qualifiedname>NonnegativeLinearProgram::get_m</qualifiedname>
        <briefdescription>
<para>returns the number <formula id="8">$ m$</formula> of constraints (number of rows of <formula id="5">$ A$</formula>) in <computeroutput>lp</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="102" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeLinearProgram_1aaad4cd105b38c508b529c639998c9369" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeLinearProgram_1a855ccf7dc5132798216ba85388afd42c" kindref="member">A_iterator</ref></type>
        <definition>A_iterator NonnegativeLinearProgram::get_a</definition>
        <argsstring>() const</argsstring>
        <name>get_a</name>
        <qualifiedname>NonnegativeLinearProgram::get_a</qualifiedname>
        <briefdescription>
<para>returns an iterator over the columns of <formula id="5">$ A$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeLinearProgram_1aaad4cd105b38c508b529c639998c9369" kindref="member">get_a()</ref>+<ref refid="classNonnegativeLinearProgram_1ae58e47a409396f493c7ebaf987357023" kindref="member">get_n()</ref></computeroutput>. For <formula id="92">$ j=0,\ldots,n-1$</formula>, <computeroutput>*(<ref refid="classNonnegativeLinearProgram_1aaad4cd105b38c508b529c639998c9369" kindref="member">get_a()</ref>+j)</computeroutput> a random access iterator for column <formula id="14">$ j$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="110" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeLinearProgram_1a54abd410361b5225a3cc016da8d26628" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeLinearProgram_1aad425ddd881bdc183773d8f80b9477af" kindref="member">B_iterator</ref></type>
        <definition>B_iterator NonnegativeLinearProgram::get_b</definition>
        <argsstring>() const</argsstring>
        <name>get_b</name>
        <qualifiedname>NonnegativeLinearProgram::get_b</qualifiedname>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="7">$ \qpb$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeLinearProgram_1a54abd410361b5225a3cc016da8d26628" kindref="member">get_b()</ref>+<ref refid="classNonnegativeLinearProgram_1a68b8bba0a369948be031f5379f24012f" kindref="member">get_m()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="117" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeLinearProgram_1afce748c80f0f3cdf3ed932b96a9ee00c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeLinearProgram_1afdb1372094a2bbda80c605317c499149" kindref="member">R_iterator</ref></type>
        <definition>R_iterator NonnegativeLinearProgram::get_r</definition>
        <argsstring>() const</argsstring>
        <name>get_r</name>
        <qualifiedname>NonnegativeLinearProgram::get_r</qualifiedname>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="9">$ \qprel$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeLinearProgram_1afce748c80f0f3cdf3ed932b96a9ee00c" kindref="member">get_r()</ref>+<ref refid="classNonnegativeLinearProgram_1a68b8bba0a369948be031f5379f24012f" kindref="member">get_m()</ref></computeroutput>. The value <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::SMALLER</ref></computeroutput> stands for <formula id="52">$ \leq$</formula>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::EQUAL</ref></computeroutput> stands for <formula id="93">$ =$</formula>, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::LARGER</ref></computeroutput> stands for <formula id="53">$ \geq$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="127" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeLinearProgram_1a18dc5415b56ffdbcc79a5eab1fd4c20f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNonnegativeLinearProgram_1a4863e6b264f39e389fd78b6c2e7a64d8" kindref="member">C_iterator</ref></type>
        <definition>C_iterator NonnegativeLinearProgram::get_c</definition>
        <argsstring>() const</argsstring>
        <name>get_c</name>
        <qualifiedname>NonnegativeLinearProgram::get_c</qualifiedname>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="17">$ \qpc$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classNonnegativeLinearProgram_1a18dc5415b56ffdbcc79a5eab1fd4c20f" kindref="member">get_c()</ref>+<ref refid="classNonnegativeLinearProgram_1ae58e47a409396f493c7ebaf987357023" kindref="member">get_n()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="134" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classNonnegativeLinearProgram_1a2af696abb35509df9aaf54bcf9193386" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::iterator_traits&lt; <ref refid="classNonnegativeLinearProgram_1a4863e6b264f39e389fd78b6c2e7a64d8" kindref="member">C_iterator</ref> &gt;::value_type</type>
        <definition>std::iterator_traits&lt; C_iterator &gt;::value_type NonnegativeLinearProgram::get_c0</definition>
        <argsstring>() const</argsstring>
        <name>get_c0</name>
        <qualifiedname>NonnegativeLinearProgram::get_c0</qualifiedname>
        <briefdescription>
<para>returns the constant term <formula id="18">$ c_0$</formula> of the objective function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/NonnegativeLinearProgram.h" line="139" column="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A model of <computeroutput><ref refid="classNonnegativeLinearProgram" kindref="compound">NonnegativeLinearProgram</ref></computeroutput> describes a linear program of the form. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><formula id="21">\begin{eqnarray*}
\mbox{(QP)}&amp; \mbox{minimize}
&amp;\qpc^{T}\qpx+c_0 \\
&amp;\mbox{subject to} &amp; A\qpx\qprel \qpb, \\
&amp; &amp; \qpx \geq 0
\end{eqnarray*}</formula></para>
<para>in <formula id="3">$ n$</formula> real variables <formula id="4">$ \qpx=(x_0,\ldots,x_{n-1})$</formula>. Here,</para>
<para><itemizedlist>
<listitem>
<para><formula id="5">$ A$</formula> is an <formula id="6">$ m\times n$</formula> matrix (the constraint matrix), </para>
</listitem>
<listitem>
<para><formula id="7">$ \qpb$</formula> is an <formula id="8">$ m$</formula>-dimensional vector (the right-hand side), </para>
</listitem>
<listitem>
<para><formula id="9">$ \qprel$</formula> is an <formula id="8">$ m$</formula>-dimensional vector of relations from <formula id="10">$ \{\leq, =, \geq\}$</formula>, </para>
</listitem>
<listitem>
<para><formula id="17">$ \qpc$</formula> is an <formula id="3">$ n$</formula>-dimensional vector (the linear objective function), and </para>
</listitem>
<listitem>
<para><formula id="18">$ c_0$</formula> is a constant. </para>
</listitem>
</itemizedlist>
</para>
<para>The description is given by appropriate <emphasis>random-access</emphasis> iterators over the program data, see below. The program therefore comes in <emphasis>dense</emphasis> representation which includes zero entries.</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program" kindref="compound">CGAL::Quadratic_program</ref>&lt;NT&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">CGAL::Quadratic_program_from_mps</ref>&lt;NT&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Nonnegative__linear__program__from__iterators" kindref="compound">CGAL::Nonnegative_linear_program_from_iterators</ref>&lt;A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, D_it, C_it&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
<para>The value types of all iterator types (nested iterator types, respectively, for <computeroutput>A_iterator</computeroutput>) must be convertible to some common <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> <computeroutput>ET</computeroutput>.</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program" kindref="compound">CGAL::Quadratic_program</ref>&lt;NT&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">CGAL::Quadratic_program_from_mps</ref>&lt;NT&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Nonnegative__linear__program__from__iterators" kindref="compound">CGAL::Nonnegative_linear_program_from_iterators</ref>&lt;A_it, B_it, R_it, C_it&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classQuadraticProgram" kindref="compound">QuadraticProgram</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classLinearProgram" kindref="compound">LinearProgram</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classNonnegativeQuadraticProgram" kindref="compound">NonnegativeQuadraticProgram</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/NonnegativeLinearProgram.h" line="54" column="1" bodyfile="Concepts/NonnegativeLinearProgram.h" bodystart="54" bodyend="143"/>
    <listofallmembers>
      <member refid="classNonnegativeLinearProgram_1a855ccf7dc5132798216ba85388afd42c" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>A_iterator</name></member>
      <member refid="classNonnegativeLinearProgram_1aad425ddd881bdc183773d8f80b9477af" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>B_iterator</name></member>
      <member refid="classNonnegativeLinearProgram_1a4863e6b264f39e389fd78b6c2e7a64d8" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>C_iterator</name></member>
      <member refid="classNonnegativeLinearProgram_1aaad4cd105b38c508b529c639998c9369" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>get_a</name></member>
      <member refid="classNonnegativeLinearProgram_1a54abd410361b5225a3cc016da8d26628" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>get_b</name></member>
      <member refid="classNonnegativeLinearProgram_1a18dc5415b56ffdbcc79a5eab1fd4c20f" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>get_c</name></member>
      <member refid="classNonnegativeLinearProgram_1a2af696abb35509df9aaf54bcf9193386" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>get_c0</name></member>
      <member refid="classNonnegativeLinearProgram_1a68b8bba0a369948be031f5379f24012f" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>get_m</name></member>
      <member refid="classNonnegativeLinearProgram_1ae58e47a409396f493c7ebaf987357023" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>get_n</name></member>
      <member refid="classNonnegativeLinearProgram_1afce748c80f0f3cdf3ed932b96a9ee00c" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>get_r</name></member>
      <member refid="classNonnegativeLinearProgram_1afdb1372094a2bbda80c605317c499149" prot="public" virt="non-virtual"><scope>NonnegativeLinearProgram</scope><name>R_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
