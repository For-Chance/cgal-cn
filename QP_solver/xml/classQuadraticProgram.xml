<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classQuadraticProgram" kind="class" language="C++" prot="public">
    <compoundname>QuadraticProgram</compoundname>
    <includes local="no">Concepts/QuadraticProgram.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classQuadraticProgram_1ab2362aac25d6101cb78cf5d44fcb063e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::A_iterator</definition>
        <argsstring></argsstring>
        <name>A_iterator</name>
        <qualifiedname>QuadraticProgram::A_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go columnwise over the constraint matrix <formula id="5">$ A$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The value type is a random access iterator type for an individual column that goes over the entries in that column. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="64" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadraticProgram_1ad0d16ba7973d883d8efee617cf104653" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::B_iterator</definition>
        <argsstring></argsstring>
        <name>B_iterator</name>
        <qualifiedname>QuadraticProgram::B_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the entries of the right-hand side <formula id="7">$ \qpb$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="70" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadraticProgram_1a7accdaaeed156ed106c00e9e51089353" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::R_iterator</definition>
        <argsstring></argsstring>
        <name>R_iterator</name>
        <qualifiedname>QuadraticProgram::R_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the relations <formula id="9">$ \qprel$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The value type of <computeroutput>R_iterator</computeroutput> is <computeroutput><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Comparison_result</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="77" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadraticProgram_1a3d1cf419800a59568ba0102cd2f28af1" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::FL_iterator</definition>
        <argsstring></argsstring>
        <name>FL_iterator</name>
        <qualifiedname>QuadraticProgram::FL_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the existence (finiteness) of the lower bounds <formula id="89">$ l_j, j=0,\ldots,n-1$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The value type of <computeroutput>FL_iterator</computeroutput> is <computeroutput>bool</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="84" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadraticProgram_1a8041194cb2fdc0c713f4080c32af0fb2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::L_iterator</definition>
        <argsstring></argsstring>
        <name>L_iterator</name>
        <qualifiedname>QuadraticProgram::L_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the entries of the lower bound vector <formula id="11">$ \qpl$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="90" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadraticProgram_1a409f1f3e12d30ec23d4c0f344dae79e1" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::UL_iterator</definition>
        <argsstring></argsstring>
        <name>UL_iterator</name>
        <qualifiedname>QuadraticProgram::UL_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the existence (finiteness) of the upper bounds <formula id="90">$ u_j, j=0,\ldots,n-1$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The value type of <computeroutput>UL_iterator</computeroutput> is <computeroutput>bool</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="97" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadraticProgram_1a3a0ca91e29e66c7ffe95681f64421681" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::U_iterator</definition>
        <argsstring></argsstring>
        <name>U_iterator</name>
        <qualifiedname>QuadraticProgram::U_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the entries of the upper bound vector <formula id="15">$ \qpu$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="103" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadraticProgram_1a70c03cad82a6de15ab237e2a17a32f64" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::D_iterator</definition>
        <argsstring></argsstring>
        <name>D_iterator</name>
        <qualifiedname>QuadraticProgram::D_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go rowwise over the matrix <formula id="120">$ 2D$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The value type is a random access iterator type for an individual row that goes over the entries in that row, up to (and including) the entry on the main diagonal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="112" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadraticProgram_1a678815b95a205f3c15afdafb535d97b6" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type QuadraticProgram::C_iterator</definition>
        <argsstring></argsstring>
        <name>C_iterator</name>
        <qualifiedname>QuadraticProgram::C_iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator type to go over the entries of the linear objective function vector <formula id="91">$ c$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="118" column="26" bodyfile="Concepts/QuadraticProgram.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QuadraticProgram::get_n</definition>
        <argsstring>() const</argsstring>
        <name>get_n</name>
        <qualifiedname>QuadraticProgram::get_n</qualifiedname>
        <briefdescription>
<para>returns the number <formula id="3">$ n$</formula> of variables (number of columns of <formula id="5">$ A$</formula>) in <computeroutput>qp</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="129" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1aaa2e6635764598c55c7bd1f481c2a30c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QuadraticProgram::get_m</definition>
        <argsstring>() const</argsstring>
        <name>get_m</name>
        <qualifiedname>QuadraticProgram::get_m</qualifiedname>
        <briefdescription>
<para>returns the number <formula id="8">$ m$</formula> of constraints (number of rows of <formula id="5">$ A$</formula>) in <computeroutput>qp</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="135" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1ab50c728bf2c7813405b3d0695d789be4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuadraticProgram_1ab2362aac25d6101cb78cf5d44fcb063e" kindref="member">A_iterator</ref></type>
        <definition>A_iterator QuadraticProgram::get_a</definition>
        <argsstring>() const</argsstring>
        <name>get_a</name>
        <qualifiedname>QuadraticProgram::get_a</qualifiedname>
        <briefdescription>
<para>returns an iterator over the columns of <formula id="5">$ A$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1ab50c728bf2c7813405b3d0695d789be4" kindref="member">get_a()</ref>+<ref refid="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" kindref="member">get_n()</ref></computeroutput>. For <formula id="92">$ j=0,\ldots,n-1$</formula>, <computeroutput>*(<ref refid="classQuadraticProgram_1ab50c728bf2c7813405b3d0695d789be4" kindref="member">get_a()</ref>+j)</computeroutput> is a random access iterator for column <formula id="14">$ j$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="143" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1a9032ce18cc7dcd7ca87c6c059a8f5c15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuadraticProgram_1ad0d16ba7973d883d8efee617cf104653" kindref="member">B_iterator</ref></type>
        <definition>B_iterator QuadraticProgram::get_b</definition>
        <argsstring>() const</argsstring>
        <name>get_b</name>
        <qualifiedname>QuadraticProgram::get_b</qualifiedname>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="7">$ \qpb$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1a9032ce18cc7dcd7ca87c6c059a8f5c15" kindref="member">get_b()</ref>+<ref refid="classQuadraticProgram_1aaa2e6635764598c55c7bd1f481c2a30c" kindref="member">get_m()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="150" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1aca1a8c4e0583e029ca6a38ff726367d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuadraticProgram_1a7accdaaeed156ed106c00e9e51089353" kindref="member">R_iterator</ref></type>
        <definition>R_iterator QuadraticProgram::get_r</definition>
        <argsstring>() const</argsstring>
        <name>get_r</name>
        <qualifiedname>QuadraticProgram::get_r</qualifiedname>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="9">$ \qprel$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1aca1a8c4e0583e029ca6a38ff726367d7" kindref="member">get_r()</ref>+<ref refid="classQuadraticProgram_1aaa2e6635764598c55c7bd1f481c2a30c" kindref="member">get_m()</ref></computeroutput>. The value <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab925c6b1ff8cd0bdea7f31fe18d3c38b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::SMALLER</ref></computeroutput> stands for <formula id="52">$ \leq$</formula>, <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469a5f224784e56ca565837a5d6d268fe078" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::EQUAL</ref></computeroutput> stands for <formula id="93">$ =$</formula>, and <computeroutput><ref refid="group__kernel__enums_1gga84351c7e66be00efccd4ab1a61070469ab25bdbfd193e9ea35187a4f46e7d6fcd" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::LARGER</ref></computeroutput> stands for <formula id="53">$ \geq$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="160" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1a1953d0b101e02abe3bcca8aee62da663" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuadraticProgram_1a3d1cf419800a59568ba0102cd2f28af1" kindref="member">FL_iterator</ref></type>
        <definition>FL_iterator QuadraticProgram::get_fl</definition>
        <argsstring>() const</argsstring>
        <name>get_fl</name>
        <qualifiedname>QuadraticProgram::get_fl</qualifiedname>
        <briefdescription>
<para>returns an iterator over the existence of the lower bounds <formula id="89">$ l_j, j=0,\ldots,n-1$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1a1953d0b101e02abe3bcca8aee62da663" kindref="member">get_fl()</ref>+<ref refid="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" kindref="member">get_n()</ref></computeroutput>. If <computeroutput>*(<ref refid="classQuadraticProgram_1a1953d0b101e02abe3bcca8aee62da663" kindref="member">get_fl()</ref>+j)</computeroutput> has value <formula id="94">$ true$</formula>, the variable <formula id="95">$ x_j$</formula> has a lower bound given by <computeroutput>*(<ref refid="classQuadraticProgram_1a8f1f93af4e1105779ad9227603306fb9" kindref="member">get_l()</ref>+j)</computeroutput>, otherwise it has no lower bound. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="169" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1a8f1f93af4e1105779ad9227603306fb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuadraticProgram_1a8041194cb2fdc0c713f4080c32af0fb2" kindref="member">L_iterator</ref></type>
        <definition>L_iterator QuadraticProgram::get_l</definition>
        <argsstring>() const</argsstring>
        <name>get_l</name>
        <qualifiedname>QuadraticProgram::get_l</qualifiedname>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="11">$ \qpl$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1a8f1f93af4e1105779ad9227603306fb9" kindref="member">get_l()</ref>+<ref refid="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" kindref="member">get_n()</ref></computeroutput>. If <computeroutput>*(<ref refid="classQuadraticProgram_1a1953d0b101e02abe3bcca8aee62da663" kindref="member">get_fl()</ref>+j)</computeroutput> has value <formula id="96">$ false$</formula>, the value <computeroutput>*(<ref refid="classQuadraticProgram_1a8f1f93af4e1105779ad9227603306fb9" kindref="member">get_l()</ref>+j)</computeroutput> is not accessed. <simplesect kind="pre"><para>if both <computeroutput>*(<ref refid="classQuadraticProgram_1a1953d0b101e02abe3bcca8aee62da663" kindref="member">get_fl()</ref>+j)</computeroutput> and <computeroutput>*(<ref refid="classQuadraticProgram_1aea0203df9fda95d9f7dc056ecdc65de6" kindref="member">get_fu()</ref>+j)</computeroutput> have value <formula id="94">$ true$</formula>, then <computeroutput>*(<ref refid="classQuadraticProgram_1a8f1f93af4e1105779ad9227603306fb9" kindref="member">get_l()</ref>+j) &lt;= *(<ref refid="classQuadraticProgram_1aa16966440a708004cd67a1290107c446" kindref="member">get_u()</ref>+j)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="178" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1aea0203df9fda95d9f7dc056ecdc65de6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FU_iterator</type>
        <definition>FU_iterator QuadraticProgram::get_fu</definition>
        <argsstring>() const</argsstring>
        <name>get_fu</name>
        <qualifiedname>QuadraticProgram::get_fu</qualifiedname>
        <briefdescription>
<para>returns an iterator over the existence of the upper bounds <formula id="90">$ u_j, j=0,\ldots,n-1$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1aea0203df9fda95d9f7dc056ecdc65de6" kindref="member">get_fu()</ref>+<ref refid="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" kindref="member">get_n()</ref></computeroutput>. If <computeroutput>*(<ref refid="classQuadraticProgram_1aea0203df9fda95d9f7dc056ecdc65de6" kindref="member">get_fu()</ref>+j)</computeroutput> has value <formula id="94">$ true$</formula>, the variable <formula id="95">$ x_j$</formula> has an upper bound given by <computeroutput>*(<ref refid="classQuadraticProgram_1aa16966440a708004cd67a1290107c446" kindref="member">get_u()</ref>+j)</computeroutput>, otherwise it has no upper bound. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="187" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1aa16966440a708004cd67a1290107c446" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuadraticProgram_1a8041194cb2fdc0c713f4080c32af0fb2" kindref="member">L_iterator</ref></type>
        <definition>L_iterator QuadraticProgram::get_u</definition>
        <argsstring>() const</argsstring>
        <name>get_u</name>
        <qualifiedname>QuadraticProgram::get_u</qualifiedname>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="15">$ \qpu$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1aa16966440a708004cd67a1290107c446" kindref="member">get_u()</ref>+<ref refid="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" kindref="member">get_n()</ref></computeroutput>. If <computeroutput>*(<ref refid="classQuadraticProgram_1aea0203df9fda95d9f7dc056ecdc65de6" kindref="member">get_fu()</ref>+j)</computeroutput> has value <formula id="96">$ false$</formula>, the value <computeroutput>*(<ref refid="classQuadraticProgram_1aa16966440a708004cd67a1290107c446" kindref="member">get_u()</ref>+j)</computeroutput> is not accessed. <simplesect kind="pre"><para>if both <computeroutput>*(<ref refid="classQuadraticProgram_1a1953d0b101e02abe3bcca8aee62da663" kindref="member">get_fl()</ref>+j)</computeroutput> and <computeroutput>*(<ref refid="classQuadraticProgram_1aea0203df9fda95d9f7dc056ecdc65de6" kindref="member">get_fu()</ref>+j)</computeroutput> have value <formula id="94">$ true$</formula>, then <computeroutput>*(<ref refid="classQuadraticProgram_1a8f1f93af4e1105779ad9227603306fb9" kindref="member">get_l()</ref>+j) &lt;= *(<ref refid="classQuadraticProgram_1aa16966440a708004cd67a1290107c446" kindref="member">get_u()</ref>+j)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="196" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1a32afc97e651eebdaa358be233d8b4955" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuadraticProgram_1a70c03cad82a6de15ab237e2a17a32f64" kindref="member">D_iterator</ref></type>
        <definition>D_iterator QuadraticProgram::get_d</definition>
        <argsstring>() const</argsstring>
        <name>get_d</name>
        <qualifiedname>QuadraticProgram::get_d</qualifiedname>
        <briefdescription>
<para>returns an iterator over the rows of <formula id="120">$ 2D$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1a32afc97e651eebdaa358be233d8b4955" kindref="member">get_d()</ref>+<ref refid="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" kindref="member">get_n()</ref></computeroutput>. For <formula id="122">$ i=0,\ldots,n-1$</formula>, <computeroutput>*(<ref refid="classQuadraticProgram_1a32afc97e651eebdaa358be233d8b4955" kindref="member">get_d()</ref>+i)</computeroutput> is a random access iterator for the entries in row <formula id="29">$ i$</formula> <emphasis>below or on the diagonal</emphasis>. The valid range of this iterator is guaranteed to have length <formula id="123">$ i+1$</formula> but not more. Values to the right of the diagonal are deduced from the symmetry requirement on <formula id="23">$ D$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="207" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1acae4623e4b693f9a07cf9feed1b9fa80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuadraticProgram_1a678815b95a205f3c15afdafb535d97b6" kindref="member">C_iterator</ref></type>
        <definition>C_iterator QuadraticProgram::get_c</definition>
        <argsstring>() const</argsstring>
        <name>get_c</name>
        <qualifiedname>QuadraticProgram::get_c</qualifiedname>
        <briefdescription>
<para>returns an iterator over the entries of <formula id="17">$ \qpc$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding past-the-end iterator is <computeroutput><ref refid="classQuadraticProgram_1acae4623e4b693f9a07cf9feed1b9fa80" kindref="member">get_c()</ref>+<ref refid="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" kindref="member">get_n()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="214" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuadraticProgram_1a46a2d56bc092a00751dc7133452598d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::iterator_traits&lt; <ref refid="classQuadraticProgram_1a678815b95a205f3c15afdafb535d97b6" kindref="member">C_iterator</ref> &gt;::value_type</type>
        <definition>std::iterator_traits&lt; C_iterator &gt;::value_type QuadraticProgram::get_c0</definition>
        <argsstring>() const</argsstring>
        <name>get_c0</name>
        <qualifiedname>QuadraticProgram::get_c0</qualifiedname>
        <briefdescription>
<para>returns the constant term <formula id="18">$ c_0$</formula> of the objective function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/QuadraticProgram.h" line="219" column="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A model of <computeroutput><ref refid="classQuadraticProgram" kindref="compound">QuadraticProgram</ref></computeroutput> describes a convex quadratic program of the form. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><formula id="25">\begin{eqnarray*}
\mbox{(QP)}&amp; \mbox{minimize}
&amp; \qpx^{T}D\qpx+\qpc^{T}\qpx+c_0 \\
&amp;\mbox{subject to} &amp; A\qpx\qprel \qpb, \\
&amp; &amp; \qpl \leq \qpx \leq \qpu
\end{eqnarray*}</formula> in <formula id="3">$ n$</formula> real variables <formula id="4">$ \qpx=(x_0,\ldots,x_{n-1})$</formula>.</para>
<para>Here, <itemizedlist>
<listitem>
<para><formula id="5">$ A$</formula> is an <formula id="6">$ m\times n$</formula> matrix (the constraint matrix), </para>
</listitem>
<listitem>
<para><formula id="7">$ \qpb$</formula> is an <formula id="8">$ m$</formula>-dimensional vector (the right-hand side), </para>
</listitem>
<listitem>
<para><formula id="9">$ \qprel$</formula> is an <formula id="8">$ m$</formula>-dimensional vector of relations from <formula id="10">$ \{\leq, =, \geq\}$</formula>, </para>
</listitem>
<listitem>
<para><formula id="11">$ \qpl$</formula> is an <formula id="3">$ n$</formula>-dimensional vector of lower bounds for <formula id="12">$ \qpx$</formula>, where <formula id="13">$ l_j\in\mathbb{R}\cup\{-\infty\}$</formula> for all <formula id="14">$ j$</formula> </para>
</listitem>
<listitem>
<para><formula id="15">$ \qpu$</formula> is an <formula id="3">$ n$</formula>-dimensional vector of upper bounds for <formula id="12">$ \qpx$</formula>, where <formula id="16">$ u_j\in\mathbb{R}\cup\{\infty\}$</formula> for all <formula id="14">$ j$</formula> </para>
</listitem>
<listitem>
<para><formula id="23">$ D$</formula> is a symmetric positive-semidefinite <formula id="24">$ n\times n$</formula> matrix (the quadratic objective function), </para>
</listitem>
<listitem>
<para><formula id="17">$ \qpc$</formula> is an <formula id="3">$ n$</formula>-dimensional vector (the linear objective function), and </para>
</listitem>
<listitem>
<para><formula id="18">$ c_0$</formula> is a constant. </para>
</listitem>
</itemizedlist>
</para>
<para>The description is given by appropriate <emphasis>random-access</emphasis> iterators over the program data, see below. The program therefore comes in <emphasis>dense</emphasis> representation which includes zero entries.</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program" kindref="compound">CGAL::Quadratic_program</ref>&lt;NT&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__mps" kindref="compound">CGAL::Quadratic_program_from_mps</ref>&lt;NT&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Quadratic__program__from__iterators" kindref="compound">CGAL::Quadratic_program_from_iterators</ref>&lt;A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, D_it, C_it&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
<para>The value types of all iterator types (nested iterator types, respectively, for <computeroutput>A_iterator</computeroutput> and <computeroutput>D_iterator</computeroutput>) must be convertible to some common <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> <computeroutput>ET</computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classNonnegativeQuadraticProgram" kindref="compound">NonnegativeQuadraticProgram</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classLinearProgram" kindref="compound">LinearProgram</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classNonnegativeLinearProgram" kindref="compound">NonnegativeLinearProgram</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/QuadraticProgram.h" line="52" column="1" bodyfile="Concepts/QuadraticProgram.h" bodystart="52" bodyend="223"/>
    <listofallmembers>
      <member refid="classQuadraticProgram_1ab2362aac25d6101cb78cf5d44fcb063e" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>A_iterator</name></member>
      <member refid="classQuadraticProgram_1ad0d16ba7973d883d8efee617cf104653" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>B_iterator</name></member>
      <member refid="classQuadraticProgram_1a678815b95a205f3c15afdafb535d97b6" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>C_iterator</name></member>
      <member refid="classQuadraticProgram_1a70c03cad82a6de15ab237e2a17a32f64" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>D_iterator</name></member>
      <member refid="classQuadraticProgram_1a3d1cf419800a59568ba0102cd2f28af1" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>FL_iterator</name></member>
      <member refid="classQuadraticProgram_1ab50c728bf2c7813405b3d0695d789be4" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_a</name></member>
      <member refid="classQuadraticProgram_1a9032ce18cc7dcd7ca87c6c059a8f5c15" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_b</name></member>
      <member refid="classQuadraticProgram_1acae4623e4b693f9a07cf9feed1b9fa80" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_c</name></member>
      <member refid="classQuadraticProgram_1a46a2d56bc092a00751dc7133452598d1" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_c0</name></member>
      <member refid="classQuadraticProgram_1a32afc97e651eebdaa358be233d8b4955" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_d</name></member>
      <member refid="classQuadraticProgram_1a1953d0b101e02abe3bcca8aee62da663" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_fl</name></member>
      <member refid="classQuadraticProgram_1aea0203df9fda95d9f7dc056ecdc65de6" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_fu</name></member>
      <member refid="classQuadraticProgram_1a8f1f93af4e1105779ad9227603306fb9" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_l</name></member>
      <member refid="classQuadraticProgram_1aaa2e6635764598c55c7bd1f481c2a30c" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_m</name></member>
      <member refid="classQuadraticProgram_1a47387436506d56e1282de7d6dc4c4405" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_n</name></member>
      <member refid="classQuadraticProgram_1aca1a8c4e0583e029ca6a38ff726367d7" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_r</name></member>
      <member refid="classQuadraticProgram_1aa16966440a708004cd67a1290107c446" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>get_u</name></member>
      <member refid="classQuadraticProgram_1a8041194cb2fdc0c713f4080c32af0fb2" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>L_iterator</name></member>
      <member refid="classQuadraticProgram_1a7accdaaeed156ed106c00e9e51089353" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>R_iterator</name></member>
      <member refid="classQuadraticProgram_1a3a0ca91e29e66c7ffe95681f64421681" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>U_iterator</name></member>
      <member refid="classQuadraticProgram_1a409f1f3e12d30ec23d4c0f344dae79e1" prot="public" virt="non-virtual"><scope>QuadraticProgram</scope><name>UL_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
