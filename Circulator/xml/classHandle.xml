<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classHandle" kind="class" language="C++" prot="public">
    <compoundname>Handle</compoundname>
    <includes local="no">Concepts/Handle.h</includes>
      <sectiondef kind="user-defined">
      <header>Dereference</header>
      <memberdef kind="function" id="classHandle_1a740ed6106f0ed709af6273943f1cb966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>value_type &amp;</type>
        <definition>value_type &amp; Handle::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <qualifiedname>Handle::operator*</qualifiedname>
        <briefdescription>
<para>returns the object pointed to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Handle.h" line="42" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classHandle_1ac10817757a602fcbe18ad0bd0e3e4ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>value_type *</type>
        <definition>value_type * Handle::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>Handle::operator-&gt;</qualifiedname>
        <briefdescription>
<para>returns a pointer to the object pointed to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/Handle.h" line="47" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Most data structures in CGAL use the concept of <computeroutput><ref refid="classHandle" kindref="compound">Handle</ref></computeroutput> in their user interface to refer to the elements they store. This concept describes what is sometimes called a trivial iterator. A <computeroutput><ref refid="classHandle" kindref="compound">Handle</ref></computeroutput> is akin to a pointer to an object providing the dereference operator <computeroutput><ref refid="classHandle_1a740ed6106f0ed709af6273943f1cb966" kindref="member">operator*()</ref></computeroutput> and member access <computeroutput>operator-&gt;()</computeroutput> but no increment or decrement operators like iterators. A <computeroutput><ref refid="classHandle" kindref="compound">Handle</ref></computeroutput> is intended to be used whenever the referenced object is not part of a logical sequence. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para>Like iterators, the handle can be passed as template argument to <computeroutput>std::iterators_traits</computeroutput> in order to extract its <computeroutput>value_type</computeroutput>, the type of the element pointed to. The <computeroutput>iterator_category</computeroutput> is <computeroutput>void</computeroutput>.</para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classDescriptor" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Descriptor</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para>The default constructed object must be unique as far as the equality operator is concerned (this serves the same purpose as NULL for pointers). (Note that this is not a generally supported feature of iterators of standard containers.)</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput>T* (pointer)</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput>const T* (const pointers)</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Iterator</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/Handle.h" line="33" column="1" bodyfile="Concepts/Handle.h" bodystart="33" bodyend="51"/>
    <listofallmembers>
      <member refid="classHandle_1a740ed6106f0ed709af6273943f1cb966" prot="public" virt="non-virtual"><scope>Handle</scope><name>operator*</name></member>
      <member refid="classHandle_1ac10817757a602fcbe18ad0bd0e3e4ec9" prot="public" virt="non-virtual"><scope>Handle</scope><name>operator-&gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
