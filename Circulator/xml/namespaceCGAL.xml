<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="structCGAL_1_1Bidirectional__circulator__base" prot="public">CGAL::Bidirectional_circulator_base</innerclass>
    <innerclass refid="classCGAL_1_1Bidirectional__circulator__ptrbase" prot="public">CGAL::Bidirectional_circulator_ptrbase</innerclass>
    <innerclass refid="structCGAL_1_1Bidirectional__circulator__tag" prot="public">CGAL::Bidirectional_circulator_tag</innerclass>
    <innerclass refid="structCGAL_1_1Circulator__base" prot="public">CGAL::Circulator_base</innerclass>
    <innerclass refid="classCGAL_1_1Circulator__from__container" prot="public">CGAL::Circulator_from_container</innerclass>
    <innerclass refid="classCGAL_1_1Circulator__from__iterator" prot="public">CGAL::Circulator_from_iterator</innerclass>
    <innerclass refid="structCGAL_1_1Circulator__tag" prot="public">CGAL::Circulator_tag</innerclass>
    <innerclass refid="structCGAL_1_1Circulator__traits" prot="public">CGAL::Circulator_traits</innerclass>
    <innerclass refid="classCGAL_1_1Container__from__circulator" prot="public">CGAL::Container_from_circulator</innerclass>
    <innerclass refid="structCGAL_1_1Forward__circulator__base" prot="public">CGAL::Forward_circulator_base</innerclass>
    <innerclass refid="classCGAL_1_1Forward__circulator__ptrbase" prot="public">CGAL::Forward_circulator_ptrbase</innerclass>
    <innerclass refid="structCGAL_1_1Forward__circulator__tag" prot="public">CGAL::Forward_circulator_tag</innerclass>
    <innerclass refid="structCGAL_1_1Iterator__tag" prot="public">CGAL::Iterator_tag</innerclass>
    <innerclass refid="structCGAL_1_1Random__access__circulator__base" prot="public">CGAL::Random_access_circulator_base</innerclass>
    <innerclass refid="classCGAL_1_1Random__access__circulator__ptrbase" prot="public">CGAL::Random_access_circulator_ptrbase</innerclass>
    <innerclass refid="structCGAL_1_1Random__access__circulator__tag" prot="public">CGAL::Random_access_circulator_tag</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_circulator</definition>
        <argsstring>(const C &amp;c)</argsstring>
        <name>Assert_circulator</name>
        <qualifiedname>CGAL::Assert_circulator</qualifiedname>
        <param>
          <type>const C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>checks at compile time if its argument is a circulator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="29" column="6" declfile="CGAL/circulator.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga28a51d41a222f90c19b75bc6f5e1155f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_iterator</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>Assert_iterator</name>
        <qualifiedname>CGAL::Assert_iterator</qualifiedname>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>checks at compile time if its argument is an iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="38" column="6" declfile="CGAL/circulator.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga9bfcd5e48c98a1ccc7b74f8e8f302730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_circulator_or_iterator</definition>
        <argsstring>(const IC &amp;i)</argsstring>
        <name>Assert_circulator_or_iterator</name>
        <qualifiedname>CGAL::Assert_circulator_or_iterator</qualifiedname>
        <param>
          <type>const IC &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>checks at compile time if its argument is a circulator or iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="47" column="6" declfile="CGAL/circulator.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1gae03ebcb9a583408d6db5f9cc3b11ebe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_input_category</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>Assert_input_category</name>
        <qualifiedname>CGAL::Assert_input_category</qualifiedname>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="54" column="6" declfile="CGAL/circulator.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1gaa60474dae8730bf824f506cc75eb845d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_output_category</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>Assert_output_category</name>
        <qualifiedname>CGAL::Assert_output_category</qualifiedname>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="61" column="6" declfile="CGAL/circulator.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1gab791ef74a8a4c15fd0b99080c1e9b632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_forward_category</definition>
        <argsstring>(const IC &amp;ic)</argsstring>
        <name>Assert_forward_category</name>
        <qualifiedname>CGAL::Assert_forward_category</qualifiedname>
        <param>
          <type>const IC &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="68" column="6" declfile="CGAL/circulator.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga11d32256668de73db038afb63080da9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_bidirectional_category</definition>
        <argsstring>(const IC &amp;ic)</argsstring>
        <name>Assert_bidirectional_category</name>
        <qualifiedname>CGAL::Assert_bidirectional_category</qualifiedname>
        <param>
          <type>const IC &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="75" column="6" declfile="CGAL/circulator.h" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsAssert_1ga8c5ac1c87cd7c3d6a98816354eac5031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Assert_random_access_category</definition>
        <argsstring>(const IC &amp;ic)</argsstring>
        <name>Assert_random_access_category</name>
        <qualifiedname>CGAL::Assert_random_access_category</qualifiedname>
        <param>
          <type>const IC &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="82" column="6" declfile="CGAL/circulator.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1gaa7e7be37f74469fd362a65b9263f290f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>C::difference_type</type>
        <definition>C::difference_type CGAL::circulator_distance</definition>
        <argsstring>(C c, C d)</argsstring>
        <name>circulator_distance</name>
        <qualifiedname>CGAL::circulator_distance</qualifiedname>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <param>
          <type>C</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>The distance of a circulator <computeroutput>c</computeroutput> to a circulator <computeroutput>d</computeroutput> is the number of elements in the range <computeroutput>[c, d)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is defined to be zero for a circulator on an empty sequence and it returns the size of the data structure when applied to a range of the form <computeroutput>[c, c)</computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1ga2d7bfa21e8eb046b8ae90104aa4fcce4" kindref="member">circulator_size</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gadaabb38d2411a4370d963a07c55ea3a8" kindref="member">iterator_distance</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="103" column="1" declfile="CGAL/circulator.h" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1ga2d7bfa21e8eb046b8ae90104aa4fcce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>C::size_type</type>
        <definition>C::size_type CGAL::circulator_size</definition>
        <argsstring>(C c)</argsstring>
        <name>circulator_size</name>
        <qualifiedname>CGAL::circulator_size</qualifiedname>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>The size of a circulator is the size of the data structure it refers to. </para>
        </briefdescription>
        <detaileddescription>
<para>It is zero for a circulator on an empty sequence. The size can be computed in linear time for forward and bidirectional circulators, and in constant time for random access circulators using the minimal circulator. The function <computeroutput>circulator_size(c)</computeroutput> returns the circulator size. It uses the <computeroutput>c.min_circulator()</computeroutput> function if <computeroutput>c</computeroutput> is a random access circulator.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaa7e7be37f74469fd362a65b9263f290f" kindref="member">circulator_distance</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gadaabb38d2411a4370d963a07c55ea3a8" kindref="member">iterator_distance</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="290" column="26" declfile="CGAL/circulator.h" declline="290" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_empty_range</definition>
        <argsstring>(const IC &amp;i, const IC &amp;j)</argsstring>
        <name>is_empty_range</name>
        <qualifiedname>CGAL::is_empty_range</qualifiedname>
        <param>
          <type>const IC &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const IC &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>is <computeroutput>true</computeroutput> if the range <computeroutput>[i, j)</computeroutput> is empty, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>In order to write algorithms that work with iterator ranges as well as with circulator ranges we have to consider the difference of representing an empty range. For iterators this is the range <computeroutput>[i,i)</computeroutput>, while for circulators it would be <computeroutput>c == nullptr</computeroutput>, the empty sequence test. The function <computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range()</ref></computeroutput> provides the necessary generic test which accepts an iterator range or a circulator range and says whether the range is empty or not.</para>
<para><simplesect kind="pre"><para><computeroutput>IC</computeroutput> is either a circulator or an iterator type. The range <computeroutput>[i, j)</computeroutput> is valid.</para>
</simplesect>
<bold>Example</bold><linebreak/>
</para>
<para>The following function <computeroutput>process_all()</computeroutput> accepts a range <computeroutput>[i, j)</computeroutput> of an iterator or circulator <computeroutput>IC</computeroutput> and processes each element in this range:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IC&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_all(<sp/>IC<sp/>i,<sp/>IC<sp/>j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">CGAL::is_empty_range</ref>(<sp/>i,<sp/>j))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>process(*i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++i<sp/>!=<sp/>j);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gadaabb38d2411a4370d963a07c55ea3a8" kindref="member">iterator_distance</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gae4f6b9dc3b933f01f2d0275a7bf8b308" kindref="member">CGAL_For_all</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">Circulator_traits</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga9bfcd5e48c98a1ccc7b74f8e8f302730" kindref="member">Assert_circulator_or_iterator</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="578" column="6" declfile="CGAL/circulator.h" declline="578" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1gadaabb38d2411a4370d963a07c55ea3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>iterator_traits&lt; IC &gt;::difference_type</type>
        <definition>iterator_traits&lt; IC &gt;::difference_type CGAL::iterator_distance</definition>
        <argsstring>(IC ic1, IC ic2)</argsstring>
        <name>iterator_distance</name>
        <qualifiedname>CGAL::iterator_distance</qualifiedname>
        <param>
          <type>IC</type>
          <declname>ic1</declname>
        </param>
        <param>
          <type>IC</type>
          <declname>ic2</declname>
        </param>
        <briefdescription>
<para>The following function returns the distance between either two iterators or two circulators. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1ga2d7bfa21e8eb046b8ae90104aa4fcce4" kindref="member">circulator_size</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaa7e7be37f74469fd362a65b9263f290f" kindref="member">circulator_distance</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gaf4e8c8285d91a1d8acd582191da0f255" kindref="member">is_empty_range</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga9bfcd5e48c98a1ccc7b74f8e8f302730" kindref="member">Assert_circulator_or_iterator</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsFunctions_1gae4f6b9dc3b933f01f2d0275a7bf8b308" kindref="member">CGAL_For_all</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="600" column="1" declfile="CGAL/circulator.h" declline="600" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1gaa16b4ad8f12d7ba8afdaae7da609c900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1Iterator__tag" kindref="compound">Iterator_tag</ref></type>
        <definition>Iterator_tag CGAL::query_circulator_or_iterator</definition>
        <argsstring>(const I &amp;i)</argsstring>
        <name>query_circulator_or_iterator</name>
        <qualifiedname>CGAL::query_circulator_or_iterator</qualifiedname>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>This function matches for type <computeroutput>I</computeroutput> if the iterator category of <computeroutput>I</computeroutput> belongs to an iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">Circulator_traits</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" kindref="member">Assert_circulator</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="617" column="14" declfile="CGAL/circulator.h" declline="617" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgHandlesAndCirculatorsFunctions_1ga09373fd234b3ca546f97a750e0304f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></type>
        <definition>Circulator_tag CGAL::query_circulator_or_iterator</definition>
        <argsstring>(const C &amp;c)</argsstring>
        <name>query_circulator_or_iterator</name>
        <qualifiedname>CGAL::query_circulator_or_iterator</qualifiedname>
        <param>
          <type>const C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>This function matches for type <computeroutput>C</computeroutput> if the iterator category of <computeroutput>C</computeroutput> belongs to a circulator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__tag" kindref="compound">Circulator_tag</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Circulator__traits" kindref="compound">Circulator_traits</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgHandlesAndCirculatorsAssert_1ga7cbd5c6db884f5a4aace399c337d31b9" kindref="member">Assert_circulator</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCirculator" kindref="compound">Circulator</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/circulator.h" line="631" column="16" declfile="CGAL/circulator.h" declline="631" declcolumn="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/circulator.h" line="1" column="1"/>
  </compounddef>
</doxygen>
