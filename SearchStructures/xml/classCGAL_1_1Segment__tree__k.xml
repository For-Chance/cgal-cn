<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Segment__tree__k" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Segment_tree_k</compoundname>
    <includes local="no">CGAL/Segment_tree_k.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" prot="public" static="no">
        <type>Traits::Key</type>
        <definition>typedef Traits::Key CGAL::Segment_tree_k&lt; Traits &gt;::Key</definition>
        <argsstring></argsstring>
        <name>Key</name>
        <qualifiedname>CGAL::Segment_tree_k::Key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_k.h" line="90" column="21" bodyfile="CGAL/Segment_tree_k.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" prot="public" static="no">
        <type>Traits::Interval</type>
        <definition>typedef Traits::Interval CGAL::Segment_tree_k&lt; Traits &gt;::Interval</definition>
        <argsstring></argsstring>
        <name>Interval</name>
        <qualifiedname>CGAL::Segment_tree_k::Interval</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_k.h" line="95" column="26" bodyfile="CGAL/Segment_tree_k.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__k_1a1249ef36cb734815360097ab4fea87e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Segment_tree_k&lt; Traits &gt;::Segment_tree_k</definition>
        <argsstring>()</argsstring>
        <name>Segment_tree_k</name>
        <qualifiedname>CGAL::Segment_tree_k::Segment_tree_k</qualifiedname>
        <briefdescription>
<para>Introduces an empty segment tree <computeroutput>S</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_k.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__k_1a1a9870dc25a9fbe168f39d5771aace39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Segment_tree_k&lt; Traits &gt;::Segment_tree_k</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>Segment_tree_k</name>
        <qualifiedname>CGAL::Segment_tree_k::Segment_tree_k</qualifiedname>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Introduces a segment tree <computeroutput>S</computeroutput> and initializes it with the data in the range <computeroutput>[first, last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>value_type(first) == Traits::Interval</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_k.h" line="113" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__k_1ac5432fe3fecd6385c68da5d1155e6aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Segment_tree_k&lt; Traits &gt;::make_tree</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>make_tree</name>
        <qualifiedname>CGAL::Segment_tree_k::make_tree</qualifiedname>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Introduces a segment tree <computeroutput>S</computeroutput> and initializes it with the data in the range <computeroutput>[first, last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can only be applied once on an empty segment tree. <simplesect kind="pre"><para><computeroutput>value_type(first) == Traits::Interval</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_k.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__k_1aa45d9610a3e0841dc00338eedc3aa612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Segment_tree_k&lt; Traits &gt;::window_query</definition>
        <argsstring>(Interval window, OutputIterator out)</argsstring>
        <name>window_query</name>
        <qualifiedname>CGAL::Segment_tree_k::window_query</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" kindref="member">Interval</ref></type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>writes all intervals that have non empty intersection with interval <computeroutput>window</computeroutput> to the container where <computeroutput>out</computeroutput> points to, and returns an output iterator that points to the last location the function wrote to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>value_type(out) == Traits::Interval</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_k.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__tree__k_1a505ea9726e1e6fcbdb4e234a711b4d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Segment_tree_k&lt; Traits &gt;::enclosing_query</definition>
        <argsstring>(Interval window, OutputIterator out)</argsstring>
        <name>enclosing_query</name>
        <qualifiedname>CGAL::Segment_tree_k::enclosing_query</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" kindref="member">Interval</ref></type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>writes all intervals that enclose in the interval <computeroutput>window</computeroutput> to the container where <computeroutput>out</computeroutput> points to, and returns an output iterator that points to the last location the function wrote to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>value_type(out) == Traits::Interval</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_tree_k.h" line="151" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1Segment__tree__k" kindref="compound">Segment_tree_k</ref></computeroutput> is a <formula id="3">$ k$</formula>-dimensional segment tree that can store k-dimensional intervals of type <computeroutput>Interval</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para>The class allows to perform window queries, enclosing queries, and inverse range queries on the keys. The class <computeroutput><ref refid="classCGAL_1_1Segment__tree__k" kindref="compound">Segment_tree_k</ref></computeroutput> is parameterized with a segment tree traits class <computeroutput>Traits</computeroutput> that defines, among other things, the type of the <computeroutput>Interval</computeroutput>. In order to perform an inverse range query, a range query of <formula id="9">$ \epsilon$</formula> width has to be performed. We preferred not to offer an extra function for this sort of query, since the inverse range query is a special case of the range query. Furthermore, offering an inverse range query in the segment tree class implies offering this function also in the range tree class and having an extra item in the traits class that accesses the inverse range query point.</para>
<para>CGAL provides traits class implementations that allow to use the segment tree with point classes from the CGAL kernel as keys. These classes are <computeroutput>CGAL::Range_segment_tree_traits_set_2&lt;R&gt;</computeroutput>, <computeroutput>CGAL::Range_segment_tree_traits_set_3&lt;R&gt;</computeroutput>, <computeroutput>CGAL::Segment_tree_traits_map_2&lt;R&gt;</computeroutput> and <computeroutput>CGAL::Segment_tree_traits_map_3&lt;R&gt;</computeroutput>. The concept RangeSegmentTreeTraits_d defines the requirements that segment tree traits classes must fulfill. This allows the advanced user to develop further segment tree traits classes.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>This example illustrates the use of the predefined segment tree on 3-dimensional interval data (with no value associated). After the definition of the traits type and tree type, some intervals are constructed and the tree is build according to the intervals. Then, a window query is performed and the query elements are given out.</para>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Segment_tree_k.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Range_segment_tree_traits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Cartesian&lt;int&gt;</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Range__segment__tree__set__traits__3" kindref="compound">CGAL::Range_segment_tree_set_traits_3&lt;K&gt;</ref><sp/>Traits;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Segment_tree_3&lt;Traits&gt;<sp/>Segment_tree_3_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Traits::Interval<sp/><ref refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" kindref="member">Interval</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Traits::Key<sp/><ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Interval&gt;<sp/>InputList,<sp/>OutputList;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InputList.push_back(<ref refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" kindref="member">Interval</ref>(<ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(1,5,7),<sp/><ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(2,7,9)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InputList.push_back(<ref refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" kindref="member">Interval</ref>(<ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(2,7,6),<sp/><ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(3,8,9)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InputList.push_back(<ref refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" kindref="member">Interval</ref>(<ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(6,9,5),<sp/><ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(9,13,8)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InputList.push_back(<ref refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" kindref="member">Interval</ref>(<ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(1,3,4),<sp/><ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(3,9,8)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_tree_3_type<sp/>Segment_tree_3(InputList.begin(),InputList.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" kindref="member">Interval</ref><sp/>a(<ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(3,6,5),<sp/><ref refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" kindref="member">Key</ref>(7,12,8));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Segment_tree_3.window_query(a,std::back_inserter(OutputList));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Interval&gt;::iterator<sp/>j<sp/>=<sp/>OutputList1.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>window_query<sp/>(3,6,5),(7,12,8)<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(j!=OutputList.end()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*j).first.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*j).first.y()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*j).first.z()<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*j).second.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*j).second.y()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*j).second.z()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="CGAL/Segment_tree_k.h" line="76" column="1" bodyfile="CGAL/Segment_tree_k.h" bodystart="76" bodyend="156"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Segment__tree__k_1a505ea9726e1e6fcbdb4e234a711b4d2f" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_k</scope><name>enclosing_query</name></member>
      <member refid="classCGAL_1_1Segment__tree__k_1aa8d4d1a1d12cd9b71403ffd107c0f804" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_k</scope><name>Interval</name></member>
      <member refid="classCGAL_1_1Segment__tree__k_1afc7a83f496cca8393c8d69d34bb0f6b5" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_k</scope><name>Key</name></member>
      <member refid="classCGAL_1_1Segment__tree__k_1ac5432fe3fecd6385c68da5d1155e6aa2" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_k</scope><name>make_tree</name></member>
      <member refid="classCGAL_1_1Segment__tree__k_1a1249ef36cb734815360097ab4fea87e9" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_k</scope><name>Segment_tree_k</name></member>
      <member refid="classCGAL_1_1Segment__tree__k_1a1a9870dc25a9fbe168f39d5771aace39" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_k</scope><name>Segment_tree_k</name></member>
      <member refid="classCGAL_1_1Segment__tree__k_1aa45d9610a3e0841dc00338eedc3aa612" prot="public" virt="non-virtual"><scope>CGAL::Segment_tree_k</scope><name>window_query</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
