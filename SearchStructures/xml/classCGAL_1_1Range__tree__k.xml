<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Range__tree__k" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Range_tree_k</compoundname>
    <includes local="no">CGAL/Range_tree_k.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Range__tree__k_1a8bf1f59fdd013eaaea91693c0e10db0c" prot="public" static="no">
        <type>Traits::Key</type>
        <definition>typedef Traits::Key CGAL::Range_tree_k&lt; Traits &gt;::Key</definition>
        <argsstring></argsstring>
        <name>Key</name>
        <qualifiedname>CGAL::Range_tree_k::Key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_k.h" line="84" column="21" bodyfile="CGAL/Range_tree_k.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Range__tree__k_1a4ca1a48f5f3693ce1fe00c07cf2826da" prot="public" static="no">
        <type>Traits::Interval</type>
        <definition>typedef Traits::Interval CGAL::Range_tree_k&lt; Traits &gt;::Interval</definition>
        <argsstring></argsstring>
        <name>Interval</name>
        <qualifiedname>CGAL::Range_tree_k::Interval</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_k.h" line="89" column="26" bodyfile="CGAL/Range_tree_k.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__k_1ab3ae74180802e463a74bcb6f05523843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Range_tree_k&lt; Traits &gt;::Range_tree_k</definition>
        <argsstring>()</argsstring>
        <name>Range_tree_k</name>
        <qualifiedname>CGAL::Range_tree_k::Range_tree_k</qualifiedname>
        <briefdescription>
<para>Introduces an empty range tree <computeroutput>R</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_k.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__k_1aac0cf1ed23e94a5bb3e4055f19ca7b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Range_tree_k&lt; Traits &gt;::Range_tree_k</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>Range_tree_k</name>
        <qualifiedname>CGAL::Range_tree_k::Range_tree_k</qualifiedname>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Introduces a range tree <computeroutput>R</computeroutput> and initializes it with the data in the range <computeroutput>[first, last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>value_type(first) == Traits::Key</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_k.h" line="107" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__k_1abd9516228d6d578b34b3b76db442dbd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Range_tree_k&lt; Traits &gt;::make_tree</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last)</argsstring>
        <name>make_tree</name>
        <qualifiedname>CGAL::Range_tree_k::make_tree</qualifiedname>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Introduces a range tree <computeroutput>R</computeroutput> and initializes it with the data in the range <computeroutput>[first, last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can only be applied once on an empty range tree. <simplesect kind="pre"><para><computeroutput>value_type(first) == Traits::Key</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_k.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Range__tree__k_1a5e29ef50d66ce3e08c544eb0009abffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Range_tree_k&lt; Traits &gt;::window_query</definition>
        <argsstring>(Interval window, OutputIterator out)</argsstring>
        <name>window_query</name>
        <qualifiedname>CGAL::Range_tree_k::window_query</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Range__tree__k_1a4ca1a48f5f3693ce1fe00c07cf2826da" kindref="member">Interval</ref></type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>writes all data that are in the interval <computeroutput>window</computeroutput> to the container where <computeroutput>out</computeroutput> points to, and returns an output iterator that points to the last location the function wrote to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>value_type(out) == Traits::Key</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Range_tree_k.h" line="134" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object of the class <computeroutput><ref refid="classCGAL_1_1Range__tree__k" kindref="compound">Range_tree_k</ref></computeroutput> is a <formula id="3">$ k$</formula>-dimensional range tree that can store k-dimensional keys of type <computeroutput>Key</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para>The class allows to perform window queries on the keys. The class <computeroutput><ref refid="classCGAL_1_1Range__tree__k" kindref="compound">Range_tree_k</ref></computeroutput> is parameterized with a range tree traits class <computeroutput>Traits</computeroutput> that defines, among other things, the type of the <computeroutput>Key</computeroutput>.</para>
<para>CGAL provides traits class implementations that allow to use the range tree with point classes from the CGAL kernel as keys. These classes are <computeroutput>CGAL::Range_segment_tree_traits_set_2&lt;R&gt;</computeroutput>, <computeroutput>CGAL::Range_segment_tree_traits_set_3&lt;R&gt;</computeroutput>, <computeroutput>CGAL::Range_tree_traits_map_2&lt;R&gt;</computeroutput> and <computeroutput>CGAL::Range_tree_traits_map_3&lt;R&gt;</computeroutput>. The concept RangeSegmentTreeTraits_d defines the requirements that range tree traits classes must fulfill. This allows the advanced user to develop further range tree traits classes.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>The following example program uses the predefined <computeroutput>Range_tree_2</computeroutput> data structure together with the predefined traits class <computeroutput><ref refid="classCGAL_1_1Range__tree__map__traits__2" kindref="compound">Range_tree_map_traits_2</ref></computeroutput> which has two template arguments specifying the type of the point data in each dimension (<computeroutput><ref refid="structCGAL_1_1Cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Cartesian</ref>&lt;double&gt;</computeroutput>) and the value type of the 2-dimensional point data (<computeroutput>char</computeroutput>). Therefore the <computeroutput>Range_tree_2</computeroutput> is defined on 2-dimensional point data (<computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_2</ref>&lt;<ref refid="structCGAL_1_1Cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Cartesian</ref>&lt;double&gt; &gt;</computeroutput>) each of which is associated with a character. Then, a few data items are created and put into a list. After that the tree is constructed according to that list, a window query is performed, and the query elements are given out.</para>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Range_segment_tree_traits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Range_tree_k.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Cartesian&lt;double&gt;</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Range__tree__map__traits__2" kindref="compound">CGAL::Range_tree_map_traits_2&lt;K, char&gt;</ref><sp/>Traits;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Range_tree_2&lt;Traits&gt;<sp/>Range_tree_2_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Traits::Key<sp/><ref refid="classCGAL_1_1Range__tree__k_1a8bf1f59fdd013eaaea91693c0e10db0c" kindref="member">Key</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Traits::Interval<sp/><ref refid="classCGAL_1_1Range__tree__k_1a4ca1a48f5f3693ce1fe00c07cf2826da" kindref="member">Interval</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Key&gt;<sp/>InputList,<sp/>OutputList;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InputList.push_back(<ref refid="classCGAL_1_1Range__tree__k_1a8bf1f59fdd013eaaea91693c0e10db0c" kindref="member">Key</ref>(K::Point_2(8,5.1),<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InputList.push_back(<ref refid="classCGAL_1_1Range__tree__k_1a8bf1f59fdd013eaaea91693c0e10db0c" kindref="member">Key</ref>(K::Point_2(1,1.1),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InputList.push_back(<ref refid="classCGAL_1_1Range__tree__k_1a8bf1f59fdd013eaaea91693c0e10db0c" kindref="member">Key</ref>(K::Point_2(3,2.1),<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Range_tree_2_type<sp/>Range_tree_2(InputList.begin(),InputList.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Range__tree__k_1a4ca1a48f5f3693ce1fe00c07cf2826da" kindref="member">Interval</ref><sp/>win(<ref refid="classCGAL_1_1Range__tree__k_1a4ca1a48f5f3693ce1fe00c07cf2826da" kindref="member">Interval</ref>(K::Point_2(4,8.1),<sp/>K::Point_2(5,8.2)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>Window<sp/>Query:\n<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Range_tree_2.window_query(win,<sp/>std::back_inserter(OutputList));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Key&gt;::iterator<sp/>current=OutputList.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(current!=OutputList.end()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*current).first.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*current).first.y()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*current++).second<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="CGAL/Range_tree_k.h" line="70" column="1" bodyfile="CGAL/Range_tree_k.h" bodystart="70" bodyend="139"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Range__tree__k_1a4ca1a48f5f3693ce1fe00c07cf2826da" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_k</scope><name>Interval</name></member>
      <member refid="classCGAL_1_1Range__tree__k_1a8bf1f59fdd013eaaea91693c0e10db0c" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_k</scope><name>Key</name></member>
      <member refid="classCGAL_1_1Range__tree__k_1abd9516228d6d578b34b3b76db442dbd9" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_k</scope><name>make_tree</name></member>
      <member refid="classCGAL_1_1Range__tree__k_1ab3ae74180802e463a74bcb6f05523843" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_k</scope><name>Range_tree_k</name></member>
      <member refid="classCGAL_1_1Range__tree__k_1aac0cf1ed23e94a5bb3e4055f19ca7b4a" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_k</scope><name>Range_tree_k</name></member>
      <member refid="classCGAL_1_1Range__tree__k_1a5e29ef50d66ce3e08c544eb0009abffa" prot="public" virt="non-virtual"><scope>CGAL::Range_tree_k</scope><name>window_query</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
