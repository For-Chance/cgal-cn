<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classMixedIntegerProgramTraits" kind="class" language="C++" prot="public">
    <compoundname>MixedIntegerProgramTraits</compoundname>
    <includes local="no">Concepts/MixedIntegerProgramTraits.h</includes>
    <templateparamlist>
      <param>
        <type>typename FT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a3ce40cdfc7ea5e46e227564772381a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MixedIntegerProgramTraits&lt; FT &gt;::MixedIntegerProgramTraits</definition>
        <argsstring>()</argsstring>
        <name>MixedIntegerProgramTraits</name>
        <qualifiedname>MixedIntegerProgramTraits::MixedIntegerProgramTraits</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="302" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a7741913adfe51b307b46d99a2c98a6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMixedIntegerProgramVariable" kindref="compound">MixedIntegerProgramVariable</ref> *</type>
        <definition>MixedIntegerProgramVariable * MixedIntegerProgramTraits&lt; FT &gt;::create_variable</definition>
        <argsstring>(Variable_type type, FT lb, FT ub, const std::string &amp;name)</argsstring>
        <name>create_variable</name>
        <qualifiedname>MixedIntegerProgramTraits::create_variable</qualifiedname>
        <param>
          <type>Variable_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>ub</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a single variable, adds it to the solver, and returns its pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Memory is managed by the solver and will be automatically released. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="311" column="37"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a1f9c92aa812b76a2875d5660448b9f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classMixedIntegerProgramVariable" kindref="compound">MixedIntegerProgramVariable</ref> * &gt;</type>
        <definition>std::vector&lt; MixedIntegerProgramVariable * &gt; MixedIntegerProgramTraits&lt; FT &gt;::create_variables</definition>
        <argsstring>(std::size_t n)</argsstring>
        <name>create_variables</name>
        <qualifiedname>MixedIntegerProgramTraits::create_variables</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Creates a set of variables, adds them to the solver, and returns their pointers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>(1) Variables will be given default names, e.g., x0, x1...; (2) Memory is managed by the solver and will be automatically released when the solver is destroyed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="317" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1ae58e027fcd7f5a780b699bf457724495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMixedIntegerProgramLinearConstraint" kindref="compound">MixedIntegerProgramLinearConstraint</ref> *</type>
        <definition>MixedIntegerProgramLinearConstraint * MixedIntegerProgramTraits&lt; FT &gt;::create_constraint</definition>
        <argsstring>(FT lb, FT ub, const std::string &amp;name)</argsstring>
        <name>create_constraint</name>
        <qualifiedname>MixedIntegerProgramTraits::create_constraint</qualifiedname>
        <param>
          <type>FT</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>ub</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a single linear constraint, adds it to the solver, and returns the pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Memory is managed by the solver and will be automatically released when the solver is destroyed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="322" column="45"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a2913ba4c0910b7120528ab67e988933a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classMixedIntegerProgramLinearConstraint" kindref="compound">MixedIntegerProgramLinearConstraint</ref> * &gt;</type>
        <definition>std::vector&lt; MixedIntegerProgramLinearConstraint * &gt; MixedIntegerProgramTraits&lt; FT &gt;::create_constraints</definition>
        <argsstring>(std::size_t n)</argsstring>
        <name>create_constraints</name>
        <qualifiedname>MixedIntegerProgramTraits::create_constraints</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Creates a set of linear constraints, adds them to the solver, and returns their pointers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>(1) Constraints will be given default names, e.g., c0, c1... (2) Memory is managed by the solver and will be automatically released when the solver is destroyed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="328" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a06790e28f97c4f8ee99a0346925481e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMixedIntegerProgramLinearObjective" kindref="compound">MixedIntegerProgramLinearObjective</ref> *</type>
        <definition>MixedIntegerProgramLinearObjective * MixedIntegerProgramTraits&lt; FT &gt;::create_objective</definition>
        <argsstring>(Sense sense)</argsstring>
        <name>create_objective</name>
        <qualifiedname>MixedIntegerProgramTraits::create_objective</qualifiedname>
        <param>
          <type>Sense</type>
          <declname>sense</declname>
        </param>
        <briefdescription>
<para>Creates the objective function and returns the pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Memory is managed by the solver and will be automatically released when the solver is destroyed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="333" column="44"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a84d6a8b45e37e0b1f60392abafa9cb2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t MixedIntegerProgramTraits&lt; FT &gt;::number_of_variables</definition>
        <argsstring>() const</argsstring>
        <name>number_of_variables</name>
        <qualifiedname>MixedIntegerProgramTraits::number_of_variables</qualifiedname>
        <briefdescription>
<para>Returns the number of variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="336" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a9a4ece1b8b00b8dcfe4265f1b0973575" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classMixedIntegerProgramVariable" kindref="compound">MixedIntegerProgramVariable</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; MixedIntegerProgramVariable * &gt; &amp; MixedIntegerProgramTraits&lt; FT &gt;::variables</definition>
        <argsstring>() const</argsstring>
        <name>variables</name>
        <qualifiedname>MixedIntegerProgramTraits::variables</qualifiedname>
        <briefdescription>
<para>Returns the variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="339" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a52c49dda88e692e44abacb0f89cf63e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classMixedIntegerProgramVariable" kindref="compound">MixedIntegerProgramVariable</ref> * &gt; &amp;</type>
        <definition>std::vector&lt; MixedIntegerProgramVariable * &gt; &amp; MixedIntegerProgramTraits&lt; FT &gt;::variables</definition>
        <argsstring>()</argsstring>
        <name>variables</name>
        <qualifiedname>MixedIntegerProgramTraits::variables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="340" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a532048692f36ea669cf242371418163f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t MixedIntegerProgramTraits&lt; FT &gt;::number_of_constraints</definition>
        <argsstring>() const</argsstring>
        <name>number_of_constraints</name>
        <qualifiedname>MixedIntegerProgramTraits::number_of_constraints</qualifiedname>
        <briefdescription>
<para>Returns the number of constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="343" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a736226e0a0eda63efeedd27e461c91f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classMixedIntegerProgramLinearConstraint" kindref="compound">MixedIntegerProgramLinearConstraint</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; MixedIntegerProgramLinearConstraint * &gt; &amp; MixedIntegerProgramTraits&lt; FT &gt;::constraints</definition>
        <argsstring>() const</argsstring>
        <name>constraints</name>
        <qualifiedname>MixedIntegerProgramTraits::constraints</qualifiedname>
        <briefdescription>
<para>Returns the constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="346" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a10b2326830c1c458b4c8435c2c818804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classMixedIntegerProgramLinearConstraint" kindref="compound">MixedIntegerProgramLinearConstraint</ref> * &gt; &amp;</type>
        <definition>std::vector&lt; MixedIntegerProgramLinearConstraint * &gt; &amp; MixedIntegerProgramTraits&lt; FT &gt;::constraints</definition>
        <argsstring>()</argsstring>
        <name>constraints</name>
        <qualifiedname>MixedIntegerProgramTraits::constraints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="347" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1aa72380734d3047217ab1d365ca96bbec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t MixedIntegerProgramTraits&lt; FT &gt;::number_of_continuous_variables</definition>
        <argsstring>() const</argsstring>
        <name>number_of_continuous_variables</name>
        <qualifiedname>MixedIntegerProgramTraits::number_of_continuous_variables</qualifiedname>
        <briefdescription>
<para>Returns the number of continuous variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="350" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a31f3fae82ba05b14425f58af6da198dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t MixedIntegerProgramTraits&lt; FT &gt;::number_of_integer_variables</definition>
        <argsstring>() const</argsstring>
        <name>number_of_integer_variables</name>
        <qualifiedname>MixedIntegerProgramTraits::number_of_integer_variables</qualifiedname>
        <briefdescription>
<para>Returns the number of integer variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="353" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a1237c653a8bd6bc7025f781a4c7eb7c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t MixedIntegerProgramTraits&lt; FT &gt;::number_of_binary_variables</definition>
        <argsstring>() const</argsstring>
        <name>number_of_binary_variables</name>
        <qualifiedname>MixedIntegerProgramTraits::number_of_binary_variables</qualifiedname>
        <briefdescription>
<para>Returns the number of binary variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="356" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a528f7485c990d8fc47b26b1d84c5d668" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MixedIntegerProgramTraits&lt; FT &gt;::is_continuous</definition>
        <argsstring>() const</argsstring>
        <name>is_continuous</name>
        <qualifiedname>MixedIntegerProgramTraits::is_continuous</qualifiedname>
        <briefdescription>
<para>Returns true if all variables are continuous. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="359" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a51cf39e449d834cd3b55583825df05d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MixedIntegerProgramTraits&lt; FT &gt;::is_mixed_integer_program</definition>
        <argsstring>() const</argsstring>
        <name>is_mixed_integer_program</name>
        <qualifiedname>MixedIntegerProgramTraits::is_mixed_integer_program</qualifiedname>
        <briefdescription>
<para>Returns true if this is a mixed integer program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="362" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1ac7903f711a9c9027e7de03daa0e43609" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MixedIntegerProgramTraits&lt; FT &gt;::is_integer_program</definition>
        <argsstring>() const</argsstring>
        <name>is_integer_program</name>
        <qualifiedname>MixedIntegerProgramTraits::is_integer_program</qualifiedname>
        <briefdescription>
<para>Returns true if this is an integer program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="365" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a85e7aab2d26e9c89e8f3574751e18b79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MixedIntegerProgramTraits&lt; FT &gt;::is_binary_program</definition>
        <argsstring>() const</argsstring>
        <name>is_binary_program</name>
        <qualifiedname>MixedIntegerProgramTraits::is_binary_program</qualifiedname>
        <briefdescription>
<para>Returns true if binary program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="368" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a04778b209c69202a57704f53752873de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classMixedIntegerProgramLinearObjective" kindref="compound">MixedIntegerProgramLinearObjective</ref> *</type>
        <definition>const MixedIntegerProgramLinearObjective * MixedIntegerProgramTraits&lt; FT &gt;::objective</definition>
        <argsstring>() const</argsstring>
        <name>objective</name>
        <qualifiedname>MixedIntegerProgramTraits::objective</qualifiedname>
        <briefdescription>
<para>Returns the objective. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="371" column="51"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a3eb051cae6fb23899904af2141b5327f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMixedIntegerProgramLinearObjective" kindref="compound">MixedIntegerProgramLinearObjective</ref> *</type>
        <definition>MixedIntegerProgramLinearObjective * MixedIntegerProgramTraits&lt; FT &gt;::objective</definition>
        <argsstring>()</argsstring>
        <name>objective</name>
        <qualifiedname>MixedIntegerProgramTraits::objective</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="372" column="45"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a887dcd6a28c97dd1e6bed9a73e5eb7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MixedIntegerProgramTraits&lt; FT &gt;::solve</definition>
        <argsstring>()</argsstring>
        <name>solve</name>
        <qualifiedname>MixedIntegerProgramTraits::solve</qualifiedname>
        <briefdescription>
<para>Solves the program. Returns false if failed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="375" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a3841a3a4cc05a09f5afa74fd8851ce50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; FT &gt; &amp;</type>
        <definition>const std::vector&lt; FT &gt; &amp; MixedIntegerProgramTraits&lt; FT &gt;::solution</definition>
        <argsstring>() const</argsstring>
        <name>solution</name>
        <qualifiedname>MixedIntegerProgramTraits::solution</qualifiedname>
        <briefdescription>
<para>Returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>(1) Result is valid only if the solver succeeded. (2) Each entry in the result corresponds to the variable with the same index in the program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="381" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1a06c60d72a0b4e0eb749831860c1df672" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; MixedIntegerProgramTraits&lt; FT &gt;::error_message</definition>
        <argsstring>() const</argsstring>
        <name>error_message</name>
        <qualifiedname>MixedIntegerProgramTraits::error_message</qualifiedname>
        <briefdescription>
<para>Returns the error message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function should be called after call to <ref refid="classMixedIntegerProgramTraits_1a887dcd6a28c97dd1e6bed9a73e5eb7a1" kindref="member">solve()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="385" column="27" bodyfile="Concepts/MixedIntegerProgramTraits.h" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramTraits_1acf2d5eff4fcba4347ba5302ffd5ddfd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramTraits&lt; FT &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>MixedIntegerProgramTraits::clear</qualifiedname>
        <briefdescription>
<para>Clears all variables, constraints, and the objective. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="388" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concept describing the set of requirements for (constrained or unconstrained) Mixed Integer Programming (MIP) problems. A model of this concept stores the integer variables, linear objective, and linear constraints (if any) and provides a method to solve the problem. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Mixed__integer__program__traits" kindref="compound">CGAL::Mixed_integer_program_traits</ref>&lt;T&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1GLPK__mixed__integer__program__traits" kindref="compound">CGAL::GLPK_mixed_integer_program_traits</ref>&lt;T&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1SCIP__mixed__integer__program__traits" kindref="compound">CGAL::SCIP_mixed_integer_program_traits</ref>&lt;T&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/MixedIntegerProgramTraits.h" line="293" column="1" bodyfile="Concepts/MixedIntegerProgramTraits.h" bodystart="294" bodyend="392"/>
    <listofallmembers>
      <member refid="classMixedIntegerProgramTraits_1acf2d5eff4fcba4347ba5302ffd5ddfd9" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>clear</name></member>
      <member refid="classMixedIntegerProgramTraits_1a736226e0a0eda63efeedd27e461c91f8" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>constraints</name></member>
      <member refid="classMixedIntegerProgramTraits_1a10b2326830c1c458b4c8435c2c818804" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>constraints</name></member>
      <member refid="classMixedIntegerProgramTraits_1ae58e027fcd7f5a780b699bf457724495" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>create_constraint</name></member>
      <member refid="classMixedIntegerProgramTraits_1a2913ba4c0910b7120528ab67e988933a" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>create_constraints</name></member>
      <member refid="classMixedIntegerProgramTraits_1a06790e28f97c4f8ee99a0346925481e9" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>create_objective</name></member>
      <member refid="classMixedIntegerProgramTraits_1a7741913adfe51b307b46d99a2c98a6eb" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>create_variable</name></member>
      <member refid="classMixedIntegerProgramTraits_1a1f9c92aa812b76a2875d5660448b9f92" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>create_variables</name></member>
      <member refid="classMixedIntegerProgramTraits_1a06c60d72a0b4e0eb749831860c1df672" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>error_message</name></member>
      <member refid="classMixedIntegerProgramTraits_1a85e7aab2d26e9c89e8f3574751e18b79" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>is_binary_program</name></member>
      <member refid="classMixedIntegerProgramTraits_1a528f7485c990d8fc47b26b1d84c5d668" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>is_continuous</name></member>
      <member refid="classMixedIntegerProgramTraits_1ac7903f711a9c9027e7de03daa0e43609" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>is_integer_program</name></member>
      <member refid="classMixedIntegerProgramTraits_1a51cf39e449d834cd3b55583825df05d9" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>is_mixed_integer_program</name></member>
      <member refid="classMixedIntegerProgramTraits_1a3ce40cdfc7ea5e46e227564772381a91" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>MixedIntegerProgramTraits</name></member>
      <member refid="classMixedIntegerProgramTraits_1a1237c653a8bd6bc7025f781a4c7eb7c0" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>number_of_binary_variables</name></member>
      <member refid="classMixedIntegerProgramTraits_1a532048692f36ea669cf242371418163f" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>number_of_constraints</name></member>
      <member refid="classMixedIntegerProgramTraits_1aa72380734d3047217ab1d365ca96bbec" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>number_of_continuous_variables</name></member>
      <member refid="classMixedIntegerProgramTraits_1a31f3fae82ba05b14425f58af6da198dd" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>number_of_integer_variables</name></member>
      <member refid="classMixedIntegerProgramTraits_1a84d6a8b45e37e0b1f60392abafa9cb2b" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>number_of_variables</name></member>
      <member refid="classMixedIntegerProgramTraits_1a04778b209c69202a57704f53752873de" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>objective</name></member>
      <member refid="classMixedIntegerProgramTraits_1a3eb051cae6fb23899904af2141b5327f" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>objective</name></member>
      <member refid="classMixedIntegerProgramTraits_1a3841a3a4cc05a09f5afa74fd8851ce50" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>solution</name></member>
      <member refid="classMixedIntegerProgramTraits_1a887dcd6a28c97dd1e6bed9a73e5eb7a1" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>solve</name></member>
      <member refid="classMixedIntegerProgramTraits_1a9a4ece1b8b00b8dcfe4265f1b0973575" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>variables</name></member>
      <member refid="classMixedIntegerProgramTraits_1a52c49dda88e692e44abacb0f89cf63e9" prot="public" virt="non-virtual"><scope>MixedIntegerProgramTraits</scope><name>variables</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
