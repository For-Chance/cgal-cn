<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classMixedIntegerProgramLinearConstraint" kind="class" language="C++" prot="public">
    <compoundname>MixedIntegerProgramLinearConstraint</compoundname>
    <includes local="no">Concepts/MixedIntegerProgramTraits.h</includes>
    <templateparamlist>
      <param>
        <type>typename FT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1aa9699d0c12e541bd6cd8dc9a502446c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MixedIntegerProgramLinearConstraint&lt; FT &gt;::MixedIntegerProgramLinearConstraint</definition>
        <argsstring>(MixedIntegerProgramTraits *solver, FT lb, FT ub, const std::string &amp;name, int idx)</argsstring>
        <name>MixedIntegerProgramLinearConstraint</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::MixedIntegerProgramLinearConstraint</qualifiedname>
        <param>
          <type><ref refid="classMixedIntegerProgramTraits" kindref="compound">MixedIntegerProgramTraits</ref> *</type>
          <declname>solver</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>ub</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Constructs a linear constraint, initialized with the solver it belongs to, the lower bound, upper bound, name, and index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="132" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a05bfbb2c3fcbefb2502e43bb4ccbef14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; MixedIntegerProgramLinearConstraint&lt; FT &gt;::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::name</qualifiedname>
        <briefdescription>
<para>Returns the name of the constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="140" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a7a0a9c32f8f5665337d913a111407bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::set_name</definition>
        <argsstring>(const std::string &amp;n)</argsstring>
        <name>set_name</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::set_name</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Sets the name of the constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="145" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a020bcf997640d16d8ec9cf94f42edbe4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MixedIntegerProgramLinearConstraint&lt; FT &gt;::index</definition>
        <argsstring>() const</argsstring>
        <name>index</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::index</qualifiedname>
        <briefdescription>
<para>Returns the index of the constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="150" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a123abdc183eb84d7aa8f22cc97c1a477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::set_index</definition>
        <argsstring>(int idx)</argsstring>
        <name>set_index</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::set_index</qualifiedname>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Sets the index of the constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="155" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a477313dfd6cb09f005bdcfd72b1aff9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classMixedIntegerProgramTraits" kindref="compound">MixedIntegerProgramTraits</ref> *</type>
        <definition>const MixedIntegerProgramTraits * MixedIntegerProgramLinearConstraint&lt; FT &gt;::solver</definition>
        <argsstring>() const</argsstring>
        <name>solver</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::solver</qualifiedname>
        <briefdescription>
<para>Returns the solver that owns this constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="158" column="41"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1ae1a427cecb83f1ee6f37b8b74712db36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMixedIntegerProgramTraits" kindref="compound">MixedIntegerProgramTraits</ref> *</type>
        <definition>MixedIntegerProgramTraits * MixedIntegerProgramLinearConstraint&lt; FT &gt;::solver</definition>
        <argsstring>()</argsstring>
        <name>solver</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::solver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="159" column="35"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1ad8b81b5a13b259fcea56f01687277f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::set_lower_bound</definition>
        <argsstring>(FT lb)</argsstring>
        <name>set_lower_bound</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::set_lower_bound</qualifiedname>
        <param>
          <type>FT</type>
          <declname>lb</declname>
        </param>
        <briefdescription>
<para>Sets the lower bound. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="162" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1aaecaec1d9bde664eaf147776f06e6d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::set_upper_bound</definition>
        <argsstring>(FT ub)</argsstring>
        <name>set_upper_bound</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::set_upper_bound</qualifiedname>
        <param>
          <type>FT</type>
          <declname>ub</declname>
        </param>
        <briefdescription>
<para>Sets the upper bound. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="165" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a7665ca58405f889d3d3b40ccb90fef7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::set_bounds</definition>
        <argsstring>(FT lb, FT ub)</argsstring>
        <name>set_bounds</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::set_bounds</qualifiedname>
        <param>
          <type>FT</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>ub</declname>
        </param>
        <briefdescription>
<para>Sets both lower and upper bounds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="168" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a2f2c14ba4700d44dd33542ea9b393dcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FT</type>
        <definition>FT MixedIntegerProgramLinearConstraint&lt; FT &gt;::lower_bound</definition>
        <argsstring>() const</argsstring>
        <name>lower_bound</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::lower_bound</qualifiedname>
        <briefdescription>
<para>Gets the lower bound. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="171" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a12dbdfca24e391fe02ae652ff9eb7dea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FT</type>
        <definition>FT MixedIntegerProgramLinearConstraint&lt; FT &gt;::upper_bound</definition>
        <argsstring>() const</argsstring>
        <name>upper_bound</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::upper_bound</qualifiedname>
        <briefdescription>
<para>Gets the upper bound. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="174" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a1a219b52a4847d0cc0ce810b52f6e06a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::get_bounds</definition>
        <argsstring>(FT &amp;lb, FT &amp;ub) const</argsstring>
        <name>get_bounds</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::get_bounds</qualifiedname>
        <param>
          <type>FT &amp;</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>FT &amp;</type>
          <declname>ub</declname>
        </param>
        <briefdescription>
<para>Gets both lower and upper bounds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="177" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1ae458f000cafd86a14d8ff9507d4a49d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::set_coefficients</definition>
        <argsstring>(const std::unordered_map&lt; const MixedIntegerProgramVariable *, FT &gt; &amp;coeffs)</argsstring>
        <name>set_coefficients</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::set_coefficients</qualifiedname>
        <param>
          <type>const std::unordered_map&lt; const <ref refid="classMixedIntegerProgramVariable" kindref="compound">MixedIntegerProgramVariable</ref> *, FT &gt; &amp;</type>
          <declname>coeffs</declname>
        </param>
        <briefdescription>
<para>Sets the coefficients of the constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="184" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1aec6ff28e1d19ccee99a37a4cea20bac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::add_coefficient</definition>
        <argsstring>(const MixedIntegerProgramVariable *var, FT coeff)</argsstring>
        <name>add_coefficient</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::add_coefficient</qualifiedname>
        <param>
          <type>const <ref refid="classMixedIntegerProgramVariable" kindref="compound">MixedIntegerProgramVariable</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>coeff</declname>
        </param>
        <briefdescription>
<para>Adds a coefficient to a variable of the constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="187" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a2b90e546eeb77ffa19e875118589da10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::unordered_map&lt; const <ref refid="classMixedIntegerProgramVariable" kindref="compound">MixedIntegerProgramVariable</ref> *, FT &gt; &amp;</type>
        <definition>const std::unordered_map&lt; const MixedIntegerProgramVariable *, FT &gt; &amp; MixedIntegerProgramLinearConstraint&lt; FT &gt;::coefficients</definition>
        <argsstring>() const</argsstring>
        <name>coefficients</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::coefficients</qualifiedname>
        <briefdescription>
<para>Returns the coefficients of the constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="190" column="34"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a5e864a4a35f90f3c8c235736834dd139" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FT</type>
        <definition>FT MixedIntegerProgramLinearConstraint&lt; FT &gt;::get_coefficient</definition>
        <argsstring>(const MixedIntegerProgramVariable *var) const</argsstring>
        <name>get_coefficient</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::get_coefficient</qualifiedname>
        <param>
          <type>const <ref refid="classMixedIntegerProgramVariable" kindref="compound">MixedIntegerProgramVariable</ref> *</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Gets the coefficient of the variable in this constraint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="193" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1ac1894d72bfe7b987bd544bcb56e6fce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::set_offset</definition>
        <argsstring>(FT value)</argsstring>
        <name>set_offset</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::set_offset</qualifiedname>
        <param>
          <type>FT</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the constant term. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="196" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1aa20863ca49a0f07c375711b7c09d5716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FT</type>
        <definition>FT MixedIntegerProgramLinearConstraint&lt; FT &gt;::offset</definition>
        <argsstring>() const</argsstring>
        <name>offset</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::offset</qualifiedname>
        <briefdescription>
<para>Gets the constant term. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="199" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a52020b710add5c0409266b53d5a5ee47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MixedIntegerProgramLinearConstraint&lt; FT &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::clear</qualifiedname>
        <briefdescription>
<para>Clears all variables and sets the constant term to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful to reuse the object to define a new linear constraint. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="203" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classMixedIntegerProgramLinearConstraint_1a52b5928d0cd31f0be3a102870c10a9e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FT</type>
        <definition>static FT MixedIntegerProgramLinearConstraint&lt; FT &gt;::infinity</definition>
        <argsstring>()</argsstring>
        <name>infinity</name>
        <qualifiedname>MixedIntegerProgramLinearConstraint::infinity</qualifiedname>
        <briefdescription>
<para>Gets the infinity threshold (e.g., 1e20). </para>
        </briefdescription>
        <detaileddescription>
<para>Values greater than this value are considered as infinity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/MixedIntegerProgramTraits.h" line="181" column="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="classMixedIntegerProgramLinearConstraint" kindref="compound">MixedIntegerProgramLinearConstraint</ref></computeroutput> is a concept of a linear constraint in a Mixed Integer Programming (MIP) problem. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Linear__constraint" kindref="compound">CGAL::Linear_constraint</ref>&lt;FT&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/MixedIntegerProgramTraits.h" line="122" column="1" bodyfile="Concepts/MixedIntegerProgramTraits.h" bodystart="123" bodyend="207"/>
    <listofallmembers>
      <member refid="classMixedIntegerProgramLinearConstraint_1aec6ff28e1d19ccee99a37a4cea20bac2" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>add_coefficient</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a52020b710add5c0409266b53d5a5ee47" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>clear</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a2b90e546eeb77ffa19e875118589da10" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>coefficients</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a1a219b52a4847d0cc0ce810b52f6e06a" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>get_bounds</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a5e864a4a35f90f3c8c235736834dd139" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>get_coefficient</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a020bcf997640d16d8ec9cf94f42edbe4" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>index</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a52b5928d0cd31f0be3a102870c10a9e9" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>infinity</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a2f2c14ba4700d44dd33542ea9b393dcd" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>lower_bound</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1aa9699d0c12e541bd6cd8dc9a502446c8" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>MixedIntegerProgramLinearConstraint</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a05bfbb2c3fcbefb2502e43bb4ccbef14" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>name</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1aa20863ca49a0f07c375711b7c09d5716" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>offset</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a7665ca58405f889d3d3b40ccb90fef7b" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>set_bounds</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1ae458f000cafd86a14d8ff9507d4a49d6" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>set_coefficients</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a123abdc183eb84d7aa8f22cc97c1a477" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>set_index</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1ad8b81b5a13b259fcea56f01687277f47" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>set_lower_bound</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a7a0a9c32f8f5665337d913a111407bd1" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>set_name</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1ac1894d72bfe7b987bd544bcb56e6fce5" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>set_offset</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1aaecaec1d9bde664eaf147776f06e6d43" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>set_upper_bound</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a477313dfd6cb09f005bdcfd72b1aff9c" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>solver</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1ae1a427cecb83f1ee6f37b8b74712db36" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>solver</name></member>
      <member refid="classMixedIntegerProgramLinearConstraint_1a12dbdfca24e391fe02ae652ff9eb7dea" prot="public" virt="non-virtual"><scope>MixedIntegerProgramLinearConstraint</scope><name>upper_bound</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
