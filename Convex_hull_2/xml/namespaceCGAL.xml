<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Convex__hull__constructive__traits__2" prot="public">CGAL::Convex_hull_constructive_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Convex__hull__traits__2" prot="public">CGAL::Convex_hull_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Convex__hull__traits__adapter__2" prot="public">CGAL::Convex_hull_traits_adapter_2</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga53e842c0b8490653535c00ab81bb0939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::ch_akl_toussaint</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits())</argsstring>
        <name>ch_akl_toussaint</name>
        <qualifiedname>CGAL::ch_akl_toussaint</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits()</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. It is not specified at which point the cyclic sequence of extreme points is cut into a linear sequence.</para>
<para><simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>. The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>ForwardIterator</computeroutput> is defined.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>ForwardIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> are equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_yx_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Orientation_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gac13b4efbc337c7a8d5ad418521edcd4f" kindref="member">CGAL::ch_bykat()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gab9c9511b024795495dd6154ebf19c29c" kindref="member">CGAL::ch_eddy()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gafa05dd03899420623a21baab3bf90b59" kindref="member">CGAL::ch_jarvis()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga938991c84272d95d4ef6be59d52366da" kindref="member">CGAL::ch_melkman()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga8241d43969ff61cb9be46811c2e9e176" kindref="member">CGAL::convex_hull_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This function uses the algorithm of Akl and Toussaint <ref refid="citelist_1CITEREF_at-fcha-78" kindref="member">[1]</ref> that requires <formula id="0">$O(n \log n)$</formula> time for <formula id="1">$ n$</formula> input points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_akl_toussaint.h" line="54" column="1" declfile="CGAL/ch_akl_toussaint.h" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1gac13b4efbc337c7a8d5ad418521edcd4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::ch_bykat</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_bykat</name>
        <qualifiedname>CGAL::ch_bykat</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. It is not specified at which point the cyclic sequence of extreme points is cut into a linear sequence.</para>
<para><simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para>
</simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>ForwardIterator</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>InputIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Compare_signed_distance_to_line_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga53e842c0b8490653535c00ab81bb0939" kindref="member">CGAL::ch_akl_toussaint()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gab9c9511b024795495dd6154ebf19c29c" kindref="member">CGAL::ch_eddy()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gafa05dd03899420623a21baab3bf90b59" kindref="member">CGAL::ch_jarvis()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga938991c84272d95d4ef6be59d52366da" kindref="member">CGAL::ch_melkman()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga8241d43969ff61cb9be46811c2e9e176" kindref="member">CGAL::convex_hull_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This function implements the non-recursive variation of Eddy&apos;s algorithm <ref refid="citelist_1CITEREF_e-nchap-77" kindref="member">[6]</ref> described in <ref refid="citelist_1CITEREF_b-chfsp-78" kindref="member">[5]</ref>. This algorithm requires <formula id="2">$O(n h)$</formula> time in the worst case for <formula id="1">$ n$</formula> input points with <formula id="3">$ h$</formula> extreme points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_bykat.h" line="53" column="1" declfile="CGAL/ch_bykat.h" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1gab9c9511b024795495dd6154ebf19c29c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::ch_eddy</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_eddy</name>
        <qualifiedname>CGAL::ch_eddy</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. It is not specified at which point the cyclic sequence of extreme points is cut into a linear sequence.</para>
<para><simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para>
</simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type value type of <computeroutput>ForwardIterator</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>InputIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Compare_signed_distance_to_line_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga53e842c0b8490653535c00ab81bb0939" kindref="member">CGAL::ch_akl_toussaint()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gac13b4efbc337c7a8d5ad418521edcd4f" kindref="member">CGAL::ch_bykat()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gafa05dd03899420623a21baab3bf90b59" kindref="member">CGAL::ch_jarvis()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga938991c84272d95d4ef6be59d52366da" kindref="member">CGAL::ch_melkman()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga8241d43969ff61cb9be46811c2e9e176" kindref="member">CGAL::convex_hull_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This function implements Eddy&apos;s algorithm <ref refid="citelist_1CITEREF_e-nchap-77" kindref="member">[6]</ref>, which is the two-dimensional version of the quickhull algorithm <ref refid="citelist_1CITEREF_bdh-qach-96" kindref="member">[4]</ref>.</para>
<para>This algorithm requires <formula id="2">$O(n h)$</formula> time in the worst case for <formula id="1">$ n$</formula> input points with <formula id="3">$ h$</formula> extreme points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_eddy.h" line="56" column="1" declfile="CGAL/ch_eddy.h" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::ch_graham_andrew</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_graham_andrew</name>
        <qualifiedname>CGAL::ch_graham_andrew</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. It is not specified at which point the cyclic sequence of extreme points is cut into a linear sequence.</para>
<para><simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para>
</simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>InputIteratore</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>InputIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga53e842c0b8490653535c00ab81bb0939" kindref="member">CGAL::ch_akl_toussaint()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gac13b4efbc337c7a8d5ad418521edcd4f" kindref="member">CGAL::ch_bykat()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gab9c9511b024795495dd6154ebf19c29c" kindref="member">CGAL::ch_eddy()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gafa05dd03899420623a21baab3bf90b59" kindref="member">CGAL::ch_jarvis()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga938991c84272d95d4ef6be59d52366da" kindref="member">CGAL::ch_melkman()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga8241d43969ff61cb9be46811c2e9e176" kindref="member">CGAL::convex_hull_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This function implements Andrew&apos;s variant of the Graham scan algorithm <ref refid="citelist_1CITEREF_a-aeach-79" kindref="member">[3]</ref> and follows the presentation of Mehlhorn <ref refid="citelist_1CITEREF_m-mdscg-84" kindref="member">[9]</ref>. This algorithm requires <formula id="0">$O(n \log n)$</formula> time in the worst case for <formula id="1">$ n$</formula> input points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_graham_andrew.h" line="54" column="1" declfile="CGAL/ch_graham_andrew.h" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BidirectionalIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::ch_graham_andrew_scan</definition>
        <argsstring>(BidirectionalIterator first, BidirectionalIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_graham_andrew_scan</name>
        <qualifiedname>CGAL::ch_graham_andrew_scan</qualifiedname>
        <param>
          <type>BidirectionalIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>BidirectionalIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points from a given sequence of input points that are not left of the line defined by the first and last points in this sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, it generates the counterclockwise sequence of extreme points from a given sequence of input points that are not left of the line <formula id="4">$ pq$</formula> defined by the first ( <formula id="5">$p$</formula>) and last ( <formula id="6">$q$</formula>) points in this sequence ( <formula id="7">$ p$</formula> is the value of <computeroutput>first</computeroutput> and <formula id="8">$ q$</formula> is the value of <computeroutput>beyond</computeroutput> <formula id="9">$ -1$</formula>). The resulting sequence is placed starting at <computeroutput>result</computeroutput> with <formula id="7">$ p$</formula>; point <formula id="8">$ q$</formula> is omitted. The past-the-end iterator for the sequence is returned.</para>
<para><simplesect kind="pre"><para>The range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) contains at least two different points. The points in [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) are sorted with respect to <formula id="4">$ pq$</formula>, <emphasis>i.e.</emphasis>, the sequence of points in [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) define a counterclockwise polygon, for which the Graham-Sklansky-procedure <ref refid="citelist_1CITEREF_s-mcrm-72" kindref="member">[11]</ref> works.</para>
</simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>BidirectionalIterator::value_type</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para><computeroutput>BidirectionalIterator::value_type</computeroutput> and <computeroutput>OutputIterator::value_type</computeroutput> are equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following two types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This algorithm requires <formula id="10">$O(n)$</formula> time in the worst case for <formula id="1">$ n$</formula> input points.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>In the example <ref refid="Convex_hull_2_2ch_graham_anderson_8cpp-example" kindref="compound">Convex_hull_2/ch_graham_anderson.cpp</ref>, <computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" kindref="member">ch_graham_andrew_scan()</ref></computeroutput> is used to realize Anderson&apos;s variant <ref refid="citelist_1CITEREF_a-readc-78" kindref="member">[2]</ref> of the Graham Scan <ref refid="citelist_1CITEREF_g-eadch-72" kindref="member">[7]</ref>. The points are sorted counterclockwise around the leftmost point using the <computeroutput>Less_rotate_ccw_2</computeroutput> predicate, as defined in the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput>. According to the definition of <computeroutput>Less_rotate_ccw_2</computeroutput>, the leftmost point is the last point in the sorted sequence and its predecessor on the convex hull is the first point in the sorted sequence. It is not hard to see that the preconditions of <computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" kindref="member">ch_graham_andrew_scan()</ref></computeroutput> are satisfied. Anderson&apos;s variant of the Graham scan is usually inferior to Andrew&apos;s variant because of its higher arithmetic demand. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_graham_andrew.h" line="125" column="1" declfile="CGAL/ch_graham_andrew.h" declline="125" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1gafa05dd03899420623a21baab3bf90b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::ch_jarvis</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_jarvis</name>
        <qualifiedname>CGAL::ch_jarvis</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. It is not specified at which point the cyclic sequence of extreme points is cut into a linear sequence.</para>
<para><simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para>
</simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>ForwardIterator</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>ForwardIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_rotate_ccw_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga53e842c0b8490653535c00ab81bb0939" kindref="member">CGAL::ch_akl_toussaint()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gac13b4efbc337c7a8d5ad418521edcd4f" kindref="member">CGAL::ch_bykat()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gab9c9511b024795495dd6154ebf19c29c" kindref="member">CGAL::ch_eddy()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gae9e0919cb50981d1f31ac242a2c4ba9d" kindref="member">CGAL::ch_jarvis_march()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga938991c84272d95d4ef6be59d52366da" kindref="member">CGAL::ch_melkman()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga8241d43969ff61cb9be46811c2e9e176" kindref="member">CGAL::convex_hull_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This function uses the Jarvis march (gift-wrapping) algorithm <ref refid="citelist_1CITEREF_j-ichfs-73" kindref="member">[8]</ref>. This algorithm requires <formula id="2">$O(n h)$</formula> time in the worst case for <formula id="1">$ n$</formula> input points with <formula id="3">$ h$</formula> extreme points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_jarvis.h" line="53" column="1" declfile="CGAL/ch_jarvis.h" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gae9e0919cb50981d1f31ac242a2c4ba9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::ch_jarvis_march</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, const Traits::Point_2 &amp;start_p, const Traits::Point_2 &amp;stop_p, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_jarvis_march</name>
        <qualifiedname>CGAL::ch_jarvis_march</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Traits::Point_2 &amp;</type>
          <declname>start_p</declname>
        </param>
        <param>
          <type>const Traits::Point_2 &amp;</type>
          <declname>stop_p</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points from a given set of input points that line between two input points. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, it generates the counterclockwise subsequence of extreme points between <computeroutput>start_p</computeroutput> and <computeroutput>stop_p</computeroutput> of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>), starting at position <computeroutput>result</computeroutput> with point <computeroutput>start_p</computeroutput>. The last point generated is the point preceding <computeroutput>stop_p</computeroutput> in the counterclockwise order of extreme points.</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>ForwardIterator::value_type</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para><computeroutput>ForwardIterator::value_type</computeroutput> and <computeroutput>OutputIterator::value_type</computeroutput> are equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> defines the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_rotate_ccw_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gafa05dd03899420623a21baab3bf90b59" kindref="member">CGAL::ch_jarvis()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>The function uses the Jarvis march (gift-wrapping) algorithm <ref refid="citelist_1CITEREF_j-ichfs-73" kindref="member">[8]</ref>. This algorithm requires <formula id="2">$O(n h)$</formula> time in the worst case for <formula id="1">$ n$</formula> input points with <formula id="3">$ h$</formula> extreme points</para>
<para><simplesect kind="pre"><para><computeroutput>start_p</computeroutput> and <computeroutput>stop_p</computeroutput> are extreme points with respect to the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) and <computeroutput>stop_p</computeroutput> is an element of range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_jarvis.h" line="109" column="1" declfile="CGAL/ch_jarvis.h" declline="109" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga938991c84272d95d4ef6be59d52366da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::ch_melkman</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_melkman</name>
        <qualifiedname>CGAL::ch_melkman</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned.</para>
<para><simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) corresponds to a simple polyline. [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para>
</simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>InputIterator</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>InputIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga53e842c0b8490653535c00ab81bb0939" kindref="member">CGAL::ch_akl_toussaint()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gac13b4efbc337c7a8d5ad418521edcd4f" kindref="member">CGAL::ch_bykat()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gab9c9511b024795495dd6154ebf19c29c" kindref="member">CGAL::ch_eddy()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gafa05dd03899420623a21baab3bf90b59" kindref="member">CGAL::ch_jarvis()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga938991c84272d95d4ef6be59d52366da" kindref="member">CGAL::ch_melkman()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga8241d43969ff61cb9be46811c2e9e176" kindref="member">CGAL::convex_hull_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>It uses an implementation of Melkman&apos;s algorithm <ref refid="citelist_1CITEREF_m-olcch-87" kindref="member">[10]</ref>. Running time of this is linear. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_melkman.h" line="51" column="1" declfile="CGAL/ch_melkman.h" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::ch_e_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;e, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_e_point</name>
        <qualifiedname>CGAL::ch_e_point</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" kindref="member">ch_e_point()</ref></computeroutput> finds a point of a given set of input points with maximal <formula id="11">$ x$</formula> coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para>It traverses the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). After execution, the value of <computeroutput>e</computeroutput> is an iterator in the range such that <computeroutput>*e</computeroutput> <formula id="12">$ \ge_{xy}$</formula> <computeroutput>*it</computeroutput> for all iterators <computeroutput>it</computeroutput> in the range.</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>ForwardIterator</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> defines a type <computeroutput>Traits::Less_xy_2</computeroutput> as described in the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and the corresponding member function that returns an instance of this type.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" kindref="member">CGAL::ch_nswe_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" kindref="member">CGAL::ch_n_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" kindref="member">CGAL::ch_ns_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" kindref="member">CGAL::ch_s_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" kindref="member">CGAL::ch_w_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" kindref="member">CGAL::ch_we_point()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_selected_extreme_points_2.h" line="34" column="1" declfile="CGAL/ch_selected_extreme_points_2.h" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::ch_n_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;n, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_n_point</name>
        <qualifiedname>CGAL::ch_n_point</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" kindref="member">ch_n_point()</ref></computeroutput> finds a point in a given set of input points with maximal <formula id="13">$ y$</formula> coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para>It traverses the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). After execution, the value of <computeroutput>n</computeroutput> is an iterator in the range such that <computeroutput>*n</computeroutput> <formula id="14">$ \ge_{yx}$</formula> <computeroutput>*it</computeroutput> for all iterators <computeroutput>it</computeroutput> in the range.</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>ForwardIterator::value_type</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> defines the type <computeroutput>Traits::Less_yx_2</computeroutput> as specified in the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and the corresponding member function that returns an instance of this type.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" kindref="member">CGAL::ch_e_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" kindref="member">CGAL::ch_nswe_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" kindref="member">CGAL::ch_ns_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" kindref="member">CGAL::ch_s_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" kindref="member">CGAL::ch_w_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" kindref="member">CGAL::ch_we_point()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_selected_extreme_points_2.h" line="73" column="1" declfile="CGAL/ch_selected_extreme_points_2.h" declline="73" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::ch_ns_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;n, ForwardIterator &amp;s, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_ns_point</name>
        <qualifiedname>CGAL::ch_ns_point</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" kindref="member">ch_ns_point()</ref></computeroutput> finds the points of a given set of input points with minimal and maximal <formula id="11">$ x$</formula> coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>It traverses the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). After execution, the value of <computeroutput>n</computeroutput> is an iterator in the range such that <computeroutput>*n</computeroutput> <formula id="14">$ \ge_{yx}$</formula> <computeroutput>*it</computeroutput> for all iterators <computeroutput>it</computeroutput> in the range. Similarly, for <computeroutput>s</computeroutput> the inequality <computeroutput>*s</computeroutput> <formula id="15">$ \le_{yx}$</formula> <computeroutput>*it</computeroutput> holds for all iterators in the range.</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>ForwardIterator</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> defines the type <computeroutput>Traits::Less_yx_2</computeroutput> as specified in the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and the corresponding member function that returns an instance of this type.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" kindref="member">CGAL::ch_e_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" kindref="member">CGAL::ch_nswe_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" kindref="member">CGAL::ch_n_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" kindref="member">CGAL::ch_s_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" kindref="member">CGAL::ch_w_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" kindref="member">CGAL::ch_we_point()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_selected_extreme_points_2.h" line="114" column="1" declfile="CGAL/ch_selected_extreme_points_2.h" declline="114" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::ch_nswe_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;n, ForwardIterator &amp;s, ForwardIterator &amp;w, ForwardIterator &amp;e, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_nswe_point</name>
        <qualifiedname>CGAL::ch_nswe_point</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" kindref="member">ch_nswe_point()</ref></computeroutput> finds the four extreme points of a given set of input points using a linear scan of the input points. </para>
        </briefdescription>
        <detaileddescription>
<para>That is, it determines the points with maximal <formula id="13">$ y$</formula>, minimal <formula id="13">$ y$</formula>, minimal <formula id="11">$ x$</formula>, and maximal <formula id="11">$ x$</formula> coordinates.</para>
<para>It traverses the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). After execution, the value of <computeroutput>n</computeroutput> is an iterator in the range such that <computeroutput>*n</computeroutput> <formula id="14">$ \ge_{yx}$</formula> <computeroutput>*it</computeroutput> for all iterators <computeroutput>it</computeroutput> in the range. Similarly, for <computeroutput>s</computeroutput>, <computeroutput>w</computeroutput>, and <computeroutput>e</computeroutput> the inequalities <computeroutput>*s</computeroutput> <formula id="15">$ \le_{yx}$</formula> <computeroutput>*it</computeroutput>, <computeroutput>*w</computeroutput> <formula id="16">$ \le_{xy}$</formula> <computeroutput>*it</computeroutput>, and <computeroutput>*e</computeroutput> <formula id="12">$ \ge_{xy}$</formula> <computeroutput>*it</computeroutput> hold for all iterators <computeroutput>it</computeroutput> in the range.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_yx_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>ForwardIterator::value_type</computeroutput> is defined.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" kindref="member">CGAL::ch_e_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" kindref="member">CGAL::ch_n_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" kindref="member">CGAL::ch_ns_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" kindref="member">CGAL::ch_s_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" kindref="member">CGAL::ch_w_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" kindref="member">CGAL::ch_we_point()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_selected_extreme_points_2.h" line="164" column="1" declfile="CGAL/ch_selected_extreme_points_2.h" declline="164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::ch_s_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;s, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_s_point</name>
        <qualifiedname>CGAL::ch_s_point</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" kindref="member">ch_s_point()</ref></computeroutput> finds a points in a given set of input points with minimal <formula id="13">$ y$</formula> coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>It traverses the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). After execution, the value of <computeroutput>s</computeroutput> is an iterator in the range such that <computeroutput>*s</computeroutput> <formula id="15">$ \le_{yx}$</formula> <computeroutput>*it</computeroutput> for all iterators <computeroutput>it</computeroutput> in the range.</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>ForwardIterator::value_type</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> defines the type <computeroutput>Traits::Less_yx_2</computeroutput> as specified in the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and the corresponding member function that returns an instance of this type.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" kindref="member">CGAL::ch_e_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" kindref="member">CGAL::ch_nswe_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" kindref="member">CGAL::ch_n_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" kindref="member">CGAL::ch_ns_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" kindref="member">CGAL::ch_w_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" kindref="member">CGAL::ch_we_point()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_selected_extreme_points_2.h" line="206" column="1" declfile="CGAL/ch_selected_extreme_points_2.h" declline="206" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::ch_we_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;w, ForwardIterator &amp;e, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_we_point</name>
        <qualifiedname>CGAL::ch_we_point</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" kindref="member">ch_we_point()</ref></computeroutput> finds two points of a given set of input points with minimal and maximal <formula id="11">$ x$</formula> coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>It traverses the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). After execution, the value of <computeroutput>w</computeroutput> is an iterator in the range such that <computeroutput>*w</computeroutput> <formula id="16">$ \le_{xy}$</formula> <computeroutput>*it</computeroutput> for all iterators <computeroutput>it</computeroutput> in the range. Similarly, for <computeroutput>e</computeroutput> the inequality <computeroutput>*e</computeroutput> <formula id="12">$ \ge_{xy}$</formula> <computeroutput>*it</computeroutput> holds for all iterators in the range.</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>ForwardIterator::value_type</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> defines the type <computeroutput>Traits::Less_xy_2</computeroutput> as specified in the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and the corresponding member function that returns an instance of this type.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" kindref="member">CGAL::ch_e_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" kindref="member">CGAL::ch_nswe_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" kindref="member">CGAL::ch_n_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" kindref="member">CGAL::ch_ns_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" kindref="member">CGAL::ch_s_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" kindref="member">CGAL::ch_w_point()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_selected_extreme_points_2.h" line="247" column="1" declfile="CGAL/ch_selected_extreme_points_2.h" declline="247" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::ch_w_point</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, ForwardIterator &amp;w, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>ch_w_point</name>
        <qualifiedname>CGAL::ch_w_point</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>ForwardIterator &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga9add6eb0d67dacb52918da2c73e88c0a" kindref="member">ch_w_point()</ref></computeroutput> finds a point in a given set of input points with minimal <formula id="11">$ x$</formula> coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para>It traverses the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). After execution, the value of <computeroutput>w</computeroutput> is an iterator in the range such that <computeroutput>*w</computeroutput> <formula id="16">$ \le_{xy}$</formula> <computeroutput>*it</computeroutput> for all iterators <computeroutput>it</computeroutput> in the range.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> defines the type <computeroutput>Traits::Less_xy_2</computeroutput> as specified in the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and the corresponding member function that returns an instance of this type.</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the type <computeroutput>ForwardIterator::value_type</computeroutput> is defined.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gac07127d740ecc491b3dc0e797c9c3252" kindref="member">CGAL::ch_e_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga3dbd516d18c626d354734f534aa8f740" kindref="member">CGAL::ch_nswe_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gab42b74243ff79e49f4574ddfdcdb4ed7" kindref="member">CGAL::ch_n_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1ga119d3f2f171cdf2d07d3a643efade08f" kindref="member">CGAL::ch_ns_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gaab5a7ddae1354e025e003610d6e3cf10" kindref="member">CGAL::ch_s_point()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Extreme_1gadf9445fc0581869a195c27ca2685c3c6" kindref="member">CGAL::ch_we_point()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/ch_selected_extreme_points_2.h" line="287" column="1" declfile="CGAL/ch_selected_extreme_points_2.h" declline="287" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga8241d43969ff61cb9be46811c2e9e176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::convex_hull_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits)</argsstring>
        <name>convex_hull_2</name>
        <qualifiedname>CGAL::convex_hull_2</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) with a user provided traits class. </para>
        </briefdescription>
        <detaileddescription>
<para>It generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. It is not specified at which point the cyclic sequence of extreme points is cut into a linear sequence.</para>
<para><simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>InputIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Compare_signed_distance_to_line_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_yx_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Orientation_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga53e842c0b8490653535c00ab81bb0939" kindref="member">CGAL::ch_akl_toussaint()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gac13b4efbc337c7a8d5ad418521edcd4f" kindref="member">CGAL::ch_bykat()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gab9c9511b024795495dd6154ebf19c29c" kindref="member">CGAL::ch_eddy()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gafa05dd03899420623a21baab3bf90b59" kindref="member">CGAL::ch_jarvis()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1ga938991c84272d95d4ef6be59d52366da" kindref="member">CGAL::ch_melkman()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>One of two algorithms is used, depending on the type of iterator used to specify the input points. For input iterators, the algorithm used is that of Bykat <ref refid="citelist_1CITEREF_b-chfsp-78" kindref="member">[5]</ref>, which has a worst-case running time of <formula id="2">$O(n h)$</formula>, where <formula id="1">$ n$</formula> is the number of input points and <formula id="3">$ h$</formula> is the number of extreme points. For all other types of iterators, the <formula id="0">$O(n \log n)$</formula> algorithm of of Akl and Toussaint <ref refid="citelist_1CITEREF_at-fcha-78" kindref="member">[1]</ref> is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_2.h" line="59" column="1" declfile="CGAL/convex_hull_2.h" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Functions_1ga25d29704043d928065a240d80c4e6078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::convex_hull_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result)</argsstring>
        <name>convex_hull_2</name>
        <qualifiedname>CGAL::convex_hull_2</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points of the points in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) using as traits class the kernel in which the point type is defined. </para>
        </briefdescription>
        <detaileddescription>
<para>The kernel is deduced using <computeroutput>std::iterator_traits</computeroutput> and <computeroutput>CGAL::Kernel_traits</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_2.h" line="74" column="1" declfile="CGAL/convex_hull_2.h" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::lower_hull_points_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>lower_hull_points_2</name>
        <qualifiedname>CGAL::lower_hull_points_2</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points on the lower hull of a given set of input points. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, it generates the counterclockwise sequence of extreme points on the lower hull of the points in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>). The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. The sequence starts with the leftmost point; the rightmost point is not included. If there is only one extreme point (<emphasis>i.e.</emphasis>, leftmost and rightmost point are equal) the extreme point is reported. <simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para>
</simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>InputIterator</computeroutput> is defined.</para>
<para>The different treatment by <computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">upper_hull_points_2()</ref></computeroutput> of the case that all points are equal ensures that concatenation of lower and upper hull points gives the sequence of extreme points.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>InputIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_yx_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" kindref="member">CGAL::ch_graham_andrew_scan()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" kindref="member">CGAL::upper_hull_points_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This function uses Andrew&apos;s variant of Graham&apos;s scan algorithm <ref refid="citelist_1CITEREF_a-aeach-79" kindref="member">[3]</ref>, <ref refid="citelist_1CITEREF_m-mdscg-84" kindref="member">[9]</ref>. The algorithm has worst-case running time of <formula id="0">$O(n \log n)$</formula> for <formula id="1">$ n$</formula> input points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_2.h" line="137" column="1" declfile="CGAL/convex_hull_2.h" declline="137" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Subsequence_1ga1abc268fbd7b3edfc61af2efff6f3e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::upper_hull_points_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, OutputIterator result, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>upper_hull_points_2</name>
        <qualifiedname>CGAL::upper_hull_points_2</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>generates the counterclockwise sequence of extreme points on the upper hull of a given set of input points. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, it generates the counterclockwise sequence of extreme points on the upper hull of the points in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>). The resulting sequence is placed starting at position <computeroutput>result</computeroutput>, and the past-the-end iterator for the resulting sequence is returned. The sequence starts with the rightmost point, the leftmost point is not included. If there is only one extreme point (<emphasis>i.e.</emphasis>, the leftmost and rightmost point are equal), the extreme point is not reported. <simplesect kind="pre"><para>The source range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) does not contain <computeroutput>result</computeroutput>.</para>
</simplesect>
The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>InputIterator</computeroutput> is defined.</para>
<para>The different treatment by <computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">lower_hull_points_2()</ref></computeroutput> of the case that all points are equal ensures that concatenation of lower and upper hull points gives the sequence of extreme points.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para>The value type of <computeroutput>InputIterator</computeroutput> and <computeroutput>OutputIterator</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Point_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_yx_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Functions_1gaeccc6dda2f9d3096c94a7ff84cc91a85" kindref="member">CGAL::ch_graham_andrew()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gafa026d25f9fee686e7a58af0ff365f86" kindref="member">CGAL::ch_graham_andrew_scan()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Subsequence_1gaf6e4baad67192f0cc3da273cda717297" kindref="member">CGAL::lower_hull_points_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This function uses Andrew&apos;s variant of Graham&apos;s scan algorithm <ref refid="citelist_1CITEREF_a-aeach-79" kindref="member">[3]</ref>, <ref refid="citelist_1CITEREF_m-mdscg-84" kindref="member">[9]</ref>. The algorithm has worst-case running time of <formula id="0">$O(n \log n)$</formula> for <formula id="1">$ n$</formula> input points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_2.h" line="200" column="1" declfile="CGAL/convex_hull_2.h" declline="200" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Convexity_1gaf212d4568dfb6a39831c5f4ea1257b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_ccw_strongly_convex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>is_ccw_strongly_convex_2</name>
        <qualifiedname>CGAL::is_ccw_strongly_convex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Convexity_1gaf212d4568dfb6a39831c5f4ea1257b65" kindref="member">is_ccw_strongly_convex_2()</ref></computeroutput> determines if a given sequence of points defines a counterclockwise-oriented, strongly convex polygon. </para>
        </briefdescription>
        <detaileddescription>
<para>It returns <computeroutput>true</computeroutput>, iff the point elements in [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) form a counterclockwise-oriented strongly convex polygon.</para>
<para>A set of points is said to be strongly convex if it consists of only extreme points (<emphasis>i.e.</emphasis>, vertices of the convex hull).</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>ForwardIterator</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Convexity_1ga19dcfbe04c6933232236f27e4fecf592" kindref="member">CGAL::is_cw_strongly_convex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::is_strongly_convex_3()</computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>The algorithm requires <formula id="10">$O(n)$</formula> time for a set of <formula id="1">$ n$</formula> input points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convexity_check_2.h" line="42" column="1" declfile="CGAL/convexity_check_2.h" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull2Convexity_1ga19dcfbe04c6933232236f27e4fecf592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_cw_strongly_convex_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator beyond, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>is_cw_strongly_convex_2</name>
        <qualifiedname>CGAL::is_cw_strongly_convex_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgConvexHull2Convexity_1ga19dcfbe04c6933232236f27e4fecf592" kindref="member">is_cw_strongly_convex_2()</ref></computeroutput> determines if a given sequence of points defines a clockwise-oriented, strongly convex polygon. </para>
        </briefdescription>
        <detaileddescription>
<para>It returns <computeroutput>true</computeroutput>, iff the point elements in [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) form a clockwise-oriented strongly convex polygon.</para>
<para>A set of points is said to be strongly convex if it consists of only extreme points (<emphasis>i.e.</emphasis>, vertices of the convex hull).</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which the value type of <computeroutput>ForwardIterator</computeroutput> is defined.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Traits</computeroutput> contains the following subset of types from the concept <computeroutput><ref refid="classConvexHullTraits__2" kindref="compound">ConvexHullTraits_2</ref></computeroutput> and their corresponding member functions that return instances of these types: <itemizedlist>
<listitem>
<para><computeroutput>Traits::Equal_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Less_xy_2</computeroutput>, </para>
</listitem>
<listitem>
<para><computeroutput>Traits::Left_turn_2</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull2Convexity_1gaf212d4568dfb6a39831c5f4ea1257b65" kindref="member">CGAL::is_ccw_strongly_convex_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::is_strongly_convex_3()</computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>The algorithm requires <formula id="10">$O(n)$</formula> time for a set of <formula id="1">$ n$</formula> input points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convexity_check_2.h" line="90" column="1" declfile="CGAL/convexity_check_2.h" declline="90" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/ch_akl_toussaint.h" line="1" column="1"/>
  </compounddef>
</doxygen>
