<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Implicit__to__labeled__subdomains__function__wrapper" prot="public">CGAL::Implicit_to_labeled_subdomains_function_wrapper</innerclass>
    <innerclass refid="classCGAL_1_1Periodic__3__function__wrapper" prot="public">CGAL::Periodic_3_function_wrapper</innerclass>
    <innerclass refid="classCGAL_1_1Periodic__3__mesh__triangulation__3" prot="public">CGAL::Periodic_3_mesh_triangulation_3</innerclass>
    <innernamespace refid="namespaceCGAL_1_1Mesh__3">CGAL::Mesh_3</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Periodic__3__mesh__3">CGAL::Periodic_3_mesh_3</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPeriodic3Mesh3IOFunctions_1ga22e9a84d23dea5461571db65a2eb27a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C3T3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::output_periodic_mesh_to_medit</definition>
        <argsstring>(std::ostream &amp;os, const C3T3 &amp;c3t3, int occurrence_count=8, bool distinguish_copies=true, bool rebind=false, bool show_patches=false)</argsstring>
        <name>output_periodic_mesh_to_medit</name>
        <qualifiedname>CGAL::output_periodic_mesh_to_medit</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>occurrence_count</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>distinguish_copies</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>rebind</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>show_patches</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>outputs a periodic mesh to the medit (<computeroutput>.mesh</computeroutput>) file format. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="citelist_1CITEREF_frey:inria-00069921" kindref="member">[5]</ref> for a comprehensive description of this file format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c3t3</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh complex </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>occurrence_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of copies that are drawn </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distinguish_copies</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to <computeroutput>true</computeroutput>, each copy is assigned a unique color. Otherwise, all domains are drawn with subdomain index-based colors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rebind</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to <computeroutput>true</computeroutput>, labels of cells are rebinded into <computeroutput>[1..nb_of_labels]</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show_patches</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to <computeroutput>true</computeroutput>, patches are labeled with different labels than cells. If <computeroutput>false</computeroutput>, each surface facet is written twice, using the label of each adjacent cell. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Periodic_3_mesh_3/IO/File_medit.h" line="19" column="6" declfile="CGAL/Periodic_3_mesh_3/IO/File_medit.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPeriodic3Mesh3Functions_1ga7ac2b13ce0dc57f8f71b433c93bdeb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename MeshCriteria</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>C3T3</type>
        <definition>C3T3 CGAL::make_periodic_3_mesh_3</definition>
        <argsstring>(const MeshDomain &amp;domain, const MeshCriteria &amp;criteria, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>make_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::make_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const MeshCriteria &amp;</type>
          <declname>criteria</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga7ac2b13ce0dc57f8f71b433c93bdeb92" kindref="member">make_periodic_3_mesh_3()</ref></computeroutput> is a 3D periodic mesh generator. </para>
        </briefdescription>
        <detaileddescription>
<para>It produces simplicial meshes which discretize 3D periodic domains. The periodic mesh generation algorithm is a Delaunay refinement process followed by an optimization phase. The criteria driving the Delaunay refinement process may be tuned to achieve the user needs with respect to the size of mesh elements, the accuracy of boundaries approximation, etc. The optimization phase is a sequence of optimization processes, amongst the following available optimizers: an ODT-smoothing, a Lloyd smoothing, a sliver perturber, and a sliver exuder. Each optimization process can be activated or not, according to the user requirements and available time. By default, only the perturber and the exuder are activated. Note that the benefits of the exuder will be lost if the mesh is further refined afterward, and that ODT-smoothing, Lloyd-smoothing, and sliver perturber should never be called after the sliver exuder. In the case of further refinement, only the sliver exuder can be used. The function outputs the mesh to an object which provides iterators to traverse the resulting mesh data structure or can be written to a file (see <ref refid="index_1Periodic_3_mesh_3_section_examples" kindref="member">Examples</ref> ).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>is required to be a model of the concept <computeroutput>MeshComplex_3InTriangulation_3</computeroutput>. This is the return type. The type <computeroutput>C3T3</computeroutput> is in particular required to provide a nested type <computeroutput>C3T3::Triangulation</computeroutput> for the 3D triangulation embedding the mesh. The vertex and cell base classes of the triangulation <computeroutput>C3T3::Triangulation</computeroutput> are required to be models of the concepts <computeroutput>MeshVertexBase_3</computeroutput> and <computeroutput>MeshCellBase_3</computeroutput> respectively.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MD</parametername>
</parameternamelist>
<parameterdescription>
<para>is required to be a model of the concept <computeroutput>MeshDomain_3</computeroutput>, or of the refined concept <computeroutput>MeshDomainWithFeatures_3</computeroutput> if the domain has corners and curves that need to be accurately represented in the mesh. The argument <computeroutput>domain</computeroutput> is the sole link through which the domain to be discretized is known by the mesh generation algorithm.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MC</parametername>
</parameternamelist>
<parameterdescription>
<para>has to be a model of the concept <computeroutput>MeshCriteria_3</computeroutput>, or a model of the refined concept <computeroutput>MeshCriteriaWithFeatures_3</computeroutput> if the domain has exposed features. The argument <computeroutput>criteria</computeroutput> of type <computeroutput>MC</computeroutput> specifies the size and shape requirements for mesh tetrahedra and surface facets. These criteria form the rules which drive the refinement process. All mesh elements satisfy those criteria at the end of the refinement process. In addition, if the domain has features, the argument <computeroutput>criteria</computeroutput> provides a sizing field to guide the discretization of 1-dimensional exposed features.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain to be discretized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>criteria</parametername>
</parameternamelist>
<parameterdescription>
<para>the criteria </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Feature preservation options</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If the domain is a model of <computeroutput>MeshDomainWithFeatures_3</computeroutput>, 0 and 1-dimensional features can be taken into account while generating the mesh. The following two named parameters control this option: <itemizedlist>
<listitem>
<para><ref refid="" kindref="compound"><computeroutput>parameters::features(domain)</computeroutput> </ref> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::no_features()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::features(domain)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Topological options (manifoldness)</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>In order to drive the meshing algorithm and ensure that the output mesh follows a desired topological criterion, three named parameters control this option: <itemizedlist>
<listitem>
<para><computeroutput>parameters::manifold()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::manifold_with_boundary()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::non_manifold()</computeroutput> </para>
</listitem>
</itemizedlist>
Note that the meshing algorithm cannot generate a manifold surface if the input surface is not manifold. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::non_manifold()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Lloyd optimization</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput>lloyd_optimize_mesh_3()</computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput>parameters::no_lloyd()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::lloyd_optimize_mesh_3()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::no_lloyd()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>ODT optimization</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput>odt_optimize_mesh_3()</computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput>parameters::no_odt()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::odt()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::no_odt()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Mesh perturbation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput>perturb_mesh_3()</computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput>parameters::no_perturb()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::perturb()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::perturb()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Mesh exudation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput>exude_mesh_3()</computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput>parameters::exude()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::no_exude()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::exude()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>The optimization parameters can be passed in an arbitrary order. If one parameter is not passed, its default value is used. The default values are <computeroutput>no_lloyd()</computeroutput>, <computeroutput>no_odt()</computeroutput>, <computeroutput>perturb()</computeroutput> and <computeroutput>exude()</computeroutput>.</para>
<para>Note that regardless of which optimization processes are activated, they are always launched in the order that is a suborder of the following (see user manual for further details): <emphasis>ODT-smoother</emphasis>, <emphasis>Lloyd-smoother</emphasis>, <emphasis>perturber</emphasis>, and <emphasis>exuder</emphasis>.</para>
<para>Beware that optimization of the mesh is obtained by perturbing mesh vertices and modifying the mesh connectivity and that this has an impact on the strict compliance to the refinement criteria. Though a strict compliance to mesh criteria is guaranteed at the end of the Delaunay refinement, this may no longer be true after some optimization processes. Also beware that the default behavior does involve some optimization processes.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga94a09b1bf261461fa39ef3f7b13878ee" kindref="member">refine_periodic_3_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>make_mesh_3()</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>exude_mesh_3()</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>perturb_mesh_3()</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>lloyd_optimize_mesh_3()</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>odt_optimize_mesh_3()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/make_periodic_3_mesh_3.h" line="355" column="6" bodyfile="CGAL/make_periodic_3_mesh_3.h" bodystart="355" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPeriodic3Mesh3Functions_1ga94a09b1bf261461fa39ef3f7b13878ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename MeshCriteria</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::refine_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const MeshCriteria &amp;criteria, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>refine_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::refine_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const MeshCriteria &amp;</type>
          <declname>criteria</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga94a09b1bf261461fa39ef3f7b13878ee" kindref="member">refine_periodic_3_mesh_3()</ref></computeroutput> is a 3D periodic mesh generator. </para>
        </briefdescription>
        <detaileddescription>
<para>It produces periodic simplicial meshes which discretize 3D periodic domains.</para>
<para>The periodic mesh generation algorithm is a Delaunay refinement process followed by an optimization phase. The criteria driving the Delaunay refinement process may be tuned to achieve the user needs with respect to the size of mesh elements, the accuracy of boundaries approximation, etc.</para>
<para>The optimization phase is a sequence of optimization processes, amongst the following available optimizers: an ODT-smoothing, a Lloyd smoothing, a sliver perturber, and a sliver exuder. Each optimization process can be activated or not, according to the user requirements and available time. By default, only the perturber and the exuder are activated. Note that the benefits of the exuder will be lost if the mesh is further refined afterward.</para>
<para><simplesect kind="attention"><para>The function template <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga94a09b1bf261461fa39ef3f7b13878ee" kindref="member">refine_periodic_3_mesh_3()</ref></computeroutput> may be used to refine a previously computed mesh, e.g.: <programlisting filename=".cpp"><codeline><highlight class="normal">C3T3<sp/>c3t3<sp/>=<sp/>CGAL::make_periodic_3_mesh_3&lt;C3T3&gt;(domain,criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgPeriodic3Mesh3Functions_1ga94a09b1bf261461fa39ef3f7b13878ee" kindref="member">CGAL::refine_periodic_3_mesh_3</ref>(c3t3,<sp/>domain,<sp/>new_criteria);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="attention"><para>Note that the triangulation must form at all times a simplicial complex within a single copy of the domain (see Sections P3Triangulation3secspace and P3Triangulation3secintro of the manual of 3D periodic triangulations). It is the responsibility of the user to provide a triangulation that satisfies this condition when calling the refinement function <computeroutput>refine_periodic_3_mesh_3</computeroutput>. The underlying triangulation of a mesh complex obtained through <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga7ac2b13ce0dc57f8f71b433c93bdeb92" kindref="member">make_periodic_3_mesh_3()</ref></computeroutput> or <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga94a09b1bf261461fa39ef3f7b13878ee" kindref="member">refine_periodic_3_mesh_3()</ref></computeroutput> will always satisfy this condition.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>is required to be a model of the concept <computeroutput>MeshComplex_3InTriangulation_3</computeroutput>. The argument <computeroutput>c3t3</computeroutput> is passed by reference as this object is modified by the refinement process. As the refinement process only adds points to the triangulation, all vertices of the triangulation of <computeroutput>c3t3</computeroutput> remain in the mesh during the refinement process. Object <computeroutput>c3t3</computeroutput> can be used to insert specific points in the domain to ensure that they will be contained in the final triangulation. The type <computeroutput>C3T3</computeroutput> is in particular required to provide a nested type <computeroutput>C3T3::Triangulation</computeroutput> for the 3D triangulation embedding the mesh. The vertex and cell base classes of the triangulation <computeroutput>C3T3::Triangulation</computeroutput> are required to be models of the concepts <computeroutput>MeshVertexBase_3</computeroutput> and <computeroutput>MeshCellBase_3</computeroutput> respectively.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MD</parametername>
</parameternamelist>
<parameterdescription>
<para>is required to be a model of the concept <computeroutput><ref refid="classPeriodic__3MeshDomain__3" kindref="compound">Periodic_3MeshDomain_3</ref></computeroutput> or of the refined concept <computeroutput><ref refid="classPeriodic__3MeshDomainWithFeatures__3" kindref="compound">Periodic_3MeshDomainWithFeatures_3</ref></computeroutput> if 0 and 1-dimensional features of the input complex have to be accurately represented in the mesh. The argument <computeroutput>domain</computeroutput> is the sole link through which the domain to be discretized is known by the mesh generation algorithm.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MC</parametername>
</parameternamelist>
<parameterdescription>
<para>is required to be a model of the concept <computeroutput>MeshCriteria_3</computeroutput>, or a model of the refined concept <computeroutput>MeshCriteriaWithFeatures_3</computeroutput> if the domain has exposed features. The argument <computeroutput>criteria</computeroutput> of type <computeroutput>MC</computeroutput> specifies the size and shape requirements for mesh tetrahedra and surface facets. These criteria form the rules which drive the refinement process. All mesh elements satisfy those criteria at the end of the refinement process. In addition, if the domain has features, the argument <computeroutput>criteria</computeroutput> provides a sizing field to guide the discretization of 1-dimensional exposed features.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c3t3</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh to be refined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain to be discretized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>criteria</parametername>
</parameternamelist>
<parameterdescription>
<para>the criteria </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The following four parameters are optional optimization parameters. They control which optimization processes are performed and allow the user to tune the parameters of the optimization processes. Individual optimization parameters are not described here as they are internal types (see instead the documentation page of each optimizer). For each optimization algorithm, there exist two global functions that allow to enable or disable the optimizer:</para>
<para><variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Topological options (manifoldness)</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>In order to drive the meshing algorithm and ensure that the output mesh follows a desired topological criterion, three named parameters control this option: <itemizedlist>
<listitem>
<para><computeroutput>parameters::manifold()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::manifold_with_boundary()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::non_manifold()</computeroutput> </para>
</listitem>
</itemizedlist>
Note that the meshing algorithm cannot generate a manifold surface if the input surface is not manifold. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::non_manifold()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Lloyd optimization</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput>lloyd_optimize_mesh_3()</computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput>parameters::no_lloyd()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::lloyd_optimize_mesh_3()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::no_lloyd()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>ODT optimization</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput>odt_optimize_mesh_3()</computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput>parameters::no_odt()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::odt()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::no_odt()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Mesh perturbation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput>perturb_mesh_3()</computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput>parameters::no_perturb()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::perturb()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::perturb()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Mesh exudation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput>exude_mesh_3()</computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput>parameters::exude()</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::no_exude()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::exude()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>The optimization parameters can be passed in arbitrary order. If one parameter is not passed, its default value is used. The default values are <computeroutput>no_lloyd()</computeroutput>, <computeroutput>no_odt()</computeroutput>, <computeroutput>perturb()</computeroutput> and <computeroutput>exude()</computeroutput>. Note that whatever may be the optimization processes activated, they are always launched in the order that is a suborder of the following (see user manual for further details): <emphasis>ODT-smoother</emphasis>, <emphasis>Lloyd-smoother</emphasis>, <emphasis>perturber</emphasis>, and <emphasis>exuder</emphasis>.</para>
<para>Beware that optimization of the mesh is obtained by perturbing mesh vertices and modifying the mesh connectivity and that this has an impact on the strict compliance to the refinement criteria. Though a strict compliance to mesh criteria is guaranteed at the end of the Delaunay refinement, this may no longer be true after some optimization processes. Also beware that the default behavior does involve some optimization processes.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga7ac2b13ce0dc57f8f71b433c93bdeb92" kindref="member">make_periodic_3_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>refine_mesh_3()</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga7ec880a4221112f9ca8d21991d8d0d85" kindref="member">exude_periodic_3_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga29a288e8cc1ccb1c6936ce64172cfe07" kindref="member">perturb_periodic_3_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga01c2b1395e4838ae574333f12a381d33" kindref="member">lloyd_optimize_periodic_3_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1gae6535eade5e2f705ead86bfd07560ff4" kindref="member">odt_optimize_periodic_3_mesh_3()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/refine_periodic_3_mesh_3.h" line="363" column="6" bodyfile="CGAL/refine_periodic_3_mesh_3.h" bodystart="363" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPeriodic3Mesh3Functions_1ga29a288e8cc1ccb1c6936ce64172cfe07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::perturb_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>perturb_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::perturb_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga29a288e8cc1ccb1c6936ce64172cfe07" kindref="member">perturb_periodic_3_mesh_3()</ref></computeroutput> is a mesh optimizer that improves the quality of a Delaunay mesh by changing the positions of some vertices of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This function directly calls <computeroutput>perturb_mesh_3()</computeroutput>, but is provided for convenience. Further information can be found in the documentation of the function <computeroutput>perturb_mesh_3()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="37" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="optimize__periodic__3__mesh__3_8h_1a707c5b03e4d06b31d62af4379faa1ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_1</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>NP</declname>
            <defname>NP</defname>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::perturb_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters1 &amp;np1, const NamedParameters2 &amp;np2, const NP &amp;... nps)</argsstring>
        <name>perturb_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::perturb_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
        </param>
        <param>
          <type>const NP &amp;...</type>
          <declname>nps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="53" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="optimize__periodic__3__mesh__3_8h_1abaa85b69b1a0f7afc85169484d8f7dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_1</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>NP</declname>
            <defname>NP</defname>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::perturb_periodic_3_mesh_3</definition>
        <argsstring>(const NamedParameters1 &amp;np1, const NamedParameters2 &amp;np2, const NP &amp;... nps)</argsstring>
        <name>perturb_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::perturb_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
        </param>
        <param>
          <type>const NP &amp;...</type>
          <declname>nps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="64" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPeriodic3Mesh3Functions_1ga7ec880a4221112f9ca8d21991d8d0d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::exude_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>exude_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::exude_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga7ec880a4221112f9ca8d21991d8d0d85" kindref="member">exude_periodic_3_mesh_3()</ref></computeroutput> performs a sliver exudation process on a periodic Delaunay mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The sliver exudation process consists in optimizing the weights of vertices of the periodic weighted Delaunay triangulation in such a way that slivers disappear and the quality of the mesh improves.</para>
<para><simplesect kind="warning"><para>This optimizer modifies the weight of vertices of the periodic triangulation and, if called, must be the last optimizer to be called. If the mesh is refined after this optimization has been performed, all improvements will be lost.</para>
</simplesect>
This function directly calls <computeroutput>exude_mesh_3()</computeroutput>, but is provided for convenience. Further information can be found in the documentation of the function <computeroutput>exude_mesh_3()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="90" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="optimize__periodic__3__mesh__3_8h_1a2709972914b3cd8314a15079d6a90463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_1</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>NP</declname>
            <defname>NP</defname>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::exude_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const NamedParameters1 &amp;np1, const NamedParameters2 &amp;np2, const NP &amp;... nps)</argsstring>
        <name>exude_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::exude_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
        </param>
        <param>
          <type>const NP &amp;...</type>
          <declname>nps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="103" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="optimize__periodic__3__mesh__3_8h_1acd657d54a78e8bd21d512ee37b890dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_1</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>NP</declname>
            <defname>NP</defname>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::exude_periodic_3_mesh_3</definition>
        <argsstring>(const NamedParameters1 &amp;np1, const NamedParameters2 &amp;np2, const NP &amp;... nps)</argsstring>
        <name>exude_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::exude_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
        </param>
        <param>
          <type>const NP &amp;...</type>
          <declname>nps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="114" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPeriodic3Mesh3Functions_1gae6535eade5e2f705ead86bfd07560ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::odt_optimize_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>odt_optimize_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::odt_optimize_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1gae6535eade5e2f705ead86bfd07560ff4" kindref="member">odt_optimize_periodic_3_mesh_3()</ref></computeroutput> is a periodic mesh optimization process based on the minimization of a global energy function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function directly calls <computeroutput>odt_optimize_mesh_3()</computeroutput>, but is provided for convenience. Further information can be found in the documentation of the function <computeroutput>odt_optimize_mesh_3()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="134" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="134" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="optimize__periodic__3__mesh__3_8h_1a30298911e3e520c782b5e34a2dcd0469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_1</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>NP</declname>
            <defname>NP</defname>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::odt_optimize_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters1 &amp;np1, const NamedParameters2 &amp;np2, const NP &amp;... nps)</argsstring>
        <name>odt_optimize_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::odt_optimize_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
        </param>
        <param>
          <type>const NP &amp;...</type>
          <declname>nps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="151" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="151" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="optimize__periodic__3__mesh__3_8h_1afe980a570692693a89c08a6b0942c183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_1</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>NP</declname>
            <defname>NP</defname>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::odt_optimize_periodic_3_mesh_3</definition>
        <argsstring>(const NamedParameters1 &amp;np1, const NamedParameters2 &amp;np2, const NP &amp;... nps)</argsstring>
        <name>odt_optimize_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::odt_optimize_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
        </param>
        <param>
          <type>const NP &amp;...</type>
          <declname>nps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="162" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="162" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPeriodic3Mesh3Functions_1ga01c2b1395e4838ae574333f12a381d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::lloyd_optimize_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>lloyd_optimize_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::lloyd_optimize_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPeriodic3Mesh3Functions_1ga01c2b1395e4838ae574333f12a381d33" kindref="member">lloyd_optimize_periodic_3_mesh_3()</ref></computeroutput> is a periodic mesh optimization process based on the minimization of a global energy function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function directly calls <computeroutput>lloyd_optimize_mesh_3()</computeroutput>, but is provided for convenience. Further information can be found in the documentation of the function <computeroutput>lloyd_optimize_mesh_3()</computeroutput>.</para>
<para><simplesect kind="note"><para>This function requires the thirdpartyEigen library. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="183" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="183" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="optimize__periodic__3__mesh__3_8h_1ac691be5d56bb0ae5ffd696c3b21d43f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_1</type>
          </param>
          <param>
            <type>typename CGAL_NP_TEMPLATE_PARAMETERS_NO_DEFAULT_2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>NP</declname>
            <defname>NP</defname>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::lloyd_optimize_periodic_3_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters1 &amp;np1, const NamedParameters2 &amp;np2, const NP &amp;... nps)</argsstring>
        <name>lloyd_optimize_periodic_3_mesh_3</name>
        <qualifiedname>CGAL::lloyd_optimize_periodic_3_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
        </param>
        <param>
          <type>const NP &amp;...</type>
          <declname>nps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/optimize_periodic_3_mesh_3.h" line="200" column="31" bodyfile="CGAL/optimize_periodic_3_mesh_3.h" bodystart="200" bodyend="206"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Implicit_to_labeled_subdomains_function_wrapper.h" line="1" column="1"/>
  </compounddef>
</doxygen>
