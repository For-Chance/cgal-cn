<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Classification::ETHZ::Random_forest_classifier</compoundname>
    <includes local="no">CGAL/Classification/ETHZ/Random_forest_classifier.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructor</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a00e008525de50576c0eb5ad58fd72fd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Classification::ETHZ::Random_forest_classifier::Random_forest_classifier</definition>
        <argsstring>(const Label_set &amp;labels, const Feature_set &amp;features)</argsstring>
        <name>Random_forest_classifier</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::Random_forest_classifier</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Feature__set" kindref="compound">Feature_set</ref> &amp;</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>instantiates the classifier using the sets of <computeroutput>labels</computeroutput> and <computeroutput>features</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="87" column="3" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a815c273ef39f5b60c3fa63be46c4b796" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Classification::ETHZ::Random_forest_classifier::Random_forest_classifier</definition>
        <argsstring>(const Random_forest_classifier &amp;other, const Feature_set &amp;features)</argsstring>
        <name>Random_forest_classifier</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::Random_forest_classifier</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier" kindref="compound">Random_forest_classifier</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Classification_1_1Feature__set" kindref="compound">Feature_set</ref> &amp;</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>copies the <computeroutput>other</computeroutput> classifier&apos;s configuration using another set of <computeroutput>features</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor can be used to apply a trained random forest to another data set.</para>
<para><simplesect kind="warning"><para>The feature set should be composed of the same features than the ones used by <computeroutput>other</computeroutput>, and in the same order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="106" column="3" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="106" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Training</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a7c0b299cb5829f598f395bcc16df72fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename LabelIndexRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Classification::ETHZ::Random_forest_classifier::train</definition>
        <argsstring>(const LabelIndexRange &amp;ground_truth, bool reset_trees=true, std::size_t num_trees=25, std::size_t max_depth=20)</argsstring>
        <name>train</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::train</qualifiedname>
        <param>
          <type>const LabelIndexRange &amp;</type>
          <declname>ground_truth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset_trees</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>num_trees</declname>
          <defval>25</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>max_depth</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>runs the training algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>From the set of provided ground truth, this algorithm estimates sets up the random trees that produce the most accurate result with respect to this ground truth.</para>
<para><simplesect kind="pre"><para>At least one ground truth item should be assigned to each label.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput> (default value if CGAL is linked with TBB) or <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput> (default value otherwise).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of label indices. It should contain for each input item, in the same order as the input set, the index of the corresponding label in the <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref></computeroutput> provided in the constructor. Input items that do not have a ground truth information should be given the value <computeroutput>-1</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset_trees</parametername>
</parameternamelist>
<parameterdescription>
<para>should be set to <computeroutput>false</computeroutput> if the users wants to <emphasis>add</emphasis> new trees to the existing forest, and kept to <computeroutput>true</computeroutput> if the training should be recomputing from scratch (discarding the current forest).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_trees</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trees generated by the training algorithm. Higher values may improve result at the cost of higher computation times (in general, using a few dozens of trees is enough).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum depth of the trees. Higher values will improve how the forest fits the training set. A overly low value will underfit the test data and conversely an overly high value will likely overfit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="169" column="8" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="169" bodyend="222"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1abe9644d1a58e2973b92f3cdb0c5a8afd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::ETHZ::Random_forest_classifier::get_feature_usage</definition>
        <argsstring>(std::vector&lt; std::size_t &gt; &amp;count) const</argsstring>
        <name>get_feature_usage</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::get_feature_usage</qualifiedname>
        <param>
          <type>std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>computes, for each feature, how many nodes in the forest uses it as a split criterion. </para>
        </briefdescription>
        <detaileddescription>
<para>Each tree of the random forest recursively splits the training data set using at each node one of the input features. This method counts, for each feature, how many times it was selected by the training algorithm as a split criterion.</para>
<para>This method allows to evaluate how useful a feature was with respect to a training set: if a feature is used a lot, that means that it has a strong discriminative power with respect to how the labels are represented by the feature set; on the contrary, if a feature is not used very often, its discriminative power is probably low; if a feature is <emphasis>never</emphasis> used, it likely has no interest at all and is completely uncorrelated to the label segmentation of the training set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>vector where the result is stored. After running the method, it contains, for each feature, the number of nodes in the forest that use it as a split criterion, in the same order as the feature set order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="272" column="8" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="272" bodyend="277"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Input/Output</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a97a454d404c7fa4ba4f8d9eda3fc718b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::ETHZ::Random_forest_classifier::save_configuration</definition>
        <argsstring>(std::ostream &amp;output) const</argsstring>
        <name>save_configuration</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::save_configuration</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>saves the current configuration in the stream <computeroutput>output</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows to easily save and recover a specific classification configuration.</para>
<para>The output file is written in a binary format that is readable by the <computeroutput><ref refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a932c1f927f3e7fc603b5c92acdeda19f" kindref="member">load_configuration()</ref></computeroutput> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="293" column="8" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a932c1f927f3e7fc603b5c92acdeda19f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::ETHZ::Random_forest_classifier::load_configuration</definition>
        <argsstring>(std::istream &amp;input)</argsstring>
        <name>load_configuration</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::load_configuration</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>loads a configuration from the stream <computeroutput>input</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The input file should be a binary file written by the <computeroutput><ref refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a97a454d404c7fa4ba4f8d9eda3fc718b" kindref="member">save_configuration()</ref></computeroutput> method. The feature set of the classifier should contain the exact same features in the exact same order as the ones present when the file was generated using <computeroutput><ref refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a97a454d404c7fa4ba4f8d9eda3fc718b" kindref="member">save_configuration()</ref></computeroutput>.</para>
<para><simplesect kind="warning"><para>If the file you are trying to load was saved using <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> 5.1 or earlier, you have to convert it first using <computeroutput><ref refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a99154673a7b517e7d141e6d3678a65c8" kindref="member">convert_deprecated_configuration_to_new_format()</ref></computeroutput> as the exchange format for <ref refid="namespaceCGAL_1_1Classification_1_1ETHZ" kindref="compound">ETHZ</ref> Random Forest changed in <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> 5.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="313" column="8" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="313" bodyend="319"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Deprecated Input/Output</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a99154673a7b517e7d141e6d3678a65c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void CGAL::Classification::ETHZ::Random_forest_classifier::convert_deprecated_configuration_to_new_format</definition>
        <argsstring>(std::istream &amp;input, std::ostream &amp;output)</argsstring>
        <name>convert_deprecated_configuration_to_new_format</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::convert_deprecated_configuration_to_new_format</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>converts a deprecated configuration (in compressed ASCII format) to a new configuration (in binary format). </para>
        </briefdescription>
        <detaileddescription>
<para>The input file should be a GZIP container written by the <computeroutput><ref refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a97a454d404c7fa4ba4f8d9eda3fc718b" kindref="member">save_configuration()</ref></computeroutput> method from <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> 5.1 and earlier. The output is a valid configuration for <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> 5.2 and later.</para>
<para><simplesect kind="note"><para>This function depends on the Boost libraries <ulink url="https://www.boost.org/libs/serialization">Serialization</ulink> and <ulink url="https://www.boost.org/libs/iostreams">IO Streams</ulink> (compiled with the GZIP dependency). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="341" column="15" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="341" bodyend="348"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1aed8366608bbc64087e6b36fe4bc0eaaf" prot="private" static="no">
        <type>CGAL::internal::liblearning::RandomForest::RandomForest&lt; CGAL::internal::liblearning::RandomForest::NodeGini&lt; CGAL::internal::liblearning::RandomForest::AxisAlignedSplitter &gt; &gt;</type>
        <definition>typedef CGAL::internal::liblearning::RandomForest::RandomForest&lt; CGAL::internal::liblearning::RandomForest::NodeGini &lt; CGAL::internal::liblearning::RandomForest::AxisAlignedSplitter&gt; &gt; CGAL::Classification::ETHZ::Random_forest_classifier::Forest</definition>
        <argsstring></argsstring>
        <name>Forest</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::Forest</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="72" column="2" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1abac0a6f9114f2312c0a3bbafee204980" prot="private" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Classification_1_1Label__set" kindref="compound">Label_set</ref> &amp;</type>
        <definition>const Label_set&amp; CGAL::Classification::ETHZ::Random_forest_classifier::m_labels</definition>
        <argsstring></argsstring>
        <name>m_labels</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::m_labels</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="74" column="19" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1af9ce607c3c7ed71f4980334ab9551e20" prot="private" static="no" mutable="no">
        <type>const <ref refid="classCGAL_1_1Classification_1_1Feature__set" kindref="compound">Feature_set</ref> &amp;</type>
        <definition>const Feature_set&amp; CGAL::Classification::ETHZ::Random_forest_classifier::m_features</definition>
        <argsstring></argsstring>
        <name>m_features</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::m_features</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="75" column="21" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1aad318b832dd5c9515bb77185a33e894d" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; Forest &gt;</type>
        <definition>std::shared_ptr&lt;Forest&gt; CGAL::Classification::ETHZ::Random_forest_classifier::m_rfc</definition>
        <argsstring></argsstring>
        <name>m_rfc</name>
        <qualifiedname>CGAL::Classification::ETHZ::Random_forest_classifier::m_rfc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="76" column="19" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Classifier based on the ETH Zurich version of the random forest algorithm <ref refid="citelist_1CITEREF_cgal:w-erftl-14" kindref="member">[2]</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This classifier is distributed under the MIT license.</para>
</simplesect>
<variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Classification_1_1Classifier" kindref="compound">CGAL::Classification::Classifier</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="CGAL/Classification/ETHZ/Random_forest_classifier.h" line="68" column="1" bodyfile="CGAL/Classification/ETHZ/Random_forest_classifier.h" bodystart="69" bodyend="371"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a99154673a7b517e7d141e6d3678a65c8" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>convert_deprecated_configuration_to_new_format</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1aed8366608bbc64087e6b36fe4bc0eaaf" prot="private" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>Forest</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1abe9644d1a58e2973b92f3cdb0c5a8afd" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>get_feature_usage</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a932c1f927f3e7fc603b5c92acdeda19f" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>load_configuration</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1af9ce607c3c7ed71f4980334ab9551e20" prot="private" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>m_features</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1abac0a6f9114f2312c0a3bbafee204980" prot="private" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>m_labels</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1aad318b832dd5c9515bb77185a33e894d" prot="private" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>m_rfc</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a00e008525de50576c0eb5ad58fd72fd1" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>Random_forest_classifier</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a815c273ef39f5b60c3fa63be46c4b796" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>Random_forest_classifier</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a97a454d404c7fa4ba4f8d9eda3fc718b" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>save_configuration</name></member>
      <member refid="classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier_1a7c0b299cb5829f598f395bcc16df72fa" prot="public" virt="non-virtual"><scope>CGAL::Classification::ETHZ::Random_forest_classifier</scope><name>train</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
