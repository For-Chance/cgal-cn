<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Classification_1_1Label__set" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Classification::Label_set</compoundname>
    <includes local="no">CGAL/Classification/Label_set.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1a9e73846e2e4e57208b7193682387c904" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Classification::Label_set::Label_set</definition>
        <argsstring>()</argsstring>
        <name>Label_set</name>
        <qualifiedname>CGAL::Classification::Label_set::Label_set</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="55" column="3" bodyfile="CGAL/Classification/Label_set.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1ab86e54d75a3132ac90842bb6b71fd710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Classification::Label_set::Label_set</definition>
        <argsstring>(std::initializer_list&lt; const char * &gt; labels)</argsstring>
        <name>Label_set</name>
        <qualifiedname>CGAL::Classification::Label_set::Label_set</qualifiedname>
        <param>
          <type>std::initializer_list&lt; const char * &gt;</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
<para>constructs a label set from a set of label names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="60" column="3" bodyfile="CGAL/Classification/Label_set.h" bodystart="60" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifications</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1afaa0d2e86c20b0c7ef19ce5e3f6b1104" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Classification_1_1Label__handle" kindref="compound">Label_handle</ref></type>
        <definition>Label_handle CGAL::Classification::Label_set::add</definition>
        <argsstring>(const char *name, CGAL::IO::Color color, std::size_t standard_index=-1)</argsstring>
        <name>add</name>
        <qualifiedname>CGAL::Classification::Label_set::add</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1IO_1_1Color" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">CGAL::IO::Color</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>standard_index</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>adds a label. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Names, standard indices and colors are not used for identification: two labels in the same set can have the same name, standard index or color, but not the same handle. Each call to <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__set_1afaa0d2e86c20b0c7ef19ce5e3f6b1104" kindref="member">add()</ref></computeroutput> generates a new distinct label.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the label.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>used to represent the label.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>standard_index</parametername>
</parameternamelist>
<parameterdescription>
<para>standard index of the classification label (i.e. index in the ASPRS standard).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a handle to the newly added label. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="88" column="16" bodyfile="CGAL/Classification/Label_set.h" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1afdf6883410267aba7fcbb146d10e98f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Classification_1_1Label__handle" kindref="compound">Label_handle</ref></type>
        <definition>Label_handle CGAL::Classification::Label_set::add</definition>
        <argsstring>(const char *name)</argsstring>
        <name>add</name>
        <qualifiedname>CGAL::Classification::Label_set::add</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>adds a label with default standard index and color. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions tries to map label names to standard ASPRS labels and automatically picks the <computeroutput>standard_index</computeroutput> and <computeroutput>color</computeroutput> of the label:</para>
<para><itemizedlist>
<listitem><para><computeroutput>&quot;unassigned&quot;</computeroutput> is given standard index 2 and color <computeroutput>(0, 0, 0)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;ground&quot;</computeroutput> is given standard index 2 and color <computeroutput>(186, 189, 182)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;low_vegetation&quot;</computeroutput> is given standard index 3 and color <computeroutput>(78, 154, 6)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;medium_vegetation&quot;</computeroutput> is given standard index 4 and color <computeroutput>(138, 226, 52)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;high_vegetation&quot;</computeroutput> is given standard index 5 and color <computeroutput>(204, 255, 201)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;building&quot;</computeroutput> is given standard index 6 and color <computeroutput>(245, 121, 0)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;noise&quot;</computeroutput> is given standard index 7 and color <computeroutput>(128, 0, 0)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;reserved&quot;</computeroutput> is given standard index 8 and color <computeroutput>(233, 185, 110)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;water&quot;</computeroutput> is given standard index 9 and color <computeroutput>(114, 159, 207)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;rail&quot;</computeroutput> is given standard index 10 and color <computeroutput>(136, 46, 25)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;road_surface&quot;</computeroutput> is given standard index 11 and color <computeroutput>(56, 56, 56)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;reserved_2&quot;</computeroutput> is given standard index 12 and color <computeroutput>(193, 138, 51)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;wire_guard&quot;</computeroutput> is given standard index 13 and color <computeroutput>(37, 61, 136)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;wire_conductor&quot;</computeroutput> is given standard index 14 and color <computeroutput>(173, 127, 168)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;transmission_tower&quot;</computeroutput> is given standard index 15 and color <computeroutput>(136, 138, 133)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;wire_connect&quot;</computeroutput> is given standard index 16 and color <computeroutput>(145, 64, 236)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;bridge_deck&quot;</computeroutput> is given standard index 17 and color <computeroutput>(213, 93, 93)</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;high_noise&quot;</computeroutput> is given standard index 18 and color <computeroutput>(255, 0, 0)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>If the name is not found, the label is given standard index <computeroutput>std::size_t(-1)</computeroutput> and a random color.</para>
<para><simplesect kind="note"><para>Names are not used for identification: two labels in the same set can have the same name but not the same handle. Each call to <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__set_1afaa0d2e86c20b0c7ef19ce5e3f6b1104" kindref="member">add()</ref></computeroutput> generates a new distinct label.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the label.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a handle to the newly added label. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="136" column="16" bodyfile="CGAL/Classification/Label_set.h" bodystart="136" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1a3e237793f3bd289b130ff39039b89443" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Classification::Label_set::remove</definition>
        <argsstring>(Label_handle label)</argsstring>
        <name>remove</name>
        <qualifiedname>CGAL::Classification::Label_set::remove</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Classification_1_1Label__handle" kindref="compound">Label_handle</ref></type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>removes a label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle to the label that must be removed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the label was correctly removed, <computeroutput>false</computeroutput> if its handle was not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="217" column="8" bodyfile="CGAL/Classification/Label_set.h" bodystart="217" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1a172acf399f2b5e3ca8fc5521932c0d41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Classification::Label_set::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::Classification::Label_set::clear</qualifiedname>
        <briefdescription>
<para>removes all labels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="233" column="8" bodyfile="CGAL/Classification/Label_set.h" bodystart="233" bodyend="236"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1a303876a713af05889ff6488de9817e2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Classification_1_1Label__set_1a43b4d644d5b8369333782482fe31c70a" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Classification::Label_set::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>CGAL::Classification::Label_set::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="244" column="18" bodyfile="CGAL/Classification/Label_set.h" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1ac4c7add32e8306d02d361d662b062999" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Classification_1_1Label__set_1a02e0bbc313467b0a1a154cf9d5a6fded" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Classification::Label_set::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>CGAL::Classification::Label_set::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="245" column="12" bodyfile="CGAL/Classification/Label_set.h" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1a7d0c086432882775f5ab997e36ef4001" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Classification_1_1Label__set_1a43b4d644d5b8369333782482fe31c70a" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CGAL::Classification::Label_set::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>CGAL::Classification::Label_set::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="246" column="18" bodyfile="CGAL/Classification/Label_set.h" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1af616d8bd5ea326fc5d7130326aaf1407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Classification_1_1Label__set_1a02e0bbc313467b0a1a154cf9d5a6fded" kindref="member">iterator</ref></type>
        <definition>iterator CGAL::Classification::Label_set::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>CGAL::Classification::Label_set::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="247" column="12" bodyfile="CGAL/Classification/Label_set.h" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1a10a122580143de44adc9758e2eb88046" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Classification::Label_set::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>CGAL::Classification::Label_set::size</qualifiedname>
        <briefdescription>
<para>returns how many labels are defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="252" column="15" bodyfile="CGAL/Classification/Label_set.h" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1a49d57a3e6886297116a3b378ef15ad58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Classification_1_1Label__handle" kindref="compound">Label_handle</ref></type>
        <definition>Label_handle CGAL::Classification::Label_set::operator[]</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>CGAL::Classification::Label_set::operator[]</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the <formula id="3">$i^{th}$</formula> label. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="260" column="16" bodyfile="CGAL/Classification/Label_set.h" bodystart="260" bodyend="263"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Validity</header>
      <memberdef kind="function" id="classCGAL_1_1Classification_1_1Label__set_1adeb3b046f640c091b1f123e982386e43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LabelIndexRange</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Classification::Label_set::is_valid_ground_truth</definition>
        <argsstring>(const LabelIndexRange &amp;ground_truth, bool verbose=false) const</argsstring>
        <name>is_valid_ground_truth</name>
        <qualifiedname>CGAL::Classification::Label_set::is_valid_ground_truth</qualifiedname>
        <param>
          <type>const LabelIndexRange &amp;</type>
          <declname>ground_truth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>checks the validity of the ground truth with respect to the label set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>range of label indices. This function checks that all these indices are either -1 (for unclassified) or a valid index of one of the labels. If at least one of the indices is out of range, this function returns <computeroutput>false</computeroutput>, otherwise it returns <computeroutput>true</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to <computeroutput>true</computeroutput>, the number of inliers of each label, the number of unclassified items and the potential number of out-of-range items are displayed. Otherwise, this function does not display anything. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="286" column="8" bodyfile="CGAL/Classification/Label_set.h" bodystart="286" bodyend="324"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1Classification_1_1Label__set_1aee650ac2b806555d59fc340896c196e8" prot="private" static="no">
        <type>std::vector&lt; <ref refid="classCGAL_1_1Classification_1_1Label__handle" kindref="compound">Label_handle</ref> &gt;</type>
        <definition>using CGAL::Classification::Label_set::Base =  std::vector&lt;Label_handle&gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <qualifiedname>CGAL::Classification::Label_set::Base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="37" column="3" bodyfile="CGAL/Classification/Label_set.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCGAL_1_1Classification_1_1Label__set_1a43b4d644d5b8369333782482fe31c70a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Classification::Label_set::const_iterator =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>CGAL::Classification::Label_set::const_iterator</qualifiedname>
        <briefdescription>
<para>A random access constant iterator with value type <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__handle" kindref="compound">Label_handle</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="45" column="3" bodyfile="CGAL/Classification/Label_set.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Classification_1_1Label__set_1a02e0bbc313467b0a1a154cf9d5a6fded" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using CGAL::Classification::Label_set::iterator =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>CGAL::Classification::Label_set::iterator</qualifiedname>
        <briefdescription>
<para>A random access iterator with value type <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label__handle" kindref="compound">Label_handle</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="46" column="3" bodyfile="CGAL/Classification/Label_set.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1Label__set_1a079493dc3ed1ad1ea16fc460e78eb0ce" prot="private" static="no" mutable="no">
        <type>CGAL::Random</type>
        <definition>CGAL::Random CGAL::Classification::Label_set::m_random</definition>
        <argsstring></argsstring>
        <name>m_random</name>
        <qualifiedname>CGAL::Classification::Label_set::m_random</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="39" column="16" bodyfile="CGAL/Classification/Label_set.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Classification_1_1Label__set_1a9acc91a0e919bf0f23aa071658a109be" prot="private" static="no" mutable="no">
        <type>Base</type>
        <definition>Base CGAL::Classification::Label_set::m_labels</definition>
        <argsstring></argsstring>
        <name>m_labels</name>
        <qualifiedname>CGAL::Classification::Label_set::m_labels</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Classification/Label_set.h" line="40" column="8" bodyfile="CGAL/Classification/Label_set.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>sets of <computeroutput><ref refid="classCGAL_1_1Classification_1_1Label" kindref="compound">Label</ref></computeroutput> used as input by classification algorithms. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Classification/Label_set.h" line="35" column="1" bodyfile="CGAL/Classification/Label_set.h" bodystart="36" bodyend="328"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1afaa0d2e86c20b0c7ef19ce5e3f6b1104" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>add</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1afdf6883410267aba7fcbb146d10e98f8" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>add</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1aee650ac2b806555d59fc340896c196e8" prot="private" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>Base</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a303876a713af05889ff6488de9817e2e" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1ac4c7add32e8306d02d361d662b062999" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>begin</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a172acf399f2b5e3ca8fc5521932c0d41" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a43b4d644d5b8369333782482fe31c70a" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>const_iterator</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a7d0c086432882775f5ab997e36ef4001" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>end</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1af616d8bd5ea326fc5d7130326aaf1407" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>end</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1adeb3b046f640c091b1f123e982386e43" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>is_valid_ground_truth</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a02e0bbc313467b0a1a154cf9d5a6fded" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>iterator</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a9e73846e2e4e57208b7193682387c904" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>Label_set</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1ab86e54d75a3132ac90842bb6b71fd710" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>Label_set</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a9acc91a0e919bf0f23aa071658a109be" prot="private" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>m_labels</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a079493dc3ed1ad1ea16fc460e78eb0ce" prot="private" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>m_random</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a49d57a3e6886297116a3b378ef15ad58" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>operator[]</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a3e237793f3bd289b130ff39039b89443" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Classification_1_1Label__set_1a10a122580143de44adc9758e2eb88046" prot="public" virt="non-virtual"><scope>CGAL::Classification::Label_set</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
