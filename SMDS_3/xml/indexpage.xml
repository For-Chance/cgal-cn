<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1Chapter_3D_Simplicial_Mesh_Data_Structure"/><anchor id="index_1userchaptersmds3"/><simplesect kind="authors"><para>Pierre Alliez, Clément Jamin, Laurent Rineau, Stéphane Tayeb, Jane Tournois, Mariette Yvinec <htmlonly block="yes"> &lt;div id=&quot;autotoc&quot; class=&quot;toc&quot;&gt;&lt;/div&gt; </htmlonly></para>
</simplesect>
<anchor id="index_1fig__figure_tetmesh_knot"/> <image type="html" name="knot_full.jpg"></image>
 <image type="latex" name="knot_full.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figure_tetmesh_knot" kindref="member">fig__figure_tetmesh_knot</ref> A multi-domain tetrahedral mesh generated from a polyhedral surface with multiple surface patches. The complete triangulation is displayed, including cells that belong or do not belong to the mesh complex, surface patches, and feature edges. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<sect1 id="index_1SMDS_3_section_c3t3">
<title>Mesh Complex</title>
<para>This package is devoted to the representation of 3-Dimensional simplicial mesh data structures.</para>
<para>A 3D simplicial complex is composed of points, line segments, triangles, tetrahedra, and their corresponding combinatorial description (namely vertices, edges, faces and cells). <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> provides 3D triangulations, that describe both the geometry and connectivity of a 3D simplicial complex, implemented in the the <ref refid="packages_1PkgTriangulation3" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">3D Triangulations</ref> and <ref refid="packages_1PkgTDS3" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">3D Triangulation Data Structure</ref> packages.</para>
<para>We introduce the concept of <emphasis>mesh</emphasis> <emphasis>complex</emphasis>, that encodes extra information on top of a 3D triangulation to represent a valid simplicial complex. A mesh complex describes four subcomplexes of simplices of the support 3D triangulation, per dimension from 0 to 3:<itemizedlist>
<listitem><para>corner vertices (0D),</para>
</listitem><listitem><para>feature edges (1D),</para>
</listitem><listitem><para>surface facets (2D),</para>
</listitem><listitem><para>domain cells (3D). See Figure <ref refid="index_1fig__figure_c3t3_cells" kindref="member">fig__figure_c3t3_cells</ref>.</para>
</listitem></itemizedlist>
</para>
<para>The concept <computeroutput><ref refid="classMeshComplex__3InTriangulation__3" kindref="compound">MeshComplex_3InTriangulation_3</ref></computeroutput> is a data structure devised to represent these three-dimensional complexes embedded in a <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_3.tag">Triangulation_3</ref></computeroutput>.</para>
<para><anchor id="index_1fig__figure_c3t3_cells"/> <image type="html" name="c3t3_cells.jpg"></image>
 <image type="latex" name="c3t3_cells.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figure_c3t3_cells" kindref="member">fig__figure_c3t3_cells</ref> (Left and Middle) A multi-domain 3D mesh is represented by its tetrahedral cells, with subdomain indices, and surface indices (depicted with different colors here). (Right) The underlying <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_3.tag">Triangulation_3</ref></computeroutput> triangulates the whole convex hull of its vertices. The cells that lie outside the meshing domain are drawn in wire frame. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect1>
<sect1 id="index_1SMDS_3_section_examples">
<title>Examples</title>
<sect2 id="index_1TetSoupExample">
<title>From Tetrahedron Soup to Triangulation_3</title>
<para>In the first example of this section, we build a random <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_3.tag">Delaunay_triangulation_3</ref></computeroutput> and use it to build a consistent though connectivity-free tetrahedron soup. The tetrahedron soup is then put back together in a <computeroutput><ref refid="classCGAL_1_1Tetrahedral__remeshing_1_1Remeshing__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Tetrahedral_remeshing.tag">CGAL::Tetrahedral_remeshing::Remeshing_triangulation_3</ref></computeroutput> before being set as the reference triangulation of a <computeroutput><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound">Mesh_complex_3_in_triangulation_3</ref></computeroutput>.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="SMDS_3_2tetrahedron_soup_to_c3t3_example_8cpp-example" kindref="compound">SMDS_3/tetrahedron_soup_to_c3t3_example.cpp</ref> <programlisting filename="SMDS_3/tetrahedron_soup_to_c3t3_example.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Delaunay_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Tetrahedral_remeshing/Remeshing_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/tetrahedron_soup_to_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">K<sp/>=<sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">DT3<sp/>=<sp/><ref refid="classCGAL_1_1Delaunay__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_3.tag">CGAL::Delaunay_triangulation_3&lt;K&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Remeshing_triangulation<sp/>=<sp/><ref refid="classCGAL_1_1Tetrahedral__remeshing_1_1Remeshing__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Tetrahedral_remeshing.tag">CGAL::Tetrahedral_remeshing::Remeshing_triangulation_3&lt;K&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">C3T3<sp/>=<sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound">CGAL::Mesh_complex_3_in_triangulation_3&lt;Remeshing_triangulation&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref><sp/>=<sp/>K::Point_3;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classCGAL_1_1Tetrahedron__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Tetrahedron_3</ref><sp/>=<sp/>K::Tetrahedron_3;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Vertex_handle<sp/>=<sp/>DT3::Vertex_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Subdomain_index<sp/>=<sp/>C3T3::Subdomain_index;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbv<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//a<sp/>triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DT3<sp/>delaunay;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::unordered_map&lt;Vertex_handle,<sp/>int&gt;<sp/>v2i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;DT3::Point&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points(nbv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Tetrahedron_3&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tetrahedra;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;std::array&lt;int,<sp/>4&gt;<sp/>&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tets_by_indices;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>Subdomain_index&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomains;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//insert<sp/>random<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL::Random_points_in_cube_3&lt;Point_3&gt;<sp/>randp(2.);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nbv)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points[i]<sp/>=<sp/>*randp++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Vertex_handle<sp/>v<sp/>=<sp/>delaunay.insert(points[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v2i[v]<sp/>=<sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tetrahedra.reserve(delaunay.number_of_finite_cells());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tets_by_indices.reserve(delaunay.number_of_finite_cells());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>subdomains.reserve(delaunay.number_of_finite_cells());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(DT3::Cell_handle<sp/>c<sp/>:<sp/>delaunay.finite_cell_handles())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tetrahedra.push_back(delaunay.tetrahedron(c));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tets_by_indices.push_back(<sp/>{<sp/>v2i.at(c-&gt;vertex(0)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2i.at(c-&gt;vertex(1)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2i.at(c-&gt;vertex(2)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2i.at(c-&gt;vertex(3))<sp/>}<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subdomains.push_back(Subdomain_index(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>triangulation<sp/>from<sp/>tetrahedra</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Remeshing_triangulation<sp/>tr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>CGAL::tetrahedron_soup_to_triangulation_3&lt;Remeshing_triangulation&gt;(tetrahedra);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>triangulation<sp/>from<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Remeshing_triangulation<sp/>tr2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>CGAL::tetrahedron_soup_to_triangulation_3&lt;Remeshing_triangulation&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points,<sp/>tets_by_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CGAL::parameters::subdomain_indices(std::cref(subdomains)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>a<sp/>C3T3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3T3<sp/>c3t3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c3t3.triangulation()<sp/>=<sp/>tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>ofs(</highlight><highlight class="stringliteral">&quot;c3t3_output.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member">CGAL::IO::write_MEDIT</ref>(ofs,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1IOExample">
<title>Input/Output Example</title>
<para>The example below illustrates how to use the IO functions for reading and writing a triangulation with the <computeroutput>Medit</computeroutput> file format (See <ref refid="citelist_1CITEREF_frey:inria-00069921" kindref="member">[1]</ref> for a comprehensive description of this file format.).</para>
<para><linebreak/>
<bold>File</bold> <ref refid="SMDS_3_2c3t3_example_8cpp-example" kindref="compound">SMDS_3/c3t3_example.cpp</ref> <programlisting filename="SMDS_3/c3t3_example.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Triangulation_data_structure_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simplicial_mesh_cell_base_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simplicial_mesh_vertex_base_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/tetrahedral_remeshing.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/tags.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">K<sp/>=<sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Subdomain_index<sp/>=<sp/>int;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Surface_patch_index<sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Curve_index<sp/>=<sp/>char;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Corner_index<sp/>=<sp/>short;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Cb<sp/>=<sp/><ref refid="classCGAL_1_1Simplicial__mesh__cell__base__3" kindref="compound">CGAL::Simplicial_mesh_cell_base_3&lt;K, Subdomain_index, Surface_patch_index&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Vb<sp/>=<sp/><ref refid="classCGAL_1_1Simplicial__mesh__vertex__base__3" kindref="compound">CGAL::Simplicial_mesh_vertex_base_3</ref>&lt;K,<sp/>Subdomain_index,<sp/>Surface_patch_index,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Curve_index,<sp/>Corner_index&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Tds<sp/>=<sp/><ref refid="classCGAL_1_1Triangulation__data__structure__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_3.tag">CGAL::Triangulation_data_structure_3&lt;Vb, Cb, CGAL::Sequential_tag&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Triangulation<sp/>=<sp/><ref refid="classCGAL_1_1Triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_3.tag">CGAL::Triangulation_3&lt;K, Tds&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">C3t3<sp/>=<sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound">CGAL::Mesh_complex_3_in_triangulation_3&lt;Triangulation&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout.precision(17);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cerr.precision(17);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>(argc<sp/>&gt;<sp/>1)<sp/>?<sp/>std::string(argv[1])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/elephant.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Triangulation<sp/>tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>is(filename,<sp/>std::ios_base::in);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__PkgSMDS3IOFunctions_1gab02697fc5c1e8ebf986fdbf4cf3737fb" kindref="member">CGAL::IO::read_MEDIT</ref>(is,<sp/>tr))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[call<sp/>a<sp/>remeshing<sp/>algorithm]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>os(</highlight><highlight class="stringliteral">&quot;after_remeshing.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member">CGAL::IO::write_MEDIT</ref>(os,<sp/>tr,<sp/>CGAL::parameters::all_vertices(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>os.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Triangulation<sp/>tr2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>is2(</highlight><highlight class="stringliteral">&quot;after_remeshing.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__PkgSMDS3IOFunctions_1gab02697fc5c1e8ebf986fdbf4cf3737fb" kindref="member">CGAL::IO::read_MEDIT</ref>(is2,<sp/>tr2))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>(#2)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1MoreExamples">
<title>More Examples In Other Packages</title>
<para>The <computeroutput><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound">Mesh_complex_3_in_triangulation_3</ref></computeroutput> is widely used in the <ref refid="packages_1PkgMesh3" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref> package. Many more examples can be found in its <ref refid="index_1Mesh_3_section_examples" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag">Examples</ref> section.</para>
<para>The package <ref refid="packages_1PkgTetrahedralRemeshing" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Tetrahedral Remeshing</ref> also makes use of the <computeroutput><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound">Mesh_complex_3_in_triangulation_3</ref></computeroutput> since it serves as a post-processing for tetrahedral mesh generation. Some examples can be found in the <ref refid="index_1secTetRemeshingExamples" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Tetrahedral_remeshing.tag">Examples</ref> section.</para>
</sect2>
</sect1>
<sect1 id="index_1SMDS_3History">
<title>Implementation History</title>
<para>The code of the <computeroutput><ref refid="classMeshComplex__3InTriangulation__3" kindref="compound">MeshComplex_3InTriangulation_3</ref></computeroutput> and its variants were initially part of the package <ref refid="packages_1PkgMesh3" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref>. With the meshing and remeshing processes becoming more versatile, it was moved to its own package in the release 5.6 of CGAL. </para>
</sect1>
    </detaileddescription>
    <location file="SMDS_3.txt"/>
  </compounddef>
</doxygen>
