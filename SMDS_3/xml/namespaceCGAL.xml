<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Compact__simplicial__mesh__cell__3" prot="public">CGAL::Compact_simplicial_mesh_cell_3</innerclass>
    <innerclass refid="classCGAL_1_1Compact__simplicial__mesh__cell__base__3" prot="public">CGAL::Compact_simplicial_mesh_cell_base_3</innerclass>
    <innerclass refid="structCGAL_1_1Dump__c3t3" prot="public">CGAL::Dump_c3t3</innerclass>
    <innerclass refid="structCGAL_1_1Dump__c3t3_3_01C3t3_00_01false_01_4" prot="public">CGAL::Dump_c3t3&lt; C3t3, false &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature" prot="public">CGAL::Get_io_signature</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01boost_1_1tuple_3_01T_00_01U_01_4_01_4" prot="public">CGAL::Get_io_signature&lt; boost::tuple&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01char_01_4" prot="public">CGAL::Get_io_signature&lt; char &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01double_01_4" prot="public">CGAL::Get_io_signature&lt; double &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01int_01_4" prot="public">CGAL::Get_io_signature&lt; int &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01Point__3_3_01Kernel_01_4_01_4" prot="public">CGAL::Get_io_signature&lt; Point_3&lt; Kernel &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01short_01int_01_4" prot="public">CGAL::Get_io_signature&lt; short int &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01signed_01char_01_4" prot="public">CGAL::Get_io_signature&lt; signed char &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01std_1_1pair_3_01T_00_01U_01_4_01_4" prot="public">CGAL::Get_io_signature&lt; std::pair&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01std_1_1variant_3_01T_01_4_01_4" prot="public">CGAL::Get_io_signature&lt; std::variant&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01std_1_1variant_3_01T_00_01U_01_4_01_4" prot="public">CGAL::Get_io_signature&lt; std::variant&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01std_1_1variant_3_01T_00_01U_00_01V_01_4_01_4" prot="public">CGAL::Get_io_signature&lt; std::variant&lt; T, U, V &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01std_1_1variant_3_01T_00_01U_00_01V_00_01W_01_4_01_4" prot="public">CGAL::Get_io_signature&lt; std::variant&lt; T, U, V, W &gt; &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01unsigned_01char_01_4" prot="public">CGAL::Get_io_signature&lt; unsigned char &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01unsigned_01int_01_4" prot="public">CGAL::Get_io_signature&lt; unsigned int &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature_3_01unsigned_01short_01int_01_4" prot="public">CGAL::Get_io_signature&lt; unsigned short int &gt;</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature__aux" prot="public">CGAL::Get_io_signature_aux</innerclass>
    <innerclass refid="structCGAL_1_1Get__io__signature__aux_3_01T_00_01false_01_4" prot="public">CGAL::Get_io_signature_aux&lt; T, false &gt;</innerclass>
    <innerclass refid="structCGAL_1_1has__io__signature" prot="public">CGAL::has_io_signature</innerclass>
    <innerclass refid="structCGAL_1_1has__io__signature_3_01T_00_01std_1_1void__t_3_01decltype_07T_1_1io__signature_07_08_08_4_01_4" prot="public">CGAL::has_io_signature&lt; T, std::void_t&lt; decltype(T::io_signature())&gt; &gt;</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" prot="public">CGAL::Mesh_complex_3_in_triangulation_3</innerclass>
    <innerclass refid="classCGAL_1_1Simplicial__mesh__cell__base__3" prot="public">CGAL::Simplicial_mesh_cell_base_3</innerclass>
    <innerclass refid="classCGAL_1_1Simplicial__mesh__vertex__base__3" prot="public">CGAL::Simplicial_mesh_vertex_base_3</innerclass>
    <innernamespace refid="namespaceCGAL_1_1cpp98">CGAL::cpp98</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1IO">CGAL::IO</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Mesh__3">CGAL::Mesh_3</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1SMDS__3">CGAL::SMDS_3</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgSMDS3Functions_1ga84189751a55cc6af2aa5db504780b18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C3T3</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::facets_in_complex_3_to_triangle_mesh</definition>
        <argsstring>(const C3T3 &amp;c3t3, TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>facets_in_complex_3_to_triangle_mesh</name>
        <qualifiedname>CGAL::facets_in_complex_3_to_triangle_mesh</qualifiedname>
        <param>
          <type>const C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>builds a <computeroutput>TriangleMesh</computeroutput> from the surface facets, with a consistent orientation at the interface of two subdomains. </para>
        </briefdescription>
        <detaileddescription>
<para>This function exports the surface as a <computeroutput>TriangleMesh</computeroutput> and appends it to <computeroutput>tmesh</computeroutput>, using <computeroutput>orient_polygon_soup()</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMeshComplexWithFeatures__3InTriangulation__3" kindref="compound">MeshComplexWithFeatures_3InTriangulation_3</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>MutableFaceGraph</computeroutput> with an internal point property map. The point type must be compatible with the one used in <computeroutput>C3T3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c3t3</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>C3T3</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>TriangleMesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_patch_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map with the patch id&apos;s associated to the faces of <computeroutput>faces(tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and the desired property, model of <computeroutput>CopyConstructible</computeroutput> and <computeroutput>LessThanComparable</computeroutput>, and compatible with the <computeroutput>Surface_patch_index</computeroutput> type of <computeroutput>C3T3</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If not provided, faces patch ids are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/facets_in_complex_3_to_triangle_mesh.h" line="212" column="8" bodyfile="CGAL/facets_in_complex_3_to_triangle_mesh.h" bodystart="212" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="Mesh__complex__3__in__triangulation__3_8h_1abb2d856d83754a9e2aaa156af41f93da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tr</type>
          </param>
          <param>
            <type>typename CI_</type>
          </param>
          <param>
            <type>typename CSI_</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Mesh_complex_3_in_triangulation_3&lt; Tr, CI_, CSI_ &gt; &amp;c3t3)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound">Mesh_complex_3_in_triangulation_3</ref>&lt; Tr, CI_, CSI_ &gt; &amp;</type>
          <declname>c3t3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Mesh_complex_3_in_triangulation_3.h" line="2071" column="1" bodyfile="CGAL/Mesh_complex_3_in_triangulation_3.h" bodystart="2072" bodyend="2077"/>
      </memberdef>
      <memberdef kind="function" id="Mesh__complex__3__in__triangulation__3_8h_1ae0abbdd5df2e4af70de202ce255bae2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tr</type>
          </param>
          <param>
            <type>typename CI_</type>
          </param>
          <param>
            <type>typename CSI_</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; CGAL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Mesh_complex_3_in_triangulation_3&lt; Tr, CI_, CSI_ &gt; &amp;c3t3)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound">Mesh_complex_3_in_triangulation_3</ref>&lt; Tr, CI_, CSI_ &gt; &amp;</type>
          <declname>c3t3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Mesh_complex_3_in_triangulation_3.h" line="2082" column="1" bodyfile="CGAL/Mesh_complex_3_in_triangulation_3.h" bodystart="2082" bodyend="2096"/>
      </memberdef>
      <memberdef kind="function" id="Dump__c3t3_8h_1a0a24375a583b7e981093eac84886489e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3t3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::dump_c3t3_edges</definition>
        <argsstring>(const C3t3 &amp;c3t3, std::string prefix)</argsstring>
        <name>dump_c3t3_edges</name>
        <qualifiedname>CGAL::dump_c3t3_edges</qualifiedname>
        <param>
          <type>const C3t3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/SMDS_3/Dump_c3t3.h" line="105" column="6" bodyfile="CGAL/SMDS_3/Dump_c3t3.h" bodystart="105" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="Dump__c3t3_8h_1a31bb466c771de42061499f1f76fe42ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3t3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::dump_c3t3</definition>
        <argsstring>(const C3t3 &amp;c3t3, std::string prefix, bool verbose=false)</argsstring>
        <name>dump_c3t3</name>
        <qualifiedname>CGAL::dump_c3t3</qualifiedname>
        <param>
          <type>const C3t3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/SMDS_3/Dump_c3t3.h" line="126" column="6" bodyfile="CGAL/SMDS_3/Dump_c3t3.h" bodystart="126" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSMDS3Functions_1gad2f0b256c958cea9aff7fb4f855b53eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Triangulation</type>
          </param>
          <param>
            <type>typename TetrahedronRange</type>
          </param>
        </templateparamlist>
        <type>Triangulation</type>
        <definition>Triangulation CGAL::tetrahedron_soup_to_triangulation_3</definition>
        <argsstring>(const TetrahedronRange &amp;tets)</argsstring>
        <name>tetrahedron_soup_to_triangulation_3</name>
        <qualifiedname>CGAL::tetrahedron_soup_to_triangulation_3</qualifiedname>
        <param>
          <type>const TetrahedronRange &amp;</type>
          <declname>tets</declname>
        </param>
        <briefdescription>
<para>builds a 3D triangulation from a soup of tetrahedra. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TetrahedronRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Range</computeroutput> whose value type is a <computeroutput>Tetrahedron_3</computeroutput>. The point type of the tetrahedra must be convertible to <computeroutput>Triangulation::Point</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Triangulation</parametername>
</parameternamelist>
<parameterdescription>
<para>a 3D triangulation class that has a vertex base model of <computeroutput><ref refid="classSimplicialMeshVertexBase__3" kindref="compound">SimplicialMeshVertexBase_3</ref></computeroutput> and a cell base model of <computeroutput><ref refid="classSimplicialMeshCellBase__3" kindref="compound">SimplicialMeshCellBase_3</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tets</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of finite tetrahedra of a valid CGAL triangulation. Each element in the range is the geometric description of the corresponding cell in the triangulation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the 3D triangulation built from <computeroutput>tets</computeroutput> </para>
</simplesect>
<simplesect kind="post"><para>the output triangulation must be a triangulation of the convex hull of <computeroutput>tets</computeroutput></para>
</simplesect>
<simplesect kind="see"><para><ref refid="SMDS_3_2tetrahedron_soup_to_c3t3_example_8cpp-example" kindref="compound">SMDS_3/tetrahedron_soup_to_c3t3_example.cpp</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/tetrahedron_soup_to_triangulation_3.h" line="56" column="17" bodyfile="CGAL/tetrahedron_soup_to_triangulation_3.h" bodystart="56" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgSMDS3Functions_1ga7ba6909f2b99875fe7ebe5fead34107d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Triangulation</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename TetrahedronRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Triangulation</type>
        <definition>Triangulation CGAL::tetrahedron_soup_to_triangulation_3</definition>
        <argsstring>(const PointRange &amp;points, const TetrahedronRange &amp;tets, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>tetrahedron_soup_to_triangulation_3</name>
        <qualifiedname>CGAL::tetrahedron_soup_to_triangulation_3</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TetrahedronRange &amp;</type>
          <declname>tets</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>builds a 3D triangulation from a soup of tetrahedra. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type. The point type must be convertible to <computeroutput>Triangulation::Point</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TetrahedronRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Triangulation</parametername>
</parameternamelist>
<parameterdescription>
<para>a 3D triangulation class that has a vertex base model of <computeroutput>MeshVertexBase_3</computeroutput> and a cell base model of <computeroutput>MeshCellBase_3</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of tetrahedra </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tets</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of finite tetrahedra of a valid CGAL triangulation. Each element in the range describes a tetrahedron using the indices of the points in <computeroutput>points</computeroutput>. It must describe a non self-intersecting set of tetrahedra, that cover the convex hull of the corresponding point set. The tetrahedra must form a valid triangulation with each pair of neighboring cells sharing exactly one triangle. Combinatorial validity and validity of the geometric embedding are required.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>surface_facets</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>each element in the range describes a surface facet using the indices of points in <computeroutput>points</computeroutput> (indices 0 to 2), and the associated <computeroutput>Surface_patch_index</computeroutput> (index 3) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>AssociativeContainer</computeroutput> whose key type is model of <computeroutput>RandomAccessContainer</computeroutput> containing <computeroutput>int</computeroutput> and mapped type is <computeroutput>Tr::Cell::Surface_patch_index</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an empty <computeroutput>boost::unordered_map&lt;std::array&lt;int, 3&gt;, typename Tr::Cell::Surface_patch_index&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>to avoid copies of large data sets, this parameter can be passed using <computeroutput>std::cref</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>subdomain_indices</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>each element in the range gives the <computeroutput>Triangulation::Cell::Subdomain_index</computeroutput> corresponding to the tetrahedron (cell) of same index in <computeroutput>tets</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>RandomAccessContainer</computeroutput> whose value type is <computeroutput>Triangulation::Cell::Subdomain_index</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>each finite cell of the output triangulation is set to have <computeroutput>1</computeroutput> as <computeroutput>Subdomain_index</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>to avoid copies of large data sets, this parameter can be passed using <computeroutput>std::cref</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the 3D triangulation built from parameters</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>points</computeroutput> contains each point only once </para>
</simplesect>
<simplesect kind="post"><para>the output triangulation must be a triangulation of the convex hull of <computeroutput>points</computeroutput> </para>
</simplesect>
<simplesect kind="post"><para><computeroutput>is_valid()</computeroutput> returns <computeroutput>true</computeroutput> for the returned triangulation</para>
</simplesect>
<simplesect kind="see"><para><ref refid="" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh()</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="SMDS_3_2tetrahedron_soup_to_c3t3_example_8cpp-example" kindref="compound">SMDS_3/tetrahedron_soup_to_c3t3_example.cpp</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/tetrahedron_soup_to_triangulation_3.h" line="176" column="17" bodyfile="CGAL/tetrahedron_soup_to_triangulation_3.h" bodystart="176" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="SMDS_3.txt" line="1" column="1"/>
  </compounddef>
</doxygen>
