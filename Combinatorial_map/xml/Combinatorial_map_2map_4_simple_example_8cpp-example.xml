<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="Combinatorial_map_2map_4_simple_example_8cpp-example" kind="example">
    <compoundname>Combinatorial_map/map_4_simple_example.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename="Combinatorial_map/map_4_simple_example.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Combinatorial_map.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Combinatorial__map" kindref="compound">CGAL::Combinatorial_map&lt;4&gt;</ref><sp/>CMap_4;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CMap_4::Dart_descriptor<sp/>Dart_descriptor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Dart_descriptor<sp/>make_triangle(CMap_4&amp;<sp/>amap)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/>Dart_descriptor<sp/>d1<sp/>=<sp/>amap.create_dart();</highlight></codeline>
<codeline><highlight class="normal"><sp/>Dart_descriptor<sp/>d2<sp/>=<sp/>amap.create_dart();</highlight></codeline>
<codeline><highlight class="normal"><sp/>Dart_descriptor<sp/>d3<sp/>=<sp/>amap.create_dart();</highlight></codeline>
<codeline><highlight class="normal"><sp/>amap.link_beta&lt;1&gt;(d1,d2);</highlight></codeline>
<codeline><highlight class="normal"><sp/>amap.link_beta&lt;1&gt;(d2,d3);</highlight></codeline>
<codeline><highlight class="normal"><sp/>amap.link_beta&lt;1&gt;(d3,d1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Dart_descriptor<sp/>make_tetrahedral(CMap_4&amp;<sp/>amap)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_descriptor<sp/>d1<sp/>=<sp/>make_triangle(amap);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_descriptor<sp/>d2<sp/>=<sp/>make_triangle(amap);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_descriptor<sp/>d3<sp/>=<sp/>make_triangle(amap);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_descriptor<sp/>d4<sp/>=<sp/>make_triangle(amap);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>amap.link_beta&lt;2&gt;(d1,<sp/>d2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>amap.link_beta&lt;2&gt;(d3,<sp/>amap.beta(d2,0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>amap.link_beta&lt;2&gt;(amap.beta(d1,1),<sp/>amap.beta(d3,0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>amap.link_beta&lt;2&gt;(d4,<sp/>amap.beta(d2,1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>amap.link_beta&lt;2&gt;(amap.beta(d4,0),<sp/>amap.beta(d3,1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>amap.link_beta&lt;2&gt;(amap.beta(d4,1),<sp/>amap.beta(d1,0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CMap_4<sp/>cm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_descriptor<sp/>d1<sp/>=<sp/>make_tetrahedral(cm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dart_descriptor<sp/>d2<sp/>=<sp/>make_tetrahedral(cm);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cm.sew&lt;4&gt;(d1,d2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cm.display_characteristics(std::cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>valid=&quot;</highlight><highlight class="normal">&lt;&lt;cm.is_valid()&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="examples.txt"/>
  </compounddef>
</doxygen>
