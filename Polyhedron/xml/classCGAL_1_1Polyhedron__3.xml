<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Polyhedron__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Polyhedron_3</compoundname>
    <includes local="no">CGAL/Polyhedron_3.h</includes>
    <innerclass refid="classCGAL_1_1Polyhedron__3_1_1Facet" prot="public">CGAL::Polyhedron_3::Facet</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__3_1_1Halfedge" prot="public">CGAL::Polyhedron_3::Halfedge</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedron__3_1_1Vertex" prot="public">CGAL::Polyhedron_3::Vertex</innerclass>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a82fc1b399742114ebc63c98405885e7b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Items</definition>
        <argsstring></argsstring>
        <name>Items</name>
        <qualifiedname>CGAL::Polyhedron_3::Items</qualifiedname>
        <briefdescription>
<para>items class selected for <computeroutput><ref refid="classPolyhedronItems__3" kindref="compound">PolyhedronItems_3</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="790" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1ab17a61da2a32f50b861cc261cd32c0bd" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::HalfedgeDS</definition>
        <argsstring></argsstring>
        <name>HalfedgeDS</name>
        <qualifiedname>CGAL::Polyhedron_3::HalfedgeDS</qualifiedname>
        <briefdescription>
<para>instantiated halfedge data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="795" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>CGAL::Polyhedron_3::size_type</qualifiedname>
        <briefdescription>
<para>size type of <computeroutput><ref refid="classHalfedgeDS" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="800" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1abac442c83261a025d773fcf2a64cd953" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>CGAL::Polyhedron_3::difference_type</qualifiedname>
        <briefdescription>
<para>difference type of <computeroutput><ref refid="classHalfedgeDS" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="805" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a7d6cdf0e8d7b13cb6d301987c1612b3c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <qualifiedname>CGAL::Polyhedron_3::iterator_category</qualifiedname>
        <briefdescription>
<para>iterator category of <computeroutput><ref refid="classHalfedgeDS" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS</ref></computeroutput> for all iterators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="811" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a72c27f9439dcb1889505ecece9b4e206" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::circulator_category</definition>
        <argsstring></argsstring>
        <name>circulator_category</name>
        <qualifiedname>CGAL::Polyhedron_3::circulator_category</qualifiedname>
        <briefdescription>
<para>circulator category of all circulators; bidirectional category if the <computeroutput>Items::Halfedge</computeroutput> provides a <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Halfedge_1a339a531b2c827bb2a15291ed04dc13cb" kindref="member">Halfedge::prev()</ref></computeroutput> member function, otherwise forward category. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="818" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1add0588183a0e107bd7e2dc78909ca127" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <qualifiedname>CGAL::Polyhedron_3::allocator_type</qualifiedname>
        <briefdescription>
<para>allocator type <computeroutput>Alloc</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="823" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="823" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Handles, Iterators, and Circulators</header>
      <description><para>The following handles, iterators, and circulators have appropriate non-mutable counterparts, i.e., <computeroutput>const_handle</computeroutput>, <computeroutput>const_iterator</computeroutput>, and <computeroutput>const_circulator</computeroutput>.</para>
<para>The mutable types are assignable to their non-mutable counterparts. Both circulators are assignable to the <computeroutput>Halfedge_iterator</computeroutput>. The iterators are assignable to the respective handle types. Wherever the handles appear in function parameter lists, the corresponding iterators can be used as well. For convenience, the <computeroutput>Edge_iterator</computeroutput> enumerates every other halfedge. It is based on the <computeroutput><ref refid="classCGAL_1_1N__step__adaptor" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::N_step_adaptor</ref></computeroutput> class. For convenience, the <computeroutput>Point_iterator</computeroutput> enumerates all points in the polyhedral surface in the same order as the <computeroutput>Vertex_iterator</computeroutput>, but with the value type <computeroutput>Point</computeroutput>. Similarly, a <computeroutput>Plane_iterator</computeroutput> is provided.</para>
<para>All handles are model of <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> and <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>, that is they can be used as keys in containers such as <computeroutput>std::map</computeroutput> and <computeroutput>boost::unordered_map</computeroutput>. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a59bebced7ecd7660dd3ab1d33d22566f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Point_3</definition>
        <argsstring></argsstring>
        <name>Point_3</name>
        <qualifiedname>CGAL::Polyhedron_3::Point_3</qualifiedname>
        <briefdescription>
<para>point stored in vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="853" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1aa6d5d215f46423546681237d07a1e584" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Plane_3</definition>
        <argsstring></argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Polyhedron_3::Plane_3</qualifiedname>
        <briefdescription>
<para>plane equation stored in facets (if supported). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="858" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1aca51106e581d51d36bd668c819c0ac4e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <qualifiedname>CGAL::Polyhedron_3::Vertex_handle</qualifiedname>
        <briefdescription>
<para>handle to vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="863" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a675da64ded520fe6abca063ada3a1ed8" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Polyhedron_3&lt; Traits &gt;::Vertex_handles</definition>
        <argsstring></argsstring>
        <name>Vertex_handles</name>
        <qualifiedname>CGAL::Polyhedron_3::Vertex_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over the vertices, with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Vertex_handle</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="869" column="26" bodyfile="CGAL/Polyhedron_3.h" bodystart="869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Halfedge_handle</definition>
        <argsstring></argsstring>
        <name>Halfedge_handle</name>
        <qualifiedname>CGAL::Polyhedron_3::Halfedge_handle</qualifiedname>
        <briefdescription>
<para>handle to halfedge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="874" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a6659085c476499a617c39ef16f54e84e" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Polyhedron_3&lt; Traits &gt;::Halfedge_handles</definition>
        <argsstring></argsstring>
        <name>Halfedge_handles</name>
        <qualifiedname>CGAL::Polyhedron_3::Halfedge_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over the halfedges, with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Halfedge_handle</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="880" column="26" bodyfile="CGAL/Polyhedron_3.h" bodystart="880" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1ad44731fbb60766ae1ea8e46b69d3cbbf" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Facet_handle</definition>
        <argsstring></argsstring>
        <name>Facet_handle</name>
        <qualifiedname>CGAL::Polyhedron_3::Facet_handle</qualifiedname>
        <briefdescription>
<para>handle to facet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="885" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a53b1123a65846e5e61a6bb0fd29bf847" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Polyhedron_3&lt; Traits &gt;::Facet_handles</definition>
        <argsstring></argsstring>
        <name>Facet_handles</name>
        <qualifiedname>CGAL::Polyhedron_3::Facet_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over the facets, with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Facet_handle</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="891" column="26" bodyfile="CGAL/Polyhedron_3.h" bodystart="891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1aff9ec9b39223e4f1cdf69ab39838e9e3" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Vertex_iterator</definition>
        <argsstring></argsstring>
        <name>Vertex_iterator</name>
        <qualifiedname>CGAL::Polyhedron_3::Vertex_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="896" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a6c11afde7bae6be0cc0006d0b2512a19" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Halfedge_iterator</definition>
        <argsstring></argsstring>
        <name>Halfedge_iterator</name>
        <qualifiedname>CGAL::Polyhedron_3::Halfedge_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all halfedges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="901" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a11883e7be5e610e823ebb46605e8772f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Facet_iterator</definition>
        <argsstring></argsstring>
        <name>Facet_iterator</name>
        <qualifiedname>CGAL::Polyhedron_3::Facet_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all facets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="906" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a0bed29e3f406b13c8605f3f3e98d7175" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Halfedge_around_vertex_circulator</definition>
        <argsstring></argsstring>
        <name>Halfedge_around_vertex_circulator</name>
        <qualifiedname>CGAL::Polyhedron_3::Halfedge_around_vertex_circulator</qualifiedname>
        <briefdescription>
<para>circulator of halfedges around a vertex (cw). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="912" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1aaa493b9f4e392204345ecf79ebbd37e8" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Halfedge_around_facet_circulator</definition>
        <argsstring></argsstring>
        <name>Halfedge_around_facet_circulator</name>
        <qualifiedname>CGAL::Polyhedron_3::Halfedge_around_facet_circulator</qualifiedname>
        <briefdescription>
<para>circulator of halfedges around a facet (ccw). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="918" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a260c899118aefbf92f85dcd72ce43851" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Edge_iterator</definition>
        <argsstring></argsstring>
        <name>Edge_iterator</name>
        <qualifiedname>CGAL::Polyhedron_3::Edge_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all edges (every other halfedge). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="923" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a1dfc0b86a7634374c1ec25f3bf6fbb2d" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Polyhedron__3_1a260c899118aefbf92f85dcd72ce43851" kindref="member">Edge_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;Edge_iterator&gt; CGAL::Polyhedron_3&lt; Traits &gt;::Edges</definition>
        <argsstring></argsstring>
        <name>Edges</name>
        <qualifiedname>CGAL::Polyhedron_3::Edges</qualifiedname>
        <briefdescription>
<para>range type for iterating over the edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="928" column="26" bodyfile="CGAL/Polyhedron_3.h" bodystart="928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a6aff2b5a8cb76cede147e32f500ad311" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Point_iterator</definition>
        <argsstring></argsstring>
        <name>Point_iterator</name>
        <qualifiedname>CGAL::Polyhedron_3::Point_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="933" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="933" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a11f504c4c3c7759eb0a5becb22c40ac1" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Polyhedron__3_1a6aff2b5a8cb76cede147e32f500ad311" kindref="member">Point_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;Point_iterator&gt; CGAL::Polyhedron_3&lt; Traits &gt;::Points</definition>
        <argsstring></argsstring>
        <name>Points</name>
        <qualifiedname>CGAL::Polyhedron_3::Points</qualifiedname>
        <briefdescription>
<para>range type for iterating over the points of the vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="938" column="26" bodyfile="CGAL/Polyhedron_3.h" bodystart="938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1af268be0ffff77469b60afbc4b4893ed5" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Plane_iterator</definition>
        <argsstring></argsstring>
        <name>Plane_iterator</name>
        <qualifiedname>CGAL::Polyhedron_3::Plane_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all plane equations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="943" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a746e4a0e5d32824f9bb001bdf254da13" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Polyhedron__3_1af268be0ffff77469b60afbc4b4893ed5" kindref="member">Plane_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;Plane_iterator&gt; CGAL::Polyhedron_3&lt; Traits &gt;::Planes</definition>
        <argsstring></argsstring>
        <name>Planes</name>
        <qualifiedname>CGAL::Polyhedron_3::Planes</qualifiedname>
        <briefdescription>
<para>range type for iterating over the planes of the facets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="948" column="26" bodyfile="CGAL/Polyhedron_3.h" bodystart="948" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Types for Tagging Optional Features</header>
      <description><para>The following types are equal to either <ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag"><computeroutput>Tag_true</computeroutput> </ref> or <ref refid="group__PkgSTLExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag"><computeroutput>Tag_false</computeroutput> </ref>, depending on whether the named feature is supported or not. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1ad575271460a9df1492e1f0f339f5bd31" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Supports_vertex_halfedge</definition>
        <argsstring></argsstring>
        <name>Supports_vertex_halfedge</name>
        <qualifiedname>CGAL::Polyhedron_3::Supports_vertex_halfedge</qualifiedname>
        <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Vertex_1a11688de09f785f7d16ff3c10443fbab0" kindref="member">Vertex::halfedge()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="961" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="961" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a62d1d69b081470716688036d66f4be7e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Supports_vertex_point</definition>
        <argsstring></argsstring>
        <name>Supports_vertex_point</name>
        <qualifiedname>CGAL::Polyhedron_3::Supports_vertex_point</qualifiedname>
        <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Vertex_1ac49f332933bd0183b55057a6d1529cd1" kindref="member">Vertex::point()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="966" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="966" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a30a165f364597483f4ac1334642f4c51" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Supports_halfedge_prev</definition>
        <argsstring></argsstring>
        <name>Supports_halfedge_prev</name>
        <qualifiedname>CGAL::Polyhedron_3::Supports_halfedge_prev</qualifiedname>
        <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Halfedge_1a339a531b2c827bb2a15291ed04dc13cb" kindref="member">Halfedge::prev()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="971" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a0acbd6f11423457c8cd0a194aa17eb1f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Supports_halfedge_vertex</definition>
        <argsstring></argsstring>
        <name>Supports_halfedge_vertex</name>
        <qualifiedname>CGAL::Polyhedron_3::Supports_halfedge_vertex</qualifiedname>
        <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Halfedge_1a5d4131be8dac43edcb5f7376d2d125bd" kindref="member">Halfedge::vertex()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="976" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a04847ba8c46f51dacc38cff5640132e9" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Supports_halfedge_facet</definition>
        <argsstring></argsstring>
        <name>Supports_halfedge_facet</name>
        <qualifiedname>CGAL::Polyhedron_3::Supports_halfedge_facet</qualifiedname>
        <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Halfedge_1a95ac2a25b518e5b5b7a374d4e0e4f3a3" kindref="member">Halfedge::facet()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="981" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1adb9c5380cb7d80196eff14e36c6a4ba1" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Supports_facet_halfedge</definition>
        <argsstring></argsstring>
        <name>Supports_facet_halfedge</name>
        <qualifiedname>CGAL::Polyhedron_3::Supports_facet_halfedge</qualifiedname>
        <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Facet_1adeb2a50892d21dbc667fbe231f3b62b8" kindref="member">Facet::halfedge()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="986" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a1f2c8a28ffea579d07a50fcfcbd04e1c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Supports_facet_plane</definition>
        <argsstring></argsstring>
        <name>Supports_facet_plane</name>
        <qualifiedname>CGAL::Polyhedron_3::Supports_facet_plane</qualifiedname>
        <briefdescription>
<para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Facet_1a15efd739f38d8e4e1ce9f8274aa69672" kindref="member">Facet::plane()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="991" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Polyhedron__3_1a1ea6e410d683cb382b1af84b85df70b9" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Polyhedron_3&lt; Traits &gt;::Supports_removal</definition>
        <argsstring></argsstring>
        <name>Supports_removal</name>
        <qualifiedname>CGAL::Polyhedron_3::Supports_removal</qualifiedname>
        <briefdescription>
<para>supports removal of individual elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="996" column="28" bodyfile="CGAL/Polyhedron_3.h" bodystart="996" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a58827beef13f3dd6b67f8337709bc501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polyhedron_3&lt; Traits &gt;::Polyhedron_3</definition>
        <argsstring>(const Traits &amp;traits=Traits())</argsstring>
        <name>Polyhedron_3</name>
        <qualifiedname>CGAL::Polyhedron_3::Polyhedron_3</qualifiedname>
        <param>
          <type>const <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref>()</defval>
        </param>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1006" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a8bf0e9e52526da081375a7b49ca8b195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polyhedron_3&lt; Traits &gt;::Polyhedron_3</definition>
        <argsstring>(size_type v, size_type h, size_type f, const Traits &amp;traits=Traits())</argsstring>
        <name>Polyhedron_3</name>
        <qualifiedname>CGAL::Polyhedron_3::Polyhedron_3</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref>()</defval>
        </param>
        <briefdescription>
<para>Constructor of a polyhedron with storage reserved for <computeroutput>v</computeroutput> vertices, <computeroutput>h</computeroutput> halfedges, and <computeroutput>f</computeroutput> facets. </para>
        </briefdescription>
        <detaileddescription>
<para>The reservation sizes are a hint for optimizing storage allocation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1014" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a545fadc0f4af7a1e4a1a0d1e26711f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_3&lt; Traits &gt;::reserve</definition>
        <argsstring>(size_type v, size_type h, size_type f)</argsstring>
        <name>reserve</name>
        <qualifiedname>CGAL::Polyhedron_3::reserve</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>reserve storage for <computeroutput>v</computeroutput> vertices, <computeroutput>h</computeroutput> halfedges, and <computeroutput>f</computeroutput> facets. </para>
        </briefdescription>
        <detaileddescription>
<para>The reservation sizes are a hint for optimizing storage allocation. If the <computeroutput>capacity</computeroutput> is already greater than the requested size nothing happens. If the <computeroutput>capacity</computeroutput> changes all iterators and circulators might invalidate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1026" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a1ebc714bb6fc75a8aa105ffb241fe087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::make_tetrahedron</definition>
        <argsstring>()</argsstring>
        <name>make_tetrahedron</name>
        <qualifiedname>CGAL::Polyhedron_3::make_tetrahedron</qualifiedname>
        <briefdescription>
<para>a tetrahedron is added to the polyhedral surface. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a halfedge of the tetrahedron. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1032" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a19d554cc3a0e2db78b88d4e074c9fa19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::make_tetrahedron</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2, const Point &amp;p3, const Point &amp;p4)</argsstring>
        <name>make_tetrahedron</name>
        <qualifiedname>CGAL::Polyhedron_3::make_tetrahedron</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p4</declname>
        </param>
        <briefdescription>
<para>a tetrahedron is added to the polyhedral surface with its vertices initialized to <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, <computeroutput>p3</computeroutput>, and <computeroutput>p4</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns that halfedge of the tetrahedron which incident vertex is initialized to <computeroutput>p1</computeroutput>. The incident vertex of the next halfedge is <computeroutput>p2</computeroutput>, and the vertex thereafter is <computeroutput>p3</computeroutput>. The remaining fourth vertex is initialized to <computeroutput>p4</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1043" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a06735e9d5caa84f0afb5ddab37a9dedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::make_triangle</definition>
        <argsstring>()</argsstring>
        <name>make_triangle</name>
        <qualifiedname>CGAL::Polyhedron_3::make_triangle</qualifiedname>
        <briefdescription>
<para>a triangle with border edges is added to the polyhedral surface. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a non-border halfedge of the triangle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1053" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a62241505a5199ec963acd2a6fda4239f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::make_triangle</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2, const Point &amp;p3)</argsstring>
        <name>make_triangle</name>
        <qualifiedname>CGAL::Polyhedron_3::make_triangle</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>a triangle with border edges is added to the polyhedral surface with its vertices initialized to <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns that non-border halfedge of the triangle which incident vertex is initialized to <computeroutput>p1</computeroutput>. The incident vertex of the next halfedge is <computeroutput>p2</computeroutput>, and the vertex thereafter is <computeroutput>p3</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1063" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Member Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a8ce3e77931cf80fcda9c3c89564f1443" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>CGAL::Polyhedron_3::empty</qualifiedname>
        <briefdescription>
<para>returns true if the polyhedron is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1075" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ad661d362a8e515d67108803796eabac8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Polyhedron_3&lt; Traits &gt;::size_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>size_of_vertices</name>
        <qualifiedname>CGAL::Polyhedron_3::size_of_vertices</qualifiedname>
        <briefdescription>
<para>number of vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1080" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a022b5c320996fabb49673d8921437fcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Polyhedron_3&lt; Traits &gt;::size_of_halfedges</definition>
        <argsstring>() const</argsstring>
        <name>size_of_halfedges</name>
        <qualifiedname>CGAL::Polyhedron_3::size_of_halfedges</qualifiedname>
        <briefdescription>
<para>number of halfedges (incl. border halfedges). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1085" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a07c305cf6da9eeecc89fea2fc4f24f67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Polyhedron_3&lt; Traits &gt;::size_of_facets</definition>
        <argsstring>() const</argsstring>
        <name>size_of_facets</name>
        <qualifiedname>CGAL::Polyhedron_3::size_of_facets</qualifiedname>
        <briefdescription>
<para>number of facets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1090" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a5d999a50161f1353143e8d64e889ebc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Polyhedron_3&lt; Traits &gt;::capacity_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>capacity_of_vertices</name>
        <qualifiedname>CGAL::Polyhedron_3::capacity_of_vertices</qualifiedname>
        <briefdescription>
<para>space reserved for vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1095" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a56711d646b29d468566e9e7371d36f93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Polyhedron_3&lt; Traits &gt;::capacity_of_halfedges</definition>
        <argsstring>() const</argsstring>
        <name>capacity_of_halfedges</name>
        <qualifiedname>CGAL::Polyhedron_3::capacity_of_halfedges</qualifiedname>
        <briefdescription>
<para>space reserved for halfedges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1100" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ac70e38b205cfcdbaa0a51d047f16e01d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Polyhedron_3&lt; Traits &gt;::capacity_of_facets</definition>
        <argsstring>() const</argsstring>
        <name>capacity_of_facets</name>
        <qualifiedname>CGAL::Polyhedron_3::capacity_of_facets</qualifiedname>
        <briefdescription>
<para>space reserved for facets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1105" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1aa889170efd14f009004ab521606dc605" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t CGAL::Polyhedron_3&lt; Traits &gt;::bytes</definition>
        <argsstring>() const</argsstring>
        <name>bytes</name>
        <qualifiedname>CGAL::Polyhedron_3::bytes</qualifiedname>
        <briefdescription>
<para>bytes used for the polyhedron. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1110" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a47000d54bd804fed1e4cc45c2dea122e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t CGAL::Polyhedron_3&lt; Traits &gt;::bytes_reserved</definition>
        <argsstring>() const</argsstring>
        <name>bytes_reserved</name>
        <qualifiedname>CGAL::Polyhedron_3::bytes_reserved</qualifiedname>
        <briefdescription>
<para>bytes reserved for the polyhedron. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1115" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ab741e3641ed4363ab156022525f82171" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1add0588183a0e107bd7e2dc78909ca127" kindref="member">allocator_type</ref></type>
        <definition>allocator_type CGAL::Polyhedron_3&lt; Traits &gt;::get_allocator</definition>
        <argsstring>() const</argsstring>
        <name>get_allocator</name>
        <qualifiedname>CGAL::Polyhedron_3::get_allocator</qualifiedname>
        <briefdescription>
<para>allocator object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1120" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a94eec0aaf19925a005e5296d6c965c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1aff9ec9b39223e4f1cdf69ab39838e9e3" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator CGAL::Polyhedron_3&lt; Traits &gt;::vertices_begin</definition>
        <argsstring>()</argsstring>
        <name>vertices_begin</name>
        <qualifiedname>CGAL::Polyhedron_3::vertices_begin</qualifiedname>
        <briefdescription>
<para>iterator over all vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1125" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1aa402ee6ce24e0259a45c8579784a0f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1aff9ec9b39223e4f1cdf69ab39838e9e3" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator CGAL::Polyhedron_3&lt; Traits &gt;::vertices_end</definition>
        <argsstring>()</argsstring>
        <name>vertices_end</name>
        <qualifiedname>CGAL::Polyhedron_3::vertices_end</qualifiedname>
        <briefdescription>
<para>past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1130" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a2e0843aaeeadc428e8cd25802109bdf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a675da64ded520fe6abca063ada3a1ed8" kindref="member">Vertex_handles</ref></type>
        <definition>Vertex_handles CGAL::Polyhedron_3&lt; Traits &gt;::vertex_handles</definition>
        <argsstring>()</argsstring>
        <name>vertex_handles</name>
        <qualifiedname>CGAL::Polyhedron_3::vertex_handles</qualifiedname>
        <briefdescription>
<para>returns a range of handles over the vertices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Vertex_handles::iterator</ref></computeroutput> is <computeroutput>Vertex_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1136" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a8d38f95397f743187bdd389b2f83a3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a6c11afde7bae6be0cc0006d0b2512a19" kindref="member">Halfedge_iterator</ref></type>
        <definition>Halfedge_iterator CGAL::Polyhedron_3&lt; Traits &gt;::halfedges_begin</definition>
        <argsstring>()</argsstring>
        <name>halfedges_begin</name>
        <qualifiedname>CGAL::Polyhedron_3::halfedges_begin</qualifiedname>
        <briefdescription>
<para>iterator over all halfedges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1142" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1abe1c7ae1fab1b3c7315b32d5d34ff2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a6c11afde7bae6be0cc0006d0b2512a19" kindref="member">Halfedge_iterator</ref></type>
        <definition>Halfedge_iterator CGAL::Polyhedron_3&lt; Traits &gt;::halfedges_end</definition>
        <argsstring>()</argsstring>
        <name>halfedges_end</name>
        <qualifiedname>CGAL::Polyhedron_3::halfedges_end</qualifiedname>
        <briefdescription>
<para>past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1147" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1aa5b19c47be114464b47a91bc60372c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a6659085c476499a617c39ef16f54e84e" kindref="member">Halfedge_handles</ref></type>
        <definition>Halfedge_handles CGAL::Polyhedron_3&lt; Traits &gt;::halfedge_handles</definition>
        <argsstring>()</argsstring>
        <name>halfedge_handles</name>
        <qualifiedname>CGAL::Polyhedron_3::halfedge_handles</qualifiedname>
        <briefdescription>
<para>returns a range of handles over the halfedges. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Halfedge_handles::iterator</ref></computeroutput> is <computeroutput>Halfedge_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1153" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a7bdcf3f2936fa9a27faf91536d953cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a11883e7be5e610e823ebb46605e8772f" kindref="member">Facet_iterator</ref></type>
        <definition>Facet_iterator CGAL::Polyhedron_3&lt; Traits &gt;::facets_begin</definition>
        <argsstring>()</argsstring>
        <name>facets_begin</name>
        <qualifiedname>CGAL::Polyhedron_3::facets_begin</qualifiedname>
        <briefdescription>
<para>iterator over all facets (excluding holes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1159" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ab34dd6ee47881cc822f578a9ba534f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a11883e7be5e610e823ebb46605e8772f" kindref="member">Facet_iterator</ref></type>
        <definition>Facet_iterator CGAL::Polyhedron_3&lt; Traits &gt;::facets_end</definition>
        <argsstring>()</argsstring>
        <name>facets_end</name>
        <qualifiedname>CGAL::Polyhedron_3::facets_end</qualifiedname>
        <briefdescription>
<para>past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1164" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a77a50500124207ecc42e8da2b47e0012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a53b1123a65846e5e61a6bb0fd29bf847" kindref="member">Facet_handles</ref></type>
        <definition>Facet_handles CGAL::Polyhedron_3&lt; Traits &gt;::facet_handles</definition>
        <argsstring>()</argsstring>
        <name>facet_handles</name>
        <qualifiedname>CGAL::Polyhedron_3::facet_handles</qualifiedname>
        <briefdescription>
<para>returns a range of handles over the facets. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Facet_handles::iterator</ref></computeroutput> is <computeroutput>Facet_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1170" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a251ab9cb55e77ad4ad6923914d5e65ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a260c899118aefbf92f85dcd72ce43851" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator CGAL::Polyhedron_3&lt; Traits &gt;::edges_begin</definition>
        <argsstring>()</argsstring>
        <name>edges_begin</name>
        <qualifiedname>CGAL::Polyhedron_3::edges_begin</qualifiedname>
        <briefdescription>
<para>iterator over all edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1175" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a9ea95c5501c1af4d6a17b18c929c8faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a260c899118aefbf92f85dcd72ce43851" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator CGAL::Polyhedron_3&lt; Traits &gt;::edges_end</definition>
        <argsstring>()</argsstring>
        <name>edges_end</name>
        <qualifiedname>CGAL::Polyhedron_3::edges_end</qualifiedname>
        <briefdescription>
<para>past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1180" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a3c6662c06a8bb50b271fea179dd07fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a1dfc0b86a7634374c1ec25f3bf6fbb2d" kindref="member">Edges</ref></type>
        <definition>Edges CGAL::Polyhedron_3&lt; Traits &gt;::edges</definition>
        <argsstring>()</argsstring>
        <name>edges</name>
        <qualifiedname>CGAL::Polyhedron_3::edges</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over the edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1185" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a25d5ad0a16bbcf71ca1f48225b43bc95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a6aff2b5a8cb76cede147e32f500ad311" kindref="member">Point_iterator</ref></type>
        <definition>Point_iterator CGAL::Polyhedron_3&lt; Traits &gt;::points_begin</definition>
        <argsstring>()</argsstring>
        <name>points_begin</name>
        <qualifiedname>CGAL::Polyhedron_3::points_begin</qualifiedname>
        <briefdescription>
<para>iterator over all points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1190" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a45bf32fbaf7f185558e18194e4ab3830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a6aff2b5a8cb76cede147e32f500ad311" kindref="member">Point_iterator</ref></type>
        <definition>Point_iterator CGAL::Polyhedron_3&lt; Traits &gt;::points_end</definition>
        <argsstring>()</argsstring>
        <name>points_end</name>
        <qualifiedname>CGAL::Polyhedron_3::points_end</qualifiedname>
        <briefdescription>
<para>past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1195" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1af6abde1634fdd64d79e78f07145186f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a11f504c4c3c7759eb0a5becb22c40ac1" kindref="member">Points</ref></type>
        <definition>Points CGAL::Polyhedron_3&lt; Traits &gt;::points</definition>
        <argsstring>()</argsstring>
        <name>points</name>
        <qualifiedname>CGAL::Polyhedron_3::points</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over the points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1200" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a409be107a687d3813b91f84a6e4459c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1af268be0ffff77469b60afbc4b4893ed5" kindref="member">Plane_iterator</ref></type>
        <definition>Plane_iterator CGAL::Polyhedron_3&lt; Traits &gt;::planes_begin</definition>
        <argsstring>()</argsstring>
        <name>planes_begin</name>
        <qualifiedname>CGAL::Polyhedron_3::planes_begin</qualifiedname>
        <briefdescription>
<para>iterator over all plane equations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1205" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1abb6712371c2355442e42b6846bbc0375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1af268be0ffff77469b60afbc4b4893ed5" kindref="member">Plane_iterator</ref></type>
        <definition>Plane_iterator CGAL::Polyhedron_3&lt; Traits &gt;::planes_end</definition>
        <argsstring>()</argsstring>
        <name>planes_end</name>
        <qualifiedname>CGAL::Polyhedron_3::planes_end</qualifiedname>
        <briefdescription>
<para>past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1210" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1aaf451356d666be3060567dd904bfb38f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a746e4a0e5d32824f9bb001bdf254da13" kindref="member">Planes</ref></type>
        <definition>Planes CGAL::Polyhedron_3&lt; Traits &gt;::planes</definition>
        <argsstring>()</argsstring>
        <name>planes</name>
        <qualifiedname>CGAL::Polyhedron_3::planes</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over the planes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1215" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a2eff5c59b448f9be755cb76cdf06d966" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &amp;</type>
        <definition>const Traits &amp; CGAL::Polyhedron_3&lt; Traits &gt;::traits</definition>
        <argsstring>() const</argsstring>
        <name>traits</name>
        <qualifiedname>CGAL::Polyhedron_3::traits</qualifiedname>
        <briefdescription>
<para>returns the traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1220" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Combinatorial Predicates</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a4afb025815064d4f125b8d3b0ba2b6f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::is_closed</definition>
        <argsstring>() const</argsstring>
        <name>is_closed</name>
        <qualifiedname>CGAL::Polyhedron_3::is_closed</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if there are no border edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1231" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a2415e1795ff4257b2080e60490124d3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::is_pure_bivalent</definition>
        <argsstring>() const</argsstring>
        <name>is_pure_bivalent</name>
        <qualifiedname>CGAL::Polyhedron_3::is_pure_bivalent</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all vertices have exactly two incident edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1237" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1abb5fbc55c8a0e94ec9720fc951632ab0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::is_pure_trivalent</definition>
        <argsstring>() const</argsstring>
        <name>is_pure_trivalent</name>
        <qualifiedname>CGAL::Polyhedron_3::is_pure_trivalent</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all vertices have exactly three incident edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1243" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a13ab704a6d26eb91c55cdb6828442ab1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::is_pure_triangle</definition>
        <argsstring>() const</argsstring>
        <name>is_pure_triangle</name>
        <qualifiedname>CGAL::Polyhedron_3::is_pure_triangle</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all facets are triangles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1249" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1affb9ffd609b66df43da8b3a7c352ccdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::is_pure_quad</definition>
        <argsstring>() const</argsstring>
        <name>is_pure_quad</name>
        <qualifiedname>CGAL::Polyhedron_3::is_pure_quad</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all facets are quadrilaterals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1255" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a0ff0a8c56eb8020fa517fca70b9b08d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::is_triangle</definition>
        <argsstring>(Halfedge_const_handle h) const</argsstring>
        <name>is_triangle</name>
        <qualifiedname>CGAL::Polyhedron_3::is_triangle</qualifiedname>
        <param>
          <type>Halfedge_const_handle</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>h</computeroutput> is a triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1261" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1af8993fad62cbddf613a26285bdb9fee8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::is_tetrahedron</definition>
        <argsstring>(Halfedge_const_handle h) const</argsstring>
        <name>is_tetrahedron</name>
        <qualifiedname>CGAL::Polyhedron_3::is_tetrahedron</qualifiedname>
        <param>
          <type>Halfedge_const_handle</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>h</computeroutput> is a tetrahedron. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1267" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Euler Operators (Combinatorial Modifications)</header>
      <description><para><anchor id="classCGAL_1_1Polyhedron__3_1sectionPolyhedronEuler"/> </para>
<para>The following <ref refid="group__PkgBGLEulerOperations" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Euler</ref> operations modify consistently the combinatorial structure of the polyhedral surface. The geometry remains unchanged. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a3ef41ae6c3be7f0894479f3dd4fe34d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::split_facet</definition>
        <argsstring>(Halfedge_handle h, Halfedge_handle g)</argsstring>
        <name>split_facet</name>
        <qualifiedname>CGAL::Polyhedron_3::split_facet</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>splits the facet incident to <computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> into two facets with a new diagonal between the two vertices denoted by <computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> respectively. </para>
        </briefdescription>
        <detaileddescription>
<para>The second (new) facet is a copy of the first facet. Returns <computeroutput>h-&gt;next()</computeroutput> after the operation, i.e., the new diagonal. The new face is to the right of the new diagonal, the old face is to the left. The time is proportional to the distance from <computeroutput>h</computeroutput> to <computeroutput>g</computeroutput> around the facet. <simplesect kind="pre"><para><computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> are incident to the same facet. <computeroutput>h != g</computeroutput> (no loops). <computeroutput>h-&gt;next() != g</computeroutput> and <computeroutput>g-&gt;next() != h</computeroutput> (no multi-edges).</para>
</simplesect>
<image type="html" name="euler_facet.png"></image>
 <image type="latex" name="euler_facet.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1295" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a4f3e7c4e0800462026443a7ad0ca6db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::join_facet</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>join_facet</name>
        <qualifiedname>CGAL::Polyhedron_3::join_facet</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>joins the two facets incident to <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The facet incident to <computeroutput>h-&gt;opposite()</computeroutput> gets removed. Both facets might be holes. Returns the predecessor of <computeroutput>h</computeroutput> around the facet. The invariant <computeroutput>join_facet( split_facet( h, g))</computeroutput> returns <computeroutput>h</computeroutput> and keeps the polyhedron unchanged. The time is proportional to the size of the facet removed and the time to compute <computeroutput>h-&gt;prev()</computeroutput>. <simplesect kind="pre"><para>The degree of both vertices incident to <computeroutput>h</computeroutput> is at least three (no antennas).</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>Supports_removal</computeroutput> must be <computeroutput><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>.</para>
</simplesect>
<image type="html" name="euler_facet.png"></image>
 <image type="latex" name="euler_facet.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1313" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a2b17d7bd2045397167b00616f3b4d622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::split_vertex</definition>
        <argsstring>(Halfedge_handle h, Halfedge_handle g)</argsstring>
        <name>split_vertex</name>
        <qualifiedname>CGAL::Polyhedron_3::split_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>splits the vertex incident to <computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> into two vertices, the old vertex remains and a new copy is created, and connects them with a new edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Let <computeroutput>hnew</computeroutput> be <computeroutput>h-&gt;next()-&gt;opposite()</computeroutput> after the split, i.e., a halfedge of the new edge. The split regroups the halfedges around the two vertices. The halfedge sequence <computeroutput>hnew</computeroutput>, <computeroutput>g-&gt;next()-&gt;opposite()</computeroutput>, <formula id="3">$ \ldots$</formula> , <computeroutput>h</computeroutput> remains around the old vertex, while the halfedge sequence <computeroutput>hnew-&gt;opposite()</computeroutput>, <computeroutput>h-&gt;next()-&gt;opposite()</computeroutput> (before the split), <formula id="3">$ \ldots$</formula> , <computeroutput>g</computeroutput> is regrouped around the new vertex. The split returns <computeroutput>hnew</computeroutput>, i.e., the new halfedge incident to the old vertex. The time is proportional to the distance from <computeroutput>h</computeroutput> to <computeroutput>g</computeroutput> around the vertex. <simplesect kind="pre"><para><computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> are incident to the same vertex. <computeroutput>h != g</computeroutput> (antennas are not allowed).</para>
</simplesect>
<image type="html" name="euler_vertex.png"></image>
 <image type="latex" name="euler_vertex.png"></image>
</para>
<para><simplesect kind="note"><para>A special application of the split is <computeroutput>split_vertex(h,h-&gt;next()-&gt;opposite())</computeroutput> which is equivalent to an edge split of the halfedge <computeroutput>h-&gt;next()</computeroutput> that creates a new vertex on the halfedge <computeroutput>h-&gt;next()</computeroutput>. See also <computeroutput>split_edge(h)</computeroutput> below. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1340" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a8edb13d0fb5748b20a8173bec85e7243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::join_vertex</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>join_vertex</name>
        <qualifiedname>CGAL::Polyhedron_3::join_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>joins the two vertices incident to <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The vertex denoted by <computeroutput>h-&gt;<ref refid="group__kernel__enums_1gad0a8110cb95f76bac65649bfe58c650b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">opposite()</ref></computeroutput> gets removed. Returns the predecessor of <computeroutput>h</computeroutput> around the vertex, i.e., <computeroutput>h-&gt;opposite()-&gt;prev()</computeroutput>. The invariant <computeroutput>join_vertex( split_vertex( h, g))</computeroutput> returns <computeroutput>h</computeroutput> and keeps the polyhedron unchanged. The time is proportional to the degree of the vertex removed and the time to compute <computeroutput>h-&gt;prev()</computeroutput> and <computeroutput>h-&gt;opposite()-&gt;prev()</computeroutput>. <simplesect kind="pre"><para>The size of both facets incident to <computeroutput>h</computeroutput> is at least four (no multi-edges).</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>Supports_removal</computeroutput> must be <computeroutput><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>.</para>
</simplesect>
<image type="html" name="euler_vertex.png"></image>
 <image type="latex" name="euler_vertex.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1358" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ab3269baf4b4c6ce61b86545b8fa360d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::split_edge</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>split_edge</name>
        <qualifiedname>CGAL::Polyhedron_3::split_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>splits the halfedge <computeroutput>h</computeroutput> into two halfedges inserting a new vertex that is a copy of <computeroutput>h-&gt;opposite()-&gt;vertex()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Is equivalent to <computeroutput>split_vertex( h-&gt;prev(), h-&gt;opposite())-&gt;<ref refid="group__kernel__enums_1gad0a8110cb95f76bac65649bfe58c650b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">opposite()</ref></computeroutput>. The call of <computeroutput>prev()</computeroutput> can make this method slower than a direct call of <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1a2b17d7bd2045397167b00616f3b4d622" kindref="member">split_vertex()</ref></computeroutput> if the previous halfedge is already known and computing it would be costly when the halfedge data structure does not support the <computeroutput>prev()</computeroutput> member function. Returns the new halfedge <computeroutput>hnew</computeroutput> pointing to the inserted vertex. The new halfedge is followed by the old halfedge, i.e., <computeroutput>hnew-&gt;next() == h</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1372" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a633723d9b2f8a5972b8bfb4a4ea601ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::flip_edge</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>flip_edge</name>
        <qualifiedname>CGAL::Polyhedron_3::flip_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>performs an edge flip. </para>
        </briefdescription>
        <detaileddescription>
<para>It returns <computeroutput>h</computeroutput> after rotating the edge <computeroutput>h</computeroutput> one vertex in the direction of the face orientation. <simplesect kind="pre"><para><computeroutput>h != <ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle()</ref></computeroutput> and both facets incident to <computeroutput>h</computeroutput> are triangles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1379" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1aca3b991cd6d926fd5b51b25766d36fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::create_center_vertex</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>create_center_vertex</name>
        <qualifiedname>CGAL::Polyhedron_3::create_center_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>barycentric triangulation of <computeroutput>h-&gt;facet()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a new vertex, a copy of <computeroutput>h-&gt;vertex()</computeroutput>, and connects it to each vertex incident to <computeroutput>h-&gt;facet()</computeroutput> splitting <computeroutput>h-&gt;facet()</computeroutput> into triangles. <computeroutput>h</computeroutput> remains incident to the original facet, all other triangles are copies of this facet. Returns the halfedge <computeroutput>h-&gt;next()</computeroutput> after the operation, i.e., a halfedge pointing to the new vertex. The time is proportional to the size of the facet. <simplesect kind="pre"><para><computeroutput>h</computeroutput> is not a border halfedge.</para>
</simplesect>
<image type="html" name="euler_center.png"></image>
 <image type="latex" name="euler_center.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1395" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a2d08e7da8a337ed90b0db2e9a37d21c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::erase_center_vertex</definition>
        <argsstring>(Halfedge_handle g)</argsstring>
        <name>erase_center_vertex</name>
        <qualifiedname>CGAL::Polyhedron_3::erase_center_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>reverses <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1aca3b991cd6d926fd5b51b25766d36fad" kindref="member">create_center_vertex()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Erases the vertex pointed to by <computeroutput>g</computeroutput> and all incident halfedges thereby merging all incident facets. Only <computeroutput>g-&gt;facet()</computeroutput> remains. The neighborhood of <computeroutput>g-&gt;vertex()</computeroutput> may not be triangulated, it can have larger facets. Returns the halfedge <computeroutput>g-&gt;prev()</computeroutput>. Thus, the invariant <computeroutput>h == erase_center_vertex( create_center_vertex(h))</computeroutput> holds if <computeroutput>h</computeroutput> is not a border halfedge. The time is proportional to the sum of the size of all incident facets. <simplesect kind="pre"><para>None of the incident facets of <computeroutput>g-&gt;vertex()</computeroutput> is a hole. There are at least two distinct facets incident to the facets that are incident to <computeroutput>g-&gt;vertex()</computeroutput>. (This prevents the operation from collapsing a volume into two facets glued together with opposite orientations, such as would happen with any vertex of a tetrahedron.)</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>Supports_removal</computeroutput> must be <computeroutput><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>.</para>
</simplesect>
<image type="html" name="euler_center.png"></image>
 <image type="latex" name="euler_center.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1412" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Euler Operators Modifying Genus</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a375a1b49bc6ad2ad5c578d7a7c45e4f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::split_loop</definition>
        <argsstring>(Halfedge_handle h, Halfedge_handle i, Halfedge_handle j)</argsstring>
        <name>split_loop</name>
        <qualifiedname>CGAL::Polyhedron_3::split_loop</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>cuts the polyhedron into two parts along the cycle <computeroutput>(h,i,j)</computeroutput> (edge <computeroutput>j</computeroutput> runs on the backside of the three dimensional figure above). </para>
        </briefdescription>
        <detaileddescription>
<para>Three new vertices (one copy for each vertex in the cycle) and three new halfedges (one copy for each halfedge in the cycle), and two new triangles are created. <computeroutput>h,i,j</computeroutput> will be incident to the first new triangle. The return value will be the halfedge incident to the second new triangle which is the copy of <computeroutput>h-opposite()</computeroutput>. <simplesect kind="pre"><para><computeroutput>h</computeroutput>, <computeroutput>i</computeroutput>, <computeroutput>j</computeroutput> denote distinct, consecutive vertices of the polyhedron and form a cycle: i.e., <computeroutput>h-&gt;vertex() == i-&gt;opposite()-&gt;vertex()</computeroutput>, <formula id="3">$ \ldots$</formula> , <computeroutput>j-&gt;vertex() == h-&gt;opposite()-&gt;vertex()</computeroutput>. The six facets incident to <computeroutput>(h,i,j)</computeroutput> are all distinct.</para>
</simplesect>
<image type="html" name="euler_loop.png"></image>
 <image type="latex" name="euler_loop.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1432" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ad5a29fe94196629193da3c95e5eba5e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::join_loop</definition>
        <argsstring>(Halfedge_handle h, Halfedge_handle g)</argsstring>
        <name>join_loop</name>
        <qualifiedname>CGAL::Polyhedron_3::join_loop</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>glues the boundary of the two facets denoted by <computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> together and returns <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Both facets and the vertices along the facet denoted by <computeroutput>g</computeroutput> gets removed. Both facets may be holes. The invariant <computeroutput>join_loop( h, split_loop( h, i, j))</computeroutput> returns <computeroutput>h</computeroutput> and keeps the polyhedron unchanged. <simplesect kind="pre"><para>The facets denoted by <computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> are different and have equal degree (i.e., number of edges). </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>Supports_removal</computeroutput> must be <computeroutput><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>.</para>
</simplesect>
<image type="html" name="euler_loop.png"></image>
 <image type="latex" name="euler_loop.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1449" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifying Facets and Holes</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a228add3cae2d328bcdd67192a98fb636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::make_hole</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>make_hole</name>
        <qualifiedname>CGAL::Polyhedron_3::make_hole</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>removes the incident facet of <computeroutput>h</computeroutput> and changes all halfedges incident to the facet into border edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>h</computeroutput>. See <computeroutput>erase_facet(h)</computeroutput> for a more generalized variant. <simplesect kind="pre"><para>None of the incident halfedges of the facet is a border edge.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>Supports_removal</computeroutput> must be <computeroutput><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1465" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ae05ca3c53d3ec0ce9e84c4b173b48e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::fill_hole</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>fill_hole</name>
        <qualifiedname>CGAL::Polyhedron_3::fill_hole</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>fills a hole with a newly created facet. </para>
        </briefdescription>
        <detaileddescription>
<para>Makes all border halfedges of the hole denoted by <computeroutput>h</computeroutput> incident to the new facet. Returns <computeroutput>h</computeroutput>. <simplesect kind="pre"><para><computeroutput>h.is_border()</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1473" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a684bc8315f9e97d59e10bf896f0a166c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::add_vertex_and_facet_to_border</definition>
        <argsstring>(Halfedge_handle h, Halfedge_handle g)</argsstring>
        <name>add_vertex_and_facet_to_border</name>
        <qualifiedname>CGAL::Polyhedron_3::add_vertex_and_facet_to_border</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>creates a new facet within the hole incident to <computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> by connecting the tip of <computeroutput>g</computeroutput> with the tip of <computeroutput>h</computeroutput> with two new halfedges and a new vertex and filling this separated part of the hole with a new facet, such that the new facet is incident to <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the halfedge of the new edge that is incident to the new facet and the new vertex. <simplesect kind="pre"><para><computeroutput>h-&gt;<ref refid="group__PkgBGLHelperFct_1gad93e429ad24efeaddeb836c437e719ab" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">is_border()</ref></computeroutput>, <computeroutput>g-&gt;<ref refid="group__PkgBGLHelperFct_1gad93e429ad24efeaddeb836c437e719ab" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">is_border()</ref></computeroutput>, <computeroutput>h != g</computeroutput>, and <computeroutput>g</computeroutput> can be reached along the same hole starting with <computeroutput>h</computeroutput>.</para>
</simplesect>
<image type="html" name="add_facet1.png"></image>
 <image type="latex" name="add_facet1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1487" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a73119c0c90bf8612da003305af25a52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Polyhedron_3&lt; Traits &gt;::add_facet_to_border</definition>
        <argsstring>(Halfedge_handle h, Halfedge_handle g)</argsstring>
        <name>add_facet_to_border</name>
        <qualifiedname>CGAL::Polyhedron_3::add_facet_to_border</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>creates a new facet within the hole incident to <computeroutput>h</computeroutput> and <computeroutput>g</computeroutput> by connecting the vertex denoted by <computeroutput>g</computeroutput> with the vertex denoted by <computeroutput>h</computeroutput> with a new halfedge and filling this separated part of the hole with a new facet, such that the new facet is incident to <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the halfedge of the new edge that is incident to the new facet. <simplesect kind="pre"><para><computeroutput>h-&gt;<ref refid="group__PkgBGLHelperFct_1gad93e429ad24efeaddeb836c437e719ab" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">is_border()</ref></computeroutput>, <computeroutput>g-&gt;<ref refid="group__PkgBGLHelperFct_1gad93e429ad24efeaddeb836c437e719ab" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">is_border()</ref></computeroutput>, <computeroutput>h != g</computeroutput>, <computeroutput>h-&gt;next() != g</computeroutput>, and <computeroutput>g</computeroutput> can be reached along the same hole starting with <computeroutput>h</computeroutput>.</para>
</simplesect>
<image type="html" name="add_facet2.png"></image>
 <image type="latex" name="add_facet2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1502" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Erasing</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ac67041483c1e7c67c8dfd87716feebea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_3&lt; Traits &gt;::erase_facet</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>erase_facet</name>
        <qualifiedname>CGAL::Polyhedron_3::erase_facet</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>removes the incident facet of <computeroutput>h</computeroutput> and changes all halfedges incident to the facet into border edges or removes them from the polyhedral surface if they were already border edges. </para>
        </briefdescription>
        <detaileddescription>
<para>If this creates isolated vertices they get removed as well. See <computeroutput>make_hole(h)</computeroutput> for a more specialized variant.</para>
<para><simplesect kind="pre"><para><computeroutput>h-&gt;<ref refid="group__PkgBGLHelperFct_1gad93e429ad24efeaddeb836c437e719ab" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">is_border()</ref> == false</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>Supports_removal</computeroutput> must be <computeroutput><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput></para>
</simplesect>
<image type="html" name="add_facet1.png"></image>
 <image type="latex" name="add_facet1.png"></image>
</para>
<para><image type="html" name="add_facet2.png"></image>
 <image type="latex" name="add_facet2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1526" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a8497a896e1f23905c04accf99957afa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_3&lt; Traits &gt;::erase_connected_component</definition>
        <argsstring>(Halfedge_handle h)</argsstring>
        <name>erase_connected_component</name>
        <qualifiedname>CGAL::Polyhedron_3::erase_connected_component</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>removes the vertices, halfedges, and facets that belong to the connected component of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>Supports_removal</computeroutput> must be <computeroutput><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1534" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a55f13c9c3dd5ab611d08dcd346d9190e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CGAL::Polyhedron_3&lt; Traits &gt;::keep_largest_connected_components</definition>
        <argsstring>(unsigned int nb_components_to_keep)</argsstring>
        <name>keep_largest_connected_components</name>
        <qualifiedname>CGAL::Polyhedron_3::keep_largest_connected_components</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>nb_components_to_keep</declname>
        </param>
        <briefdescription>
<para>Erases the small connected components and the isolated vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Keep <computeroutput>nb_components_to_keep</computeroutput> largest connected components. Returns the number of connected components erased (ignoring isolated vertices).</para>
<para>The polyhedron type must support vertices, halfedges, and removal operations.</para>
<para>Note that a stronger version of this function is offered by the package <ref refid="packages_1PkgPolygonMeshProcessing" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Polygon Mesh Processing</ref> : <ref refid="group__PMP__keep__connected__components__grp_1gae3812da28af74bdf9602a70ae1f9c817" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag"><computeroutput>CGAL::Polygon_mesh_processing::keep_largest_connected_components()</computeroutput> </ref>, which can be called since the class <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref></computeroutput> is a model of the required concepts <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> (see <ref refid="index_1BGLPolyhedral" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">The Class Polyhedron_3 as Model of the Boost Graph Concept</ref> for more information). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1548" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a87ed6b369ce8b0c6ad22f7a20dc6dbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_3&lt; Traits &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::Polyhedron_3::clear</qualifiedname>
        <briefdescription>
<para>removes all vertices, halfedges, and facets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1553" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations with Border Halfedges</header>
      <description><para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>Halfedges incident to a hole are called <emphasis>border halfedges</emphasis>.</para>
<para>A halfedge is a <emphasis>border edge</emphasis> if itself or its opposite halfedge are border halfedges. The only requirement to work with border halfedges is that the <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput> class provides a member function <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Halfedge_1af8a71da247cf7e1cade77a64ff7693e6" kindref="member">Halfedge::is_border()</ref></computeroutput> returning a <computeroutput>bool</computeroutput>. Usually, the halfedge data structure supports facets and a <computeroutput>NULL</computeroutput> facet pointer will indicate a border halfedge, but this is not the only possibility. The <computeroutput><ref refid="group__PkgBGLHelperFct_1gad93e429ad24efeaddeb836c437e719ab" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">is_border()</ref></computeroutput> predicate divides the edges into two classes, the border edges and the non-border edges. The following normalization reorganizes the sequential storage of the edges such that the non-border edges precede the border edges, and that for each border edge the latter one of the two halfedges is a border halfedge (the first one is a non-border halfedge in conformance with the polyhedral surface definition). The normalization stores the number of border halfedges and the halfedge iterator the border edges start at within the data structure. <ref refid="classCGAL_1_1Polyhedron__3_1_1Halfedge" kindref="compound">Halfedge</ref> insertion or removal and changing the border status of a halfedge invalidate these values. They are not automatically updated. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a6ca5eddcfe19c5b69a500f39a0bfdbe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_3&lt; Traits &gt;::normalize_border</definition>
        <argsstring>()</argsstring>
        <name>normalize_border</name>
        <qualifiedname>CGAL::Polyhedron_3::normalize_border</qualifiedname>
        <briefdescription>
<para>sorts halfedges such that the non-border edges precede the border edges. </para>
        </briefdescription>
        <detaileddescription>
<para>For each border edge the halfedge iterator will reference the halfedge incident to the facet right before the halfedge incident to the hole. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1589" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1af156bdee96bbf065953569fe026795d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Polyhedron_3&lt; Traits &gt;::size_of_border_halfedges</definition>
        <argsstring>() const</argsstring>
        <name>size_of_border_halfedges</name>
        <qualifiedname>CGAL::Polyhedron_3::size_of_border_halfedges</qualifiedname>
        <briefdescription>
<para>number of border halfedges. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>last <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1a6ca5eddcfe19c5b69a500f39a0bfdbe5" kindref="member">normalize_border()</ref></computeroutput> call still valid, see above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1595" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a1a1dbed72ce1b001446dd3ce25155d30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Polyhedron_3&lt; Traits &gt;::size_of_border_edges</definition>
        <argsstring>() const</argsstring>
        <name>size_of_border_edges</name>
        <qualifiedname>CGAL::Polyhedron_3::size_of_border_edges</qualifiedname>
        <briefdescription>
<para>number of border edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Since each border edge of a polyhedral surface has exactly one border halfedge, this number is equal to <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1af156bdee96bbf065953569fe026795d9" kindref="member">size_of_border_halfedges()</ref></computeroutput>. <simplesect kind="pre"><para>last <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1a6ca5eddcfe19c5b69a500f39a0bfdbe5" kindref="member">normalize_border()</ref></computeroutput> call still valid, see above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1603" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1acf8b79d9652f049ca360d805f73ba16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a6c11afde7bae6be0cc0006d0b2512a19" kindref="member">Halfedge_iterator</ref></type>
        <definition>Halfedge_iterator CGAL::Polyhedron_3&lt; Traits &gt;::border_halfedges_begin</definition>
        <argsstring>()</argsstring>
        <name>border_halfedges_begin</name>
        <qualifiedname>CGAL::Polyhedron_3::border_halfedges_begin</qualifiedname>
        <briefdescription>
<para>halfedge iterator starting with the border edges. </para>
        </briefdescription>
        <detaileddescription>
<para>The range [<computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1a8d38f95397f743187bdd389b2f83a3c4" kindref="member">halfedges_begin()</ref>, <ref refid="classCGAL_1_1Polyhedron__3_1acf8b79d9652f049ca360d805f73ba16f" kindref="member">border_halfedges_begin()</ref></computeroutput>) denotes all non-border halfedges. The range [<computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1acf8b79d9652f049ca360d805f73ba16f" kindref="member">border_halfedges_begin()</ref>, <ref refid="classCGAL_1_1Polyhedron__3_1abe1c7ae1fab1b3c7315b32d5d34ff2de" kindref="member">halfedges_end()</ref></computeroutput>) denotes all border edges. <simplesect kind="pre"><para>last <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1a6ca5eddcfe19c5b69a500f39a0bfdbe5" kindref="member">normalize_border()</ref></computeroutput> call still valid, see above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1613" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a4c3aeee01fe5fab394f364d5b117a21b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Polyhedron__3_1a260c899118aefbf92f85dcd72ce43851" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator CGAL::Polyhedron_3&lt; Traits &gt;::border_edges_begin</definition>
        <argsstring>()</argsstring>
        <name>border_edges_begin</name>
        <qualifiedname>CGAL::Polyhedron_3::border_edges_begin</qualifiedname>
        <briefdescription>
<para>edge iterator starting with the border edges. </para>
        </briefdescription>
        <detaileddescription>
<para>The range [<computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1a251ab9cb55e77ad4ad6923914d5e65ea" kindref="member">edges_begin()</ref>, <ref refid="classCGAL_1_1Polyhedron__3_1a4c3aeee01fe5fab394f364d5b117a21b" kindref="member">border_edges_begin()</ref></computeroutput>) denotes all non-border edges. The range [<computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1a4c3aeee01fe5fab394f364d5b117a21b" kindref="member">border_edges_begin()</ref>, <ref refid="classCGAL_1_1Polyhedron__3_1a9ea95c5501c1af4d6a17b18c929c8faf" kindref="member">edges_end()</ref></computeroutput>) denotes all border edges. <simplesect kind="pre"><para>last <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1a6ca5eddcfe19c5b69a500f39a0bfdbe5" kindref="member">normalize_border()</ref></computeroutput> call still valid, see above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1623" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ac12b817b3d651cce74fbdaa711bacf33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_3&lt; Traits &gt;::inside_out</definition>
        <argsstring>()</argsstring>
        <name>inside_out</name>
        <qualifiedname>CGAL::Polyhedron_3::inside_out</qualifiedname>
        <briefdescription>
<para>reverses facet orientations (incl. plane equations if supported). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1633" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a3d67f3adbc2965b2ea54607d4f85ae89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::is_valid</definition>
        <argsstring>(bool verbose=false, int level=0) const</argsstring>
        <name>is_valid</name>
        <qualifiedname>CGAL::Polyhedron_3::is_valid</qualifiedname>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the polyhedral surface is combinatorially consistent. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>verbose</computeroutput> is <computeroutput>true</computeroutput>, statistics are printed to <computeroutput>cerr</computeroutput>. For <computeroutput>level == 1</computeroutput> the normalization of the border edges is checked too. This method checks in particular level 3 of <computeroutput>CGAL::Halfedge_data_structure_decorator::is_valid()</computeroutput> from <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__const__decorator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">CGAL::HalfedgeDS_const_decorator</ref></computeroutput> and that each facet is at least a triangle and that the two incident facets of a non-border edge are distinct. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1645" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1adb2db37bc2fcdd3e051260af9259f34e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedron_3&lt; Traits &gt;::normalized_border_is_valid</definition>
        <argsstring>(bool verbose=false) const</argsstring>
        <name>normalized_border_is_valid</name>
        <qualifiedname>CGAL::Polyhedron_3::normalized_border_is_valid</qualifiedname>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the border halfedges are in normalized representation, which is when enumerating all halfedges with the iterator: The non-border edges precede the border edges and for border edges, the second halfedge is the border halfedge. </para>
        </briefdescription>
        <detaileddescription>
<para>The halfedge iterator <computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1acf8b79d9652f049ca360d805f73ba16f" kindref="member">border_halfedges_begin()</ref></computeroutput> denotes the first border edge. If <computeroutput>verbose</computeroutput> is <computeroutput>true</computeroutput>, statistics are printed to <computeroutput>cerr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1657" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1a7d5683b471d99bff3d73a467688151c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Polyhedron_3&lt; Traits &gt;::delegate</definition>
        <argsstring>(CGAL::Modifier_base&lt; HDS &gt; &amp;m)</argsstring>
        <name>delegate</name>
        <qualifiedname>CGAL::Polyhedron_3::delegate</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Modifier__base" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Miscellany.tag">CGAL::Modifier_base</ref>&lt; HDS &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>
        </briefdescription>
        <detaileddescription>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>calls the <computeroutput><ref refid="classCGAL_1_1Modifier__base_1a08a0a229b834229b3d35c8fb122cb488" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Miscellany.tag">Modifier_base::operator()()</ref></computeroutput> of the modifier <computeroutput>m</computeroutput>. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <simplesect kind="pre"><para>The polyhedral surface must be valid when the modifier returns from execution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedron_3.h" line="1666" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="group__PkgPolyhedronIOFunc_1gaccd9d4d15af1376dbc166eb501f28980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool read_OFF</definition>
        <argsstring>(std::istream &amp;in, Polyhedron_3&lt; Traits &gt; &amp;P)</argsstring>
        <name>read_OFF</name>
        <qualifiedname>CGAL::Polyhedron_3::read_OFF</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &gt; &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>reads a polyhedral surface in Object File Format, OFF, with file extension <computeroutput>.off</computeroutput>, from the input stream <computeroutput>in</computeroutput> and appends it to the polyhedral surface <formula id="0">$ P$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>Only the point coordinates and facets from the input stream are used to build the polyhedral surface. Neither normal vectors nor color attributes are evaluated.</para>
<para>This function overloads the generic function <ref refid="group__PkgBGLIoFuncsOFF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag"><computeroutput>read_OFF(std::istream&amp;, FaceGraph)</computeroutput></ref> (if no named parameters are used).</para>
<para><simplesect kind="note"><para>This function requires <computeroutput>Traits</computeroutput> to be a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> (a stronger requirement than <computeroutput><ref refid="classPolyhedronTraits__3" kindref="compound">PolyhedronTraits_3</ref></computeroutput>).</para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>This operator is implemented using the modifier mechanism for polyhedral surfaces and the <computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3" kindref="compound">Polyhedron_incremental_builder_3</ref></computeroutput> class, which allows the construction in a single, efficient scan pass of the input and handles also all the possible flexibility of the polyhedral surface.</para>
<para><simplesect kind="note"><para>Starting with CGAL 5.2, this function will no longer set the <computeroutput>ios::badbit</computeroutput> of the input stream <computeroutput>in</computeroutput> if the file contains 0 vertices.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">CGAL::Polyhedron_3</ref>&lt;Traits&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3" kindref="compound">CGAL::Polyhedron_incremental_builder_3</ref>&lt;HDS&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PkgPolyhedronIOFunc" kindref="compound"><computeroutput>operator&lt;&lt;(std::ostream&amp;, Polyhedron_3&lt;Traits&gt;&amp;)</computeroutput></ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/Polyhedron_iostream.h" line="35" column="6" declfile="CGAL/IO/Polyhedron_iostream.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1aeb28b4c481248fce96a79bf513f0d715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool read_off</definition>
        <argsstring>(std::ostream &amp;out, Polyhedron_3&lt; Traits &gt; &amp;P)</argsstring>
        <name>read_off</name>
        <qualifiedname>CGAL::Polyhedron_3::read_off</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &gt; &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.3, <ref refid="group__PkgPolyhedronIOFunc" kindref="compound"><computeroutput>CGAL::IO::read_OFF(std::ostream&amp;, Polyhedron_3&lt;Traits&gt;&amp;)</computeroutput> </ref> should be used instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/Polyhedron_iostream.h" line="43" column="6" declfile="CGAL/IO/Polyhedron_iostream.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolyhedronIOFunc_1ga9842e8b5cda1e38ad04aa7f80622bce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;in, Polyhedron_3&lt; Traits &gt; &amp;P)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::Polyhedron_3::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &gt; &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>calls <ref refid="group__PkgPolyhedronIOFunc_1gaccd9d4d15af1376dbc166eb501f28980" kindref="member"><computeroutput>read_OFF(in, P)</computeroutput> </ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/Polyhedron_iostream.h" line="51" column="14" declfile="CGAL/IO/Polyhedron_iostream.h" declline="51" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolyhedronIOFunc_1ga408af896e2203af605059494e620cb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool write_OFF</definition>
        <argsstring>(std::ostream &amp;out, const Polyhedron_3&lt; Traits &gt; &amp;P)</argsstring>
        <name>write_OFF</name>
        <qualifiedname>CGAL::Polyhedron_3::write_OFF</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &gt; &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>writes the polyhedral surface <formula id="1">$P$</formula> to the output stream <computeroutput>out</computeroutput> using the Object File Format, OFF, with file extension <computeroutput>.off</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The output is in ASCII format. From the polyhedral surface, only the point coordinates and facets are written. Neither normal vectors nor color attributes are used.</para>
<para>For <computeroutput>OFF</computeroutput> an ASCII and a binary format exist. The format can be selected with the CGAL modifiers for streams, <computeroutput>set_ascii_mode()</computeroutput> and <computeroutput>set_binary_mode()</computeroutput> respectively. The modifier <computeroutput>set_pretty_mode()</computeroutput> can be used to allow for (a few) structuring comments in the output. Otherwise, the output would be free of comments. The default for writing is ASCII without comments.</para>
<para>This function overloads the generic function <ref refid="group__PkgBGLIoFuncsOFF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag"><computeroutput>write_OFF(std::istream&amp;,FaceGraph)</computeroutput> </ref> (if no named parameters are used).</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">CGAL::Polyhedron_3</ref>&lt;Traits&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3" kindref="compound">CGAL::Polyhedron_incremental_builder_3</ref>&lt;HDS&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PkgPolyhedronIOFunc" kindref="compound"><computeroutput>operator&gt;&gt;(std::istream&amp; in, Polyhedron_3&lt;Traits&gt;&amp; P)</computeroutput> </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/Polyhedron_iostream.h" line="78" column="6" declfile="CGAL/IO/Polyhedron_iostream.h" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Polyhedron__3_1ab9cb7a5361ace492fe0a7fbf758a5711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool write_off</definition>
        <argsstring>(std::ostream &amp;out, const Polyhedron_3&lt; Traits &gt; &amp;P)</argsstring>
        <name>write_off</name>
        <qualifiedname>CGAL::Polyhedron_3::write_off</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &gt; &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.3, <ref refid="group__PkgPolyhedronIOFunc" kindref="compound"><computeroutput>CGAL::IO::write_OFF(std::ostream&amp;, Polyhedron_3&lt;Traits&gt;&amp;)</computeroutput> </ref> should be used instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/Polyhedron_iostream.h" line="86" column="6" declfile="CGAL/IO/Polyhedron_iostream.h" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolyhedronIOFunc_1ga0672e8be92f0b71fe624525f80f850d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref></type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Polyhedron_3&lt; Traits &gt; &amp;P)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::Polyhedron_3::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Traits</ref> &gt; &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>calls <ref refid="group__PkgPolyhedronIOFunc_1ga408af896e2203af605059494e620cb64" kindref="member"><computeroutput>write_OFF(out, P)</computeroutput> </ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/Polyhedron_iostream.h" line="94" column="1" declfile="CGAL/IO/Polyhedron_iostream.h" declline="94" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A polyhedral surface <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref></computeroutput> consists of vertices <computeroutput>V</computeroutput>, edges <computeroutput>E</computeroutput>, facets <computeroutput>F</computeroutput> and an incidence relation on them. </para>
    </briefdescription>
    <detaileddescription>
<para>Each edge is represented by two halfedges with opposite orientations.</para>
<para><image type="html" name="halfedge.png"></image>
 <image type="latex" name="halfedge.png"></image>
</para>
<para>Vertices represent points in 3d-space. Edges are straight line segments between two endpoints. Facets are planar, possibly non-convex, polygons without holes defined by the circular sequence of halfedges along their boundary. The polyhedral surface itself can have holes. The halfedges along the boundary of a hole are called <emphasis>border halfedges</emphasis> and have no incident facet. An edge is a <emphasis>border edge</emphasis> if one of its halfedges is a border halfedge. A surface is <emphasis>closed</emphasis> if it contains no border halfedges. A closed surface is a boundary representation for a polyhedron in three dimensions. The convention is that the halfedges are oriented counterclockwise around facets as seen from the outside of the polyhedron. An implication is that the halfedges are oriented clockwise around the vertices. The notion of the solid side of a facet as defined by the halfedge orientation extends to polyhedral surfaces with border edges although they do not define a closed object. If normal vectors are considered for the facets, normals point outwards (following the right hand rule).</para>
<para>The strict definition can be found in <ref refid="citelist_1CITEREF_k-ugpdd-99" kindref="member">[3]</ref>. One implication of this definition is that the polyhedral surface is always an orientable and oriented 2-manifold with border edges, i.e., the neighborhood of each point on the polyhedral surface is either homeomorphic to a disc or to a half disc, except for vertices where multiple holes join. Another implication is that the smallest representable surface is a triangle (for polyhedral surfaces with border edges) or a tetrahedron (for polyhedra). Boundary representations of orientable 2-manifolds are closed under <ref refid="group__PkgBGLEulerOperations" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Euler</ref> operations. They are extended with operations that create or close holes in the surface.</para>
<para>Other intersections besides the incidence relation are not allowed, although they are not automatically handled, since self intersections are not easy to check efficiently. <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref></computeroutput> does only maintain the combinatorial integrity of the polyhedral surface (using <ref refid="group__PkgBGLEulerOperations" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Euler</ref> operations) and does not consider the coordinates of the points or any geometric information.</para>
<para>The class <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref></computeroutput> can represent polyhedral surfaces as well as polyhedra. The interface is designed in such a way that it is easy to ignore border edges and work only with polyhedra.</para>
<para>The sequence of edges can be ordered in the data structure on request such that the sequence starts with the non-border edges and ends with the border edges. Border edges are then itself ordered such that the halfedge which is incident to the facet comes first and the halfedge incident to the hole comes thereafter. This normalization step counts simultaneously the number of border edges. This number is zero if and only if the surface is a closed polyhedron. Note that this class does not maintain this counter nor the halfedge order during further modifications. There is no automatic caching done for auxiliary information.</para>
<para><bold>Parameters</bold><linebreak/>
</para>
<para>The full template declaration of <computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">Polyhedron_3</ref></computeroutput> states four template parameters:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPolyhedronTraits__3" kindref="compound">PolyhedronTraits_3</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPolyhedronItems__3" kindref="compound">PolyhedronItems_3</ref><sp/>=<sp/><ref refid="classCGAL_1_1Polyhedron__items__3" kindref="compound">CGAL::Polyhedron_items_3</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classHalfedgeDS" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS</ref><sp/>=<sp/><ref refid="classCGAL_1_1HalfedgeDS__default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">CGAL::HalfedgeDS_default</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Alloc<sp/>=<sp/><ref refid="group__PkgSTLExtensionRef_1ga859086d0e8d189c8c967229e024e5e82" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL_ALLOCATOR</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCGAL_1_1Polyhedron__3_1a58827beef13f3dd6b67f8337709bc501" kindref="member">Polyhedron_3</ref>;</highlight></codeline>
</programlisting></para>
<para>The first parameter requires a model of the <computeroutput><ref refid="classPolyhedronTraits__3" kindref="compound">PolyhedronTraits_3</ref></computeroutput> concept as argument, for example <computeroutput><ref refid="classCGAL_1_1Polyhedron__traits__3" kindref="compound">CGAL::Polyhedron_traits_3</ref></computeroutput>. The second parameter expects a model of the <computeroutput><ref refid="classPolyhedronItems__3" kindref="compound">PolyhedronItems_3</ref></computeroutput> concept. By default, the class <computeroutput><ref refid="classCGAL_1_1Polyhedron__items__3" kindref="compound">CGAL::Polyhedron_items_3</ref></computeroutput> is preselected. The third parameter is a class template. A model of the <computeroutput><ref refid="classHalfedgeDS" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS</ref></computeroutput> concept is expected. By default, the class <computeroutput><ref refid="classCGAL_1_1HalfedgeDS__default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">CGAL::HalfedgeDS_default</ref></computeroutput> is preselected, which is a list based implementation of the halfedge data structure. The fourth parameter <computeroutput>Alloc</computeroutput> requires a standard allocator for STL container classes. The <computeroutput>rebind</computeroutput> mechanism from <computeroutput>Alloc</computeroutput> will be used to create appropriate allocators internally. A default is provided with the macro <computeroutput><ref refid="group__PkgSTLExtensionRef_1ga859086d0e8d189c8c967229e024e5e82" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL_ALLOCATOR(int)</ref></computeroutput> from the <computeroutput>&lt;CGAL/memory.h&gt;</computeroutput> header file.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Vertex" kindref="compound">CGAL::Polyhedron_3::Vertex</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Halfedge" kindref="compound">CGAL::Polyhedron_3::Halfedge</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3_1_1Facet" kindref="compound">CGAL::Polyhedron_3::Facet</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolyhedronTraits__3" kindref="compound">PolyhedronTraits_3</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__traits__3" kindref="compound">CGAL::Polyhedron_traits_3</ref>&lt;<ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolyhedronItems__3" kindref="compound">PolyhedronItems_3</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__items__3" kindref="compound">CGAL::Polyhedron_items_3</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classHalfedgeDS" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">HalfedgeDS</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1HalfedgeDS__default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/HalfedgeDS.tag">CGAL::HalfedgeDS_default</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__incremental__builder__3" kindref="compound">CGAL::Polyhedron_incremental_builder_3</ref>&lt;HDS&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Modifier__base" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Miscellany.tag">CGAL::Modifier_base</ref></computeroutput>.</para>
</simplesect>
<bold>Example</bold><linebreak/>
</para>
<para>This example program instantiates a polyhedron using the default traits class and creates a tetrahedron.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Polyhedron_2polyhedron_prog_simple_8cpp-example" kindref="compound">Polyhedron/polyhedron_prog_simple.cpp</ref> <programlisting filename="Polyhedron/polyhedron_prog_simple.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simple_cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedron_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian&lt;double&gt;</ref><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound">CGAL::Polyhedron_3&lt;Kernel&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Polyhedron::Halfedge_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Polyhedron<sp/>P;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" kindref="member">Halfedge_handle</ref><sp/>h<sp/>=<sp/>P.make_tetrahedron();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>P.is_tetrahedron(h))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="CGAL/Polyhedron_3.h" line="113" column="1" bodyfile="CGAL/Polyhedron_3.h" bodystart="113" bodyend="1671"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Polyhedron__3_1a73119c0c90bf8612da003305af25a52a" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>add_facet_to_border</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a684bc8315f9e97d59e10bf896f0a166c" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>add_vertex_and_facet_to_border</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1add0588183a0e107bd7e2dc78909ca127" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>allocator_type</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a4c3aeee01fe5fab394f364d5b117a21b" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>border_edges_begin</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1acf8b79d9652f049ca360d805f73ba16f" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>border_halfedges_begin</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aa889170efd14f009004ab521606dc605" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>bytes</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a47000d54bd804fed1e4cc45c2dea122e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>bytes_reserved</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ac70e38b205cfcdbaa0a51d047f16e01d" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>capacity_of_facets</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a56711d646b29d468566e9e7371d36f93" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>capacity_of_halfedges</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a5d999a50161f1353143e8d64e889ebc5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>capacity_of_vertices</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a72c27f9439dcb1889505ecece9b4e206" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>circulator_category</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a87ed6b369ce8b0c6ad22f7a20dc6dbc9" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aca3b991cd6d926fd5b51b25766d36fad" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>create_center_vertex</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a7d5683b471d99bff3d73a467688151c5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>delegate</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1abac442c83261a025d773fcf2a64cd953" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a260c899118aefbf92f85dcd72ce43851" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Edge_iterator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a1dfc0b86a7634374c1ec25f3bf6fbb2d" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Edges</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a3c6662c06a8bb50b271fea179dd07fa3" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>edges</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a251ab9cb55e77ad4ad6923914d5e65ea" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>edges_begin</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a9ea95c5501c1af4d6a17b18c929c8faf" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>edges_end</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a8ce3e77931cf80fcda9c3c89564f1443" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>empty</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a2d08e7da8a337ed90b0db2e9a37d21c6" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>erase_center_vertex</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a8497a896e1f23905c04accf99957afa1" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>erase_connected_component</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ac67041483c1e7c67c8dfd87716feebea" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>erase_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ad44731fbb60766ae1ea8e46b69d3cbbf" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Facet_handle</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a77a50500124207ecc42e8da2b47e0012" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>facet_handles</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a53b1123a65846e5e61a6bb0fd29bf847" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Facet_handles</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a11883e7be5e610e823ebb46605e8772f" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Facet_iterator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a7bdcf3f2936fa9a27faf91536d953cba" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>facets_begin</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ab34dd6ee47881cc822f578a9ba534f83" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>facets_end</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ae05ca3c53d3ec0ce9e84c4b173b48e3e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>fill_hole</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a633723d9b2f8a5972b8bfb4a4ea601ee" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>flip_edge</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ab741e3641ed4363ab156022525f82171" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>get_allocator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aaa493b9f4e392204345ecf79ebbd37e8" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Halfedge_around_facet_circulator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a0bed29e3f406b13c8605f3f3e98d7175" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Halfedge_around_vertex_circulator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a5ea0a8e088c2e98a6f1312d32f0a4967" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Halfedge_handle</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a6659085c476499a617c39ef16f54e84e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Halfedge_handles</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aa5b19c47be114464b47a91bc60372c7c" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>halfedge_handles</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a6c11afde7bae6be0cc0006d0b2512a19" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Halfedge_iterator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ab17a61da2a32f50b861cc261cd32c0bd" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>HalfedgeDS</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a8d38f95397f743187bdd389b2f83a3c4" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>halfedges_begin</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1abe1c7ae1fab1b3c7315b32d5d34ff2de" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>halfedges_end</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ac12b817b3d651cce74fbdaa711bacf33" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>inside_out</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a4afb025815064d4f125b8d3b0ba2b6f7" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>is_closed</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a2415e1795ff4257b2080e60490124d3d" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>is_pure_bivalent</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1affb9ffd609b66df43da8b3a7c352ccdc" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>is_pure_quad</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a13ab704a6d26eb91c55cdb6828442ab1" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>is_pure_triangle</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1abb5fbc55c8a0e94ec9720fc951632ab0" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>is_pure_trivalent</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1af8993fad62cbddf613a26285bdb9fee8" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>is_tetrahedron</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a0ff0a8c56eb8020fa517fca70b9b08d1" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>is_triangle</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a3d67f3adbc2965b2ea54607d4f85ae89" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a82fc1b399742114ebc63c98405885e7b" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Items</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a7d6cdf0e8d7b13cb6d301987c1612b3c" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>iterator_category</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a4f3e7c4e0800462026443a7ad0ca6db8" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>join_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ad5a29fe94196629193da3c95e5eba5e9" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>join_loop</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a8edb13d0fb5748b20a8173bec85e7243" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>join_vertex</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a55f13c9c3dd5ab611d08dcd346d9190e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>keep_largest_connected_components</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a228add3cae2d328bcdd67192a98fb636" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>make_hole</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a1ebc714bb6fc75a8aa105ffb241fe087" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>make_tetrahedron</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a19d554cc3a0e2db78b88d4e074c9fa19" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>make_tetrahedron</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a06735e9d5caa84f0afb5ddab37a9dedf" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>make_triangle</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a62241505a5199ec963acd2a6fda4239f" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>make_triangle</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a6ca5eddcfe19c5b69a500f39a0bfdbe5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>normalize_border</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1adb2db37bc2fcdd3e051260af9259f34e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>normalized_border_is_valid</name></member>
      <member refid="group__PkgPolyhedronIOFunc_1ga0672e8be92f0b71fe624525f80f850d0" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__PkgPolyhedronIOFunc_1ga9842e8b5cda1e38ad04aa7f80622bce3" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aa6d5d215f46423546681237d07a1e584" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Plane_3</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1af268be0ffff77469b60afbc4b4893ed5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Plane_iterator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aaf451356d666be3060567dd904bfb38f" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>planes</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a746e4a0e5d32824f9bb001bdf254da13" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Planes</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a409be107a687d3813b91f84a6e4459c9" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>planes_begin</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1abb6712371c2355442e42b6846bbc0375" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>planes_end</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a59bebced7ecd7660dd3ab1d33d22566f" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Point_3</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a6aff2b5a8cb76cede147e32f500ad311" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1af6abde1634fdd64d79e78f07145186f2" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>points</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a11f504c4c3c7759eb0a5becb22c40ac1" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Points</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a25d5ad0a16bbcf71ca1f48225b43bc95" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a45bf32fbaf7f185558e18194e4ab3830" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a58827beef13f3dd6b67f8337709bc501" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Polyhedron_3</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a8bf0e9e52526da081375a7b49ca8b195" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Polyhedron_3</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aeb28b4c481248fce96a79bf513f0d715" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>read_off</name></member>
      <member refid="group__PkgPolyhedronIOFunc_1gaccd9d4d15af1376dbc166eb501f28980" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>read_OFF</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a545fadc0f4af7a1e4a1a0d1e26711f17" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>reserve</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a1a1dbed72ce1b001446dd3ce25155d30" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>size_of_border_edges</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1af156bdee96bbf065953569fe026795d9" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>size_of_border_halfedges</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a07c305cf6da9eeecc89fea2fc4f24f67" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>size_of_facets</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a022b5c320996fabb49673d8921437fcb" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>size_of_halfedges</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ad661d362a8e515d67108803796eabac8" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>size_of_vertices</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a859fcfdd3fa1df1ec6c2c98d10b85edb" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ab3269baf4b4c6ce61b86545b8fa360d2" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>split_edge</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a3ef41ae6c3be7f0894479f3dd4fe34d5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>split_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a375a1b49bc6ad2ad5c578d7a7c45e4f5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>split_loop</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a2b17d7bd2045397167b00616f3b4d622" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>split_vertex</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1adb9c5380cb7d80196eff14e36c6a4ba1" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Supports_facet_halfedge</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a1f2c8a28ffea579d07a50fcfcbd04e1c" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Supports_facet_plane</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a04847ba8c46f51dacc38cff5640132e9" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Supports_halfedge_facet</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a30a165f364597483f4ac1334642f4c51" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Supports_halfedge_prev</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a0acbd6f11423457c8cd0a194aa17eb1f" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Supports_halfedge_vertex</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a1ea6e410d683cb382b1af84b85df70b9" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Supports_removal</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ad575271460a9df1492e1f0f339f5bd31" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Supports_vertex_halfedge</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a62d1d69b081470716688036d66f4be7e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Supports_vertex_point</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a2eff5c59b448f9be755cb76cdf06d966" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>traits</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aca51106e581d51d36bd668c819c0ac4e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Vertex_handle</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a675da64ded520fe6abca063ada3a1ed8" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Vertex_handles</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a2e0843aaeeadc428e8cd25802109bdf5" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>vertex_handles</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aff9ec9b39223e4f1cdf69ab39838e9e3" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>Vertex_iterator</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1a94eec0aaf19925a005e5296d6c965c55" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>vertices_begin</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1aa402ee6ce24e0259a45c8579784a0f9a" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>vertices_end</name></member>
      <member refid="group__PkgPolyhedronIOFunc_1ga408af896e2203af605059494e620cb64" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>write_OFF</name></member>
      <member refid="classCGAL_1_1Polyhedron__3_1ab9cb7a5361ace492fe0a7fbf758a5711" prot="public" virt="non-virtual"><scope>CGAL::Polyhedron_3</scope><name>write_off</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
