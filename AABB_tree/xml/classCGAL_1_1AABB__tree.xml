<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1AABB__tree" kind="class" language="C++" prot="public">
    <compoundname>CGAL::AABB_tree</compoundname>
    <includes local="no">CGAL/AABB_tree.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1abc411ecfc01a20f0fa05d490926f40e4" prot="public" static="no">
        <type><ref refid="classAABBTraits_1a1ee53f64a2ab05d4389003d4f36539e4" kindref="member">AABBTraits::FT</ref></type>
        <definition>typedef AABBTraits::FT CGAL::AABB_tree&lt; AABBTraits &gt;::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <qualifiedname>CGAL::AABB_tree::FT</qualifiedname>
        <briefdescription>
<para>Number type returned by the distance queries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="75" column="37" bodyfile="CGAL/AABB_tree.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" prot="public" static="no">
        <type><ref refid="classAABBTraits_1a88a622647c5438503237ce957d99801f" kindref="member">AABBTraits::Point</ref></type>
        <definition>typedef AABBTraits::Point CGAL::AABB_tree&lt; AABBTraits &gt;::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <qualifiedname>CGAL::AABB_tree::Point</qualifiedname>
        <briefdescription>
<para>Type of point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="78" column="40" bodyfile="CGAL/AABB_tree.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1aa27d769aa89e77dd5ab3769c21f64e7e" prot="public" static="no">
        <type><ref refid="classAABBTraits_1a18812bafada570757269e313ab06ff51" kindref="member">AABBTraits::Primitive</ref></type>
        <definition>typedef AABBTraits::Primitive CGAL::AABB_tree&lt; AABBTraits &gt;::Primitive</definition>
        <argsstring></argsstring>
        <name>Primitive</name>
        <qualifiedname>CGAL::AABB_tree::Primitive</qualifiedname>
        <briefdescription>
<para>Type of input primitive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="81" column="44" bodyfile="CGAL/AABB_tree.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1a3f107d7a22b491cb71c6d7b6c660e19c" prot="public" static="no">
        <type>Primitive::Id</type>
        <definition>typedef Primitive::Id CGAL::AABB_tree&lt; AABBTraits &gt;::Primitive_id</definition>
        <argsstring></argsstring>
        <name>Primitive_id</name>
        <qualifiedname>CGAL::AABB_tree::Primitive_id</qualifiedname>
        <briefdescription>
<para>Identifier for a primitive in the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="83" column="36" bodyfile="CGAL/AABB_tree.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1a6f03da4364c74c764681c84c3f14dcfe" prot="public" static="no">
        <type>Primitives::size_type</type>
        <definition>typedef Primitives::size_type CGAL::AABB_tree&lt; AABBTraits &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>CGAL::AABB_tree::size_type</qualifiedname>
        <briefdescription>
<para>Unsigned integral size type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="85" column="44" bodyfile="CGAL/AABB_tree.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1ad0e923c3e39a12596648c1b6ba057e17" prot="public" static="no">
        <type><ref refid="classAABBTraits_1a71832e63c8ab85c356fa6b3fc792ed3e" kindref="member">AABBTraits::Bounding_box</ref></type>
        <definition>typedef AABBTraits::Bounding_box CGAL::AABB_tree&lt; AABBTraits &gt;::Bounding_box</definition>
        <argsstring></argsstring>
        <name>Bounding_box</name>
        <qualifiedname>CGAL::AABB_tree::Bounding_box</qualifiedname>
        <briefdescription>
<para>Type of bounding box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="87" column="47" bodyfile="CGAL/AABB_tree.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1a74ce5787605d37cd218701ea98968e82" prot="public" static="no">
        <type><ref refid="classAABBTraits_1a3c855ac5072a7a039cc043ff2b8e74c6" kindref="member">AABBTraits::Point_and_primitive_id</ref></type>
        <definition>typedef AABBTraits::Point_and_primitive_id CGAL::AABB_tree&lt; AABBTraits &gt;::Point_and_primitive_id</definition>
        <argsstring></argsstring>
        <name>Point_and_primitive_id</name>
        <qualifiedname>CGAL::AABB_tree::Point_and_primitive_id</qualifiedname>
        <briefdescription>
<para>Point and Primitive Id type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="89" column="57" bodyfile="CGAL/AABB_tree.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1afe6da1de3ad3c806512de7b091cd37f7" prot="public" static="no">
        <type><ref refid="classAABBTraits_1afeb8685b51df66ec98d9bf72e04007bf" kindref="member">AABBTraits::Object_and_primitive_id</ref></type>
        <definition>typedef AABBTraits::Object_and_primitive_id CGAL::AABB_tree&lt; AABBTraits &gt;::Object_and_primitive_id</definition>
        <argsstring></argsstring>
        <name>Object_and_primitive_id</name>
        <qualifiedname>CGAL::AABB_tree::Object_and_primitive_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="91" column="58" bodyfile="CGAL/AABB_tree.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1adcd65e098e0a79ce66a7df0097ba98aa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
        </templateparamlist>
        <type><ref refid="classAABBTraits_1af5b2ef75e7fca67d9ab37b0d4984000b" kindref="member">AABBTraits::Intersection_and_primitive_id</ref>&lt; Query &gt;</type>
        <definition>using CGAL::AABB_tree&lt; AABBTraits &gt;::Intersection_and_primitive_id =  AABBTraits::Intersection_and_primitive_id&lt;Query&gt;</definition>
        <argsstring></argsstring>
        <name>Intersection_and_primitive_id</name>
        <qualifiedname>CGAL::AABB_tree::Intersection_and_primitive_id</qualifiedname>
        <briefdescription>
<para>An alias to <computeroutput><ref refid="classAABBTraits_1af5b2ef75e7fca67d9ab37b0d4984000b" kindref="member">AABBTraits::Intersection_and_primitive_id</ref>&lt;Query&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="98" column="5" bodyfile="CGAL/AABB_tree.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a9f207cf5480458cb4ecfce46e60c9d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::AABB_tree&lt; AABBTraits &gt;::AABB_tree</definition>
        <argsstring>(const AABBTraits &amp;traits=AABBTraits())</argsstring>
        <name>AABB_tree</name>
        <qualifiedname>CGAL::AABB_tree::AABB_tree</qualifiedname>
        <param>
          <type>const <ref refid="classAABBTraits" kindref="compound">AABBTraits</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref>()</defval>
        </param>
        <briefdescription>
<para>constructs an empty tree, and initializes the internally stored traits class using <computeroutput>traits</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="115" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a2d424e50e44392f9f88ee91411edabcc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::AABB_tree&lt; Tr &gt;::AABB_tree</definition>
        <argsstring>(Self &amp;&amp;) noexcept</argsstring>
        <name>AABB_tree</name>
        <qualifiedname>CGAL::AABB_tree::AABB_tree</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound">Self</ref> &amp;&amp;</type>
          <defname>tree</defname>
        </param>
        <briefdescription>
<para>move constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="118" column="5" bodyfile="CGAL/AABB_tree.h" bodystart="709" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a8843ab883443df5f9d353c51bc6c13bc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound">Self</ref> &amp;</type>
        <definition>AABB_tree&lt; Tr &gt;::Self &amp; CGAL::AABB_tree&lt; Tr &gt;::operator=</definition>
        <argsstring>(Self &amp;&amp;) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::AABB_tree::operator=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound">Self</ref> &amp;&amp;</type>
          <defname>tree</defname>
        </param>
        <briefdescription>
<para>assignment operator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="120" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="691" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1ae4b6bf22ae8ab2c912b33f711b7cef44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::AABB_tree&lt; AABBTraits &gt;::AABB_tree</definition>
        <argsstring>(const Self &amp;)=delete</argsstring>
        <name>AABB_tree</name>
        <qualifiedname>CGAL::AABB_tree::AABB_tree</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree" kindref="compound">Self</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="123" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a80f58011bbd87fb9a6148766f98d2d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound">Self</ref> &amp;</type>
        <definition>Self &amp; CGAL::AABB_tree&lt; AABBTraits &gt;::operator=</definition>
        <argsstring>(const Self &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::AABB_tree::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree" kindref="compound">Self</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="124" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a27943b5072da1f829432c49683a896b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::AABB_tree&lt; AABBTraits &gt;::AABB_tree</definition>
        <argsstring>(InputIterator first, InputIterator beyond, T &amp;&amp;...)</argsstring>
        <name>AABB_tree</name>
        <qualifiedname>CGAL::AABB_tree::AABB_tree</qualifiedname>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>builds the data structure from a sequence of primitives. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over first primitive to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>past-the-end iterator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
constructs an empty tree followed by a call to <computeroutput>insert(first,last,t...)</computeroutput>. The tree stays empty if the memory allocation is not successful. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="135" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a817b811901a9f3c43400ddb49f4cc121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::build</definition>
        <argsstring>(T &amp;&amp;...)</argsstring>
        <name>build</name>
        <qualifiedname>CGAL::AABB_tree::build</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>triggers the (re)construction of the internal tree structure. </para>
        </briefdescription>
        <detaileddescription>
<para>The internal tree structure is automatically invalidated by the insertion of any primitives after one or more calls to <computeroutput><ref refid="classCGAL_1_1AABB__tree_1a5de00f7e7563d40132ec0676b5caf979" kindref="member">insert()</ref></computeroutput>. This procedure is called implicitly at the first call to a query member function. An explicit call to <computeroutput>build()</computeroutput> must be made to ensure that the next call to a query function will not trigger the construction of the data structure. A call to <computeroutput>AABBTraits::set_shared_data(t...)</computeroutput> is made using the internally stored traits. This procedure has a complexity of <formula id="0">$O(n log(n))$</formula>, where <formula id="1">$n$</formula> is the number of primitives of the tree. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="147" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1af09ea7b0be4ad9b1135bc0052025dcc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstPrimitiveIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::rebuild</definition>
        <argsstring>(ConstPrimitiveIterator first, ConstPrimitiveIterator beyond, T &amp;&amp;...)</argsstring>
        <name>rebuild</name>
        <qualifiedname>CGAL::AABB_tree::rebuild</qualifiedname>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>is equivalent to calling <computeroutput><ref refid="classCGAL_1_1AABB__tree_1a5d804c64b784edc629a0db86154336d3" kindref="member">clear()</ref></computeroutput>, <computeroutput>insert(first,last,t...)</computeroutput>, and <computeroutput>build()</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="165" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a5de00f7e7563d40132ec0676b5caf979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::insert</definition>
        <argsstring>(InputIterator first, InputIterator beyond, T &amp;&amp;...)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::AABB_tree::insert</qualifiedname>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>adds a sequence of primitives to the set of primitives of the AABB tree. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>InputIterator</computeroutput> is any iterator and the parameter pack <computeroutput>T</computeroutput> contains any types such that <computeroutput>Primitive</computeroutput> has a constructor with the following signature: <computeroutput>Primitive(InputIterator, T...)</computeroutput>. If <computeroutput>Primitive</computeroutput> is a model of the concept <computeroutput><ref refid="classAABBPrimitiveWithSharedData" kindref="compound">AABBPrimitiveWithSharedData</ref></computeroutput>, a call to <computeroutput>AABBTraits::set_shared_data(t...)</computeroutput> is made using the internally stored traits. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="175" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a7fd6771ded7d4699733c9e921506c603" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; Tr &gt;::insert</definition>
        <argsstring>(const Primitive &amp;p)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::AABB_tree::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1aa27d769aa89e77dd5ab3769c21f64e7e" kindref="member">Primitive</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>adds a primitive to the set of primitives of the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="178" column="17" bodyfile="CGAL/AABB_tree.h" bodystart="774" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1ad1889027637e1a5f0b19c91508eddfa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::AABB_tree&lt; AABBTraits &gt;::~AABB_tree</definition>
        <argsstring>()</argsstring>
        <name>~AABB_tree</name>
        <qualifiedname>CGAL::AABB_tree::~AABB_tree</qualifiedname>
        <briefdescription>
<para>clears and destroys the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="181" column="5" bodyfile="CGAL/AABB_tree.h" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a11f25b1717ba0422d13e06fdd603aa67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classAABBTraits" kindref="compound">AABBTraits</ref> &amp;</type>
        <definition>const AABBTraits &amp; CGAL::AABB_tree&lt; AABBTraits &gt;::traits</definition>
        <argsstring>() const</argsstring>
        <name>traits</name>
        <qualifiedname>CGAL::AABB_tree::traits</qualifiedname>
        <briefdescription>
<para>returns a const reference to the internally stored traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="186" column="22" bodyfile="CGAL/AABB_tree.h" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a5d804c64b784edc629a0db86154336d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::AABB_tree::clear</qualifiedname>
        <briefdescription>
<para>clears the tree and the search tree if it was constructed, and switches on the usage of the search tree to find the hint for the distance queries </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="192" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="192" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a50e221f6910aacdef2ecba85f8f459b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1AABB__tree_1ad0e923c3e39a12596648c1b6ba057e17" kindref="member">Bounding_box</ref></type>
        <definition>const Bounding_box CGAL::AABB_tree&lt; AABBTraits &gt;::bbox</definition>
        <argsstring>() const</argsstring>
        <name>bbox</name>
        <qualifiedname>CGAL::AABB_tree::bbox</qualifiedname>
        <briefdescription>
<para>returns the axis-aligned bounding box of the whole tree. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>!empty()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="203" column="24" bodyfile="CGAL/AABB_tree.h" bodystart="203" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a55f67db717c1e202806cb77be1b13795" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1a6f03da4364c74c764681c84c3f14dcfe" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::AABB_tree&lt; AABBTraits &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>CGAL::AABB_tree::size</qualifiedname>
        <briefdescription>
<para>returns the number of primitives in the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="213" column="15" bodyfile="CGAL/AABB_tree.h" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a45053dc4244f0f55390dbad088f1c707" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; AABBTraits &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>CGAL::AABB_tree::empty</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the tree contains no primitive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="216" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="216" bodyend="216"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Intersection Tests</header>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a36b4cfa21c223461bde0da2b020a67d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; Tr &gt;::do_intersect</definition>
        <argsstring>(const Query &amp;query) const</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::AABB_tree::do_intersect</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the query intersects at least one of the input primitives. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a type for which <computeroutput>Do_intersect</computeroutput> operators are defined in the traits class <computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="244" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="906" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a872a72b57bbbb1d322fc8ef696e19057" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1AABB__tree_1a6f03da4364c74c764681c84c3f14dcfe" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::AABB_tree&lt; AABBTraits &gt;::number_of_intersected_primitives</definition>
        <argsstring>(const Query &amp;query) const</argsstring>
        <name>number_of_intersected_primitives</name>
        <qualifiedname>CGAL::AABB_tree::number_of_intersected_primitives</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>returns the number of primitives intersected by the query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a type for which <computeroutput>Do_intersect</computeroutput> operators are defined in the traits class <computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="251" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a9f40594599eded5f9a79f74186710697" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::AABB_tree&lt; Tr &gt;::all_intersected_primitives</definition>
        <argsstring>(const Query &amp;query, OutputIterator out) const</argsstring>
        <name>all_intersected_primitives</name>
        <qualifiedname>CGAL::AABB_tree::all_intersected_primitives</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>puts in <computeroutput>out</computeroutput> the ids of all intersected primitives. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does not compute the intersection points and is hence faster than the function <computeroutput><ref refid="classCGAL_1_1AABB__tree_1adf42c2edae69f92db5646d2c81d3bbff" kindref="member">all_intersections()</ref></computeroutput> function below. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a type for which <computeroutput>Do_intersect</computeroutput> operators are defined in the traits class <computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="260" column="20" bodyfile="CGAL/AABB_tree.h" bodystart="937" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1af4d94dc88ad5bd31d6368d96d3d07780" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; <ref refid="classCGAL_1_1AABB__tree_1a3f107d7a22b491cb71c6d7b6c660e19c" kindref="member">Primitive_id</ref> &gt;</type>
        <definition>std::optional&lt; Primitive_id &gt; CGAL::AABB_tree&lt; AABBTraits &gt;::any_intersected_primitive</definition>
        <argsstring>(const Query &amp;query) const</argsstring>
        <name>any_intersected_primitive</name>
        <qualifiedname>CGAL::AABB_tree::any_intersected_primitive</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>returns the id of the intersected primitive that is encountered first in the tree traversal, iff the query intersects at least one of the input primitives. </para>
        </briefdescription>
        <detaileddescription>
<para>No particular order is guaranteed over the tree traversal, such that, e.g, the primitive returned is not necessarily the closest from the source point of a ray query. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a type for which <computeroutput>Do_intersect</computeroutput> operators are defined in the traits class <computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="272" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Intersections</header>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1adf42c2edae69f92db5646d2c81d3bbff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::AABB_tree&lt; Tr &gt;::all_intersections</definition>
        <argsstring>(const Query &amp;query, OutputIterator out) const</argsstring>
        <name>all_intersections</name>
        <qualifiedname>CGAL::AABB_tree::all_intersections</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>puts in <computeroutput>out</computeroutput> all intersections, as objects of <computeroutput>Intersection_and_primitive_id&lt;Query&gt;::Type</computeroutput>, between the query and the input data to the iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a type for which <computeroutput>Do_intersect</computeroutput> and <computeroutput>Intersection</computeroutput> operators are defined in the traits class <computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="285" column="20" bodyfile="CGAL/AABB_tree.h" bodystart="951" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a8ccaea5223809316c67d03713109e7a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; typename <ref refid="classCGAL_1_1AABB__tree_1adcd65e098e0a79ce66a7df0097ba98aa" kindref="member">Intersection_and_primitive_id</ref>&lt; Query &gt;::Type &gt;</type>
        <definition>std::optional&lt; typename Intersection_and_primitive_id&lt; Query &gt;::Type &gt; CGAL::AABB_tree&lt; AABBTraits &gt;::any_intersection</definition>
        <argsstring>(const Query &amp;query) const</argsstring>
        <name>any_intersection</name>
        <qualifiedname>CGAL::AABB_tree::any_intersection</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>returns if any the intersection that is encountered first in the tree traversal. </para>
        </briefdescription>
        <detaileddescription>
<para>No particular order is guaranteed over the tree traversal, e.g, the primitive returned is not necessarily the closest from the query. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a type for which <computeroutput>Do_intersect</computeroutput> and <computeroutput>Intersection</computeroutput> operators are defined in the traits class <computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="296" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a3d24bfdc557114acc305658f9730eb60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ray</type>
          </param>
          <param>
            <type>typename SkipFunctor</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; typename <ref refid="classCGAL_1_1AABB__tree_1adcd65e098e0a79ce66a7df0097ba98aa" kindref="member">Intersection_and_primitive_id</ref>&lt; Ray &gt;::Type &gt;</type>
        <definition>std::optional&lt; typename Intersection_and_primitive_id&lt; Ray &gt;::Type &gt; CGAL::AABB_tree&lt; AABBTraits &gt;::first_intersection</definition>
        <argsstring>(const Ray &amp;query, const SkipFunctor &amp;skip) const</argsstring>
        <name>first_intersection</name>
        <qualifiedname>CGAL::AABB_tree::first_intersection</qualifiedname>
        <param>
          <type>const Ray &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const SkipFunctor &amp;</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
<para>returns the intersection and primitive id closest to the source point of the ray query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ray</parametername>
</parameternamelist>
<parameterdescription>
<para>must be the same as <computeroutput>AABBTraits::Ray</computeroutput> and <computeroutput>do_intersect</computeroutput> predicates and intersections for it must be defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Skip</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor with an operator <computeroutput>bool operator()(const Primitive_id&amp; id) const</computeroutput> that returns <computeroutput>true</computeroutput> in order to skip the primitive. Defaults to a functor that always returns <computeroutput>false</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>skip</computeroutput> might be given some primitives that are not intersected by <computeroutput>query</computeroutput> because the intersection test is done after the skip test. Also note that the order the primitives are given to <computeroutput>skip</computeroutput> is not necessarily the intersection order with <computeroutput>query</computeroutput>.</para>
</simplesect>
<computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput> must be a model of <computeroutput><ref refid="classAABBRayIntersectionTraits" kindref="compound">AABBRayIntersectionTraits</ref></computeroutput> to call this member function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="320" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1adfc6a7887966a2d8c726143f5a52a77d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ray</type>
          </param>
          <param>
            <type>typename SkipFunctor</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; <ref refid="classCGAL_1_1AABB__tree_1a3f107d7a22b491cb71c6d7b6c660e19c" kindref="member">Primitive_id</ref> &gt;</type>
        <definition>std::optional&lt; Primitive_id &gt; CGAL::AABB_tree&lt; AABBTraits &gt;::first_intersected_primitive</definition>
        <argsstring>(const Ray &amp;query, const SkipFunctor &amp;skip) const</argsstring>
        <name>first_intersected_primitive</name>
        <qualifiedname>CGAL::AABB_tree::first_intersected_primitive</qualifiedname>
        <param>
          <type>const Ray &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const SkipFunctor &amp;</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
<para>returns the primitive id closest to the source point of the ray query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ray</parametername>
</parameternamelist>
<parameterdescription>
<para>must be the same as <computeroutput>AABBTraits::Ray</computeroutput> and <computeroutput>do_intersect</computeroutput> predicates and intersections for it must be defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Skip</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor with an operator <computeroutput>bool operator()(const Primitive_id&amp; id) const</computeroutput> that returns <computeroutput>true</computeroutput> in order to skip the primitive. Defaults to a functor that always returns <computeroutput>false</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput> must be a model of <computeroutput><ref refid="classAABBRayIntersectionTraits" kindref="compound">AABBRayIntersectionTraits</ref></computeroutput> to call this member function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="345" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Distance Queries</header>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a24efb545081b6796d8843861a4bf49e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1abc411ecfc01a20f0fa05d490926f40e4" kindref="member">FT</ref></type>
        <definition>AABB_tree&lt; Tr &gt;::FT CGAL::AABB_tree&lt; Tr &gt;::squared_distance</definition>
        <argsstring>(const Point &amp;query) const</argsstring>
        <name>squared_distance</name>
        <qualifiedname>CGAL::AABB_tree::squared_distance</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>returns the minimum squared distance between the query point and all input primitives. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>!empty()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="363" column="8" bodyfile="CGAL/AABB_tree.h" bodystart="1027" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1abe3e1ab4a89de2623b6930324343b2fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref></type>
        <definition>AABB_tree&lt; Tr &gt;::Point CGAL::AABB_tree&lt; Tr &gt;::closest_point</definition>
        <argsstring>(const Point &amp;query) const</argsstring>
        <name>closest_point</name>
        <qualifiedname>CGAL::AABB_tree::closest_point</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>returns the point in the union of all input primitives which is closest to the query. </para>
        </briefdescription>
        <detaileddescription>
<para>In case there are several closest points, one arbitrarily chosen closest point is returned. <simplesect kind="pre"><para><computeroutput>!empty()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="370" column="11" bodyfile="CGAL/AABB_tree.h" bodystart="1006" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a1b3ac9521fd7257f760deafff3743437" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1a74ce5787605d37cd218701ea98968e82" kindref="member">Point_and_primitive_id</ref></type>
        <definition>AABB_tree&lt; Tr &gt;::Point_and_primitive_id CGAL::AABB_tree&lt; Tr &gt;::closest_point_and_primitive</definition>
        <argsstring>(const Point &amp;query) const</argsstring>
        <name>closest_point_and_primitive</name>
        <qualifiedname>CGAL::AABB_tree::closest_point_and_primitive</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>returns a <computeroutput>Point_and_primitive_id</computeroutput> which realizes the smallest distance between the query point and all input primitives. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>!empty()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="377" column="28" bodyfile="CGAL/AABB_tree.h" bodystart="1037" bodyend="1041"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accelerating the Distance Queries</header>
      <description><para>In the following paragraphs, we discuss details of the implementation of the distance queries.</para>
<para>We explain the internal use of hints, how the user can pass his own hints to the tree, and how the user can influence the construction of the secondary data structure used for accelerating distance queries. Internally, the distance queries algorithms are initialized with some hint, which has the same type as the return type of the query, and this value is refined along a traversal of the tree, until it is optimal, that is to say until it realizes the shortest distance to the primitives. In particular, the exact specification of these internal algorithms is that they minimize the distance to the object composed of the union of the primitives and the hint. It follows that<itemizedlist>
<listitem><para>in order to return the exact distance to the set of primitives, the algorithms need the hint to be exactly on the primitives;</para>
</listitem><listitem><para>if this is not the case, and if the hint happens to be closer to the query point than any of the primitives, then the hint is returned.</para>
</listitem></itemizedlist>
</para>
<para>This second observation is reasonable, in the sense that providing a hint to the algorithm means claiming that this hint belongs to the union of the primitives. These considerations about the hints being exactly on the primitives or not are important: in the case where the set of primitives is a triangle soup, and if some of the primitives are large, one may want to provide a much better hint than a vertex of the triangle soup could be. It could be, for example, the barycenter of one of the triangles. But, except with the use of a kernel with exact constructions, one cannot easily construct points other than the vertices, that lie exactly on a triangle soup. Hence, providing a good hint sometimes means not being able to provide it exactly on the primitives. In rare occasions, this hint can be returned as the closest point. In order to accelerate distance queries significantly, the AABB tree builds an internal KD-tree containing a set of potential hints. This KD-tree provides very good hints that allow the algorithms to run much faster than when <computeroutput><ref refid="classCGAL_1_1AABB__tree_1abde62f52ccdf411847151aa5000ba4a4" kindref="member">do_not_accelerate_distance_queries()</ref></computeroutput> that makes the hint to always be the <computeroutput>reference_point</computeroutput> of the first primitive. The set of potential hints is a sampling of the union of the primitives, which is obtained, by default, by calling the method <computeroutput>reference_point</computeroutput> of each of the primitives. However, such a sampling with one point per primitive may not be the most relevant one: if some primitives are very large, it helps inserting more than one sample on them. Conversely, a sparser sampling with less than one point per input primitive is relevant in some cases. The internal KD-tree is always used if no call to <computeroutput><ref refid="classCGAL_1_1AABB__tree_1abde62f52ccdf411847151aa5000ba4a4" kindref="member">do_not_accelerate_distance_queries()</ref></computeroutput> was made since object creation or the last call to <computeroutput><ref refid="classCGAL_1_1AABB__tree_1a5d804c64b784edc629a0db86154336d3" kindref="member">clear()</ref></computeroutput>. It will be built by the first distance query or by a call to <computeroutput><ref refid="classCGAL_1_1AABB__tree_1a5d3877d3f2afbd09341eb4b8c230080b" kindref="member">accelerate_distance_queries()</ref></computeroutput>. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a5d3877d3f2afbd09341eb4b8c230080b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; Tr &gt;::accelerate_distance_queries</definition>
        <argsstring>()</argsstring>
        <name>accelerate_distance_queries</name>
        <qualifiedname>CGAL::AABB_tree::accelerate_distance_queries</qualifiedname>
        <briefdescription>
<para>constructs the internal search tree from a point set taken on the internal primitives returns <computeroutput>true</computeroutput> iff successful memory allocation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="442" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="896" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1abde62f52ccdf411847151aa5000ba4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; Tr &gt;::do_not_accelerate_distance_queries</definition>
        <argsstring>()</argsstring>
        <name>do_not_accelerate_distance_queries</name>
        <qualifiedname>CGAL::AABB_tree::do_not_accelerate_distance_queries</qualifiedname>
        <briefdescription>
<para>turns off the usage of the internal search tree and clears it if it was already constructed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="444" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="888" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a974e4c1bf69cfd46fd32631a80321a27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstPointIterator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; AABBTraits &gt;::accelerate_distance_queries</definition>
        <argsstring>(ConstPointIterator first, ConstPointIterator beyond)</argsstring>
        <name>accelerate_distance_queries</name>
        <qualifiedname>CGAL::AABB_tree::accelerate_distance_queries</qualifiedname>
        <param>
          <type>ConstPointIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstPointIterator</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>constructs an internal KD-tree containing the specified point set, to be used as the set of potential hints for accelerating the distance queries. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the search tree built in this function will not be invalidated by the insertion of a new primitive, and an explicit call to <computeroutput><ref refid="classCGAL_1_1AABB__tree_1a5d3877d3f2afbd09341eb4b8c230080b" kindref="member">accelerate_distance_queries()</ref></computeroutput> is needed to update the search tree. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstPointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>is an iterator with value type <computeroutput>Point_and_primitive_id</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="455" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="455" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a3c2a4681e3440beb909b2596b0988bad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1abc411ecfc01a20f0fa05d490926f40e4" kindref="member">FT</ref></type>
        <definition>AABB_tree&lt; Tr &gt;::FT CGAL::AABB_tree&lt; Tr &gt;::squared_distance</definition>
        <argsstring>(const Point &amp;query, const Point &amp;hint) const</argsstring>
        <name>squared_distance</name>
        <qualifiedname>CGAL::AABB_tree::squared_distance</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>hint</declname>
        </param>
        <briefdescription>
<para>returns the minimum squared distance between the query point and all input primitives. </para>
        </briefdescription>
        <detaileddescription>
<para>The internal KD-tree is not used. <simplesect kind="pre"><para><computeroutput>!empty()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="464" column="8" bodyfile="CGAL/AABB_tree.h" bodystart="1016" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a5aeffff0695b818998279aae800915b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref></type>
        <definition>AABB_tree&lt; Tr &gt;::Point CGAL::AABB_tree&lt; Tr &gt;::closest_point</definition>
        <argsstring>(const Point &amp;query, const Point &amp;hint) const</argsstring>
        <name>closest_point</name>
        <qualifiedname>CGAL::AABB_tree::closest_point</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>hint</declname>
        </param>
        <briefdescription>
<para>returns the point in the union of all input primitives which is closest to the query. </para>
        </briefdescription>
        <detaileddescription>
<para>In case there are several closest points, one arbitrarily chosen closest point is returned. The internal KD-tree is not used. <simplesect kind="pre"><para><computeroutput>!empty()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="471" column="11" bodyfile="CGAL/AABB_tree.h" bodystart="990" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a3a42a8e1d5594e7a708fdfe833474205" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1a74ce5787605d37cd218701ea98968e82" kindref="member">Point_and_primitive_id</ref></type>
        <definition>AABB_tree&lt; Tr &gt;::Point_and_primitive_id CGAL::AABB_tree&lt; Tr &gt;::closest_point_and_primitive</definition>
        <argsstring>(const Point &amp;query, const Point_and_primitive_id &amp;hint) const</argsstring>
        <name>closest_point_and_primitive</name>
        <qualifiedname>CGAL::AABB_tree::closest_point_and_primitive</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1a74ce5787605d37cd218701ea98968e82" kindref="member">Point_and_primitive_id</ref> &amp;</type>
          <declname>hint</declname>
        </param>
        <briefdescription>
<para>returns a <computeroutput>Point_and_primitive_id</computeroutput> which realizes the smallest distance between the query point and all input primitives. </para>
        </briefdescription>
        <detaileddescription>
<para>The internal KD-tree is not used. <simplesect kind="pre"><para><computeroutput>!empty()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="477" column="28" bodyfile="CGAL/AABB_tree.h" bodystart="1046" bodyend="1055"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1a7eea75838412671751712cf187829a81" prot="private" static="no">
        <type>AABB_search_tree&lt; <ref refid="classAABBTraits" kindref="compound">AABBTraits</ref> &gt;</type>
        <definition>typedef AABB_search_tree&lt;AABBTraits&gt; CGAL::AABB_tree&lt; AABBTraits &gt;::Search_tree</definition>
        <argsstring></argsstring>
        <name>Search_tree</name>
        <qualifiedname>CGAL::AABB_tree::Search_tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="60" column="30" bodyfile="CGAL/AABB_tree.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1ac3d434f4239730d50c69579c59288e19" prot="private" static="no">
        <type>std::vector&lt; typename <ref refid="classAABBTraits_1a18812bafada570757269e313ab06ff51" kindref="member">AABBTraits::Primitive</ref> &gt;</type>
        <definition>typedef std::vector&lt;typename AABBTraits::Primitive&gt; CGAL::AABB_tree&lt; AABBTraits &gt;::Primitives</definition>
        <argsstring></argsstring>
        <name>Primitives</name>
        <qualifiedname>CGAL::AABB_tree::Primitives</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="63" column="25" bodyfile="CGAL/AABB_tree.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1a4d3277b98abc5b0accfc5ce84f2ffc72" prot="private" static="no">
        <type>internal::Primitive_helper&lt; <ref refid="classAABBTraits" kindref="compound">AABBTraits</ref> &gt;</type>
        <definition>typedef internal::Primitive_helper&lt;AABBTraits&gt; CGAL::AABB_tree&lt; AABBTraits &gt;::Helper</definition>
        <argsstring></argsstring>
        <name>Helper</name>
        <qualifiedname>CGAL::AABB_tree::Helper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="65" column="40" bodyfile="CGAL/AABB_tree.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1a25550de404f3797e002a751209c3994e" prot="private" static="no">
        <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound">AABB_tree</ref>&lt; <ref refid="classAABBTraits" kindref="compound">AABBTraits</ref> &gt;</type>
        <definition>typedef AABB_tree&lt;AABBTraits&gt; CGAL::AABB_tree&lt; AABBTraits &gt;::Self</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <qualifiedname>CGAL::AABB_tree::Self</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="66" column="23" bodyfile="CGAL/AABB_tree.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1a5823cc91045b9ad9ded6e3c7dc9548d8" prot="private" static="no">
        <type>AABB_node&lt; <ref refid="classAABBTraits" kindref="compound">AABBTraits</ref> &gt;</type>
        <definition>typedef AABB_node&lt;AABBTraits&gt; CGAL::AABB_tree&lt; AABBTraits &gt;::Node</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <qualifiedname>CGAL::AABB_tree::Node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="559" column="23" bodyfile="CGAL/AABB_tree.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCGAL_1_1AABB__tree_1a93281fde72277762d4680fc0446b8db3" prot="public" static="no">
        <type><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></type>
        <definition>typedef AABBTraits CGAL::AABB_tree&lt; AABBTraits &gt;::AABB_traits</definition>
        <argsstring></argsstring>
        <name>AABB_traits</name>
        <qualifiedname>CGAL::AABB_tree::AABB_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="69" column="24" bodyfile="CGAL/AABB_tree.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classCGAL_1_1AABB__tree_1a6453ce4c2caffbaee954297b09a5e7f5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AABBTree</type>
          </param>
          <param>
            <type>typename SkipFunctor</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class AABB_ray_intersection</definition>
        <argsstring></argsstring>
        <name>AABB_ray_intersection</name>
        <qualifiedname>CGAL::AABB_tree::AABB_ray_intersection</qualifiedname>
        <param>
          <type>AABB_ray_intersection</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="483" column="18" bodyfile="CGAL/AABB_tree.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1AABB__tree_1a8a74e5f310141f79c9823d14d8068482" prot="private" static="no" mutable="no">
        <type><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></type>
        <definition>AABBTraits CGAL::AABB_tree&lt; AABBTraits &gt;::m_traits</definition>
        <argsstring></argsstring>
        <name>m_traits</name>
        <qualifiedname>CGAL::AABB_tree::m_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="627" column="16" bodyfile="CGAL/AABB_tree.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1AABB__tree_1a2ac6b64942fc85164563562e3744841b" prot="private" static="no" mutable="no">
        <type>Primitives</type>
        <definition>Primitives CGAL::AABB_tree&lt; AABBTraits &gt;::m_primitives</definition>
        <argsstring></argsstring>
        <name>m_primitives</name>
        <qualifiedname>CGAL::AABB_tree::m_primitives</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="629" column="16" bodyfile="CGAL/AABB_tree.h" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1AABB__tree_1a543cb53ef61fca7a720d7d93c56d9d3a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Node &gt;</type>
        <definition>std::vector&lt;Node&gt; CGAL::AABB_tree&lt; AABBTraits &gt;::m_nodes</definition>
        <argsstring></argsstring>
        <name>m_nodes</name>
        <qualifiedname>CGAL::AABB_tree::m_nodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="631" column="17" bodyfile="CGAL/AABB_tree.h" bodystart="631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1AABB__tree_1ad3da79a962f76cfe6e7d69020e3e6d67" prot="private" static="no" mutable="yes">
        <type>std::unique_ptr&lt; const Search_tree &gt;</type>
        <definition>std::unique_ptr&lt;const Search_tree&gt; CGAL::AABB_tree&lt; AABBTraits &gt;::m_p_search_tree</definition>
        <argsstring></argsstring>
        <name>m_p_search_tree</name>
        <qualifiedname>CGAL::AABB_tree::m_p_search_tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="666" column="29" bodyfile="CGAL/AABB_tree.h" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1AABB__tree_1acf678b644550383894a165cf342e69d2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; AABBTraits &gt;::m_use_default_search_tree</definition>
        <argsstring></argsstring>
        <name>m_use_default_search_tree</name>
        <qualifiedname>CGAL::AABB_tree::m_use_default_search_tree</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="667" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1AABB__tree_1a0d42a0c9f85bc50f19c2a65d3cc5849f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; AABBTraits &gt;::m_need_build</definition>
        <argsstring></argsstring>
        <name>m_need_build</name>
        <qualifiedname>CGAL::AABB_tree::m_need_build</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="672" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1AABB__tree_1aa9447a0fa68f05029b510531a3445427" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; AABBTraits &gt;::m_search_tree_constructed</definition>
        <argsstring></argsstring>
        <name>m_search_tree_constructed</name>
        <qualifiedname>CGAL::AABB_tree::m_search_tree_constructed</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="673" column="18" bodyfile="CGAL/AABB_tree.h" bodystart="673" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a52bfecc56b60f7291ed59de3fcd040a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Query</type>
          </param>
          <param>
            <type>class Traversal_traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::traversal</definition>
        <argsstring>(const Query &amp;query, Traversal_traits &amp;traits) const</argsstring>
        <name>traversal</name>
        <qualifiedname>CGAL::AABB_tree::traversal</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Traversal_traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="514" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="514" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a6368a986eed3cd9e6b28863d8dfe3e45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Query</type>
          </param>
          <param>
            <type>class Traversal_traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::traversal_with_priority</definition>
        <argsstring>(const Query &amp;query, Traversal_traits &amp;traits) const</argsstring>
        <name>traversal_with_priority</name>
        <qualifiedname>CGAL::AABB_tree::traversal_with_priority</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Traversal_traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="529" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="529" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1aa6503eada931b56574b3a4ebd36faa96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Query</type>
          </param>
          <param>
            <type>class Traversal_traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::traversal_with_priority_and_group_traversal</definition>
        <argsstring>(const Query &amp;query, Traversal_traits &amp;traits, const std::size_t group_traversal_bound) const</argsstring>
        <name>traversal_with_priority_and_group_traversal</name>
        <qualifiedname>CGAL::AABB_tree::traversal_with_priority_and_group_traversal</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Traversal_traits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>group_traversal_bound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="544" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="544" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a25c6ef344c71a1ae88f0bd2ac8b0bbf9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1a74ce5787605d37cd218701ea98968e82" kindref="member">Point_and_primitive_id</ref></type>
        <definition>Point_and_primitive_id CGAL::AABB_tree&lt; AABBTraits &gt;::any_reference_point_and_id</definition>
        <argsstring>() const</argsstring>
        <name>any_reference_point_and_id</name>
        <qualifiedname>CGAL::AABB_tree::any_reference_point_and_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="582" column="28" bodyfile="CGAL/AABB_tree.h" bodystart="582" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a89ef3bacd3ef39f6407f22c817a241ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1AABB__tree_1a74ce5787605d37cd218701ea98968e82" kindref="member">Point_and_primitive_id</ref></type>
        <definition>Point_and_primitive_id CGAL::AABB_tree&lt; AABBTraits &gt;::best_hint</definition>
        <argsstring>(const Point &amp;query) const</argsstring>
        <name>best_hint</name>
        <qualifiedname>CGAL::AABB_tree::best_hint</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="591" column="28" bodyfile="CGAL/AABB_tree.h" bodystart="591" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a796da95e5579fe92edcec9f28cc629be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>AABBTraits::Primitive::Datum_reference</type>
        <definition>AABBTraits::Primitive::Datum_reference CGAL::AABB_tree&lt; AABBTraits &gt;::datum</definition>
        <argsstring>(Primitive &amp;p) const</argsstring>
        <name>datum</name>
        <qualifiedname>CGAL::AABB_tree::datum</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1AABB__tree_1aa27d769aa89e77dd5ab3769c21f64e7e" kindref="member">Primitive</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the datum (geometric object) represented <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="620" column="5" bodyfile="CGAL/AABB_tree.h" bodystart="620" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1ab033ec905ab7693f0232fbf8dfa056fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Node *</type>
        <definition>const Node * CGAL::AABB_tree&lt; AABBTraits &gt;::root_node</definition>
        <argsstring>() const</argsstring>
        <name>root_node</name>
        <qualifiedname>CGAL::AABB_tree::root_node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="636" column="16" bodyfile="CGAL/AABB_tree.h" bodystart="636" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a74a5c63b0002df433d366fc7dc92f19c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node &amp;</type>
        <definition>Node &amp; CGAL::AABB_tree&lt; AABBTraits &gt;::new_node</definition>
        <argsstring>()</argsstring>
        <name>new_node</name>
        <qualifiedname>CGAL::AABB_tree::new_node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="654" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="654" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a56ac99a21accb1cfae33a3b5dd78e4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tr</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::AABB_tree&lt; AABBTraits &gt;::AABB_tree</definition>
        <argsstring>(const Tr &amp;traits)</argsstring>
        <name>AABB_tree</name>
        <qualifiedname>CGAL::AABB_tree::AABB_tree</qualifiedname>
        <param>
          <type>const Tr &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="682" column="13" bodyfile="CGAL/AABB_tree.h" bodystart="682" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a1183335a976492cba89b5623c37263b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstPrimitiveIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::AABB_tree&lt; AABBTraits &gt;::AABB_tree</definition>
        <argsstring>(ConstPrimitiveIterator first, ConstPrimitiveIterator beyond, T &amp;&amp;... t)</argsstring>
        <name>AABB_tree</name>
        <qualifiedname>CGAL::AABB_tree::AABB_tree</qualifiedname>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="716" column="13" bodyfile="CGAL/AABB_tree.h" bodystart="716" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1aeae5b64de0abace169f4cbd47ffb2703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstPrimitiveIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::insert</definition>
        <argsstring>(ConstPrimitiveIterator first, ConstPrimitiveIterator beyond, T &amp;&amp;... t)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::AABB_tree::insert</qualifiedname>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="730" column="18" bodyfile="CGAL/AABB_tree.h" bodystart="730" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a98362064dc1dc718f45d7925aeda3919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstPrimitiveIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::rebuild</definition>
        <argsstring>(ConstPrimitiveIterator first, ConstPrimitiveIterator beyond, T &amp;&amp;... t)</argsstring>
        <name>rebuild</name>
        <qualifiedname>CGAL::AABB_tree::rebuild</qualifiedname>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="752" column="18" bodyfile="CGAL/AABB_tree.h" bodystart="752" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a73ca3b4e51c85a33556310eb9338d697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::build</definition>
        <argsstring>(T &amp;&amp;... t)</argsstring>
        <name>build</name>
        <qualifiedname>CGAL::AABB_tree::build</qualifiedname>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="767" column="18" bodyfile="CGAL/AABB_tree.h" bodystart="767" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a2b2da9d46523d6c18ab174cbe63034fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tr</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::build</definition>
        <argsstring>()</argsstring>
        <name>build</name>
        <qualifiedname>CGAL::AABB_tree::build</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="821" column="18" bodyfile="CGAL/AABB_tree.h" bodystart="821" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a85d6b89ab633f49fa78bc9a4a9f89b7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; typename <ref refid="classCGAL_1_1AABB__tree" kindref="compound">AABB_tree</ref>&lt; Tr &gt;::template <ref refid="classCGAL_1_1AABB__tree_1adcd65e098e0a79ce66a7df0097ba98aa" kindref="member">Intersection_and_primitive_id</ref>&lt; Query &gt;::Type &gt;</type>
        <definition>std::optional&lt; typename AABB_tree&lt; Tr &gt;::template Intersection_and_primitive_id&lt; Query &gt;::Type &gt; CGAL::AABB_tree&lt; AABBTraits &gt;::any_intersection</definition>
        <argsstring>(const Query &amp;query) const</argsstring>
        <name>any_intersection</name>
        <qualifiedname>CGAL::AABB_tree::any_intersection</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="966" column="15" bodyfile="CGAL/AABB_tree.h" bodystart="966" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a870e75ec57a5175dede1516392da6c51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; typename <ref refid="classCGAL_1_1AABB__tree" kindref="compound">AABB_tree</ref>&lt; Tr &gt;<ref refid="classCGAL_1_1AABB__tree_1a3f107d7a22b491cb71c6d7b6c660e19c" kindref="member">::Primitive_id</ref> &gt;</type>
        <definition>std::optional&lt; typename AABB_tree&lt; Tr &gt;::Primitive_id &gt; CGAL::AABB_tree&lt; AABBTraits &gt;::any_intersected_primitive</definition>
        <argsstring>(const Query &amp;query) const</argsstring>
        <name>any_intersected_primitive</name>
        <qualifiedname>CGAL::AABB_tree::any_intersected_primitive</qualifiedname>
        <param>
          <type>const Query &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="978" column="15" bodyfile="CGAL/AABB_tree.h" bodystart="978" bodyend="985"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a926064875766a68bffced08fec1c449b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::set_primitive_data_impl</definition>
        <argsstring>(CGAL::Boolean_tag&lt; false &gt;, T ...)</argsstring>
        <name>set_primitive_data_impl</name>
        <qualifiedname>CGAL::AABB_tree::set_primitive_data_impl</qualifiedname>
        <param>
          <type><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Boolean_tag</ref>&lt; false &gt;</type>
        </param>
        <param>
          <type>T ...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="221" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1af9f94db52539f980afa725b1635b8274" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::set_primitive_data_impl</definition>
        <argsstring>(CGAL::Boolean_tag&lt; true &gt;, T &amp;&amp;... t)</argsstring>
        <name>set_primitive_data_impl</name>
        <qualifiedname>CGAL::AABB_tree::set_primitive_data_impl</qualifiedname>
        <param>
          <type><ref refid="structCGAL_1_1Boolean__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Boolean_tag</ref>&lt; true &gt;</type>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="223" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="223" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1ab37b6bd7a28aafd759d6314c4b54098a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::set_shared_data</definition>
        <argsstring>(T &amp;&amp;...t)</argsstring>
        <name>set_shared_data</name>
        <qualifiedname>CGAL::AABB_tree::set_shared_data</qualifiedname>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="227" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a7b933692cae07ebad5cbdec8d9270817" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; Tr &gt;::build_kd_tree</definition>
        <argsstring>()</argsstring>
        <name>build_kd_tree</name>
        <qualifiedname>CGAL::AABB_tree::build_kd_tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="231" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="858" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a97b2b7918f0b9167c7f38239e5c48dad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstPointIterator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::AABB_tree&lt; Tr &gt;::build_kd_tree</definition>
        <argsstring>(ConstPointIterator first, ConstPointIterator beyond)</argsstring>
        <name>build_kd_tree</name>
        <qualifiedname>CGAL::AABB_tree::build_kd_tree</qualifiedname>
        <param>
          <type>ConstPointIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstPointIterator</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="233" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="874" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1aa104f2b6a6b5531dd8ab58f62cad6f48" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::clear_nodes</definition>
        <argsstring>()</argsstring>
        <name>clear_nodes</name>
        <qualifiedname>CGAL::AABB_tree::clear_nodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="486" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="486" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1ac02209d9a776841e62567453ec7d3a4a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; AABBTraits &gt;::clear_search_tree</definition>
        <argsstring>()</argsstring>
        <name>clear_search_tree</name>
        <qualifiedname>CGAL::AABB_tree::clear_search_tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="492" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="492" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a9d29b917d9f8b98c164b029b3cfdddfb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstPrimitiveIterator</type>
          </param>
          <param>
            <type>typename ComputeBbox</type>
          </param>
          <param>
            <type>typename SplitPrimitives</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::AABB_tree&lt; Tr &gt;::expand</definition>
        <argsstring>(Node &amp;node, ConstPrimitiveIterator first, ConstPrimitiveIterator beyond, const std::size_t range, const ComputeBbox &amp;compute_bbox, const SplitPrimitives &amp;split_primitives)</argsstring>
        <name>expand</name>
        <qualifiedname>CGAL::AABB_tree::expand</qualifiedname>
        <param>
          <type>Node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ConstPrimitiveIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const ComputeBbox &amp;</type>
          <declname>compute_bbox</declname>
        </param>
        <param>
          <type>const SplitPrimitives &amp;</type>
          <declname>split_primitives</declname>
        </param>
        <briefdescription>
<para>Builds the tree by recursive expansion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the root node of the subtree to generate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first primitive to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beyond</parametername>
</parameternamelist>
<parameterdescription>
<para>the last primitive to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of primitive of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compute_bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>split_primitives</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[first,beyond[ is the range of primitives to be added to the tree. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="573" column="10" bodyfile="CGAL/AABB_tree.h" bodystart="789" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1AABB__tree_1a112e574e7124f788a359a5f0e393b03d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1AABB__tree_1aa27d769aa89e77dd5ab3769c21f64e7e" kindref="member">Primitive</ref> &amp;</type>
        <definition>const Primitive &amp; CGAL::AABB_tree&lt; AABBTraits &gt;::singleton_data</definition>
        <argsstring>() const</argsstring>
        <name>singleton_data</name>
        <qualifiedname>CGAL::AABB_tree::singleton_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/AABB_tree.h" line="660" column="21" bodyfile="CGAL/AABB_tree.h" bodystart="660" bodyend="663"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Static data structure for efficient intersection and distance computations in 2D and 3D. </para>
    </briefdescription>
    <detaileddescription>
<para>It builds a hierarchy of axis-aligned bounding boxes (an AABB tree) from a set of geometric objects, and can receive intersection and distance queries, provided that the corresponding predicates are implemented in the traits class <ref refid="classAABBTraits" kindref="compound">AABBTraits</ref>. An instance of the class <computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput> is internally stored.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classAABBPrimitive" kindref="compound">AABBPrimitive</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="CGAL/AABB_tree.h" line="56" column="3" bodyfile="CGAL/AABB_tree.h" bodystart="57" bodyend="677"/>
    <listofallmembers>
      <member refid="classCGAL_1_1AABB__tree_1a6453ce4c2caffbaee954297b09a5e7f5" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>AABB_ray_intersection</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a93281fde72277762d4680fc0446b8db3" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>AABB_traits</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a9f207cf5480458cb4ecfce46e60c9d06" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>AABB_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a2d424e50e44392f9f88ee91411edabcc" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>AABB_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ae4b6bf22ae8ab2c912b33f711b7cef44" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>AABB_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a27943b5072da1f829432c49683a896b4" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>AABB_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a56ac99a21accb1cfae33a3b5dd78e4b5" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>AABB_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a1183335a976492cba89b5623c37263b8" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>AABB_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a5d3877d3f2afbd09341eb4b8c230080b" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>accelerate_distance_queries</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a974e4c1bf69cfd46fd32631a80321a27" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>accelerate_distance_queries</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a9f40594599eded5f9a79f74186710697" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>all_intersected_primitives</name></member>
      <member refid="classCGAL_1_1AABB__tree_1adf42c2edae69f92db5646d2c81d3bbff" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>all_intersections</name></member>
      <member refid="classCGAL_1_1AABB__tree_1af4d94dc88ad5bd31d6368d96d3d07780" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>any_intersected_primitive</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a870e75ec57a5175dede1516392da6c51" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>any_intersected_primitive</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a8ccaea5223809316c67d03713109e7a1" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>any_intersection</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a85d6b89ab633f49fa78bc9a4a9f89b7e" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>any_intersection</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a25c6ef344c71a1ae88f0bd2ac8b0bbf9" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>any_reference_point_and_id</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a50e221f6910aacdef2ecba85f8f459b4" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>bbox</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a89ef3bacd3ef39f6407f22c817a241ff" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>best_hint</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ad0e923c3e39a12596648c1b6ba057e17" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Bounding_box</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a817b811901a9f3c43400ddb49f4cc121" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>build</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a73ca3b4e51c85a33556310eb9338d697" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>build</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a2b2da9d46523d6c18ab174cbe63034fb" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>build</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a7b933692cae07ebad5cbdec8d9270817" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>build_kd_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a97b2b7918f0b9167c7f38239e5c48dad" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>build_kd_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a5d804c64b784edc629a0db86154336d3" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>clear</name></member>
      <member refid="classCGAL_1_1AABB__tree_1aa104f2b6a6b5531dd8ab58f62cad6f48" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>clear_nodes</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ac02209d9a776841e62567453ec7d3a4a" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>clear_search_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1abe3e1ab4a89de2623b6930324343b2fa" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>closest_point</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a5aeffff0695b818998279aae800915b5" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>closest_point</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a1b3ac9521fd7257f760deafff3743437" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>closest_point_and_primitive</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a3a42a8e1d5594e7a708fdfe833474205" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>closest_point_and_primitive</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a796da95e5579fe92edcec9f28cc629be" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>datum</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a36b4cfa21c223461bde0da2b020a67d1" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>do_intersect</name></member>
      <member refid="classCGAL_1_1AABB__tree_1abde62f52ccdf411847151aa5000ba4a4" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>do_not_accelerate_distance_queries</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a45053dc4244f0f55390dbad088f1c707" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>empty</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a9d29b917d9f8b98c164b029b3cfdddfb" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>expand</name></member>
      <member refid="classCGAL_1_1AABB__tree_1adfc6a7887966a2d8c726143f5a52a77d" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>first_intersected_primitive</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a3d24bfdc557114acc305658f9730eb60" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>first_intersection</name></member>
      <member refid="classCGAL_1_1AABB__tree_1abc411ecfc01a20f0fa05d490926f40e4" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>FT</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a4d3277b98abc5b0accfc5ce84f2ffc72" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Helper</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a5de00f7e7563d40132ec0676b5caf979" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>insert</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a7fd6771ded7d4699733c9e921506c603" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>insert</name></member>
      <member refid="classCGAL_1_1AABB__tree_1aeae5b64de0abace169f4cbd47ffb2703" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>insert</name></member>
      <member refid="classCGAL_1_1AABB__tree_1adcd65e098e0a79ce66a7df0097ba98aa" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Intersection_and_primitive_id</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a0d42a0c9f85bc50f19c2a65d3cc5849f" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>m_need_build</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a543cb53ef61fca7a720d7d93c56d9d3a" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>m_nodes</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ad3da79a962f76cfe6e7d69020e3e6d67" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>m_p_search_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a2ac6b64942fc85164563562e3744841b" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>m_primitives</name></member>
      <member refid="classCGAL_1_1AABB__tree_1aa9447a0fa68f05029b510531a3445427" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>m_search_tree_constructed</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a8a74e5f310141f79c9823d14d8068482" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>m_traits</name></member>
      <member refid="classCGAL_1_1AABB__tree_1acf678b644550383894a165cf342e69d2" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>m_use_default_search_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a74a5c63b0002df433d366fc7dc92f19c" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>new_node</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a5823cc91045b9ad9ded6e3c7dc9548d8" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Node</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a872a72b57bbbb1d322fc8ef696e19057" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>number_of_intersected_primitives</name></member>
      <member refid="classCGAL_1_1AABB__tree_1afe6da1de3ad3c806512de7b091cd37f7" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Object_and_primitive_id</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a8843ab883443df5f9d353c51bc6c13bc" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a80f58011bbd87fb9a6148766f98d2d61" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ac3f4cc3966bfa5ec398b52b2330940af" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Point</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a74ce5787605d37cd218701ea98968e82" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Point_and_primitive_id</name></member>
      <member refid="classCGAL_1_1AABB__tree_1aa27d769aa89e77dd5ab3769c21f64e7e" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Primitive</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a3f107d7a22b491cb71c6d7b6c660e19c" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Primitive_id</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ac3d434f4239730d50c69579c59288e19" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Primitives</name></member>
      <member refid="classCGAL_1_1AABB__tree_1af09ea7b0be4ad9b1135bc0052025dcc3" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>rebuild</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a98362064dc1dc718f45d7925aeda3919" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>rebuild</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ab033ec905ab7693f0232fbf8dfa056fc" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>root_node</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a7eea75838412671751712cf187829a81" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Search_tree</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a25550de404f3797e002a751209c3994e" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>Self</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a926064875766a68bffced08fec1c449b" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>set_primitive_data_impl</name></member>
      <member refid="classCGAL_1_1AABB__tree_1af9f94db52539f980afa725b1635b8274" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>set_primitive_data_impl</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ab37b6bd7a28aafd759d6314c4b54098a" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>set_shared_data</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a112e574e7124f788a359a5f0e393b03d" prot="private" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>singleton_data</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a55f67db717c1e202806cb77be1b13795" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>size</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a6f03da4364c74c764681c84c3f14dcfe" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a24efb545081b6796d8843861a4bf49e6" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>squared_distance</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a3c2a4681e3440beb909b2596b0988bad" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>squared_distance</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a11f25b1717ba0422d13e06fdd603aa67" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>traits</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a52bfecc56b60f7291ed59de3fcd040a8" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>traversal</name></member>
      <member refid="classCGAL_1_1AABB__tree_1a6368a986eed3cd9e6b28863d8dfe3e45" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>traversal_with_priority</name></member>
      <member refid="classCGAL_1_1AABB__tree_1aa6503eada931b56574b3a4ebd36faa96" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>traversal_with_priority_and_group_traversal</name></member>
      <member refid="classCGAL_1_1AABB__tree_1ad1889027637e1a5f0b19c91508eddfa3" prot="public" virt="non-virtual"><scope>CGAL::AABB_tree</scope><name>~AABB_tree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
