<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classAABBTraits" kind="class" language="C++" prot="public">
    <compoundname>AABBTraits</compoundname>
    <includes local="no">Concepts/AABBTraits.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classAABBTraits_1a1ee53f64a2ab05d4389003d4f36539e4" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <qualifiedname>AABBTraits::FT</qualifiedname>
        <briefdescription>
<para>Value type of the <computeroutput>Squared_distance</computeroutput> functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="28" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1a88a622647c5438503237ce957d99801f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <qualifiedname>AABBTraits::Point</qualifiedname>
        <briefdescription>
<para>Type of a point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="33" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1a18812bafada570757269e313ab06ff51" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Primitive</definition>
        <argsstring></argsstring>
        <name>Primitive</name>
        <qualifiedname>AABBTraits::Primitive</qualifiedname>
        <briefdescription>
<para>Type of primitive. </para>
        </briefdescription>
        <detaileddescription>
<para>Must be a model of the concepts <computeroutput><ref refid="classAABBPrimitive" kindref="compound">AABBPrimitive</ref></computeroutput> or <computeroutput><ref refid="classAABBPrimitiveWithSharedData" kindref="compound">AABBPrimitiveWithSharedData</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="39" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1a71832e63c8ab85c356fa6b3fc792ed3e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Bounding_box</definition>
        <argsstring></argsstring>
        <name>Bounding_box</name>
        <qualifiedname>AABBTraits::Bounding_box</qualifiedname>
        <briefdescription>
<para>Bounding box type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="44" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1a3c855ac5072a7a039cc043ff2b8e74c6" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classAABBTraits_1a88a622647c5438503237ce957d99801f" kindref="member">Point</ref>, Primitive::Id &gt;</type>
        <definition>typedef std::pair&lt;Point, Primitive::Id&gt; AABBTraits::Point_and_primitive_id</definition>
        <argsstring></argsstring>
        <name>Point_and_primitive_id</name>
        <qualifiedname>AABBTraits::Point_and_primitive_id</qualifiedname>
        <briefdescription>
<para>Point and Primitive Id type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="49" column="19" bodyfile="Concepts/AABBTraits.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1afeb8685b51df66ec98d9bf72e04007bf" prot="public" static="no">
        <type>std::pair&lt; Object, Primitive::Id &gt;</type>
        <definition>typedef std::pair&lt;Object, Primitive::Id&gt; AABBTraits::Object_and_primitive_id</definition>
        <argsstring></argsstring>
        <name>Object_and_primitive_id</name>
        <qualifiedname>AABBTraits::Object_and_primitive_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This requirement is deprecated and is no longer needed. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="55" column="19" bodyfile="Concepts/AABBTraits.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1af5b2ef75e7fca67d9ab37b0d4984000b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Query</type>
          </param>
        </templateparamlist>
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>using AABBTraits::Intersection_and_primitive_id =  unspecified_type</definition>
        <argsstring></argsstring>
        <name>Intersection_and_primitive_id</name>
        <qualifiedname>AABBTraits::Intersection_and_primitive_id</qualifiedname>
        <briefdescription>
<para>A nested class template providing as a pair the intersection result of a <computeroutput>Query</computeroutput> object and a <computeroutput>Primitive::Datum</computeroutput>, together with the <computeroutput>Primitive::Id</computeroutput> of the primitive intersected. </para>
        </briefdescription>
        <detaileddescription>
<para>The type of the pair is <computeroutput>Intersection_and_primitive_id&lt;Query&gt;::Type</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="65" column="1" bodyfile="Concepts/AABBTraits.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Splitting</header>
      <description><para>During the construction of the AABB tree, the primitives are split according to some comparison functions related to the longest axis: </para>
</description>
      <memberdef kind="typedef" id="classAABBTraits_1a33f90b5098acbbbcc2534d703ab46682" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Split_primitives</definition>
        <argsstring></argsstring>
        <name>Split_primitives</name>
        <qualifiedname>AABBTraits::Split_primitives</qualifiedname>
        <briefdescription>
<para>A functor object to split a range of primitives into two sub-ranges along the longest axis. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator: <computeroutput>void operator()(InputIterator first, InputIterator beyond);</computeroutput> Iterator type <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> must be a model of <ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref> and have <computeroutput>Primitive</computeroutput> as value type. The operator is used for determining the primitives assigned to the two children nodes of a given node, assuming that the goal is to split the chosen axis dimension of the bounding box of the node. The primitives assigned to this node are passed as argument to the operator. It should modify the iterator range in such a way that its first half and its second half correspond to the two children nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="81" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1af6e7982428973913f86030055e171e49" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Compute_bbox</definition>
        <argsstring></argsstring>
        <name>Compute_bbox</name>
        <qualifiedname>AABBTraits::Compute_bbox</qualifiedname>
        <briefdescription>
<para>A functor object to compute the bounding box of a set of primitives. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator: <computeroutput>Bounding_box operator()(Input_iterator begin, Input_iterator beyond);</computeroutput> Iterator type <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> must have <computeroutput>Primitive</computeroutput> as value type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="87" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Intersections</header>
      <description><para>The following predicates are required for each type <computeroutput>Query</computeroutput> for which the class <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound">CGAL::AABB_tree</ref>&lt;<ref refid="classAABBTraits" kindref="compound">AABBTraits</ref>&gt;</computeroutput> may receive an intersection detection or computation query. </para>
</description>
      <memberdef kind="typedef" id="classAABBTraits_1acd432e5763cef7e50b44f75f8b24c06d" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Do_intersect</definition>
        <argsstring></argsstring>
        <name>Do_intersect</name>
        <qualifiedname>AABBTraits::Do_intersect</qualifiedname>
        <briefdescription>
<para>A functor object to compute intersection predicates between the query and the nodes of the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operators:<itemizedlist>
<listitem><para><computeroutput>bool operator()(const Query &amp; q, const Bounding_box &amp; box);</computeroutput> which returns <computeroutput>true</computeroutput> iff the query intersects the bounding box</para>
</listitem><listitem><para><computeroutput>bool operator()(const Query &amp; q, const Primitive &amp; primitive);</computeroutput> which returns <computeroutput>true</computeroutput> iff the query intersects the primitive </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="111" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1ab9fa977423a0c7a615168e517b5f7efc" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Intersection</definition>
        <argsstring></argsstring>
        <name>Intersection</name>
        <qualifiedname>AABBTraits::Intersection</qualifiedname>
        <briefdescription>
<para>A functor object to compute the intersection of a query and a primitive. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator: <computeroutput>std::optional&lt;Intersection_and_primitive_id&lt;Query&gt;::Type &gt; operator()(const Query &amp; q, const Primitive&amp; primitive);</computeroutput> which returns the intersection as a pair composed of an object and a primitive id, iff the query intersects the primitive.</para>
<para><bold>Note on Backward Compatibility</bold><linebreak/>
 Before the release 4.3 of CGAL, the return type of this function used to be <computeroutput>std::optional&lt;Object_and_primitive_id&gt;</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="120" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Distance Queries</header>
      <description><para>The following predicates are required for each type <computeroutput>Query</computeroutput> for which the class <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound">CGAL::AABB_tree</ref>&lt;<ref refid="classAABBTraits" kindref="compound">AABBTraits</ref>&gt;</computeroutput> may receive a distance query. </para>
</description>
      <memberdef kind="typedef" id="classAABBTraits_1aa600068262ed08a8e233ffc3e6ab3b0b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Compare_distance</definition>
        <argsstring></argsstring>
        <name>Compare_distance</name>
        <qualifiedname>AABBTraits::Compare_distance</qualifiedname>
        <briefdescription>
<para>A functor object to compute distance comparisons between the query and the nodes of the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operators:<itemizedlist>
<listitem><para><computeroutput>bool operator()(const Query &amp; query, const Bounding_box&amp; box, const Point &amp; closest);</computeroutput> which returns <computeroutput>true</computeroutput> iff the bounding box is closer to <computeroutput>query</computeroutput> than <computeroutput>closest</computeroutput> is</para>
</listitem><listitem><para><computeroutput>bool operator()(const Query &amp; query, const Primitive &amp; primitive, const Point &amp; closest);</computeroutput> which returns <computeroutput>true</computeroutput> iff <computeroutput>primitive</computeroutput> is closer to the <computeroutput>query</computeroutput> than <computeroutput>closest</computeroutput> is </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="135" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1a3fadc69b5c266b650dfcb0a953d2727d" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Closest_point</definition>
        <argsstring></argsstring>
        <name>Closest_point</name>
        <qualifiedname>AABBTraits::Closest_point</qualifiedname>
        <briefdescription>
<para>A functor object to compute the closest point from the query on a primitive. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator: <computeroutput>Point operator()(const Query&amp; query, const Primitive&amp; primitive, const Point &amp; closest);</computeroutput> which returns the closest point to <computeroutput>query</computeroutput>, among <computeroutput>closest</computeroutput> and all points of the primitive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="141" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1a4dfd5585e5b11a057f1223f024cf3e1c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Squared_distance</definition>
        <argsstring></argsstring>
        <name>Squared_distance</name>
        <qualifiedname>AABBTraits::Squared_distance</qualifiedname>
        <briefdescription>
<para>A functor object to compute the squared distance between two points. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator: <computeroutput>FT operator()(const Point&amp; query, const Point &amp; p);</computeroutput> which returns the squared distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="147" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classAABBTraits_1a66b88b59f9451121c84a9074a4fe019a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type AABBTraits::Equal</definition>
        <argsstring></argsstring>
        <name>Equal</name>
        <qualifiedname>AABBTraits::Equal</qualifiedname>
        <briefdescription>
<para>A functor object to compare two points. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator: <computeroutput>bool operator()(const Point&amp; p, const Point&amp; q);}</computeroutput> which returns <computeroutput>true</computeroutput> if <computeroutput>p</computeroutput> is equal to <computeroutput>q</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="153" column="26" bodyfile="Concepts/AABBTraits.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classAABBTraits_1ac0fbf27e51ef182c387b20318b239ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAABBTraits_1a33f90b5098acbbbcc2534d703ab46682" kindref="member">Split_primitives</ref></type>
        <definition>Split_primitives AABBTraits::split_primitives_object</definition>
        <argsstring>()</argsstring>
        <name>split_primitives_object</name>
        <qualifiedname>AABBTraits::split_primitives_object</qualifiedname>
        <briefdescription>
<para>returns the primitive splitting functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="162" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classAABBTraits_1a0bfdfb7ed86eb8500c9bbf88d3530eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAABBTraits_1af6e7982428973913f86030055e171e49" kindref="member">Compute_bbox</ref></type>
        <definition>Compute_bbox AABBTraits::compute_bbox_object</definition>
        <argsstring>()</argsstring>
        <name>compute_bbox_object</name>
        <qualifiedname>AABBTraits::compute_bbox_object</qualifiedname>
        <briefdescription>
<para>returns the bounding box constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="167" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classAABBTraits_1a598af78d67828151e80354c6dcd727e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAABBTraits_1acd432e5763cef7e50b44f75f8b24c06d" kindref="member">Do_intersect</ref></type>
        <definition>Do_intersect AABBTraits::do_intersect_object</definition>
        <argsstring>()</argsstring>
        <name>do_intersect_object</name>
        <qualifiedname>AABBTraits::do_intersect_object</qualifiedname>
        <briefdescription>
<para>returns the intersection detection functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="172" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classAABBTraits_1af76b22b52473692f3e0741e87cf6e090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAABBTraits_1ab9fa977423a0c7a615168e517b5f7efc" kindref="member">Intersection</ref></type>
        <definition>Intersection AABBTraits::intersection_object</definition>
        <argsstring>()</argsstring>
        <name>intersection_object</name>
        <qualifiedname>AABBTraits::intersection_object</qualifiedname>
        <briefdescription>
<para>returns the intersection constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="177" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classAABBTraits_1a6afb566b44dd75a7d59bf77fd99b31aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAABBTraits_1aa600068262ed08a8e233ffc3e6ab3b0b" kindref="member">Compare_distance</ref></type>
        <definition>Compare_distance AABBTraits::compare_distance_object</definition>
        <argsstring>()</argsstring>
        <name>compare_distance_object</name>
        <qualifiedname>AABBTraits::compare_distance_object</qualifiedname>
        <briefdescription>
<para>returns the distance comparison functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="182" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classAABBTraits_1a0f4c70ab9415b68cd08986893892561c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAABBTraits_1a3fadc69b5c266b650dfcb0a953d2727d" kindref="member">Closest_point</ref></type>
        <definition>Closest_point AABBTraits::closest_point_object</definition>
        <argsstring>()</argsstring>
        <name>closest_point_object</name>
        <qualifiedname>AABBTraits::closest_point_object</qualifiedname>
        <briefdescription>
<para>returns the closest point constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="187" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classAABBTraits_1aafb3e8fb18b87a6c580d70aad79018e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAABBTraits_1a4dfd5585e5b11a057f1223f024cf3e1c" kindref="member">Squared_distance</ref></type>
        <definition>Squared_distance AABBTraits::squared_distance_object</definition>
        <argsstring>()</argsstring>
        <name>squared_distance_object</name>
        <qualifiedname>AABBTraits::squared_distance_object</qualifiedname>
        <briefdescription>
<para>returns the squared distance functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="192" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classAABBTraits_1af97e46a393ff1206ccef607d5f3b1cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAABBTraits_1a66b88b59f9451121c84a9074a4fe019a" kindref="member">Equal</ref></type>
        <definition>Equal AABBTraits::equal_object</definition>
        <argsstring>()</argsstring>
        <name>equal_object</name>
        <qualifiedname>AABBTraits::equal_object</qualifiedname>
        <briefdescription>
<para>returns the equal functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="197" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Primitive with Shared Data</header>
      <description><para>In addition, if <computeroutput>Primitive</computeroutput> is a model of the concept <computeroutput><ref refid="classAABBPrimitiveWithSharedData" kindref="compound">AABBPrimitiveWithSharedData</ref></computeroutput>, the following functions are part of the concept: </para>
</description>
      <memberdef kind="function" id="classAABBTraits_1a6dba5130cc78298fb7039f479f657fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AABBTraits::set_shared_data</definition>
        <argsstring>(T ... t)</argsstring>
        <name>set_shared_data</name>
        <qualifiedname>AABBTraits::set_shared_data</qualifiedname>
        <param>
          <type>T ...</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>the signature of that function must be the same as the static function <computeroutput>Primitive::construct_shared_data</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The type <computeroutput>Primitive</computeroutput> expects that the data constructed by a call to <computeroutput>Primitive::construct_shared_data(t...)</computeroutput> is the one given back when accessing the reference point and the datum of a primitive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/AABBTraits.h" line="212" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classAABBTraits" kindref="compound">AABBTraits</ref></computeroutput> provides the geometric primitive types and methods for the class <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound">CGAL::AABB_tree</ref>&lt;<ref refid="classAABBTraits" kindref="compound">AABBTraits</ref>&gt;</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1AABB__traits__2" kindref="compound">CGAL::AABB_traits_2</ref>&lt;<ref refid="classAABBGeomTraits__2" kindref="compound">AABBGeomTraits_2</ref>,<ref refid="classAABBPrimitive" kindref="compound">AABBPrimitive</ref>&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1AABB__traits__3" kindref="compound">CGAL::AABB_traits_3</ref>&lt;<ref refid="classAABBGeomTraits__3" kindref="compound">AABBGeomTraits_3</ref>,<ref refid="classAABBPrimitive" kindref="compound">AABBPrimitive</ref>&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classSearchTraits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Spatial_searching.tag">SearchTraits</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound">CGAL::AABB_tree</ref>&lt;<ref refid="classAABBTraits" kindref="compound">AABBTraits</ref>&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classAABBPrimitive" kindref="compound">AABBPrimitive</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/AABBTraits.h" line="19" column="1" bodyfile="Concepts/AABBTraits.h" bodystart="19" bodyend="224"/>
    <listofallmembers>
      <member refid="classAABBTraits_1a71832e63c8ab85c356fa6b3fc792ed3e" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Bounding_box</name></member>
      <member refid="classAABBTraits_1a3fadc69b5c266b650dfcb0a953d2727d" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Closest_point</name></member>
      <member refid="classAABBTraits_1a0f4c70ab9415b68cd08986893892561c" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>closest_point_object</name></member>
      <member refid="classAABBTraits_1aa600068262ed08a8e233ffc3e6ab3b0b" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Compare_distance</name></member>
      <member refid="classAABBTraits_1a6afb566b44dd75a7d59bf77fd99b31aa" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>compare_distance_object</name></member>
      <member refid="classAABBTraits_1af6e7982428973913f86030055e171e49" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Compute_bbox</name></member>
      <member refid="classAABBTraits_1a0bfdfb7ed86eb8500c9bbf88d3530eba" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>compute_bbox_object</name></member>
      <member refid="classAABBTraits_1acd432e5763cef7e50b44f75f8b24c06d" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Do_intersect</name></member>
      <member refid="classAABBTraits_1a598af78d67828151e80354c6dcd727e2" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>do_intersect_object</name></member>
      <member refid="classAABBTraits_1a66b88b59f9451121c84a9074a4fe019a" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Equal</name></member>
      <member refid="classAABBTraits_1af97e46a393ff1206ccef607d5f3b1cd0" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>equal_object</name></member>
      <member refid="classAABBTraits_1a1ee53f64a2ab05d4389003d4f36539e4" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>FT</name></member>
      <member refid="classAABBTraits_1ab9fa977423a0c7a615168e517b5f7efc" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Intersection</name></member>
      <member refid="classAABBTraits_1af5b2ef75e7fca67d9ab37b0d4984000b" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Intersection_and_primitive_id</name></member>
      <member refid="classAABBTraits_1af76b22b52473692f3e0741e87cf6e090" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>intersection_object</name></member>
      <member refid="classAABBTraits_1afeb8685b51df66ec98d9bf72e04007bf" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Object_and_primitive_id</name></member>
      <member refid="classAABBTraits_1a88a622647c5438503237ce957d99801f" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Point</name></member>
      <member refid="classAABBTraits_1a3c855ac5072a7a039cc043ff2b8e74c6" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Point_and_primitive_id</name></member>
      <member refid="classAABBTraits_1a18812bafada570757269e313ab06ff51" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Primitive</name></member>
      <member refid="classAABBTraits_1a6dba5130cc78298fb7039f479f657fe4" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>set_shared_data</name></member>
      <member refid="classAABBTraits_1a33f90b5098acbbbcc2534d703ab46682" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Split_primitives</name></member>
      <member refid="classAABBTraits_1ac0fbf27e51ef182c387b20318b239ba3" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>split_primitives_object</name></member>
      <member refid="classAABBTraits_1a4dfd5585e5b11a057f1223f024cf3e1c" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>Squared_distance</name></member>
      <member refid="classAABBTraits_1aafb3e8fb18b87a6c580d70aad79018e2" prot="public" virt="non-virtual"><scope>AABBTraits</scope><name>squared_distance_object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
