<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="preliminaries" kind="page">
    <compoundname>preliminaries</compoundname>
    <title>General Information</title>
    <briefdescription>
<para><htmlonly block="yes"> &lt;div id=&quot;autotoc&quot; class=&quot;toc&quot;&gt;&lt;/div&gt; </htmlonly> </para>
    </briefdescription>
    <detaileddescription>
<para>The chapter explains some basic features of CGAL such as thread safety, code deprecation, checking of pre- and postconditions and altering the failure behavior, and how to control inlining.</para>
<para>These concepts are further developed in the <ref refid="dev_manual" kindref="compound">Developer Manual</ref>.</para>
<sect1 id="preliminaries_1Preliminaries_namespace">
<title>Namespace CGAL</title>
<para>All names introduced by CGAL, especially those documented in these manuals, are in a namespace called <computeroutput><ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL</ref></computeroutput>, which is in global scope. A user can either qualify names from CGAL by adding <computeroutput><ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL</ref>::</computeroutput>, e.g., <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_2</ref>&lt; <ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref> &gt;</computeroutput>, make a single name from CGAL visible in a scope via a <computeroutput>using</computeroutput> statement, e.g., <computeroutput>using <ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_2</ref>;</computeroutput>, and then use this name unqualified in this scope, or even make all names from namespace <computeroutput><ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL</ref></computeroutput> visible in a scope with <computeroutput>using namespace <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL</ref>;</computeroutput>. The latter, however, is likely to give raise to name conflicts and is therefore not recommended.</para>
</sect1>
<sect1 id="preliminaries_1Preliminaries_thread_safety">
<title>Thread Safety</title>
<para>CGAL is progressively being made thread-safe. The guidelines which are followed are:</para>
<para><itemizedlist>
<listitem><para>it should be possible to use different objects in different threads at the same time (of the same type or not),</para>
</listitem><listitem><para>it is not safe to access the same object from different threads at the same time, unless otherwise specified in the class documentation.</para>
</listitem></itemizedlist>
</para>
<para>If the macro <computeroutput>CGAL_HAS_THREADS</computeroutput> is not defined, then CGAL assumes it can use any thread-unsafe code (such as static variables). By default, this macro is not defined, unless <computeroutput>BOOST_HAS_THREADS</computeroutput> or <computeroutput>_OPENMP</computeroutput> is defined. It is possible to force its definition in the compiler options, and it is possible to prevent its default definition by defining the macro <computeroutput>CGAL_HAS_NO_THREADS</computeroutput>. If you are using CMake, then you can set the CMake option <computeroutput>CGAL_HAS_NO_THREADS</computeroutput> to <computeroutput>TRUE</computeroutput>. In addition to defining the preprocessor macro <computeroutput>CGAL_HAS_NO_THREADS</computeroutput>, it will also avoid CMake to link with the native threads support library on your system.</para>
</sect1>
<sect1 id="preliminaries_1Preliminaries_cc0x">
<title>C++17 Support</title>
<para>CGAL is based on the version C++17 of the C++ standard.</para>
</sect1>
<sect1 id="preliminaries_1preliminaries_secchecks">
<title>Checks</title>
<para>Much of the CGAL code contains assert statements for preconditions, and postconditions of functions as well as in the code. These assertions can be switched on and off per package and the user can change the error behavior. For details see Section <ref refid="index_1secchecks" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Checks</ref> of Chapter <ref refid="index_1Chapter_STL_Extensions_for_CGAL" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Chapter_STL_Extensions_for_CGAL</ref>.</para>
</sect1>
<sect1 id="preliminaries_1Preliminaries_flags">
<title>Compile-time Flags to Control Inlining</title>
<para>Making functions inlined can, at times, improve the efficiency of your code. However this is not always the case and it can differ for a single function depending on the application in which it is used. Thus CGAL defines a set of compile-time macros that can be used to control whether certain functions are designated as inlined functions or not. The following table lists the macros and their default values, which are set in one of the CGAL include files.</para>
<para><table rows="7" cols="2"><row>
<entry thead="yes" align='left'><para>Macro Name   </para>
</entry><entry thead="yes" align='left'><para>Default    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CGAL_KERNEL_INLINE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>inline    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CGAL_KERNEL_MEDIUM_INLINE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para></para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CGAL_KERNEL_LARGE_INLINE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para></para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CGAL_MEDIUM_INLINE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>inline    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CGAL_LARGE_INLINE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para></para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CGAL_HUGE_INLINE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para></para>
</entry></row>
</table>
</para>
<para>If you wish to change the value of one or more of these macros, you can simply give it a new value when compiling. For example, to make functions that use the macro <computeroutput>CGAL_KERNEL_MEDIUM_INLINE</computeroutput> inline functions, you should set the value of this macro to <computeroutput>inline</computeroutput> instead of the default blank.</para>
<para>Note that setting inline manually is very fragile, especially in a template context. It is usually better to let the compiler select by himself which functions should be inlined or not.</para>
</sect1>
<sect1 id="preliminaries_1seccgal_version">
<title>Identifying the Version of CGAL</title>
<para>Every release of CGAL defines the following preprocessor macros:</para>
<para><variablelist>
<varlistentry><term><computeroutput>CGAL_VERSION_STR</computeroutput> </term></varlistentry>
<listitem><para>a textual description of the current release (e.g., or 3.3 or 3.2.1 or 3.2.1-I-15) as a string literal </para>
</listitem>
<varlistentry><term><computeroutput>CGAL_VERSION_NR</computeroutput> </term></varlistentry>
<listitem><para>a numerical description of the current release such that more recent releases have higher number.</para>
<para>More precisely, it is defined as <computeroutput>1MMmmbiiii</computeroutput>, where <computeroutput>MM</computeroutput> is the major release number (e.g. 03), <computeroutput>mm</computeroutput> is the minor release number (e.g. 02), <computeroutput>b</computeroutput> is the bug-fix release number (e.g. 0), and <computeroutput>iiii</computeroutput> is the internal release number (e.g. 0001). For public releases, the latter is defined as 1000. Examples: for the public release 3.2.4 this number is 1030241000; for internal release 3.2-I-1, it is 1030200001. Note that this scheme was modified around 3.2-I-30.  </para>
</listitem>
<varlistentry><term><computeroutput>CGAL_VERSION_NUMBER(M,m,b)</computeroutput> </term></varlistentry>
<listitem><para>a function macro computing the version number macro from the M.m.b release version. Note that the internal release number is dropped here. Example: <computeroutput>CGAL_VERSION_NUMBER(3,2,4)</computeroutput> is equal to 1030241000.  </para>
</listitem>
</variablelist>
</para>
<para>The macro <computeroutput>CGAL_VERSION</computeroutput> is deprecated. It is the same as <computeroutput>CGAL_VERSION_STR</computeroutput>, but not as a string literal. </para>
</sect1>
    </detaileddescription>
    <location file="Preliminaries.txt"/>
  </compounddef>
</doxygen>
