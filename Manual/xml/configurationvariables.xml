<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="configurationvariables" kind="page">
    <compoundname>configurationvariables</compoundname>
    <title>Summary of CGAL&apos;s Configuration Variables</title>
    <briefdescription>
<para><htmlonly block="yes"> &lt;div id=&quot;autotoc&quot; class=&quot;toc&quot;&gt;&lt;/div&gt; </htmlonly> </para>
    </briefdescription>
    <detaileddescription>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>This page lists CMake variables which you can use to help CMake find missing dependencies while using the command line. We however recommend using the graphical interface (<computeroutput>cmake-gui</computeroutput>). <htmlonly block="yes"> &lt;/div&gt; </htmlonly></para>
<sect1 id="configurationvariables_1installation_summary">
<title>Summary of CGAL&apos;s Configuration Variables</title>
<para>Most configuration variables are not environment variables but <emphasis>CMake variables</emphasis>. They are given in the command line to CMake via the <computeroutput>-D</computeroutput> option, or passed from the interactive interface of <computeroutput>cmake-gui</computeroutput>. Unless indicated differently, all the variables summarized below are CMake variables.</para>
<sect2 id="configurationvariables_1installation_component_selection">
<title>Component Selection</title>
<para>The following boolean variables indicate which CGAL components to configure and/or build. Their values can be ON or OFF.</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Default Value    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>WITH_examples</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>OFF    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>WITH_demos</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>OFF    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>WITH_CGAL_Core</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>ON    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>WITH_CGAL_Qt6</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>ON    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>WITH_CGAL_ImageIO</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>ON   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_flags">
<title>Compiler and Linker Flags</title>
<para>The following variables specify compiler and linker flags. Each variable holds a space-separated list of command-line switches for the compiler and linker and their default values are automatically defined by CMake based on the target platform.</para>
<para>Have in mind that these variables specify a list of flags, not just one single flag. If you provide your own definition for a variable, you will <emphasis>entirely</emphasis> override the list of flags chosen by CMake for that particular variable.</para>
<para>The variables that correspond to both debug and release builds are always used in conjunction with those for the specific build type.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" align='left'><para>Program   </para>
</entry><entry thead="yes" align='left'><para>Both Debug and Release   </para>
</entry><entry thead="yes" align='left'><para>Release Only   </para>
</entry><entry thead="yes" align='left'><para>Debug Only    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>C++ Compiler   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_CXX_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_CXX_FLAGS_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_CXX_FLAGS_DEBUG</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Linker (shared libs)   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_SHARED_LINKER_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_SHARED_LINKER_FLAGS_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_SHARED_LINKER_FLAGS_DEBUG</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Linker (static libs)   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_MODULE_LINKER_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_MODULE_LINKER_FLAGS_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_MODULE_LINKER_FLAGS_DEBUG</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Linker (programs)   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_EXE_LINKER_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_EXE_LINKER_FLAGS_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CMAKE_EXE_LINKER_FLAGS_DEBUG</computeroutput>   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_additional_flags">
<title>Additional Compiler and Linker Flags</title>
<para>The following variables can be used to <emphasis>add</emphasis> flags without overriding the ones defined by cmake.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" align='left'><para>Program   </para>
</entry><entry thead="yes" align='left'><para>Both Debug and Release   </para>
</entry><entry thead="yes" align='left'><para>Release Only   </para>
</entry><entry thead="yes" align='left'><para>Debug Only    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>C++ Compiler   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_CXX_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_CXX_FLAGS_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_CXX_FLAGS_DEBUG</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Linker (shared libs)   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_SHARED_LINKER_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_SHARED_LINKER_FLAGS_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_SHARED_LINKER_FLAGS_DEBUG</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Linker (static libs)   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_MODULE_LINKER_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_MODULE_LINKER_FLAGS_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_MODULE_LINKER_FLAGS_DEBUG</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Linker (programs)   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_EXE_LINKER_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_EXE_LINKER_FLAGS_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para><computeroutput>CGAL_EXE_LINKER_FLAGS_DEBUG</computeroutput>   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_misc">
<title>Miscellaneous Variables</title>
<para>Note that the default build type is <bold><computeroutput>Debug</computeroutput></bold>, which should only be used to debug and will serverly limit performances.</para>
<para><table rows="7" cols="4"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type   </para>
</entry><entry thead="yes" align='left'><para>Default Value    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CMAKE_BUILD_TYPE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Indicates type of build. Possible values are &apos;Debug&apos; or &apos;Release&apos;   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry><entry thead="no" align='left'><para>none    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CMAKE_INSTALL_PREFIX</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Installation directory path   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry><entry thead="no" align='left'><para>platform-dependent    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CMAKE_C_COMPILER</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full-path to the executable corresponding to the C compiler to use.   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry><entry thead="no" align='left'><para>platform-dependent    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CMAKE_CXX_COMPILER</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full-path to the executable corresponding to the C++ compiler to use.   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry><entry thead="no" align='left'><para>platform-dependent    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CXX</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment   </para>
</entry><entry thead="no" align='left'><para>Idem    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>BUILD_SHARED_LIBS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Whether to build shared or static libraries.   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry><entry thead="no" align='left'><para>ON   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_variables_building">
<title>Variables Used Only When Building Programs (Such as Demos or Examples)</title>
<para><table rows="3" cols="4"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type   </para>
</entry><entry thead="yes" align='left'><para>Default Value    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CGAL_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full-path to the binary directory where CGAL was configured   </para>
</entry><entry thead="no" align='left'><para>Either CMake or Environment   </para>
</entry><entry thead="no" align='left'><para>none    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>Qt6_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full-path to the Qt cmake directory   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry><entry thead="no" align='left'><para>platform-dependent   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_variables_third_party">
<title>Variables Providing Information About 3rd-Party Libraries</title>
<para><anchor id="configurationvariables_1sec3partysoftwareconfig"/> The following variables provide information about the availability and location of the 3rd party libraries used by CGAL. CMake automatically searches for dependencies so you need to specify these variables if CMake was unable to locate something. This is indicated by a value ending in <computeroutput>NOTFOUND</computeroutput>.</para>
<para>Since 3rd-party libraries are system wide, many of the CMake variables listed below can alternatively be given as similarly-named environment variables instead. Keep in mind that you must provide one or the other but never both.</para>
</sect2>
<sect2 id="configurationvariables_1installation_boost">
<title>Boost Libraries</title>
<sect3 id="configurationvariables_1inst_boost_1_72_plus">
<title>Version 1.72 and Later</title>
<para>Starting from Boost 1.72, the cmake config mode can be used for configuring the Boost version to use by setting the environment variable <computeroutput>Boost_DIR</computeroutput> to the path containing the file <computeroutput>BoostConfig.cmake</computeroutput>. For example if you manually installed Boost 1.77 with <computeroutput>--prefix=&lt;path&gt;</computeroutput>, then you should set <computeroutput>Boost_DIR=&lt;path&gt;/lib/cmake/Boost-1.77.0</computeroutput>.</para>
</sect3>
<sect3 id="configurationvariables_1inst_boost_up_2_1_69">
<title>Version 1.69 and Earlier</title>
<para><simplesect kind="warning"><para>If you have a version of Boost greater than 1.69 already installed on your system, and you want to configure and compile with an earlier version of Boost, then you will need to set the CMake variable <computeroutput>Boost_NO_BOOST_CMAKE</computeroutput> to <computeroutput>ON</computeroutput> (otherwise the <computeroutput>FindBoost.cmake</computeroutput> module of CMake will start searching for <computeroutput>BoostConfig.cmake</computeroutput>, and ignore the <computeroutput>BOOST_ROOT</computeroutput> variable).</para>
</simplesect>
In most cases, if Boost is not automatically found, setting the <computeroutput>BOOST_ROOT</computeroutput> variable is enough. If it is not, you can specify the header and library directories individually. You can also provide the full pathname to a specific compiled library if it cannot be found in the library directory or its name is non-standard.</para>
<para>By default, when Boost binary libraries are needed, the shared versions are used if present. You can set the variable <computeroutput>CGAL_Boost_USE_STATIC_LIBS</computeroutput> to <computeroutput>ON</computeroutput> if you want to link with static versions explicitly.</para>
<para>On Windows, if you link with Boost shared libraries, you must ensure that the <computeroutput>.dll</computeroutput> files are found by the dynamic linker, at run time. For example, you can add the path to the Boost <computeroutput>.dll</computeroutput> to the <computeroutput>PATH</computeroutput> environment variable.</para>
<para><table rows="8" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>BOOST_ROOT</computeroutput>The environment variable can be spelled either <computeroutput>BOOST_ROOT</computeroutput> or <computeroutput>BOOSTROOT</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Root directory of your Boost installation   </para>
</entry><entry thead="no" align='left'><para>Either CMake or Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>Boost_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>boost/version.hpp</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>BOOST_INCLUDEDIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>Boost_LIBRARY_DIRS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled Boost libraries   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>BOOST_LIBRARYDIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>Boost_(xyz)_LIBRARY_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname to a release build of the compiled &apos;xyz&apos; Boost library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>Boost_(xyz)_LIBRARY_DEBUG</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname to a debug build of the compiled &apos;xyz&apos; Boost library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect3>
</sect2>
<sect2 id="configurationvariables_1installation_gmp">
<title>GMP and MPFR Libraries</title>
<para>Under Windows, auto-linking is used, so only the <emphasis>directory</emphasis> containing the libraries is needed and you would specify <computeroutput>GMP|MPFR_LIBRARY_DIR</computeroutput> rather than <computeroutput>GMP|MPFR_LIBRARIES</computeroutput>. On the other hand, under Linux the actual library filename is needed. Thus you would specify <computeroutput>GMP|MPFR_LIBRARIES</computeroutput>. In no case you need to specify both.</para>
<para>CGAL uses both GMP and MPFR so both need to be supported. If either of them is unavailable the usage of GMP and of MPFR will be disabled.</para>
<para><table rows="13" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>CGAL_DISABLE_GMP</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Indicates whether to search and use GMP/MPFR or not   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMP_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of GMP default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMP_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>gmp.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMP_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMP_LIBRARIES_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled GMP library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMP_LIB_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMP_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled GMP library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFR_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>mpfr.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFR_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFR_LIBRARIES_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled MPFR library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFR_LIB_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFR_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled MPFR library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
<para>Under Linux, the GMPXX is also searched for, and you may specify the following variables:</para>
<para><table rows="4" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMPXX_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of GMPXX default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMPXX_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput><ref refid="gmpxx_8h.html" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Number_types.tag">gmpxx.h</ref></computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GMPXX_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled GMPXX library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_qt6">
<title>Qt6 Library</title>
<para>You must set the cmake or environment variable <computeroutput>Qt6_DIR</computeroutput> to point to the path to the directory containing the file <computeroutput>Qt6Config.cmake</computeroutput> created by your Qt6 installation. If you are using the open source edition it should be <computeroutput>&lt;path&gt;/qt-everywhere-opensource-src-&lt;version&gt;/qtbase/lib/cmake/Qt6</computeroutput>.</para>
</sect2>
<sect2 id="configurationvariables_1installation_leda">
<title>LEDA Library</title>
<para>When the LEDA libraries are not automatically found, yet they are installed on the system with base names &apos;leda&apos; and &apos;ledaD&apos; (for the release and debug versions resp.), it might be sufficient to just indicate the library directory via the <computeroutput>LEDA_LIBRARY_DIRS</computeroutput> variable. If that doesn&apos;t work because, for example, the names are different, you can provide the full pathnames of each variant via <computeroutput>LEDA_LIBRARY_RELEASE</computeroutput> and <computeroutput>LEDA_LIBRARY_DEBUG</computeroutput>.</para>
<para>The variables specifying definitions and flags can be left undefined if they are not needed by LEDA.</para>
<para><table rows="12" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>WITH_LEDA</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Indicates whether to search and use LEDA or not   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of LEDA default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the file <computeroutput>LEDA/system/basic.h</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled LEDA libraries   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the file <computeroutput>LEDA/system/basic.h</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_LIB_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled LEDA libraries   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_LIBRARY_RELEASE</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname to a release build of the LEDA library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_LIBRARY_DEBUG</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname to a debug build of the LEDA library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_DEFINITIONS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Preprocessor definitions   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_CXX_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Compiler flags   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LEDA_LINKER_FLAGS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Linker flags   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_mpfi">
<title>MPFI Library</title>
<para>CGAL provides a number type based on this library, but the CGAL library itself does not depend on MPFI. This means that this library must be configured when compiling an application that uses the above number type.</para>
<para>When MPFI files are not on the standard path, the locations of the headers and library files must be specified by using environment variables.</para>
<para><table rows="7" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFI_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of MPFI default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFI_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>mpfi.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFI_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFI_LIBRARIES_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled MPFI library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFI_LIB_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>MPFI_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled MPFI library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_rs">
<title>RS and RS3 Library</title>
<para>As said before, only the CGAL univariate algebraic kernel depends on the library Rs. As the algebraic kernel is not compiled as a part of the CGAL library, this library is not detected nor configured at installation time.</para>
<para>CMake will try to find Rs in the standard header and library directories. When it is not automatically detected, the locations of the headers and library files must be specified using environment variables.</para>
<para>Rs needs GMP 4.2 or later and MPFI 1.3.4 or later. The variables related to the latter library may also need to be defined.</para>
<para><table rows="7" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of RS default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>rs_exports.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS_LIBRARIES_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled RS library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS_LIB_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled RS library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
<para>Similar variables exist for RS3.</para>
<para><table rows="7" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS3_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of RS3 default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS3_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the file <computeroutput>rs3_fncts.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS3_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS3_LIBRARIES_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled RS3 library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS3_LIB_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>RS3_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled RS3 library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_ntl">
<title>NTL Library</title>
<para>Some polynomial computations in CGAL&apos;s algebraic kernel are speed up when NTL is available. As the algebraic kernel is not compiled as a part of the CGAL library, this library is not detected nor configured at installation time.</para>
<para>CMake will try to find NTL in the standard header and library directories. When it is not automatically detected, the locations of the headers and library files must be specified using environment variables.</para>
<para><table rows="7" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>NTL_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of NTL default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>NTL_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>NTL/ZZX.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>NTL_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>NTL_LIBRARIES_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the compiled NTL library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>NTL_LIB_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>NTL_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled NTL library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_eigen">
<title>Eigen Library</title>
<para>Eigen is a header-only template library. Only the <emphasis>directory</emphasis> containing the header files of Eigen 3.1 (or greater) is needed.</para>
<para><table rows="3" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>EIGEN3_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the file <computeroutput>signature_of_eigen3_matrix_library</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>EIGEN3_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Idem   </para>
</entry><entry thead="no" align='left'><para>Environment   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_esbtl">
<title>ESBTL Library</title>
<para>One skin surface example requires the ESBTL library in order to read PDB files.</para>
<para>If ESBTL is not automatically found, setting the <computeroutput>ESBTL_INC_DIR</computeroutput> environment variable is sufficient.</para>
<para><table rows="4" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>ESBTL_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of ESBTL default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>ESBTL_INC_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>ESBTL/default.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>ESBTL_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>ESBTL/default.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_metis">
<title>METIS Library</title>
<para>Some BGL examples require the METIS library in order to partition METIS meshes.</para>
<para>If METIS is not automatically found, setting the <computeroutput>METIS_INCLUDE_DIR</computeroutput> and <computeroutput>METIS_LIBRARY</computeroutput> cmake variables is necessary.</para>
<para><table rows="3" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>METIS_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of METIS default installation   </para>
</entry><entry thead="no" align='left'><para>CMAKE    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>METIS_LIBRARY</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>libmetis.so or .lib</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMAKE   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_tbb">
<title>TBB Library</title>
<para>If TBB is not automatically found, the user must set some variables, depending on the used version of TBB.</para>
<sect3 id="configurationvariables_1installation_old_tbb">
<title>TBB 2020 or before</title>
<para>The <computeroutput>TBB_ROOT</computeroutput> and <computeroutput>TBB_ARCH_PLATFORM=&lt;arch&gt;/&lt;compiler&gt;</computeroutput> environment variables must be set. <computeroutput>&lt;arch&gt;</computeroutput> is <computeroutput>ia32</computeroutput> or <computeroutput>intel64</computeroutput>. <computeroutput>&lt;compiler&gt;</computeroutput> describes the Linux kernel, gcc version or Visual Studio version used. It should be set to what is used in <computeroutput>$TBB_ROOT/lib/&lt;arch&gt;</computeroutput>.</para>
<para>For windows users, the folder <computeroutput>TBB_ROOT/bin/&lt;arch&gt;/&lt;compiler&gt;</computeroutput> should be added to the <computeroutput>PATH</computeroutput> variable.</para>
<para>Note that the variables in the table below are being used.</para>
<para><table rows="11" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_ROOT</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory of TBB default installation   </para>
</entry><entry thead="no" align='left'><para>Environment    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_INCLUDE_DIRS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the <computeroutput>tbb/tbb.h</computeroutput> file   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_LIBRARY_DIRS</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory(ies) containing the compiled TBB libraries   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathnames of the compiled TBB libraries (both release and debug versions, using &quot;optimized&quot; and &quot;debug&quot; CMake keywords). Note that if the debug versions are not found, the release versions will be used instead for the debug mode.   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_RELEASE_LIBRARY</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled TBB release library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_MALLOC_RELEASE_LIBRARY</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled TBB release malloc library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_DEBUG_LIBRARY</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled TBB debug library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_MALLOC_DEBUG_LIBRARY</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled TBB debug malloc library   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_MALLOCPROXY_DEBUG_LIBRARY</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled TBB debug malloc_proxy library (optional)   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>TBB_MALLOCPROXY_RELEASE_LIBRARY</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled TBB release malloc_proxy library (optional)   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect3>
<sect3 id="configurationvariables_1installation_new_tbb">
<title>OneTBB</title>
<para>Since OneAPI TBB version 2021, Intel provides CMake scripts of their own, and the user only have to set the <computeroutput>TBB_DIR</computeroutput> CMake variable at configuration time. A typical value for <computeroutput>TBB_DIR</computeroutput> is <computeroutput>/opt/intel/oneapi/tbb/latest/lib/cmake/tbb</computeroutput> on Unix systems, and <computeroutput>C:/dev/OneAPI/tbb/latest/lib/cmake/tbb</computeroutput> on Windows. Alternatively, the user can instead source the <computeroutput>setvars</computeroutput> script that can be found at <computeroutput>/opt/intel/oneapi/setvars.sh</computeroutput> on Unix and <computeroutput>C:/dev/OneAPI/setvars.bat</computeroutput> on Windows. It will setup the PATH and all Intel internal variables to be able to easily use any library of the OneAPI.</para>
</sect3>
</sect2>
<sect2 id="configurationvariables_1installation_laslib">
<title>LASlib library</title>
<para>If LASLIB is not automatically found, the following variables must be set:</para>
<para><table rows="4" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LASLIB_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the file <computeroutput>lasreader.hpp</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LASZIP_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the file <computeroutput>mydefs.hpp</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>LASLIB_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled LASLIB library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="configurationvariables_1installation_OpenCV">
<title>OpenCV library</title>
<para>The environment variable <computeroutput>OPENCV_DIR</computeroutput> should be set to the directory containing the file <computeroutput>OpenCVConfig.cmake</computeroutput> provided by OpenCV.</para>
</sect2>
<sect2 id="configurationvariables_1installation_SCIP">
<title>SCIP library</title>
<para>The environment variable <computeroutput>SCIP_DIR</computeroutput> should be set to the directory containing the file <computeroutput>scip-config.cmake</computeroutput> provided by SCIP.</para>
</sect2>
<sect2 id="configurationvariables_1installation_GLPK">
<title>GLPK library</title>
<para>If GLPK is not automatically found, the following variables must be set:</para>
<para><table rows="3" cols="3"><row>
<entry thead="yes" align='left'><para>Variable   </para>
</entry><entry thead="yes" align='left'><para>Description   </para>
</entry><entry thead="yes" align='left'><para>Type    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GLPK_INCLUDE_DIR</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Directory containing the file <computeroutput>glpk.h</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>CMake    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para><computeroutput>GLPK_LIBRARIES</computeroutput>   </para>
</entry><entry thead="no" align='left'><para>Full pathname of the compiled GLPK library   </para>
</entry><entry thead="no" align='left'><para>CMake   </para>
</entry></row>
</table>
</para>
</sect2>
</sect1>
<sect1 id="configurationvariables_1installation_compiler_workarounds">
<title>Compiler Workarounds</title>
<para>A number of boolean flags are used to workaround compiler bugs and limitations. They all start with the prefix <computeroutput>CGAL_CFG</computeroutput>. These flags are used to work around compiler bugs and limitations.</para>
<para>For each installation a file <computeroutput>&lt;CGAL/compiler_config.h&gt;</computeroutput> is defined, with the correct settings of all flags. This file is generated automatically by CMake, and it is located in the <computeroutput>include</computeroutput> directory of where you run CMake. For an in-source configuration this means <computeroutput>CGAL-6.0.1</computeroutput><computeroutput>/include</computeroutput>.</para>
<para>The test programs used to generate the <computeroutput>compiler_config.h</computeroutput> file can be found in <computeroutput>config/testfiles</computeroutput>. Both <computeroutput>compiler_config.h</computeroutput> and the test programs contain a short description of the problem. In case of trouble with one of the <computeroutput>CGAL_CFG</computeroutput> flags, it is a good idea to take a look at it.</para>
<para>The file <computeroutput>CGAL/compiler_config.h</computeroutput> is included from <computeroutput>&lt;CGAL/config.h&gt;</computeroutput>. which is included by all CGAL header files. </para>
</sect1>
    </detaileddescription>
    <location file="advanced/Configuration_variables.txt"/>
  </compounddef>
</doxygen>
