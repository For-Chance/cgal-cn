<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="thirdparty" kind="page">
    <compoundname>thirdparty</compoundname>
    <title>Compilers and Third Party Dependencies</title>
    <briefdescription>
<para><htmlonly block="yes"> &lt;div id=&quot;autotoc&quot; class=&quot;toc&quot;&gt;&lt;/div&gt; </htmlonly> </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="thirdparty_1seccompilers">
<title>Supported Compilers</title>
<para>In order to build a program using CGAL, you need a C++ compiler supporting C++17 or later. CGAL 6.0.1 is supported (continuously tested) for the following compilers/operating systems:</para>
<para><table rows="7" cols="2"><row>
<entry thead="yes" align='left'><para>Operating System   </para>
</entry><entry thead="yes" align='left'><para>Compiler    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Linux   </para>
</entry><entry thead="no" align='left'><para>GNU <computeroutput>g++</computeroutput> 11.4.0 or later<ulink url="https://gcc.gnu.org/"><computeroutput>https://gcc.gnu.org/</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para></para>
</entry><entry thead="no" align='left'><para><computeroutput>Clang</computeroutput> <ulink url="https://clang.llvm.org/"><computeroutput>https://clang.llvm.org/</computeroutput></ulink> compiler version 15.0.7    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>MS Windows   </para>
</entry><entry thead="no" align='left'><para>GNU <computeroutput>g++</computeroutput> 11.4.0 or later<ulink url="https://gcc.gnu.org/"><computeroutput>https://gcc.gnu.org/</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para></para>
</entry><entry thead="no" align='left'><para>MS Visual <computeroutput>C++</computeroutput> 15.9, 16.10, 17.0 (Visual Studio 2017, 2019, and 2022)<ulink url="https://visualstudio.microsoft.com/"><computeroutput>https://visualstudio.microsoft.com/</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>macOS   </para>
</entry><entry thead="no" align='left'><para>GNU <computeroutput>g++</computeroutput> 11.4.0 or later<ulink url="https://gcc.gnu.org/"><computeroutput>https://gcc.gnu.org/</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para></para>
</entry><entry thead="no" align='left'><para>Apple <computeroutput>Clang</computeroutput> compiler versions 10.0.1, 12.0.5, and 15.0.0   </para>
</entry></row>
</table>
</para>
<para>Older versions of the above listed compilers might work, but no guarantee is provided.</para>
</sect1>
<sect1 id="thirdparty_1seccmake">
<title>CMake</title>
<para><bold>Version 3.22 or later</bold></para>
<para>In order to configure and build the CGAL examples, demos, or libraries, you need <ulink url="https://cmake.org/">CMake</ulink>, a cross-platform &quot;makefile generator&quot;.</para>
<para>This manual explains only the features of CMake which are needed in order to use CGAL. Please refer to the <ulink url="https://cmake.org/documentation/">CMake documentation</ulink> for further details.</para>
<para><simplesect kind="attention"><para>Recent versions of CMake are needed for the most recent versions of MS Visual C++. Please refer to CMake&apos;s documentation for further information.</para>
</simplesect>
</para>
</sect1>
<sect1 id="thirdparty_1secessential3rdpartysoftware">
<title>Essential Third Party Libraries</title>
<para>The focus of CGAL is on geometry, and we rely on other highly specialized libraries and software for non-geometric issues, for instance for numeric solvers or visualization. We first list software that is essential to most of CGAL, and must therefore be found during the configuration of CGAL. The page <ref refid="configurationvariables" kindref="compound">Summary of CGAL&apos;s Configuration Variables</ref> lists CMake and environment variables which can be used to specify the location of third-party software during configuration.</para>
<sect2 id="thirdparty_1thirdpartystl">
<title>Standard Template Library (STL)</title>
<para>CGAL heavily uses the STL, and in particular adopted many of its design ideas. You can find online documentation for the STL at various web sites, for instance, <ulink url="https://en.cppreference.com/w/"><computeroutput>https://en.cppreference.com</computeroutput></ulink>, or <ulink url="https://msdn.microsoft.com/en-us/library/1fe2x6kt(v=vs.140).aspx"><computeroutput>https://msdn.microsoft.com</computeroutput></ulink>.</para>
<para>The STL comes with the compiler, and as such no installation is required.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyBoost">
<title>Boost</title>
<para><bold>Version 1.72 or later</bold></para>
<para>The Boost libraries are a set of portable C++ source libraries. Most of Boost libraries are header-only, but a few of them need to be compiled or installed as binaries.</para>
<para>CGAL only requires the headers of the Boost libraries, but some demos and examples depend on the binary library <computeroutput>Boost.Program_options</computeroutput>.</para>
<para>In case the Boost libraries are not installed on your system already, you can obtain them from <ulink url="https://www.boost.org"><computeroutput>https://www.boost.org/</computeroutput></ulink>. For Visual C++ you can download precompiled libraries from <ulink url="https://sourceforge.net/projects/boost/files/boost-binaries/"><computeroutput>https://sourceforge.net/projects/boost/files/boost-binaries/</computeroutput></ulink>.</para>
<para>As there is no canonical directory for where to find Boost on Windows, we recommend that you define the environment variable <computeroutput>BOOST_ROOT</computeroutput> and set it to where you have installed Boost, e.g., <computeroutput>C:Boost\boost_1_70_0</computeroutput>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyMP">
<title>Multi Precision Number Type Library</title>
<para>GNU Multiple Precision Arithmetic (GMP) and GNU Multiple Precision Floating-Point Reliably (MPFR) Libraries are libraries for multi precision integers and rational numbers, and for multi precision floating point numbers.</para>
<para>These libraries can be obtained from <ulink url="https://gmplib.org/"><computeroutput>https://gmplib.org/</computeroutput></ulink> and <ulink url="https://www.mpfr.org/"><computeroutput>https://www.mpfr.org/</computeroutput></ulink>. Since Visual C++ is not properly supported by the GMP and MPFR projects, we provide precompiled versions of GMP and MPFR, which can be downloaded from the <ulink url="https://github.com/CGAL/cgal/releases">assets of a release</ulink>. Version supported are <bold>GMP Version 5.0.1 or later, MPFR Version 3.0.0 or later</bold>.</para>
<para>The Boost library also provides a module for multi precision integers and rational numbers: <ulink url="https://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/index.html">Boost multiprecision</ulink>. Versions supported are <bold>Boost Version 1.72 or later</bold>.</para>
<para>The components CGAL, and <computeroutput>CGAL_Qt6</computeroutput> require either GMP and MPFR, or Boost multiprecision for multi precision numbers. <computeroutput>CGAL_Core</computeroutput> requires Boost multiprecision.</para>
<para>CGAL combines floating point arithmetic with exact arithmetic in order to be efficient and reliable. CGAL has a built-in number type for that, but previous alternatives are faster solutions, and we recommend using one of them.</para>
<para>The CMake variable <computeroutput>CGAL_CMAKE_EXACT_NT_BACKEND</computeroutput> can be used to select the library that will be used internally for multi precision number types.</para>
</sect2>
</sect1>
<sect1 id="thirdparty_1secoptional3rdpartysoftware">
<title>Optional Third Party Libraries</title>
<para>Optional 3rd party software can be used by CGAL for various reasons: certain optional libraries might be required to build examples and demos shipped with CGAL or to build your own project using CGAL; another reason is to speed up basic tasks where specialized libraries can be faster than the default version shipped with CGAL. The page <ref refid="configurationvariables" kindref="compound">Summary of CGAL&apos;s Configuration Variables</ref> lists CMake and environment variables which can be used to specify the location of third-party software during configuration.</para>
<sect2 id="thirdparty_1thirdpartyQt">
<title>Qt6</title>
<para><bold>Version 6.4 or later</bold></para>
<para>Qt is a cross-platform application and UI framework.</para>
<para>The component <computeroutput>CGAL_Qt6</computeroutput> is essential to run the CGAL demos and basic viewers. It requires Qt6 installed on your system. In case Qt is not yet installed on your system, you can download it from <ulink url="https://www.qt-project.org/"><computeroutput>https://www.qt-project.org/</computeroutput></ulink>.</para>
<para>The exhaustive list of Qt6 components used in demos is: <computeroutput>Core</computeroutput>, <computeroutput>Gui</computeroutput>, <computeroutput>Help</computeroutput>, <computeroutput>OpenGL</computeroutput>, <computeroutput>OpenGLWidgets</computeroutput>, <computeroutput>Qml</computeroutput>, <computeroutput>Svg</computeroutput>, <computeroutput>Widgets</computeroutput>, <computeroutput>WebSockets</computeroutput>, <computeroutput>Network</computeroutput>, and <computeroutput>qcollectiongenerator</computeroutput> (with <computeroutput>sqlite</computeroutput> driver plugin).</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyEigen">
<title>Eigen</title>
<para><bold>Version 3.3.7 or later</bold></para>
<para>Eigen is a <computeroutput>C++</computeroutput> template library for linear algebra. Eigen supports all matrix sizes, various matrix decomposition methods and sparse linear solvers.</para>
<para>In CGAL, Eigen is used in many packages such as <ref refid="packages_1PkgPoissonSurfaceReconstruction3" kindref="member">Poisson Surface Reconstruction</ref> or <ref refid="packages_1PkgJetFitting3" kindref="member">Estimation of Local Differential Properties of Point-Sampled Surfaces</ref>, providing sparse linear solvers and singular value decompositions. A package dependency over Eigen is marked on the <ulink url="https://doc.cgal.org/latest/Manual/packages.html">Package Overview</ulink> page. In order to use Eigen in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::Eigen3_support</computeroutput> provided in <computeroutput>CGAL_Eigen3_support.cmake</computeroutput>.</para>
<para>The Eigen web site is <ulink url="https://eigen.tuxfamily.org/index.php?title=Main_Page"><computeroutput>https://eigen.tuxfamily.org</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyOpenGR">
<title>OpenGR</title>
<para>OpenGR is a set C++ libraries for 3D Global Registration released under the terms of the APACHE V2 license.</para>
<para>CGAL provides wrappers for the Super4PCS algorithm of OpenGR in the <ref refid="group__PkgPointSetProcessing3Ref" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">Point Set Processing Reference</ref> packages. In order to use OpenGR in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::OpenGR_support</computeroutput> provided in <computeroutput>CGAL_OpenGR_support.cmake</computeroutput>.</para>
<para>The OpenGR web site is <ulink url="https://github.com/STORM-IRIT/OpenGR"><computeroutput>https://github.com/STORM-IRIT/OpenGR</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartylibpointmatcher">
<title>PointMatcher</title>
<para>libpointmatcher is a modular library implementing the Iterative Closest Point (ICP) algorithm for aligning point clouds, released under a permissive BSD license.</para>
<para>CGAL provides wrappers for the ICP algorithm of libpointmatcher in the <ref refid="group__PkgPointSetProcessing3Ref" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">Point Set Processing Reference</ref> packages. In order to use libpointmatcher in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::pointmatcher_support</computeroutput> provided in <computeroutput>CGAL_pointmatcher_support.cmake</computeroutput>.</para>
<para>The libpointmatcher web site is <ulink url="https://github.com/ethz-asl/libpointmatcher"><computeroutput>https://github.com/ethz-asl/libpointmatcher</computeroutput></ulink>. <simplesect kind="attention"><para>On Windows, we only support version 1.3.1 of PointMatcher with version 3.3.7 of Eigen, with some changes to the recipe at <computeroutput><ulink url="https://github.com/ethz-asl/libpointmatcher/blob/master/doc/Compilation.md">https://github.com/ethz-asl/libpointmatcher/blob/master/doc/Compilation.md</ulink></computeroutput>:<computeroutput>NABO_INCLUDE_DIR</computeroutput> becomes <computeroutput>libnabo_INCLUDE_DIRS</computeroutput> and <computeroutput>NABO_LIBRARY</computeroutput> becomes <computeroutput>libnabo_LIBRARIES</computeroutput> in the &quot;Build libpointmatcher&quot; section.</para>
</simplesect>
</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyLeda">
<title>LEDA</title>
<para><bold>Version 6.2 or later</bold></para>
<para>LEDA is a library of efficient data structures and algorithms. Like Core, LEDA offers a real number data type.</para>
<para>In CGAL this library is optional, and its number types can be used as an alternative to GMP, MPFR, and Core.</para>
<para>Free and commercial editions of LEDA are available from <ulink url="https://www.algorithmic-solutions.com"><computeroutput>https://www.algorithmic-solutions.com</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyMPFI">
<title>Multiple Precision Floating-point Interval (MPFI)</title>
<para><bold>Version 1.4 or later</bold></para>
<para>MPFI provides arbitrary precision interval arithmetic with intervals represented using MPFR reliable floating-point numbers. It is based on the libraries GMP and MPFR. In the setting of CGAL, this library is optional: it is used by some models of the <ref refid="packages_1PkgAlgebraicKernelD" kindref="member">Algebraic Kernel</ref>.</para>
<para>MPFI can be downloaded from <ulink url="https://gitlab.inria.fr/mpfi/mpfi"><computeroutput>https://gitlab.inria.fr/mpfi/mpfi</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyRS3">
<title>RS and RS3</title>
<para>RS (Real Solutions) is devoted to the study of the real roots of polynomial systems with a finite number of complex roots (including univariate polynomials). In CGAL, RS is used by one model of the <ref refid="packages_1PkgAlgebraicKernelD" kindref="member">Algebraic Kernel</ref>.</para>
<para>RS is freely distributable for non-commercial use. You can download it from <ulink url="http://vegas.loria.fr/rs/"><computeroutput>http://vegas.loria.fr/rs/</computeroutput></ulink>. Actually, the RS package also includes RS3, the successor of RS, which is used in conjunction with it.</para>
<para>The libraries RS and RS3 need MPFI, which can be downloaded from <ulink url="https://gitlab.inria.fr/mpfi/mpfi"><computeroutput>https://gitlab.inria.fr/mpfi/mpfi</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyNTL">
<title>NTL</title>
<para><bold>Version 5.1 or later</bold></para>
<para>NTL provides data structures and algorithms for signed, arbitrary length integers, and for vectors, matrices, and polynomials over the integers and over finite fields. The optional library NTL is used by CGAL to speed up operations of the Polynomial package, such as GCDs. It is recommended to install NTL with support from GMP.</para>
<para>NTL can be downloaded from <ulink url="https://libntl.org"><computeroutput>https://libntl.org</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyESBTL">
<title>ESBTL</title>
<para>The ESBTL (Easy Structural Biology Template Library) is a library that allows the handling of PDB data.</para>
<para>In CGAL, the ESBTL is used in an example of the <ref refid="packages_1PkgSkinSurface3" kindref="member">3D Skin Surface Meshing</ref> package.</para>
<para>It can be downloaded from <ulink url="https://esbtl.sourceforge.net/"><computeroutput>https://esbtl.sourceforge.net/</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyTBB">
<title>Intel TBB</title>
<para>TBB (Threading Building Blocks) is a library developed by Intel Corporation for writing software programs that take advantage of multi-core processors.</para>
<para>In CGAL, TBB is used by the packages that offer parallel code. In order to use TBB in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::TBB_support</computeroutput> provided in <computeroutput>CGAL_TBB_support.cmake</computeroutput>.</para>
<para>The TBB web site is <ulink url="https://github.com/oneapi-src/oneTBB"><computeroutput>https://github.com/oneapi-src/oneTBB</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyLASlib">
<title>LASlib</title>
<para>LASlib is a <computeroutput>C++</computeroutput> library for handling LIDAR data sets stored in the LAS format (or the compressed LAZ format).</para>
<para>In CGAL, LASlib is used to provide input and output functions in the <ref refid="packages_1PkgPointSetProcessing3" kindref="member">Point Set Processing</ref> package. In order to use LASlib in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::LASLIB_support</computeroutput> provided in <computeroutput>CGAL_LASLIB_support.cmake</computeroutput>.</para>
<para>LASlib information can be obtained from <ulink url="https://lastools.github.io/">https://lastools.github.io/</ulink> and <ulink url="https://rapidlasso.de/product-overview/">https://rapidlasso.de/product-overview/</ulink>. LASlib is usually distributed along with LAStools. Current versions of LASlib provide CMake support. BUILD_SHARED_LIBS needs to be set to true on windows to create a dynamic linked library.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyOpenCV">
<title>OpenCV</title>
<para>OpenCV (Open Computer Vision) is a library designed for computer vision, computer graphics and machine learning.</para>
<para>In CGAL, OpenCV is used by the <ref refid="packages_1PkgClassification" kindref="member">Classification</ref> package. In order to use OpenCV in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::OpenCV_support</computeroutput> provided in <computeroutput>CGAL_OpenCV_support.cmake</computeroutput>.</para>
<para>The OpenCV web site is <ulink url="https://opencv.org/"><computeroutput>https://opencv.org/</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyMETIS">
<title>METIS</title>
<para><bold>Version 5.1 or later</bold></para>
<para>METIS is a library developed by the <ulink url="http://glaros.dtc.umn.edu/gkhome/">Karypis Lab</ulink> and designed to partition graphs and produce fill-reducing matrix orderings.</para>
<para>CGAL offers wrappers around some of the methods of the METIS library to allow the partitioning of graphs that are models of the concepts of the <ulink url="https://www.boost.org/libs/graph/doc/index.html">Boost Graph Library</ulink>, and, by extension, of surface meshes (see Section <ref refid="index_1BGLPartitioning" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Graph Partitioning</ref> of the package <ref refid="packages_1PkgBGL" kindref="member">CGAL and the Boost Graph Library</ref>).</para>
<para>More information is available on the METIS library at <ulink url="http://glaros.dtc.umn.edu/gkhome/metis/metis/overview"><computeroutput>http://glaros.dtc.umn.edu/gkhome/metis/metis/overview</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyzlib">
<title>zlib</title>
<para>zlib is a data compression library, and is essential for the component libCGAL_ImageIO.</para>
<para>In CGAL, this library is used in the examples of the <ref refid="packages_1PkgSurfaceMesher3" kindref="member">3D Surface Mesh Generation</ref> package.</para>
<para>If it is not already on your system, for instance, on Windows, you can download it from <ulink url="https://www.zlib.net/"><computeroutput>https://www.zlib.net/</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyCeres">
<title>Ceres Solver</title>
<para>Ceres is an open source C++ library for modeling and solving large, complicated optimization problems.</para>
<para>In CGAL, Ceres is used by the <ref refid="group__PkgPolygonMeshProcessingRef" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag">Polygon Mesh Processing Reference</ref> package for mesh smoothing, which requires solving complex non-linear least squares problems.</para>
<para>Visit the official website of the library at <ulink url="http://ceres-solver.org/index.html"><computeroutput>ceres-solver.org</computeroutput></ulink> for more information.</para>
<para><simplesect kind="attention"><para>Ceres indicates that <computeroutput>glog</computeroutput> is a recommended dependency. <computeroutput>glog</computeroutput> has <computeroutput>libunwind</computeroutput> as a recommended dependency. On some platforms, linking with <computeroutput>libunwind</computeroutput> was responsible for an increase of the runtime of the final application. If you experience such an issue, we recommend to compile Ceres without <computeroutput>glog</computeroutput> support.</para>
</simplesect>
</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyGLPK">
<title>GLPK</title>
<para>GLPK (GNU Linear Programming Kit) is a library for solving linear programming (LP), mixed integer programming (MIP), and other related problems.</para>
<para>In CGAL, GLPK provides an optional linear integer program solver in the <ref refid="packages_1PkgPolygonalSurfaceReconstruction" kindref="member">Polygonal Surface Reconstruction</ref> package. In order to use GLPK in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::GLPK_support</computeroutput> provided in <computeroutput>CGAL_GLPK_support.cmake</computeroutput>.</para>
<para>The GLPK web site is <ulink url="https://www.gnu.org/software/glpk/"><computeroutput>https://www.gnu.org/software/glpk/</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartySCIP">
<title>SCIP</title>
<para>SCIP (Solving Constraint Integer Programs) is currently one of the fastest open source solvers for mixed integer programming (MIP) and mixed integer nonlinear programming (MINLP).</para>
<para>In CGAL, SCIP provides an optional linear integer program solver in the <ref refid="packages_1PkgPolygonalSurfaceReconstruction" kindref="member">Polygonal Surface Reconstruction</ref> package. In order to use SCIP in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::SCIP_support</computeroutput> provided in <computeroutput>CGAL_SCIP_support.cmake</computeroutput>.</para>
<para>The SCIP web site is <ulink url="https://www.scipopt.org/"><computeroutput>https://www.scipopt.org/</computeroutput></ulink>.</para>
</sect2>
<sect2 id="thirdparty_1thirdpartyOSQP">
<title>OSQP</title>
<para>OSQP (Operator Splitting Quadratic Program) is currently one of the fastest open source solvers for convex Quadratic Programs (QP).</para>
<para>In CGAL, OSQP provides an optional solver for the QP problems often arising in various computational geometry algorithms. In order to use OSQP in CGAL programs, the executables should be linked with the CMake imported target <computeroutput>CGAL::OSQP_support</computeroutput> provided in <computeroutput>CGAL_OSQP_support.cmake</computeroutput>.</para>
<para>The OSQP web site is <ulink url="https://osqp.org"><computeroutput>https://osqp.org</computeroutput></ulink>. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="Third_party.txt"/>
  </compounddef>
</doxygen>
