<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classDelaunayTriangulationTraits" kind="class" language="C++" prot="public">
    <compoundname>DelaunayTriangulationTraits</compoundname>
    <includes local="no">Concepts/DelaunayTriangulationTraits.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits_1af1b1fc28220b41ddc61f6a75ef01e370" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits::Side_of_oriented_sphere_d</definition>
        <argsstring></argsstring>
        <name>Side_of_oriented_sphere_d</name>
        <qualifiedname>DelaunayTriangulationTraits::Side_of_oriented_sphere_d</qualifiedname>
        <briefdescription>
<para>A predicate object that must provide the templated operator <computeroutput>template&lt;typename <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>&gt; Oriented_side operator()(<ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> start, <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> end, const Point_d &amp; p)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The operator returns <computeroutput>ON_POSITIVE_SIDE</computeroutput>, <computeroutput>ON_NEGATIVE_SIDE</computeroutput> or <computeroutput>ON_ORIENTED_BOUNDARY</computeroutput> depending of the side of the query point <computeroutput>p</computeroutput> with respect to the sphere circumscribing the simplex defined by the points in range <computeroutput>[start,end)</computeroutput>. If the simplex is positively oriented, then the positive side of sphere corresponds geometrically to its bounded side. <simplesect kind="pre"><para>If <computeroutput>Dimension</computeroutput>=<computeroutput><ref refid="structCGAL_1_1Dimension__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Dimension_tag</ref>&lt;D&gt;</computeroutput>, then <computeroutput>std::distance(start,end)=D+1</computeroutput>. The points in range <computeroutput>[start,end)</computeroutput> must be affinely independent, i.e., the simplex must not be flat. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits.h" line="44" column="26" bodyfile="Concepts/DelaunayTriangulationTraits.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits_1af50642f4660ad82d207ffad82cc5c388" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits::In_flat_side_of_oriented_sphere_d</definition>
        <argsstring></argsstring>
        <name>In_flat_side_of_oriented_sphere_d</name>
        <qualifiedname>DelaunayTriangulationTraits::In_flat_side_of_oriented_sphere_d</qualifiedname>
        <briefdescription>
<para>A predicate object that must provide the templated operator <computeroutput>template&lt;typename <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref>&gt; Oriented_side operator()(Flat_orientation_d orient, <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> start, <ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref> end, const Point_d &amp; p)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The operator returns <computeroutput>ON_POSITIVE_SIDE</computeroutput>, <computeroutput>ON_NEGATIVE_SIDE</computeroutput> or <computeroutput>ON_ORIENTED_BOUNDARY</computeroutput> depending of the side of the query point <computeroutput>p</computeroutput> with respect to the sphere circumscribing the simplex defined by the points in range <computeroutput>[start,end)</computeroutput>. If the simplex is positively oriented according to <computeroutput>orient</computeroutput>, then the positive side of sphere corresponds geometrically to its bounded side. The points in range <computeroutput>[start,end)</computeroutput> and <computeroutput>p</computeroutput> are supposed to belong to the lower dimensional flat whose orientation is given by <computeroutput>orient</computeroutput>. <simplesect kind="pre"><para><computeroutput>std::distance(start,end)=k+1</computeroutput> where <formula id="13">$ k$</formula> is the number of points used to construct <computeroutput>orient</computeroutput>. The points in range <computeroutput>[start,end)</computeroutput> must be affinely independent, i.e., the simplex must not be flat. <computeroutput>p</computeroutput> must be in the flat generated by this simplex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits.h" line="68" column="26" bodyfile="Concepts/DelaunayTriangulationTraits.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classDelaunayTriangulationTraits_1a590f56ba26a3fedb6020f1b8ce39bad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DelaunayTriangulationTraits::DelaunayTriangulationTraits</definition>
        <argsstring>()</argsstring>
        <name>DelaunayTriangulationTraits</name>
        <qualifiedname>DelaunayTriangulationTraits::DelaunayTriangulationTraits</qualifiedname>
        <briefdescription>
<para>The default constructor (optional). </para>
        </briefdescription>
        <detaileddescription>
<para>This is not required when an instance of the traits is provided to the constructor of <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation" kindref="compound">CGAL::Delaunay_triangulation</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits.h" line="80" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>The following methods permit access to the traits class&apos;s predicates and functors: </para>
</description>
      <memberdef kind="function" id="classDelaunayTriangulationTraits_1ab072c18921a327130bf9020abb1eedc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayTriangulationTraits_1af1b1fc28220b41ddc61f6a75ef01e370" kindref="member">Side_of_oriented_sphere_d</ref></type>
        <definition>Side_of_oriented_sphere_d DelaunayTriangulationTraits::side_of_oriented_sphere_d_object</definition>
        <argsstring>() const</argsstring>
        <name>side_of_oriented_sphere_d_object</name>
        <qualifiedname>DelaunayTriangulationTraits::side_of_oriented_sphere_d_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits.h" line="91" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayTriangulationTraits_1af8e3d7364649c44439f1edc9eafce3c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayTriangulationTraits_1af50642f4660ad82d207ffad82cc5c388" kindref="member">In_flat_side_of_oriented_sphere_d</ref></type>
        <definition>In_flat_side_of_oriented_sphere_d DelaunayTriangulationTraits::in_flat_side_of_oriented_sphere_d_object</definition>
        <argsstring>() const</argsstring>
        <name>in_flat_side_of_oriented_sphere_d_object</name>
        <qualifiedname>DelaunayTriangulationTraits::in_flat_side_of_oriented_sphere_d_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits.h" line="96" column="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This concept describes the geometric types and predicates required to build a Delaunay triangulation. It corresponds to the first template parameter of the class <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation" kindref="compound">CGAL::Delaunay_triangulation</ref>&lt;DelaunayTriangulationTraits_, TriangulationDataStructure_&gt;</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classTriangulationTraits" kindref="compound">TriangulationTraits</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="structCGAL_1_1Epick__d" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_d.tag">CGAL::Epick_d</ref>&lt;Dim&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="structCGAL_1_1Epeck__d" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_d.tag">CGAL::Epeck_d</ref>&lt;Dim&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classTriangulationTraits" kindref="compound">TriangulationTraits</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/DelaunayTriangulationTraits.h" line="19" column="1" bodyfile="Concepts/DelaunayTriangulationTraits.h" bodystart="19" bodyend="101"/>
    <listofallmembers>
      <member refid="classDelaunayTriangulationTraits_1a590f56ba26a3fedb6020f1b8ce39bad8" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits</scope><name>DelaunayTriangulationTraits</name></member>
      <member refid="classDelaunayTriangulationTraits_1af50642f4660ad82d207ffad82cc5c388" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits</scope><name>In_flat_side_of_oriented_sphere_d</name></member>
      <member refid="classDelaunayTriangulationTraits_1af8e3d7364649c44439f1edc9eafce3c3" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits</scope><name>in_flat_side_of_oriented_sphere_d_object</name></member>
      <member refid="classDelaunayTriangulationTraits_1af1b1fc28220b41ddc61f6a75ef01e370" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits</scope><name>Side_of_oriented_sphere_d</name></member>
      <member refid="classDelaunayTriangulationTraits_1ab072c18921a327130bf9020abb1eedc5" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits</scope><name>side_of_oriented_sphere_d_object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
