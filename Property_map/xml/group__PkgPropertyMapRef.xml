<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgPropertyMapRef" kind="group">
    <compoundname>PkgPropertyMapRef</compoundname>
    <title>CGAL and Boost Property Maps Reference</title>
    <innerclass refid="structCGAL_1_1Compose__property__map" prot="public">CGAL::Compose_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Dereference__property__map" prot="public">CGAL::Dereference_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Identity__property__map" prot="public">CGAL::Identity_property_map</innerclass>
    <innerclass refid="structCGAL_1_1First__of__pair__property__map" prot="public">CGAL::First_of_pair_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Second__of__pair__property__map" prot="public">CGAL::Second_of_pair_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Nth__of__tuple__property__map" prot="public">CGAL::Nth_of_tuple_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Property__map__to__unary__function" prot="public">CGAL::Property_map_to_unary_function</innerclass>
    <innerclass refid="structCGAL_1_1Pointer__property__map" prot="public">CGAL::Pointer_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Constant__property__map" prot="public">CGAL::Constant_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Boolean__property__map" prot="public">CGAL::Boolean_property_map</innerclass>
    <innerclass refid="structCGAL_1_1Cartesian__converter__property__map" prot="public">CGAL::Cartesian_converter_property_map</innerclass>
    <innerclass refid="classCGAL_1_1Random__access__property__map" prot="public">CGAL::Random_access_property_map</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPropertyMapRef_1ga16f8a084348ef67f5eb40c9814027c52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Pointer_property_map&lt; T &gt;::type</type>
        <definition>Pointer_property_map&lt; T &gt;::type CGAL::make_property_map</definition>
        <argsstring>(T *pointer)</argsstring>
        <name>make_property_map</name>
        <qualifiedname>CGAL::make_property_map</qualifiedname>
        <param>
          <type>T *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Starting from boost 1.55, the use of raw pointers as property maps has been deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a shortcut to the recommended replacement: <computeroutput>boost::make_iterator_property_map(&lt;pointer&gt;, boost::typed_identity_property_map&lt;std::size_t&gt;())</computeroutput> Note that the property map is a mutable <computeroutput><ref refid="classLvaluePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LvaluePropertyMap</ref></computeroutput> with <computeroutput>std::size_t</computeroutput> as key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="569" column="1" bodyfile="CGAL/property_map.h" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPropertyMapRef_1gad8eb46280f9084db1a94afb1092fdf93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Pointer_property_map&lt; T &gt;::type</type>
        <definition>Pointer_property_map&lt; T &gt;::type CGAL::make_property_map</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>make_property_map</name>
        <qualifiedname>CGAL::make_property_map</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>equivalent to <computeroutput>make_property_map(&amp;v[0])</computeroutput> Note that <computeroutput>v</computeroutput> must not be modified while using the property map created </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="580" column="1" bodyfile="CGAL/property_map.h" bodystart="580" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPropertyMapRef_1ga3675362a4ad242d34a4dc1d82ce83166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Pointer_property_map&lt; T &gt;::const_type</type>
        <definition>Pointer_property_map&lt; T &gt;::const_type CGAL::make_property_map</definition>
        <argsstring>(const T *pointer)</argsstring>
        <name>make_property_map</name>
        <qualifiedname>CGAL::make_property_map</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Non-mutable version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="593" column="1" bodyfile="CGAL/property_map.h" bodystart="593" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPropertyMapRef_1ga7f1e06594bb1876219f0e75b9e927f34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Pointer_property_map&lt; T &gt;::const_type</type>
        <definition>Pointer_property_map&lt; T &gt;::const_type CGAL::make_property_map</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>make_property_map</name>
        <qualifiedname>CGAL::make_property_map</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>equivalent to <computeroutput>make_property_map(&amp;v[0])</computeroutput> Note that <computeroutput>v</computeroutput> must not be modified while using the property map created </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="604" column="1" bodyfile="CGAL/property_map.h" bodystart="604" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPropertyMapRef_1gaf7a2974fc5912a38644ff304d161ff7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Set</type>
          </param>
        </templateparamlist>
        <type>Boolean_property_map&lt; Set &gt;</type>
        <definition>Boolean_property_map&lt; Set &gt; CGAL::make_boolean_property_map</definition>
        <argsstring>(Set &amp;set_)</argsstring>
        <name>make_boolean_property_map</name>
        <qualifiedname>CGAL::make_boolean_property_map</qualifiedname>
        <param>
          <type>Set &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="structCGAL_1_1Boolean__property__map" kindref="compound">Boolean_property_map</ref>&lt;Set&gt;(set_)</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="678" column="1" bodyfile="CGAL/property_map.h" bodystart="678" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPropertyMapRef_1ga43a4531a4fc62a3a4bc458413df32f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GeomObject</type>
          </param>
          <param>
            <type>class Vpm</type>
          </param>
        </templateparamlist>
        <type>Cartesian_converter_property_map&lt; GeomObject, Vpm &gt;</type>
        <definition>Cartesian_converter_property_map&lt; GeomObject, Vpm &gt; CGAL::make_cartesian_converter_property_map</definition>
        <argsstring>(Vpm vpm)</argsstring>
        <name>make_cartesian_converter_property_map</name>
        <qualifiedname>CGAL::make_cartesian_converter_property_map</qualifiedname>
        <param>
          <type>Vpm</type>
          <declname>vpm</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="structCGAL_1_1Cartesian__converter__property__map" kindref="compound">Cartesian_converter_property_map</ref>&lt;GeomObject, Vpm&gt;(vpm)</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="721" column="1" bodyfile="CGAL/property_map.h" bodystart="721" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPropertyMapRef_1gae7bd90c2a8cfcfe3f9dcf1d374a0e837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyMap</type>
          </param>
          <param>
            <type>class ValueMap</type>
          </param>
        </templateparamlist>
        <type>Compose_property_map&lt; KeyMap, ValueMap &gt;</type>
        <definition>Compose_property_map&lt; KeyMap, ValueMap &gt; make_compose_property_map</definition>
        <argsstring>(const KeyMap &amp;km, const ValueMap &amp;vm)</argsstring>
        <name>make_compose_property_map</name>
        <qualifiedname>CGAL::Compose_property_map::make_compose_property_map</qualifiedname>
        <param>
          <type>const KeyMap &amp;</type>
          <declname>km</declname>
        </param>
        <param>
          <type>const ValueMap &amp;</type>
          <declname>vm</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>Compose_property_maps&lt;KeyMap, ValueMap&gt;(km,vm)</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="281" column="1" bodyfile="CGAL/property_map.h" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPropertyMapRef_1ga4b01ad049479271320c8bb8b743cf48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Container</ref></type>
          </param>
        </templateparamlist>
        <type>Random_access_property_map&lt; <ref refid="classContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Container</ref> &gt;</type>
        <definition>Random_access_property_map&lt; Container &gt; make_random_access_property_map</definition>
        <argsstring>(Container &amp;container)</argsstring>
        <name>make_random_access_property_map</name>
        <qualifiedname>CGAL::Random_access_property_map::make_random_access_property_map</qualifiedname>
        <param>
          <type><ref refid="classContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Container</ref> &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput><ref refid="classCGAL_1_1Random__access__property__map" kindref="compound">Random_access_property_map</ref>&lt;<ref refid="classContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Container</ref>&gt;(container)</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/property_map.h" line="772" column="1" bodyfile="CGAL/property_map.h" bodystart="772" bodyend="775"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>  <image type="html" name="property_map.png"></image>
   Andreas Fabri and Laurent Saboret This package provides a framework for interfacing CGAL data structures with algorithms expecting Boost Property Maps.    <bold>Introduced in:</bold> CGAL 3.5<linebreak/>
 <bold>BibTeX:</bold> <ulink url="../Manual/how_to_cite_cgal.html#cgal:fs-cbpm-24b">cgal:fs-cbpm-24b</ulink><linebreak/>
 <bold>License:</bold> <ref refid="license_1licensesGPL" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LGPL</ref> <linebreak/>
  </para>
    </detaileddescription>
  </compounddef>
</doxygen>
