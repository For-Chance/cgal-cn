<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classSortedMatrixSearchTraits" kind="class" language="C++" prot="public">
    <compoundname>SortedMatrixSearchTraits</compoundname>
    <includes local="no">Concepts/SortedMatrixSearchTraits.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classSortedMatrixSearchTraits_1aa6a30603ccb90b751ef1537f63bf6d80" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type SortedMatrixSearchTraits::Matrix</definition>
        <argsstring></argsstring>
        <name>Matrix</name>
        <qualifiedname>SortedMatrixSearchTraits::Matrix</qualifiedname>
        <briefdescription>
<para>The class used for representing matrices. </para>
        </briefdescription>
        <detaileddescription>
<para>It has to be a model for <computeroutput><ref refid="classBasicMatrix" kindref="compound">BasicMatrix</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SortedMatrixSearchTraits.h" line="30" column="26" bodyfile="Concepts/SortedMatrixSearchTraits.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSortedMatrixSearchTraits_1a42da825ff7838d313ae9a8fb869581ce" prot="public" static="no">
        <type>Matrix::Value</type>
        <definition>typedef Matrix::Value SortedMatrixSearchTraits::Value</definition>
        <argsstring></argsstring>
        <name>Value</name>
        <qualifiedname>SortedMatrixSearchTraits::Value</qualifiedname>
        <briefdescription>
<para>The class used for representing the matrix elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SortedMatrixSearchTraits.h" line="36" column="23" bodyfile="Concepts/SortedMatrixSearchTraits.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSortedMatrixSearchTraits_1a1f06892b7f71f757aa580aac28375954" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type SortedMatrixSearchTraits::Compare_strictly</definition>
        <argsstring></argsstring>
        <name>Compare_strictly</name>
        <qualifiedname>SortedMatrixSearchTraits::Compare_strictly</qualifiedname>
        <briefdescription>
<para>An adaptable binary function class: <computeroutput>Value</computeroutput> <formula id="19">$ \times$</formula> <computeroutput>Value</computeroutput> <formula id="20">$ \rightarrow$</formula> <computeroutput>bool</computeroutput> defining a non-reflexive total order on <computeroutput>Value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This determines the direction of the search. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SortedMatrixSearchTraits.h" line="44" column="26" bodyfile="Concepts/SortedMatrixSearchTraits.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSortedMatrixSearchTraits_1ac32e89b9034ebd7f5c11593e03fad8a0" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type SortedMatrixSearchTraits::Compare_non_strictly</definition>
        <argsstring></argsstring>
        <name>Compare_non_strictly</name>
        <qualifiedname>SortedMatrixSearchTraits::Compare_non_strictly</qualifiedname>
        <briefdescription>
<para>An adaptable binary function class: <computeroutput>Value</computeroutput> <formula id="19">$ \times$</formula> <computeroutput>Value</computeroutput> <formula id="20">$ \rightarrow$</formula> <computeroutput>bool</computeroutput> defining the reflexive total order on <computeroutput>Value</computeroutput> corresponding to <computeroutput>Compare_strictly</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SortedMatrixSearchTraits.h" line="52" column="26" bodyfile="Concepts/SortedMatrixSearchTraits.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classSortedMatrixSearchTraits_1a995cfb0aec4d9d69449fd40ef73c7101" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSortedMatrixSearchTraits_1a1f06892b7f71f757aa580aac28375954" kindref="member">Compare_strictly</ref></type>
        <definition>Compare_strictly SortedMatrixSearchTraits::compare_strictly</definition>
        <argsstring>() const</argsstring>
        <name>compare_strictly</name>
        <qualifiedname>SortedMatrixSearchTraits::compare_strictly</qualifiedname>
        <briefdescription>
<para>returns the <computeroutput>Compare_strictly</computeroutput> object to be used for the search. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SortedMatrixSearchTraits.h" line="63" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classSortedMatrixSearchTraits_1a2d0720eb31c8140458df77694705a2a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSortedMatrixSearchTraits_1ac32e89b9034ebd7f5c11593e03fad8a0" kindref="member">Compare_non_strictly</ref></type>
        <definition>Compare_non_strictly SortedMatrixSearchTraits::compare_non_strictly</definition>
        <argsstring>() const</argsstring>
        <name>compare_non_strictly</name>
        <qualifiedname>SortedMatrixSearchTraits::compare_non_strictly</qualifiedname>
        <briefdescription>
<para>returns the <computeroutput>Compare_non_strictly</computeroutput> object to be used for the search. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SortedMatrixSearchTraits.h" line="70" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classSortedMatrixSearchTraits_1a92358595131d76a83bc3e21265bdfe86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SortedMatrixSearchTraits::is_feasible</definition>
        <argsstring>(const Value &amp;a)</argsstring>
        <name>is_feasible</name>
        <qualifiedname>SortedMatrixSearchTraits::is_feasible</qualifiedname>
        <param>
          <type>const <ref refid="classSortedMatrixSearchTraits_1a42da825ff7838d313ae9a8fb869581ce" kindref="member">Value</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>The predicate to determine whether an element <computeroutput>a</computeroutput> is feasible. </para>
        </briefdescription>
        <detaileddescription>
<para>It has to be monotone in the sense that <computeroutput>compare(a, b)</computeroutput> and <computeroutput>is_feasible(a)</computeroutput> imply <computeroutput>is_feasible(b)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/SortedMatrixSearchTraits.h" line="79" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classSortedMatrixSearchTraits" kindref="compound">SortedMatrixSearchTraits</ref></computeroutput> defines types and operations needed to compute the smallest entry in a set of sorted matrices that fulfills a certain feasibility criterion using the function <computeroutput><ref refid="group__PkgMatrixSearchRef_1gad0255af00b2e5737196b91d489ba1c97" kindref="member">CGAL::sorted_matrix_search</ref></computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Sorted__matrix__search__traits__adaptor" kindref="compound">CGAL::Sorted_matrix_search_traits_adaptor</ref>&lt;F,M&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgMatrixSearchRef_1gad0255af00b2e5737196b91d489ba1c97" kindref="member">CGAL::sorted_matrix_search()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classBasicMatrix" kindref="compound">BasicMatrix</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/SortedMatrixSearchTraits.h" line="20" column="1" bodyfile="Concepts/SortedMatrixSearchTraits.h" bodystart="20" bodyend="83"/>
    <listofallmembers>
      <member refid="classSortedMatrixSearchTraits_1ac32e89b9034ebd7f5c11593e03fad8a0" prot="public" virt="non-virtual"><scope>SortedMatrixSearchTraits</scope><name>Compare_non_strictly</name></member>
      <member refid="classSortedMatrixSearchTraits_1a2d0720eb31c8140458df77694705a2a3" prot="public" virt="non-virtual"><scope>SortedMatrixSearchTraits</scope><name>compare_non_strictly</name></member>
      <member refid="classSortedMatrixSearchTraits_1a1f06892b7f71f757aa580aac28375954" prot="public" virt="non-virtual"><scope>SortedMatrixSearchTraits</scope><name>Compare_strictly</name></member>
      <member refid="classSortedMatrixSearchTraits_1a995cfb0aec4d9d69449fd40ef73c7101" prot="public" virt="non-virtual"><scope>SortedMatrixSearchTraits</scope><name>compare_strictly</name></member>
      <member refid="classSortedMatrixSearchTraits_1a92358595131d76a83bc3e21265bdfe86" prot="public" virt="non-virtual"><scope>SortedMatrixSearchTraits</scope><name>is_feasible</name></member>
      <member refid="classSortedMatrixSearchTraits_1aa6a30603ccb90b751ef1537f63bf6d80" prot="public" virt="non-virtual"><scope>SortedMatrixSearchTraits</scope><name>Matrix</name></member>
      <member refid="classSortedMatrixSearchTraits_1a42da825ff7838d313ae9a8fb869581ce" prot="public" virt="non-virtual"><scope>SortedMatrixSearchTraits</scope><name>Value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
