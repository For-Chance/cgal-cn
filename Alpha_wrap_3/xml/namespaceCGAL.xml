<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__AW3__free__functions__grp_1ga3fcacd2397bd86329faa2855f8475ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename InputNamedParameters</type>
          </param>
          <param>
            <type>typename OutputNamedParameters</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const PointRange &amp;points, const FaceRange &amp;faces, const double alpha, const double offset, OutputMesh &amp;alpha_wrap, const InputNamedParameters &amp;in_np, const OutputNamedParameters &amp;out_np)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const InputNamedParameters &amp;</type>
          <declname>in_np</declname>
        </param>
        <param>
          <type>const OutputNamedParameters &amp;</type>
          <declname>out_np</declname>
        </param>
        <briefdescription>
<para>computes a watertight, 2-manifold, and intersection-free triangulated surface mesh that strictly contains an input triangle soup. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameters <computeroutput>alpha</computeroutput> and <computeroutput>offset</computeroutput> respectively control which features will appear in the output, and the distance from the input. See Section <ref refid="index_1aw3_parameters" kindref="member">Choosing Parameters</ref> for a detailed breakdown of their influence.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Range</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>RandomAccessContainer</computeroutput> whose value type is a model of <computeroutput>RandomAccessContainer</computeroutput> whose value type is an integral type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput>MutableFaceGraph</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputNamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputNamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the input points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faces</parametername>
</parameternamelist>
<parameterdescription>
<para>the input faces, with each element of the range being a range of indices corresponding to points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter <computeroutput>alpha</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter <computeroutput>offset</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the output surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><itemizedlist>
<listitem>
<para>The geometric traits class must be compatible with the point type. </para>
</listitem>
<listitem>
<para>The geometric traits should use a floating point number type (see <ref refid="index_1aw3_interface" kindref="member">Interface</ref>).</para>
</listitem>
</itemizedlist>
</para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>alpha_wrap</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;OutputMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, alpha_wrap)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput>CGAL::vertex_point_t</computeroutput> must be available in <computeroutput>OutputMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para>The elements of <computeroutput>faces</computeroutput> are triangles. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>alpha</computeroutput> and <computeroutput>offset</computeroutput> are strictly positive values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="94" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="94" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1a2452b0c4ff6612064acb7a871e27cf08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const PointRange &amp;points, const FaceRange &amp;faces, const double alpha, const double offset, OutputMesh &amp;alpha_wrap, const NamedParameters &amp;in_np)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>in_np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="121" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="121" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1acc5f1c3b5193c16dbfd1a04c212ad05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const PointRange &amp;points, const FaceRange &amp;faces, const double alpha, const double offset, OutputMesh &amp;alpha_wrap)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="132" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1a5bb50a69e06ab788a687b6b505b587cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename T_I</type>
          </param>
          <param>
            <type>typename Tag_I</type>
          </param>
          <param>
            <type>typename Base_I</type>
          </param>
          <param>
            <type>typename T_O</type>
          </param>
          <param>
            <type>typename Tag_O</type>
          </param>
          <param>
            <type>typename Base_O</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const PointRange &amp;points, const FaceRange &amp;faces, const double alpha, OutputMesh &amp;alpha_wrap, const CGAL::Named_function_parameters&lt; T_I, Tag_I, Base_I &gt; &amp;in_np, const CGAL::Named_function_parameters&lt; T_O, Tag_O, Base_O &gt; &amp;out_np, std::enable_if_t&lt; boost::has_range_const_iterator&lt; FaceRange &gt;::value &gt; *=nullptr)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const CGAL::Named_function_parameters&lt; T_I, Tag_I, Base_I &gt; &amp;</type>
          <declname>in_np</declname>
        </param>
        <param>
          <type>const CGAL::Named_function_parameters&lt; T_O, Tag_O, Base_O &gt; &amp;</type>
          <declname>out_np</declname>
        </param>
        <param>
          <type>std::enable_if_t&lt; boost::has_range_const_iterator&lt; FaceRange &gt;::value &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="145" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="145" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1a5fcc76e0fcc16f6a70def5ee54511879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const PointRange &amp;points, const FaceRange &amp;faces, const double alpha, OutputMesh &amp;alpha_wrap, const NamedParameters &amp;in_np, std::enable_if_t&lt; boost::has_range_const_iterator&lt; FaceRange &gt;::value &gt; *=nullptr)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>in_np</declname>
        </param>
        <param>
          <type>std::enable_if_t&lt; boost::has_range_const_iterator&lt; FaceRange &gt;::value &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="158" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="158" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1ad8c728203fd592cabbeaf2cbd8d8c2ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const PointRange &amp;points, const FaceRange &amp;faces, const double alpha, OutputMesh &amp;alpha_wrap, std::enable_if_t&lt; boost::has_range_const_iterator&lt; FaceRange &gt;::value &gt; *=nullptr)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>std::enable_if_t&lt; boost::has_range_const_iterator&lt; FaceRange &gt;::value &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="170" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="170" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__AW3__free__functions__grp_1ga8a45b23d98e251dba3e6d2dbcd238649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename InputNamedParameters</type>
          </param>
          <param>
            <type>typename OutputNamedParameters</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, const double alpha, const double offset, OutputMesh &amp;alpha_wrap, const InputNamedParameters &amp;in_np, const OutputNamedParameters &amp;out_np)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const InputNamedParameters &amp;</type>
          <declname>in_np</declname>
        </param>
        <param>
          <type>const OutputNamedParameters &amp;</type>
          <declname>out_np</declname>
        </param>
        <briefdescription>
<para>computes a watertight, 2-manifold, and intersection-free triangulated surface mesh that strictly contains an input triangle mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameters <computeroutput>alpha</computeroutput> and <computeroutput>offset</computeroutput> respectively control which features will appear in the output, and the distance from the input. See Section <ref refid="index_1aw3_parameters" kindref="member">Choosing Parameters</ref> for a detailed breakdown of their influence.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput>FaceListGraph</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput>MutableFaceGraph</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputNamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputNamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter <computeroutput>alpha</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter <computeroutput>offset</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the output surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput>CGAL::vertex_point_t</computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><itemizedlist>
<listitem>
<para>The geometric traits class must be compatible with the point type. </para>
</listitem>
<listitem>
<para>The geometric traits should use a floating point number type (see <ref refid="index_1aw3_interface" kindref="member">Interface</ref>).</para>
</listitem>
</itemizedlist>
</para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>alpha_wrap</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;OutputMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, alpha_wrap)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput>CGAL::vertex_point_t</computeroutput> must be available in <computeroutput>OutputMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tmesh</computeroutput> is a triangle mesh. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>alpha</computeroutput> and <computeroutput>offset</computeroutput> are strictly positive values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="241" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="241" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="group__AW3__free__functions__grp_1ga3eaa1816d283712eb61367d24eb0a788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename InputNamedParameters</type>
          </param>
          <param>
            <type>typename OutputNamedParameters</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const PointRange &amp;points, const double alpha, const double offset, OutputMesh &amp;alpha_wrap, const InputNamedParameters &amp;in_np, const OutputNamedParameters &amp;out_np)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const InputNamedParameters &amp;</type>
          <declname>in_np</declname>
        </param>
        <param>
          <type>const OutputNamedParameters &amp;</type>
          <declname>out_np</declname>
        </param>
        <briefdescription>
<para>computes a watertight, 2-manifold, and intersection-free triangulated surface mesh that strictly contains an input point set. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameters <computeroutput>alpha</computeroutput> and <computeroutput>offset</computeroutput> respectively control which features will appear in the output, and the distance from the input. See Section <ref refid="index_1aw3_parameters" kindref="member">Choosing Parameters</ref> for a detailed breakdown of their influence.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput>Range</computeroutput> whose value type is a point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput>MutableFaceGraph</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputNamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputNamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the input points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter <computeroutput>alpha</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter <computeroutput>offset</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha_wrap</parametername>
</parameternamelist>
<parameterdescription>
<para>the output surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><itemizedlist>
<listitem>
<para>The geometric traits class must be compatible with the point type. </para>
</listitem>
<listitem>
<para>The geometric traits should use a floating point number type (see <ref refid="index_1aw3_interface" kindref="member">Interface</ref>).</para>
</listitem>
</itemizedlist>
</para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>alpha_wrap</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;OutputMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, alpha_wrap)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput>CGAL::vertex_point_t</computeroutput> must be available in <computeroutput>OutputMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>alpha</computeroutput> and <computeroutput>offset</computeroutput> are strictly positive values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="331" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="331" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1a6f533bcbc6bb010e015281ac3d8e55e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Input</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const Input &amp;input, const double alpha, const double offset, OutputMesh &amp;alpha_wrap, const NamedParameters &amp;in_np)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const Input &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>in_np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="366" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="366" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1a825b4002df18a78f312c79c01047058c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Input</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const Input &amp;input, const double alpha, const double offset, OutputMesh &amp;alpha_wrap)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const Input &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="376" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="376" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1a3956f6f452472bb56128962f0f3425f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Input</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename T_I</type>
          </param>
          <param>
            <type>typename Tag_I</type>
          </param>
          <param>
            <type>typename Base_I</type>
          </param>
          <param>
            <type>typename T_O</type>
          </param>
          <param>
            <type>typename Tag_O</type>
          </param>
          <param>
            <type>typename Base_O</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const Input &amp;input, const double alpha, OutputMesh &amp;alpha_wrap, const CGAL::Named_function_parameters&lt; T_I, Tag_I, Base_I &gt; &amp;in_np, const CGAL::Named_function_parameters&lt; T_O, Tag_O, Base_O &gt; &amp;out_np)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const Input &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const CGAL::Named_function_parameters&lt; T_I, Tag_I, Base_I &gt; &amp;</type>
          <declname>in_np</declname>
        </param>
        <param>
          <type>const CGAL::Named_function_parameters&lt; T_O, Tag_O, Base_O &gt; &amp;</type>
          <declname>out_np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="388" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="388" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1ae8cf1ae9f5cbe145904a657b737c64ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Input</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const Input &amp;input, const double alpha, OutputMesh &amp;alpha_wrap, const NamedParameters &amp;in_np)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const Input &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>in_np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="398" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="398" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="alpha__wrap__3_8h_1aeda60423450c939f7531c94ad371e9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Input</type>
          </param>
          <param>
            <type>typename OutputMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::alpha_wrap_3</definition>
        <argsstring>(const Input &amp;input, const double alpha, OutputMesh &amp;alpha_wrap)</argsstring>
        <name>alpha_wrap_3</name>
        <qualifiedname>CGAL::alpha_wrap_3</qualifiedname>
        <param>
          <type>const Input &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>alpha_wrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/alpha_wrap_3.h" line="407" column="6" bodyfile="CGAL/alpha_wrap_3.h" bodystart="407" bodyend="413"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="alpha_wrap_3.txt" line="1" column="1"/>
  </compounddef>
</doxygen>
