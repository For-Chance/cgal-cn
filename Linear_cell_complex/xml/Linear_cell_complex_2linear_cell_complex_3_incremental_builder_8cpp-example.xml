<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="Linear_cell_complex_2linear_cell_complex_3_incremental_builder_8cpp-example" kind="example">
    <compoundname>Linear_cell_complex/linear_cell_complex_3_incremental_builder.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename="Linear_cell_complex/linear_cell_complex_3_incremental_builder.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Linear_cell_complex_for_combinatorial_map.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Linear_cell_complex_incremental_builder_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/draw_linear_cell_complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Linear__cell__complex__for__combinatorial__map" kindref="compound">CGAL::Linear_cell_complex_for_combinatorial_map&lt;3, 3&gt;</ref><sp/>LCC_3;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Point=LCC_3::Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LCC_3<sp/>lcc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Linear__cell__complex__incremental__builder__3" kindref="compound">CGAL::Linear_cell_complex_incremental_builder_3&lt;LCC_3&gt;</ref><sp/>ib(lcc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(0,0,0));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(1,0,0));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(1,1,0));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(0,1,0));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(0,1,1));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(0,0,1));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(1,0,1));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(1,1,1));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>cube</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.begin_surface();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({0,1,2,3});<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>facet<sp/>version<sp/>1:<sp/>given<sp/>all<sp/>of<sp/>its<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({1,0,5,6});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({2,1,6,7});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({3,2,7,4});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({5,4,7,6});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.begin_facet();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>facet<sp/>version<sp/>2:<sp/>begin<sp/>facet</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex_to_facet(0);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>successively<sp/>its<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex_to_facet(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex_to_facet(4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex_to_facet(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.end_facet();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.end_surface();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_vertex(Point(-1,<sp/>0.5,<sp/>0.5));<sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>pyramid,<sp/>sharing<sp/>one<sp/>of<sp/>its<sp/>facets<sp/>with<sp/>a<sp/>facet<sp/>of<sp/>the<sp/>cube</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.begin_surface();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({3,0,5,4});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({0,3,8});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({3,4,8});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({4,5,8});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.add_facet({5,0,8});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ib.end_surface();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LCC_3::One_dart_per_cell_range&lt;3,3&gt;<sp/>cells<sp/>=<sp/>lcc.one_dart_per_cell&lt;3&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>cells.begin();<sp/>c<sp/>!=<sp/>cells.end();<sp/>++c)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>cell&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>LCC_3::One_dart_per_incident_cell_range&lt;2,3&gt;<sp/>faces<sp/>=<sp/>lcc.one_dart_per_incident_cell&lt;2,3&gt;(c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>faces.begin();<sp/>f<sp/>!=<sp/>faces.end();<sp/>++f)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>a<sp/>face&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LCC_3::One_dart_per_incident_cell_range&lt;0,2&gt;<sp/>vertices<sp/>=<sp/>lcc.one_dart_per_incident_cell&lt;0,2&gt;(f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>vertices.begin();<sp/>v!=<sp/>vertices.end();<sp/>++v){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lcc.point(v)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>the<sp/>lcc<sp/>and<sp/>display<sp/>its<sp/>characteristics</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcc.display_characteristics(std::cout)&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgDrawPolyhedron_1ga56a8df4559b043b885be909514e6069f" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polyhedron.tag">CGAL::draw</ref>(lcc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="examples.txt"/>
  </compounddef>
</doxygen>
