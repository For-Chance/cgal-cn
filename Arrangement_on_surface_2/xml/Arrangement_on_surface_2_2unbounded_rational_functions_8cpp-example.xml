<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="Arrangement_on_surface_2_2unbounded_rational_functions_8cpp-example" kind="example">
    <compoundname>Arrangement_on_surface_2/unbounded_rational_functions.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename="Arrangement_on_surface_2/unbounded_rational_functions.cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructing<sp/>an<sp/>arrangement<sp/>of<sp/>unbounded<sp/>portions<sp/>of<sp/>rational<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CGAL_USE_CORE</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sorry,<sp/>this<sp/>example<sp/>needs<sp/>CORE<sp/>...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arr_rat_functions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arr_print.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">CGAL::IO::set_pretty_mode</ref>(std::cout);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>nice<sp/>printouts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>traits<sp/>class<sp/>object<sp/>and<sp/>a<sp/>constructor<sp/>for<sp/>rational<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AK1<sp/>ak1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Traits<sp/>traits(&amp;ak1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>construct<sp/>=<sp/>traits.construct_curve_2_object();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>polynomial<sp/>representing<sp/>x.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>x<sp/>=<sp/>CGAL::shift(Polynomial(1),<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>container<sp/>storing<sp/>all<sp/>arcs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Traits::Curve_2&gt;<sp/>arcs;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>arcs<sp/>(C1,<sp/>C&apos;1)<sp/>of<sp/>the<sp/>rational<sp/>functions<sp/>(y<sp/>=<sp/>1<sp/>/<sp/>x,<sp/>y<sp/>=<sp/>-1<sp/>/<sp/>x).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>P1(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>minusP1(-P1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>Q1<sp/>=<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arcs.push_back(construct(P1,<sp/>Q1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arcs.push_back(construct(minusP1,<sp/>Q1));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>bounded<sp/>segments<sp/>(C2,<sp/>C&apos;2)<sp/>of<sp/>the<sp/>parabolas<sp/>(y<sp/>=<sp/>-4*x^2<sp/>+<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>(y<sp/>=<sp/>4*x^2<sp/>-<sp/>3),<sp/>defined<sp/>over<sp/>[-sqrt(3)/2,<sp/>sqrt(3)/2].</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>P2<sp/>=<sp/>-4*x*x+3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>minusP2<sp/>=<sp/>-P2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;Alg_real,<sp/>int&gt;<sp/>&gt;<sp/>roots;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ak1.solve_1_object()(P2,<sp/>std::back_inserter(roots));</highlight><highlight class="comment">//<sp/>[-sqrt(3)/2,<sp/>sqrt(3)/2]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arcs.push_back(construct(P2,<sp/>roots[0].first,<sp/>roots[1].first));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arcs.push_back(construct(minusP2,<sp/>roots[0].first,<sp/>roots[1].first));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>arcs<sp/>(C3,<sp/>C&apos;3)<sp/>of<sp/>(i)<sp/>the<sp/>rational<sp/>function<sp/>(y<sp/>=<sp/>1<sp/>/<sp/>2*x)<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>&gt;<sp/>0,<sp/>and<sp/>(ii)<sp/>the<sp/>rational<sp/>function<sp/>(y<sp/>=<sp/>-1<sp/>/<sp/>2*x)<sp/>for<sp/>x<sp/>&lt;<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>P3(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>minusP3(-P3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polynomial<sp/>Q3<sp/>=<sp/>2*x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arcs.push_back(construct(P3,<sp/>Q3,<sp/>Alg_real(0),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arcs.push_back(construct(minusP3,<sp/>Q3,<sp/>Alg_real(0),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>arrangement<sp/>of<sp/>the<sp/>six<sp/>arcs<sp/>and<sp/>print<sp/>its<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Arrangement<sp/>arr(&amp;traits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgArrangementOnSurface2Insert_1gaf7d5aac2640c2a706f8c5e6adc8a7e94" kindref="member">insert</ref>(arr,<sp/>arcs.begin(),<sp/>arcs.end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print_unbounded_arrangement_size(arr);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="examples.txt"/>
  </compounddef>
</doxygen>
