<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Arrangement__on__surface__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Arrangement_on_surface_2</compoundname>
    <derivedcompoundref refid="classCGAL_1_1Arrangement__on__surface__with__history__2" prot="public" virt="non-virtual">CGAL::Arrangement_on_surface_with_history_2&lt; Traits, Default_planar_topology&lt; Traits, Dcel &gt;::Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Arrangement__on__surface__with__history__2" prot="public" virt="non-virtual">CGAL::Arrangement_on_surface_with_history_2&lt; GeometryTraits, TopologyTraits &gt;</derivedcompoundref>
    <includes local="no">CGAL/Arrangement_on_surface_2.h</includes>
    <innerclass refid="classCGAL_1_1Arrangement__on__surface__2_1_1Face" prot="public">CGAL::Arrangement_on_surface_2::Face</innerclass>
    <innerclass refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" prot="public">CGAL::Arrangement_on_surface_2::Halfedge</innerclass>
    <innerclass refid="classCGAL_1_1Arrangement__on__surface__2_1_1Vertex" prot="public">CGAL::Arrangement_on_surface_2::Vertex</innerclass>
    <templateparamlist>
      <param>
        <type>typename GeometryTraits</type>
      </param>
      <param>
        <type>typename TopologyTraits</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a7e4ae02b357a752a8253281c5c7e7225" prot="public" static="no">
        <type>GeometryTraits</type>
        <definition>typedef GeometryTraits CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Geometry_traits_2</definition>
        <argsstring></argsstring>
        <name>Geometry_traits_2</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Geometry_traits_2</qualifiedname>
        <briefdescription>
<para>the geometry traits class in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="66" column="55" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a93d5adf653445f89871ea08cb6db3f10" prot="public" static="no">
        <type>TopologyTraits</type>
        <definition>typedef TopologyTraits CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Topology_traits</definition>
        <argsstring></argsstring>
        <name>Topology_traits</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Topology_traits</qualifiedname>
        <briefdescription>
<para>the topology traits class in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="69" column="57" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a1ec2d7a55bfe570ed29dd6522a9f6f23" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2" kindref="compound">Arrangement_on_surface_2</ref>&lt; <ref refid="classCGAL_1_1Arrangement__on__surface__2_1a7e4ae02b357a752a8253281c5c7e7225" kindref="member">Geometry_traits_2</ref>, <ref refid="classCGAL_1_1Arrangement__on__surface__2_1a93d5adf653445f89871ea08cb6db3f10" kindref="member">Topology_traits</ref> &gt;</type>
        <definition>typedef Arrangement_on_surface_2&lt;Geometry_traits_2, Topology_traits&gt; CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Self</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Self</qualifiedname>
        <briefdescription>
<para>a private type used as an abbreviation of the <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2" kindref="compound">Arrangement_on_surface_2</ref></computeroutput> type hereafter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="74" column="36" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1aed833c3b69b94eae54994439d70a83a2" prot="public" static="no">
        <type>Geometry_traits_2::Point_2</type>
        <definition>typedef Geometry_traits_2::Point_2 CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Point_2</definition>
        <argsstring></argsstring>
        <name>Point_2</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Point_2</qualifiedname>
        <briefdescription>
<para>the point type, as defined by the traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="82" column="57" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" prot="public" static="no">
        <type>Geometry_traits_2::X_monotone_curve_2</type>
        <definition>typedef Geometry_traits_2::X_monotone_curve_2 CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::X_monotone_curve_2</definition>
        <argsstring></argsstring>
        <name>X_monotone_curve_2</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::X_monotone_curve_2</qualifiedname>
        <briefdescription>
<para>the <formula id="211">$ x$</formula>-monotone curve type, as defined by the traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="85" column="58" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" prot="public" static="no">
        <type>Dcel::Size</type>
        <definition>typedef Dcel::Size CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Size</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Size</qualifiedname>
        <briefdescription>
<para>the size type (equivalent to <computeroutput>size_t</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="88" column="57" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>The following mutable handles, iterators, and circulators have respective constant counterparts.</para>
<para>The mutable types are assignable to their constant counterparts. <computeroutput>Vertex_iterator</computeroutput>, <computeroutput>Halfedge_iterator</computeroutput>, and <computeroutput>Face_iterator</computeroutput> are equivalent to the respective handle types (namely, <computeroutput>Vertex_handle</computeroutput>, <computeroutput>Halfedge_handle</computeroutput>, and <computeroutput>Face_handle</computeroutput>). Thus, wherever the handles appear in function parameter lists, the respective iterators can be passed as well.</para>
<para>All handles are model of <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> and <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>, that is they can be used as keys in containers such as <computeroutput>std::map</computeroutput> and <computeroutput>boost::unordered_map</computeroutput>. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Vertex_handle</qualifiedname>
        <briefdescription>
<para>Mutable. </para>
        </briefdescription>
        <detaileddescription>
<para>a handle to an arrangement vertex. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="376" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Halfedge_handle</definition>
        <argsstring></argsstring>
        <name>Halfedge_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Halfedge_handle</qualifiedname>
        <briefdescription>
<para>a handle to a halfedge. </para>
        </briefdescription>
        <detaileddescription>
<para>The halfedge and its twin form together an arrangement edge. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="381" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Face_handle</definition>
        <argsstring></argsstring>
        <name>Face_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Face_handle</qualifiedname>
        <briefdescription>
<para>a handle to an arrangement face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="384" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1ac9e0d41a482a1ce382983871b8e7168d" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Vertex_iterator</definition>
        <argsstring></argsstring>
        <name>Vertex_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Vertex_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the vertices of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Vertex" kindref="compound">Vertex</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="389" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1ae8c1944479e0e4cf89522c7dffacd12c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Halfedge_iterator</definition>
        <argsstring></argsstring>
        <name>Halfedge_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Halfedge_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the halfedges of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="394" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a90b95a65ca2ac31782a88f5ee8e83eba" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Edge_iterator</definition>
        <argsstring></argsstring>
        <name>Edge_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Edge_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the edges of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>(That is, it skips every other halfedge.) Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="400" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a1ca07cc155a1d0afeb4fc22f21b01361" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Face_iterator</definition>
        <argsstring></argsstring>
        <name>Face_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Face_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the faces of arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Face" kindref="compound">Face</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="405" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a498b04d51254fac9c16472d2de9412f1" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Unbounded_face_iterator</definition>
        <argsstring></argsstring>
        <name>Unbounded_face_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Unbounded_face_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the unbounded faces of arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Face" kindref="compound">Face</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="410" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a3418d290f692e88e110d4bb12b2c59d9" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Halfedge_around_vertex_circulator</definition>
        <argsstring></argsstring>
        <name>Halfedge_around_vertex_circulator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Halfedge_around_vertex_circulator</qualifiedname>
        <briefdescription>
<para>a bidirectional circulator over the halfedges that have a given vertex as their target. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="416" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a74c5102548a855c11d1606af503db209" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Ccb_halfedge_circulator</definition>
        <argsstring></argsstring>
        <name>Ccb_halfedge_circulator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Ccb_halfedge_circulator</qualifiedname>
        <briefdescription>
<para>a bidirectional circulator over the halfedges of a CCB (connected component of the boundary). </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput>. Each bounded face has a single CCB representing it outer boundary, and may have several inner CCBs representing its holes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="424" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1af9177e11279f4580dbec6440394ca323" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Inner_ccb_iterator</definition>
        <argsstring></argsstring>
        <name>Inner_ccb_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Inner_ccb_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the inner CCBs of a given face. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value type is <computeroutput>Ccb_halfedge_circulator</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="429" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a0c3fd7478061fcd62b415fc529399546" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Outer_ccb_iterator</definition>
        <argsstring></argsstring>
        <name>Outer_ccb_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Outer_ccb_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the outer CCBs of a given face. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value type is <computeroutput>Ccb_halfedge_circulator</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="434" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1ae2c8437722eb0a934f37e10bb5353110" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Hole_iterator</definition>
        <argsstring></argsstring>
        <name>Hole_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Hole_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the holes (i.e., inner CCBs) contained inside a given face. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value type is <computeroutput>Ccb_halfedge_circulator</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="440" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a4b8bee4d94c47a284f3f5e14b1327315" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Isolated_vertex_iterator</definition>
        <argsstring></argsstring>
        <name>Isolated_vertex_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Isolated_vertex_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the isolated vertices contained inside a given face. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Vertex" kindref="compound">Vertex</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="446" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a47fac787fb37cd812814fbb9b6ab9acc" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Vertex_const_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_const_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Vertex_const_handle</qualifiedname>
        <briefdescription>
<para>Constant. </para>
        </briefdescription>
        <detaileddescription>
<para>a handle to an arrangement vertex. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="454" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a22adafaff54a2c42e6c369f198870be5" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Halfedge_const_handle</definition>
        <argsstring></argsstring>
        <name>Halfedge_const_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Halfedge_const_handle</qualifiedname>
        <briefdescription>
<para>a handle to a halfedge. </para>
        </briefdescription>
        <detaileddescription>
<para>The halfedge and its twin form together an arrangement edge. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="459" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a513a10758cc81189887d5f0a492f0245" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Face_const_handle</definition>
        <argsstring></argsstring>
        <name>Face_const_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Face_const_handle</qualifiedname>
        <briefdescription>
<para>a handle to an arrangement face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="462" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a6e3184096bbb26b96941800251966713" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Vertex_const_iterator</definition>
        <argsstring></argsstring>
        <name>Vertex_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Vertex_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the vertices of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Vertex" kindref="compound">Vertex</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="467" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a528e9ba3cc4229aa7bcaa5238fc95c8b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Halfedge_const_iterator</definition>
        <argsstring></argsstring>
        <name>Halfedge_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Halfedge_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the halfedges of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="472" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a5ac52dd17c71b6a547576d9be80a9d1e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Edge_const_iterator</definition>
        <argsstring></argsstring>
        <name>Edge_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Edge_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the edges of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>(That is, it skips every other halfedge.) Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="478" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a37eacf0eea59fc718f1990af11d4c7cc" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Face_const_iterator</definition>
        <argsstring></argsstring>
        <name>Face_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Face_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the faces of arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Face" kindref="compound">Face</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="483" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a65536568e9b3ec1abf95d883f832f980" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Unbounded_face_const_iterator</definition>
        <argsstring></argsstring>
        <name>Unbounded_face_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Unbounded_face_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the unbounded faces of arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Face" kindref="compound">Face</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="488" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a25a6b217cafc8fc0405ce4722deee429" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Halfedge_around_vertex_const_circulator</definition>
        <argsstring></argsstring>
        <name>Halfedge_around_vertex_const_circulator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Halfedge_around_vertex_const_circulator</qualifiedname>
        <briefdescription>
<para>a bidirectional circulator over the halfedges that have a given vertex as their target. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="494" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a9d91ef74dc0f28ea9e17771a3e5c98f7" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Ccb_halfedge_const_circulator</definition>
        <argsstring></argsstring>
        <name>Ccb_halfedge_const_circulator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Ccb_halfedge_const_circulator</qualifiedname>
        <briefdescription>
<para>a bidirectional circulator over the halfedges of a CCB (connected component of the boundary). </para>
        </briefdescription>
        <detaileddescription>
<para>Its value-type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Halfedge" kindref="compound">Halfedge</ref></computeroutput>. Each bounded face has a single CCB representing it outer boundary, and may have several inner CCBs representing its holes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="502" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a4c288118bcb430907f45d4e1aa0457e2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Inner_ccb_const_iterator</definition>
        <argsstring></argsstring>
        <name>Inner_ccb_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Inner_ccb_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the inner CCBs of a given face. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value type is <computeroutput>Ccb_halfedge_circulator</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="507" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1aaa53140e273b90a2cc3869d885e6d2b9" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Outer_ccb_const_iterator</definition>
        <argsstring></argsstring>
        <name>Outer_ccb_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Outer_ccb_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the outer CCBs of a given face. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value type is <computeroutput>Ccb_halfedge_circulator</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="512" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a78f28e160cbfa03f72b18e923d48b208" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Hole_const_iterator</definition>
        <argsstring></argsstring>
        <name>Hole_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Hole_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the holes (i.e., inner CCBs) contained inside a given face. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value type is <computeroutput>Ccb_halfedge_circulator</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="518" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Arrangement__on__surface__2_1a9f40454b182605de745963836ffc51f1" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Isolated_vertex_const_iterator</definition>
        <argsstring></argsstring>
        <name>Isolated_vertex_const_iterator</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Isolated_vertex_const_iterator</qualifiedname>
        <briefdescription>
<para>a bidirectional iterator over the isolated vertices contained inside a given face. </para>
        </briefdescription>
        <detaileddescription>
<para>Its value type is <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2_1_1Vertex" kindref="compound">Vertex</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="524" column="28" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a0a420fcf3be620f1d335540db4e09882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Arrangement_on_surface_2</definition>
        <argsstring>()</argsstring>
        <name>Arrangement_on_surface_2</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Arrangement_on_surface_2</qualifiedname>
        <briefdescription>
<para>constructs an empty arrangement containing one unbounded face, which corresponds to the entire plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="524" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a9356bb3c652df06056ff2e978347d9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Arrangement_on_surface_2</definition>
        <argsstring>(const Self &amp;other)</argsstring>
        <name>Arrangement_on_surface_2</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Arrangement_on_surface_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1a1ec2d7a55bfe570ed29dd6522a9f6f23" kindref="member">Self</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="524" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a733b628ac48031d7bcf1666116be473e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::Arrangement_on_surface_2</definition>
        <argsstring>(const GeometryTraits *traits)</argsstring>
        <name>Arrangement_on_surface_2</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::Arrangement_on_surface_2</qualifiedname>
        <param>
          <type>const GeometryTraits *</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>constructs an empty arrangement that uses the given <computeroutput>traits</computeroutput> instance for performing the geometric predicates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="524" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assignment Methods</header>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1af3c9cc5b16f0d5f48847cdfe66b195b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a1ec2d7a55bfe570ed29dd6522a9f6f23" kindref="member">Self</ref> &amp;</type>
        <definition>Self &amp; CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::operator=</definition>
        <argsstring>(other)</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::operator=</qualifiedname>
        <param>
          <type>other</type>
        </param>
        <briefdescription>
<para>assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="550" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a9eccc63d91d51f0e1a100dc8d0927472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::assign</definition>
        <argsstring>(const Self &amp;other)</argsstring>
        <name>assign</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::assign</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1a1ec2d7a55bfe570ed29dd6522a9f6f23" kindref="member">Self</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>assigns the contents of another arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="553" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a61a86c3bc36e5c7bdd872f676f23ffbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::clear</qualifiedname>
        <briefdescription>
<para>clears the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="556" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a927ada675e6ff98a0128f224f38363a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a7e4ae02b357a752a8253281c5c7e7225" kindref="member">Geometry_traits_2</ref> *</type>
        <definition>Geometry_traits_2 * CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::geometry_traits</definition>
        <argsstring>()</argsstring>
        <name>geometry_traits</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::geometry_traits</qualifiedname>
        <briefdescription>
<para>obtains the traits object used by the arrangement instance. </para>
        </briefdescription>
        <detaileddescription>
<para>A <computeroutput>const</computeroutput> version is also available. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="566" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a7128c62986a89e5d3525c47d02981894" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::is_empty</qualifiedname>
        <briefdescription>
<para>determines whether the arrangement is empty (contains only the unbounded face, with no vertices or edges). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="571" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessing the Arrangement Vertices</header>
      <description><para>All <computeroutput>_begin()</computeroutput> and <computeroutput>_end()</computeroutput> methods listed below also have <computeroutput>const</computeroutput> counterparts, returning constant iterators instead of mutable ones. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a07afeb623d32ef12745c9b368233e4ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" kindref="member">Size</ref></type>
        <definition>Size CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::number_of_vertices</qualifiedname>
        <briefdescription>
<para>obtains the number of vertices in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="584" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1ac23311b3fbeaea9972a49b2c51997713" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" kindref="member">Size</ref></type>
        <definition>Size CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::number_of_isolated_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_isolated_vertices</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::number_of_isolated_vertices</qualifiedname>
        <briefdescription>
<para>obtains the total number of isolated vertices in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="587" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1aa042e6d15902031a2df0f5c567deb48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1ac9e0d41a482a1ce382983871b8e7168d" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::vertices_begin</definition>
        <argsstring>()</argsstring>
        <name>vertices_begin</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::vertices_begin</qualifiedname>
        <briefdescription>
<para>obtains the begin-iterator of the vertices in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="590" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a13b01c9fe13b28f40311bcf5df5f2372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1ac9e0d41a482a1ce382983871b8e7168d" kindref="member">Vertex_iterator</ref></type>
        <definition>Vertex_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::vertices_end</definition>
        <argsstring>()</argsstring>
        <name>vertices_end</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::vertices_end</qualifiedname>
        <briefdescription>
<para>obtains the past-the-end iterator of the vertices in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="593" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1af832b7943d1dae0a9160811e68065d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; Prevent_deref&lt; <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ac9e0d41a482a1ce382983871b8e7168d" kindref="member">Vertex_iterator</ref> &gt; &gt;</type>
        <definition>Iterator_range&lt; Prevent_deref&lt; Vertex_iterator &gt; &gt; CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::vertex_handles</definition>
        <argsstring>()</argsstring>
        <name>vertex_handles</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::vertex_handles</qualifiedname>
        <briefdescription>
<para>obtains a range over handles of the arrangement vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="596" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a6456e981d377cd6a13b0df360f3a455d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" kindref="member">Size</ref></type>
        <definition>Size CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::number_of_vertices_at_infinity</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices_at_infinity</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::number_of_vertices_at_infinity</qualifiedname>
        <briefdescription>
<para>obtains the number of arrangement vertices that lie at infinity and are not associated with valid points. </para>
        </briefdescription>
        <detaileddescription>
<para>Such vertices are not considered to be regular arrangement vertices and <computeroutput>arr.number_of_vertices()</computeroutput> does not count them. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="603" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessing the Arrangement Halfedges</header>
      <description><para>All <computeroutput>_begin()</computeroutput> and <computeroutput>_end()</computeroutput> methods listed below also have <computeroutput>const</computeroutput> counterparts, returning constant iterators instead of mutable ones. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1ae4e63cf2763246726d5b705a45d2848f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" kindref="member">Size</ref></type>
        <definition>Size CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::number_of_halfedges</definition>
        <argsstring>() const</argsstring>
        <name>number_of_halfedges</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::number_of_halfedges</qualifiedname>
        <briefdescription>
<para>obtains the number of halfedges in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="616" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a145db83973c8b755f8ece345a6d34823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1ae8c1944479e0e4cf89522c7dffacd12c" kindref="member">Halfedge_iterator</ref></type>
        <definition>Halfedge_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::halfedges_begin</definition>
        <argsstring>()</argsstring>
        <name>halfedges_begin</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::halfedges_begin</qualifiedname>
        <briefdescription>
<para>obtains the begin-iterator of the halfedges in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="619" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a71bffb99db0dd4824334432ccede2ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1ae8c1944479e0e4cf89522c7dffacd12c" kindref="member">Halfedge_iterator</ref></type>
        <definition>Halfedge_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::halfedges_end</definition>
        <argsstring>()</argsstring>
        <name>halfedges_end</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::halfedges_end</qualifiedname>
        <briefdescription>
<para>obtains the past-the-end iterator of the halfedges in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="622" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a1116c058acf1f8a68fa24b33d66d9e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; Prevent_deref&lt; <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ae8c1944479e0e4cf89522c7dffacd12c" kindref="member">Halfedge_iterator</ref> &gt; &gt;</type>
        <definition>Iterator_range&lt; Prevent_deref&lt; Halfedge_iterator &gt; &gt; CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::halfedge_handles</definition>
        <argsstring>()</argsstring>
        <name>halfedge_handles</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::halfedge_handles</qualifiedname>
        <briefdescription>
<para>obtains a range over handles of the arrangement halfedges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="625" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1ab8c9db7c49f1d4860cd47094a08a6779" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" kindref="member">Size</ref></type>
        <definition>Size CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::number_of_edges</definition>
        <argsstring>() const</argsstring>
        <name>number_of_edges</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::number_of_edges</qualifiedname>
        <briefdescription>
<para>obtains the number of edges in the arrangement (equivalent to <computeroutput>arr.number_of_halfedges() / 2</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="630" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a3ecce52c3dbd2d8ffd5910e5c6d2eaa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a90b95a65ca2ac31782a88f5ee8e83eba" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::edges_begin</definition>
        <argsstring>()</argsstring>
        <name>edges_begin</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::edges_begin</qualifiedname>
        <briefdescription>
<para>obtains the begin-iterator of the edges in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="633" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1ab4e303e84da92938e0993f8fba5166d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a90b95a65ca2ac31782a88f5ee8e83eba" kindref="member">Edge_iterator</ref></type>
        <definition>Edge_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::edges_end</definition>
        <argsstring>()</argsstring>
        <name>edges_end</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::edges_end</qualifiedname>
        <briefdescription>
<para>obtains the past-the-end iterator of the edges in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="636" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a76a7b310b7483a74b472456d3bdb5d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; Prevent_deref&lt; <ref refid="classCGAL_1_1Arrangement__on__surface__2_1a90b95a65ca2ac31782a88f5ee8e83eba" kindref="member">Edge_iterator</ref> &gt; &gt;</type>
        <definition>Iterator_range&lt; Prevent_deref&lt; Edge_iterator &gt; &gt; CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::edge_handles</definition>
        <argsstring>()</argsstring>
        <name>edge_handles</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::edge_handles</qualifiedname>
        <briefdescription>
<para>obtains a range over handles of the arrangement edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="639" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessing the Arrangement Faces</header>
      <description><para>All <computeroutput>_begin()</computeroutput> and <computeroutput>_end()</computeroutput> methods listed below also have <computeroutput>const</computeroutput> counterparts, returning constant iterators instead of mutable ones. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a82638900556c9b8b39d5c207b1a456da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::unbounded_face</definition>
        <argsstring>()</argsstring>
        <name>unbounded_face</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::unbounded_face</qualifiedname>
        <briefdescription>
<para>obtains a handle for an unbounded face of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>In case the arrangement comprises only bounded curves, there is a single unbounded face and the function returns a handle to it. Otherwise, a handle to an arbitrary unbounded face is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="656" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1ac8de48159182ed1dc27d508171c3adb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" kindref="member">Size</ref></type>
        <definition>Size CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::number_of_faces</definition>
        <argsstring>() const</argsstring>
        <name>number_of_faces</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::number_of_faces</qualifiedname>
        <briefdescription>
<para>obtains the number of faces in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="659" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a8e9012b82b8cca39ca1be9633506f30a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a1ca07cc155a1d0afeb4fc22f21b01361" kindref="member">Face_iterator</ref></type>
        <definition>Face_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::faces_begin</definition>
        <argsstring>()</argsstring>
        <name>faces_begin</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::faces_begin</qualifiedname>
        <briefdescription>
<para>obtains the begin-iterator of the faces in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="662" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a39327610c9f0fd29fdc295893feafc8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a1ca07cc155a1d0afeb4fc22f21b01361" kindref="member">Face_iterator</ref></type>
        <definition>Face_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::faces_end</definition>
        <argsstring>()</argsstring>
        <name>faces_end</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::faces_end</qualifiedname>
        <briefdescription>
<para>obtains the past-the-end iterator of the faces in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="665" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a98c23a8194ab431397070a2091b183a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; Prevent_deref&lt; <ref refid="classCGAL_1_1Arrangement__on__surface__2_1a1ca07cc155a1d0afeb4fc22f21b01361" kindref="member">Face_iterator</ref> &gt; &gt;</type>
        <definition>Iterator_range&lt; Prevent_deref&lt; Face_iterator &gt; &gt; CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::face_handles</definition>
        <argsstring>()</argsstring>
        <name>face_handles</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::face_handles</qualifiedname>
        <briefdescription>
<para>obtains a range over handles of the arrangement faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="668" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1abeed5715498a29e1e7f869346998ce5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" kindref="member">Size</ref></type>
        <definition>Size CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::number_of_unbounded_faces</definition>
        <argsstring>() const</argsstring>
        <name>number_of_unbounded_faces</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::number_of_unbounded_faces</qualifiedname>
        <briefdescription>
<para>obtains the number of unbounded faces in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Note <computeroutput>arr.number_of_faces()</computeroutput> also counts the unbounded faces of the arrangement. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="673" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a1807df960b1c3ebdb7e9afd2443b8651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a498b04d51254fac9c16472d2de9412f1" kindref="member">Unbounded_face_iterator</ref></type>
        <definition>Unbounded_face_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::unbounded_faces_begin</definition>
        <argsstring>()</argsstring>
        <name>unbounded_faces_begin</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::unbounded_faces_begin</qualifiedname>
        <briefdescription>
<para>obtains the begin-iterator of the unbounded faces in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="676" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a35f815859d85d7b465a4e37129aaa08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a498b04d51254fac9c16472d2de9412f1" kindref="member">Unbounded_face_iterator</ref></type>
        <definition>Unbounded_face_iterator CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::unbounded_faces_end</definition>
        <argsstring>()</argsstring>
        <name>unbounded_faces_end</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::unbounded_faces_end</qualifiedname>
        <briefdescription>
<para>obtains the past-the-end iterator of the unbounded faces in the arrangement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="681" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1aaf85591f55aa56e0cd01dbed708cc691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::fictitious_face</definition>
        <argsstring>()</argsstring>
        <name>fictitious_face</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::fictitious_face</qualifiedname>
        <briefdescription>
<para>obtains a handle to the fictitious face of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>If the arrangement is not unbounded, there is no fictitious face. In this case the result is not deterministic. A const version is also available. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="687" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Casting Away Constness</header>
      <description><para>It is sometimes necessary to convert a constant (non-mutable) handle to a mutable handle.</para>
<para>For example, the result of a point-location query is a non-mutable handle for the arrangement cell containing the query point. Assume that the query point lies on an edge, so we obtain a <computeroutput>Halfedge_const_handle</computeroutput>; if we wish to use this handle and remove the edge, we first need to cast away its &quot;constness&quot;. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1ab3ce8cfa533c872fee6496a100121bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::non_const_handle</definition>
        <argsstring>(Vertex_const_handle v)</argsstring>
        <name>non_const_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::non_const_handle</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a47fac787fb37cd812814fbb9b6ab9acc" kindref="member">Vertex_const_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>casts the given constant vertex handle to an equivalent mutable handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="704" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a537397535cbbba053f4c06afe9a99e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::non_const_handle</definition>
        <argsstring>(Halfedge_const_handle e)</argsstring>
        <name>non_const_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::non_const_handle</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a22adafaff54a2c42e6c369f198870be5" kindref="member">Halfedge_const_handle</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>casts the given constant halfedge handle to an equivalent mutable handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="708" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a4ed74bd085ec409f74e74ce59ff44c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::non_const_handle</definition>
        <argsstring>(Face_const_handle f)</argsstring>
        <name>non_const_handle</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::non_const_handle</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a513a10758cc81189887d5f0a492f0245" kindref="member">Face_const_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>casts the given constant face handle to an equivalent mutable handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="711" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Specialized Insertion Methods</header>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a622e04b98c5d0ac773c0a1b6da94b242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_in_face_interior</definition>
        <argsstring>(const Point_2 &amp;p, Face_handle f)</argsstring>
        <name>insert_in_face_interior</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_in_face_interior</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1aed833c3b69b94eae54994439d70a83a2" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>inserts the point <computeroutput>p</computeroutput> into the arrangement as an isolated vertex in the interior of the face <computeroutput>f</computeroutput> and returns a handle for the newly created vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>p</computeroutput> lies in the interior of the face <computeroutput>f</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="724" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a33209266056d7232956a34734aa717eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_in_face_interior</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Face_handle f)</argsstring>
        <name>insert_in_face_interior</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_in_face_interior</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> that is entirely contained in the interior of a given face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>c</computeroutput> is a bounded curve two new vertices that correspond to <computeroutput>c</computeroutput>&apos;s endpoints are created and connected with a newly created halfedge pair, which forms a new hole (inner component) in the face <computeroutput>f</computeroutput>. If <computeroutput>c</computeroutput> is unbounded, at least one of the two vertices that represents its end lies at infinity, and its creation modifies the outer boundary of <computeroutput>f</computeroutput>. The function returns a handle for one of the new halfedges corresponding to the inserted curve, directed in lexicographic increasing order (from left to right).</para>
<para><simplesect kind="pre"><para><computeroutput>c</computeroutput> lies entirely in the interior of the face <computeroutput>f</computeroutput> and is disjoint from all existing arrangement vertices and edges (in particular, both its endpoints are not already associated with existing arrangement vertices).</para>
</simplesect>
<simplesect kind="pre"><para>In case <computeroutput>c</computeroutput> is an unbounded curve, <computeroutput>f</computeroutput> must be an unbounded face. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="742" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a5afb084b94adba3fa294724bd07ccb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_from_left_vertex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Vertex_handle v)</argsstring>
        <name>insert_from_left_vertex</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_from_left_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that its left endpoint corresponds to a given arrangement vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>As a result, a new vertex that correspond to <computeroutput>c</computeroutput>&apos;s right endpoint is created and connected to <computeroutput>v</computeroutput> with a newly created halfedge pair. If <computeroutput>c</computeroutput> has an unbounded right end, the new vertex lies at infinity and the unbounded face that contains the interior of the curve is split. The function returns a handle for one of the new halfedges corresponding to the inserted curve, directed towards the newly created vertex - that is, directed in lexicographic increasing order (from left to right).</para>
<para><simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>v</computeroutput> is associated with the left endpoint of <computeroutput>c</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para>The right endpoint of <computeroutput>c</computeroutput> is not already associated with an existing arrangement vertex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="763" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a1f3b1ceca5219900301e4eefd9f80bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_from_right_vertex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Vertex_handle v)</argsstring>
        <name>insert_from_right_vertex</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_from_right_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that its right endpoint corresponds to a given arrangement vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>As a result, a new vertex that correspond to <computeroutput>c</computeroutput>&apos;s left endpoint is created and connected to <computeroutput>v</computeroutput> with a newly created halfedge pair. If <computeroutput>c</computeroutput> has an unbounded left end, the new vertex lies at infinity and the unbounded face that contains the interior of the curve is split. The function returns a handle for one of the new halfedges corresponding to the inserted curve, directed to the newly created vertex - that is, directed in lexicographic decreasing order (from right to left). <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>v</computeroutput> is associated with the right endpoint of <computeroutput>c</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>The left endpoint of <computeroutput>c</computeroutput> is not already associated with an existing arrangement vertex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="781" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a7f2201fbb9015ddbbd22b7704e958e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_at_vertices</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Vertex_handle v1, Vertex_handle v2)</argsstring>
        <name>insert_at_vertices</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_at_vertices</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that both <computeroutput>c</computeroutput>&apos;s endpoints correspond to existing arrangement vertices, given by <computeroutput>v1</computeroutput> and <computeroutput>v2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The function creates a new halfedge pair that connects the two vertices, and returns a handle for the halfedge directed from <computeroutput>v1</computeroutput> to <computeroutput>v2</computeroutput>. <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>c</computeroutput> must not be an unbounded curve. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>v1</computeroutput> and <computeroutput>v2</computeroutput> are associated with <computeroutput>c</computeroutput>&apos;s endpoints. </para>
</simplesect>
<simplesect kind="pre"><para>If <computeroutput>v1</computeroutput> and <computeroutput>v2</computeroutput> are already connected by an edge, this edge represents an <formula id="211">$ x$</formula>-monotone curve that is interior-disjoint from <computeroutput>c</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="796" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a6e30bc5268f44568f44d6789b6d9546a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_in_face_interior</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle fict_pred1, Halfedge_handle fict_pred2=Halfedge_handle())</argsstring>
        <name>insert_in_face_interior</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_in_face_interior</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>fict_pred1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>fict_pred2</declname>
          <defval><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>inserts an unbounded curve <computeroutput>c</computeroutput> into the arrangement, such that <computeroutput>c</computeroutput> is entirely contained within a single unbounded face of the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>fict_pred1</computeroutput> specifies the fictitious halfedge that should contain the vertex at infinity that corresponds to the unbounded end of <computeroutput>c</computeroutput>. If both ends of <computeroutput>c</computeroutput> are unbounded, <computeroutput>fict_pred1</computeroutput> indicated the place for its left end and <computeroutput>fict_pred2</computeroutput> indicated a place for its right end. The function returns a handle for one of the new halfedges directed (lexicographically) from left to right. <simplesect kind="pre"><para><computeroutput>c</computeroutput> is an unbounded curve disjoint from all existing arrangement vertices and edges. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>fict_pred1</computeroutput> (and <computeroutput>fict_pred2</computeroutput>) are fictitious halfedges that contains the unbounded end(s) of <computeroutput>c</computeroutput>. If both halfedges are given they must be both incident to the same unbounded face. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="814" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a19a30e90d60a50c358a2cd6e2914f07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_from_left_vertex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle pred)</argsstring>
        <name>insert_from_left_vertex</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_from_left_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that its left endpoint corresponds to a given arrangement vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>This vertex is the target vertex of the halfedge <computeroutput>pred</computeroutput>, such that <computeroutput>c</computeroutput> is inserted to the circular list of halfedges around <computeroutput>pred-&gt;target()</computeroutput> right between <computeroutput>pred</computeroutput> and its successor. The function returns a handle for one of the new halfedges directed (lexicographically) from left to right. <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>pred-&gt;target()</computeroutput> is associated with the left endpoint of <computeroutput>c</computeroutput>, and <computeroutput>c</computeroutput> should be inserted after <computeroutput>pred</computeroutput> in a clockwise order around this vertex. </para>
</simplesect>
<simplesect kind="pre"><para>The right endpoint of <computeroutput>c</computeroutput> is not already associated with an existing arrangement vertex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="832" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a1050c4d80f0c1d3341fc93026814df14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_from_left_vertex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle pred, Halfedge_handle fict_pred)</argsstring>
        <name>insert_from_left_vertex</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_from_left_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>pred</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>fict_pred</declname>
        </param>
        <briefdescription>
<para>inserts an unbounded curve <computeroutput>c</computeroutput> into the arrangement, such that its left endpoint is bounded and corresponds to a given arrangement vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>This vertex is the target vertex of the halfedge <computeroutput>pred</computeroutput>, such that <computeroutput>c</computeroutput> is inserted to the circular list of halfedges around <computeroutput>pred-&gt;target()</computeroutput> right between <computeroutput>pred</computeroutput> and its successor. Similarly, <computeroutput>fict_pred</computeroutput> specifies the fictitious halfedge that should contain the vertex at infinity that corresponds to the unbounded right end of <computeroutput>c</computeroutput>. The function returns a handle for one of the new halfedges directed (lexicographically) from left to right. <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. <computeroutput>c</computeroutput> must have a bounded left endpoint and an unbounded right end. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>pred-&gt;target()</computeroutput> is associated with the left endpoint of <computeroutput>c</computeroutput>, and <computeroutput>c</computeroutput> should be inserted after <computeroutput>pred</computeroutput> in a clockwise order around this vertex. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>fict_pred</computeroutput> is a fictitious halfedge that contains the unbounded right end of <computeroutput>c</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="852" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a8caa061bb30c4644405b2f1bddb9fad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_from_right_vertex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle pred)</argsstring>
        <name>insert_from_right_vertex</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_from_right_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that its right endpoint corresponds to a given arrangement vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>This vertex is the target vertex of the halfedge <computeroutput>pred</computeroutput>, such that <computeroutput>c</computeroutput> is inserted to the circular list of halfedges around <computeroutput>pred-&gt;target()</computeroutput> right between <computeroutput>pred</computeroutput> and its successor. The function returns a handle for one of the new halfedges directed (lexicographically) from right to left. <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>pred-&gt;target()</computeroutput> is associated with the right endpoint of <computeroutput>c</computeroutput>, and <computeroutput>c</computeroutput> should be inserted after <computeroutput>pred</computeroutput> in a clockwise order around this vertex. </para>
</simplesect>
<simplesect kind="pre"><para>The left endpoint of <computeroutput>c</computeroutput> is not already associated with an existing arrangement vertex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="870" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1ad393e2c111499ba718ab875184e68f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_from_right_vertex</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle pred, Halfedge_handle fict_pred)</argsstring>
        <name>insert_from_right_vertex</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_from_right_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>pred</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>fict_pred</declname>
        </param>
        <briefdescription>
<para>inserts an unbounded curve <computeroutput>c</computeroutput> into the arrangement, such that its right endpoint is bounded and corresponds to a given arrangement vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>This vertex is the target vertex of the halfedge <computeroutput>pred</computeroutput>, such that <computeroutput>c</computeroutput> is inserted to the circular list of halfedges around <computeroutput>pred-&gt;target()</computeroutput> right between <computeroutput>pred</computeroutput> and its successor. Similarly, <computeroutput>fict_pred</computeroutput> specifies the fictitious halfedge that should contain the vertex at infinity that corresponds to the unbounded left end of <computeroutput>c</computeroutput>. The function returns a handle for one of the new halfedges directed (lexicographically) from right to left. <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. <computeroutput>c</computeroutput> must have a bounded right endpoint and an unbounded left end. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>pred-&gt;target()</computeroutput> is associated with the right endpoint of <computeroutput>c</computeroutput>, and <computeroutput>c</computeroutput> should be inserted after <computeroutput>pred</computeroutput> in a clockwise order around this vertex. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>fict_pred</computeroutput> is a fictitious halfedge that contains the unbounded left end of <computeroutput>c</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="888" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a7f5406cb63765d270fe40204ff5c26ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_at_vertices</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle pred1, Vertex_handle v2)</argsstring>
        <name>insert_at_vertices</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_at_vertices</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>pred1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that both <computeroutput>c</computeroutput>&apos;s endpoints correspond to existing arrangement vertices, given by <computeroutput>pred1-&gt;target()</computeroutput> and <computeroutput>v2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The function creates a new halfedge pair that connects the two vertices (where the corresponding halfedge is inserted right between <computeroutput>pred1</computeroutput> and its successor around <computeroutput>pred1</computeroutput>&apos;s target vertex) and returns a handle for the halfedge directed from <computeroutput>pred1-&gt;target()</computeroutput> to <computeroutput>v2</computeroutput>. <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>pred1-&gt;target()</computeroutput> and <computeroutput>v2</computeroutput> are associated with <computeroutput>c</computeroutput>&apos;s endpoints. </para>
</simplesect>
<simplesect kind="pre"><para>If <computeroutput>pred1-&gt;target</computeroutput> and <computeroutput>v2</computeroutput> are already connected by an edge, this edge represents an <formula id="211">$ x$</formula>-monotone curve that is interior-disjoint from <computeroutput>c</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="905" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1aa98a52e12f95e5ee2563284bb38ae5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::insert_at_vertices</definition>
        <argsstring>(const X_monotone_curve_2 &amp;c, Halfedge_handle pred1, Halfedge_handle pred2)</argsstring>
        <name>insert_at_vertices</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::insert_at_vertices</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>pred1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>pred2</declname>
        </param>
        <briefdescription>
<para>inserts the curve <computeroutput>c</computeroutput> into the arrangement, such that both <computeroutput>c</computeroutput>&apos;s endpoints correspond to existing arrangement vertices, given by <computeroutput>pred1-&gt;target()</computeroutput> and <computeroutput>pred2-&gt;target()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The function creates a new halfedge pair that connects the two vertices (with <computeroutput>pred1</computeroutput> and <computeroutput>pred2</computeroutput> indicate the exact place for these halfedges around the two target vertices) and returns a handle for the halfedge directed from <computeroutput>pred1-&gt;target()</computeroutput> to <computeroutput>pred2-&gt;target()</computeroutput>. <simplesect kind="pre"><para>The interior of <computeroutput>c</computeroutput> is disjoint from all existing arrangement vertices and edges. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>pred1-&gt;target()</computeroutput> and <computeroutput>pred2-&gt;target()</computeroutput> are associated with <computeroutput>c</computeroutput>&apos;s endpoints. </para>
</simplesect>
<simplesect kind="pre"><para>If <computeroutput>pred1-&gt;target</computeroutput> and <computeroutput>pred2-&gt;target()</computeroutput> are already connected by an edge, this edge represents an <formula id="211">$ x$</formula>-monotone curve that is interior-disjoint from <computeroutput>c</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="924" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifying Vertices and Edges</header>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1aa34dd4faba726f8d8f912b48dc239e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::modify_vertex</definition>
        <argsstring>(Vertex_handle v, const Point_2 &amp;p)</argsstring>
        <name>modify_vertex</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::modify_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1aed833c3b69b94eae54994439d70a83a2" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>sets <computeroutput>p</computeroutput> to be the point associated with the vertex <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns a handle for the modified vertex (same as <computeroutput>v</computeroutput>). <simplesect kind="pre"><para><computeroutput>v</computeroutput> is not a vertex at infinity and <computeroutput>p</computeroutput> is geometrically equivalent to the point currently associated with <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="938" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1ade2ba2bbc1bf47a81bfbcab204d269ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::remove_isolated_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_isolated_vertex</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::remove_isolated_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>removes the isolated vertex <computeroutput>v</computeroutput> from the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>The function obtains the face <computeroutput>f</computeroutput> that used to contain the isolated vertex. <simplesect kind="pre"><para><computeroutput>v</computeroutput> is an isolated vertex (has no incident edges). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="944" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a04ddf22219d330f989d39beca666f1b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::modify_edge</definition>
        <argsstring>(Halfedge_handle e, const X_monotone_curve_2 &amp;c)</argsstring>
        <name>modify_edge</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::modify_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>sets <computeroutput>c</computeroutput> to be the <formula id="211">$ x$</formula>-monotone curve associated with the edge <computeroutput>e</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The function obtains a handle for the modified edge (same as <computeroutput>e</computeroutput>). <simplesect kind="pre"><para><computeroutput>c</computeroutput> is geometrically equivalent to the curve currently associated with <computeroutput>e</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="951" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a2247def3072f9c94c659c68c55388dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::split_edge</definition>
        <argsstring>(Halfedge_handle e, const X_monotone_curve_2 &amp;c1, const X_monotone_curve_2 &amp;c2)</argsstring>
        <name>split_edge</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::split_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>splits the edge <computeroutput>e</computeroutput> into two edges (more precisely, into two halfedge pairs), associated with the given subcurves <computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput>, and creates a vertex that corresponds to the split point. </para>
        </briefdescription>
        <detaileddescription>
<para>The function obtains a handle for the halfedge, whose source is the same as <computeroutput>e-&gt;source()</computeroutput> and whose target vertex is the split point. <simplesect kind="pre"><para>Either <computeroutput>c1</computeroutput>&apos;s left endpoint and <computeroutput>c2</computeroutput>&apos;s right endpoint correspond to <computeroutput>e</computeroutput>&apos;s end-vertices such that <computeroutput>c1</computeroutput>&apos;s right endpoint and <computeroutput>c2</computeroutput>&apos;s left endpoint are equal and define the split point - or vice-versa (with change of roles between <computeroutput>c1</computeroutput> and <computeroutput>c2</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="964" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a21ad366a7eca1b0b6494e86162b661b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
        <definition>Halfedge_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::merge_edge</definition>
        <argsstring>(Halfedge_handle e1, Halfedge_handle e2, const X_monotone_curve_2 &amp;c)</argsstring>
        <name>merge_edge</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::merge_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>e1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" kindref="member">X_monotone_curve_2</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>merges the edges represented by <computeroutput>e1</computeroutput> and <computeroutput>e2</computeroutput> into a single edge, associated with the given merged curve <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Denote <computeroutput>e1</computeroutput>&apos;s end-vertices as <formula id="44">$ u_1$</formula> and <formula id="503">$ v$</formula>, while <computeroutput>e2</computeroutput>&apos;s end-vertices are denoted <formula id="45">$ u_2$</formula> and <formula id="503">$ v$</formula>. The function removes the common vertex <formula id="505">$
v$</formula> returns a handle for one of the merged halfedges, directed from <formula id="506">$
u_1$</formula> to <formula id="45">$ u_2$</formula>. <simplesect kind="pre"><para><computeroutput>e1</computeroutput> and <computeroutput>e2</computeroutput> share a common end-vertex, such that the two other end-vertices of the two edges are associated with <computeroutput>c</computeroutput>&apos;s endpoints. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="977" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a89618f53b378427e38b7d68fb9f86873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::remove_edge</definition>
        <argsstring>(Halfedge_handle e, bool remove_source=true, bool remove_target=true)</argsstring>
        <name>remove_edge</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::remove_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" kindref="member">Halfedge_handle</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_source</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_target</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>removes the edge <computeroutput>e</computeroutput> from the arrangement. </para>
        </briefdescription>
        <detaileddescription>
<para>Since the <computeroutput>e</computeroutput> may be the only edge incident to its source vertex (or its target vertex), this vertex can be removed as well. The flags <computeroutput>remove_source</computeroutput> and <computeroutput>remove_target</computeroutput> indicate whether the endpoints of <computeroutput>e</computeroutput> should be removed, or whether they should be left as isolated vertices in the arrangement. If the operation causes two faces to merge, the merged face is returned. Otherwise, the face to which the edge was incident is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="989" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Arrangement__on__surface__2_1a16544f844caabd160cc7246bccbb7f67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <qualifiedname>CGAL::Arrangement_on_surface_2::is_valid</qualifiedname>
        <briefdescription>
<para>obtains <computeroutput>true</computeroutput> if <computeroutput>arr</computeroutput> represents a valid instance of <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2" kindref="compound">Arrangement_on_surface_2</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In particular, the functions checks the topological structure of the arrangement and assures that it is valid. In addition, the function performs several simple geometric tests to ensure the validity of some of the geometric properties of the arrangement. Namely, it checks that all arrangement vertices are associated with distinct points, and that the halfedges around every vertex are ordered clockwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Arrangement_on_surface_2.h" line="1007" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><anchor id="classCGAL_1_1Arrangement__on__surface__2_1arr_refaos"/></para>
    </briefdescription>
    <detaileddescription>
<para>An object <computeroutput>aos</computeroutput> of the class <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2" kindref="compound">Arrangement_on_surface_2</ref></computeroutput> represents the subdivision induced by a set of <formula id="211">$ x$</formula>-monotone curves and isolated points into maximally connected cells. The arrangement is represented as a doubly-connected edge-list (Dcel) such that each Dcel vertex is associated with a point of the plane and each edge is associated with an <formula id="211">$ x$</formula>-monotone curve whose interior is disjoint from all other edges and vertices. Recall that an arrangement edge is always comprised of a pair of twin Dcel halfedges.</para>
<para>The <computeroutput><ref refid="classCGAL_1_1Arrangement__on__surface__2" kindref="compound">Arrangement_on_surface_2</ref></computeroutput> template has two parameters: <itemizedlist>
<listitem>
<para>The <computeroutput>GeometryTraits</computeroutput> template-parameter should be substituted by a model of a geometry traits. The minimal requirements are defined by the <computeroutput><ref refid="classArrangementBasicTraits__2" kindref="compound">ArrangementBasicTraits_2</ref></computeroutput> concept. A model of this concept defines the types of <formula id="211">$ x$</formula>-monotone curves and two-dimensional points, namely <computeroutput><ref refid="classArrangementBasicTraits__2_1a0fc1f7acfd69a5eae393294b6870a1d2" kindref="member">ArrangementBasicTraits_2::X_monotone_curve_2</ref></computeroutput> and <computeroutput><ref refid="classArrangementBasicTraits__2_1a8cfc873dc62ce86f9479c4689845d4b3" kindref="member">ArrangementBasicTraits_2::Point_2</ref></computeroutput>, respectively, and supports basic geometric predicates on them. </para>
</listitem>
<listitem>
<para>The <computeroutput>TopologyTraits</computeroutput> template-parameter should be substituted by a class that is a model of the <computeroutput><ref refid="classArrangementTopologyTraits" kindref="compound">ArrangementTopologyTraits</ref></computeroutput> concept. </para>
</listitem>
</itemizedlist>
</para>
<para>The available traits classes and Dcel classes are described below.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classArrangementDcel" kindref="compound">ArrangementDcel</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2DCEL_1gaf9635869a3794a46d7dcfce63d7de2a6" kindref="member">Arr_default_dcel</ref>&lt;Traits&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classArrangementBasicTraits__2" kindref="compound">ArrangementBasicTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Funcs_1ga339cdba93f54001be303595689002396" kindref="member">CGAL::overlay()</ref></computeroutput></para>
</simplesect>
Insertion Functions</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Insert" kindref="compound">CGAL::insert()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Funcs_1ga9dd10a3efed93328acef4e4bcb175df9" kindref="member">CGAL::insert_non_intersecting_curve()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Funcs_1gad4aa37a4e938747028690579fb703d67" kindref="member">CGAL::insert_non_intersecting_curves()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Funcs_1gabfaca749e7d8c9547c143032a0e9df08" kindref="member">CGAL::insert_point()</ref></computeroutput></para>
</simplesect>
Removal functions</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Funcs_1gad41fab113e4ec35768bbcdfc6f3c54c4" kindref="member">CGAL::remove_edge()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Funcs_1gacbb4f22a59c77fb06a9d544cbbb04778" kindref="member">CGAL::remove_vertex()</ref></computeroutput></para>
</simplesect>
Input/output functions</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Read" kindref="compound">CGAL::IO::read()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Write" kindref="compound">CGAL::IO::write()</ref></computeroutput></para>
</simplesect>
Drawing function</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgArrangementOnSurface2Draw" kindref="compound">Drawing</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>CGAL::Arrangement_on_surface_2&lt; Traits, Default_planar_topology&lt; Traits, Dcel &gt;::Traits &gt;</label>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; Traits, Default_planar_topology&lt; Traits, Dcel &gt;::Traits &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>CGAL::Arrangement_on_surface_with_history_2&lt; Traits, Default_planar_topology&lt; Traits, Dcel &gt;::Traits &gt;</label>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; Traits, Default_planar_topology&lt; Traits, Dcel &gt;::Traits &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>CGAL::Arrangement_2&lt; Traits, Dcel &gt;</label>
        <link refid="classCGAL_1_1Arrangement__2"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>CGAL::Arrangement_on_surface_2&lt; GeometryTraits, TopologyTraits &gt;</label>
        <link refid="classCGAL_1_1Arrangement__on__surface__2"/>
      </node>
      <node id="4">
        <label>CGAL::Arrangement_on_surface_with_history_2&lt; GeometryTraits, TopologyTraits &gt;</label>
        <link refid="classCGAL_1_1Arrangement__on__surface__with__history__2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>CGAL::Arrangement_with_history_2&lt; Traits, Dcel &gt;</label>
        <link refid="classCGAL_1_1Arrangement__with__history__2"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="CGAL/Arrangement_on_surface_2.h" line="60" column="1" bodyfile="CGAL/Arrangement_on_surface_2.h" bodystart="60" bodyend="1011"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a0a420fcf3be620f1d335540db4e09882" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Arrangement_on_surface_2</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a9356bb3c652df06056ff2e978347d9ec" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Arrangement_on_surface_2</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a733b628ac48031d7bcf1666116be473e" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Arrangement_on_surface_2</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a9eccc63d91d51f0e1a100dc8d0927472" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>assign</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a74c5102548a855c11d1606af503db209" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Ccb_halfedge_circulator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a9d91ef74dc0f28ea9e17771a3e5c98f7" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Ccb_halfedge_const_circulator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a61a86c3bc36e5c7bdd872f676f23ffbd" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a5ac52dd17c71b6a547576d9be80a9d1e" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Edge_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a76a7b310b7483a74b472456d3bdb5d0f" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>edge_handles</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a90b95a65ca2ac31782a88f5ee8e83eba" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Edge_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a3ecce52c3dbd2d8ffd5910e5c6d2eaa2" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>edges_begin</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ab4e303e84da92938e0993f8fba5166d5" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>edges_end</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a513a10758cc81189887d5f0a492f0245" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Face_const_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a37eacf0eea59fc718f1990af11d4c7cc" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Face_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a5c97d46fc76cf9ab96ceced3b795b3c9" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a98c23a8194ab431397070a2091b183a9" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>face_handles</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a1ca07cc155a1d0afeb4fc22f21b01361" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Face_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a8e9012b82b8cca39ca1be9633506f30a" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>faces_begin</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a39327610c9f0fd29fdc295893feafc8c" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>faces_end</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1aaf85591f55aa56e0cd01dbed708cc691" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>fictitious_face</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a927ada675e6ff98a0128f224f38363a0" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>geometry_traits</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a7e4ae02b357a752a8253281c5c7e7225" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Geometry_traits_2</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a3418d290f692e88e110d4bb12b2c59d9" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Halfedge_around_vertex_circulator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a25a6b217cafc8fc0405ce4722deee429" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Halfedge_around_vertex_const_circulator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a22adafaff54a2c42e6c369f198870be5" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Halfedge_const_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a528e9ba3cc4229aa7bcaa5238fc95c8b" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Halfedge_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1aaae449ff521205c5ba837143c431d3d3" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Halfedge_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a1116c058acf1f8a68fa24b33d66d9e1c" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>halfedge_handles</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ae8c1944479e0e4cf89522c7dffacd12c" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Halfedge_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a145db83973c8b755f8ece345a6d34823" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>halfedges_begin</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a71bffb99db0dd4824334432ccede2ee5" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>halfedges_end</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a78f28e160cbfa03f72b18e923d48b208" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Hole_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ae2c8437722eb0a934f37e10bb5353110" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Hole_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a4c288118bcb430907f45d4e1aa0457e2" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Inner_ccb_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1af9177e11279f4580dbec6440394ca323" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Inner_ccb_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a7f2201fbb9015ddbbd22b7704e958e24" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_at_vertices</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a7f5406cb63765d270fe40204ff5c26ee" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_at_vertices</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1aa98a52e12f95e5ee2563284bb38ae5c0" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_at_vertices</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a5afb084b94adba3fa294724bd07ccb36" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_from_left_vertex</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a19a30e90d60a50c358a2cd6e2914f07e" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_from_left_vertex</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a1050c4d80f0c1d3341fc93026814df14" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_from_left_vertex</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a1f3b1ceca5219900301e4eefd9f80bd0" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_from_right_vertex</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a8caa061bb30c4644405b2f1bddb9fad4" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_from_right_vertex</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ad393e2c111499ba718ab875184e68f81" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_from_right_vertex</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a622e04b98c5d0ac773c0a1b6da94b242" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_in_face_interior</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a33209266056d7232956a34734aa717eb" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_in_face_interior</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a6e30bc5268f44568f44d6789b6d9546a" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>insert_in_face_interior</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a7128c62986a89e5d3525c47d02981894" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>is_empty</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a16544f844caabd160cc7246bccbb7f67" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a9f40454b182605de745963836ffc51f1" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Isolated_vertex_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a4b8bee4d94c47a284f3f5e14b1327315" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Isolated_vertex_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a21ad366a7eca1b0b6494e86162b661b6" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>merge_edge</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a04ddf22219d330f989d39beca666f1b9" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>modify_edge</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1aa34dd4faba726f8d8f912b48dc239e5d" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>modify_vertex</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ab3ce8cfa533c872fee6496a100121bb4" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>non_const_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a537397535cbbba053f4c06afe9a99e7d" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>non_const_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a4ed74bd085ec409f74e74ce59ff44c68" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>non_const_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ab8c9db7c49f1d4860cd47094a08a6779" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>number_of_edges</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ac8de48159182ed1dc27d508171c3adb7" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>number_of_faces</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ae4e63cf2763246726d5b705a45d2848f" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>number_of_halfedges</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ac23311b3fbeaea9972a49b2c51997713" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>number_of_isolated_vertices</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1abeed5715498a29e1e7f869346998ce5d" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>number_of_unbounded_faces</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a07afeb623d32ef12745c9b368233e4ea" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a6456e981d377cd6a13b0df360f3a455d" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>number_of_vertices_at_infinity</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1af3c9cc5b16f0d5f48847cdfe66b195b8" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1aaa53140e273b90a2cc3869d885e6d2b9" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Outer_ccb_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a0c3fd7478061fcd62b415fc529399546" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Outer_ccb_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1aed833c3b69b94eae54994439d70a83a2" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Point_2</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a89618f53b378427e38b7d68fb9f86873" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>remove_edge</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ade2ba2bbc1bf47a81bfbcab204d269ca" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>remove_isolated_vertex</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a1ec2d7a55bfe570ed29dd6522a9f6f23" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Self</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a5dd7fd20f6ea849e7b0adb7f4f798131" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Size</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a2247def3072f9c94c659c68c55388dee" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>split_edge</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a93d5adf653445f89871ea08cb6db3f10" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Topology_traits</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a82638900556c9b8b39d5c207b1a456da" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>unbounded_face</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a65536568e9b3ec1abf95d883f832f980" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Unbounded_face_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a498b04d51254fac9c16472d2de9412f1" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Unbounded_face_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a1807df960b1c3ebdb7e9afd2443b8651" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>unbounded_faces_begin</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a35f815859d85d7b465a4e37129aaa08f" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>unbounded_faces_end</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a47fac787fb37cd812814fbb9b6ab9acc" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Vertex_const_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a6e3184096bbb26b96941800251966713" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Vertex_const_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a43113edb82930474c25b57b9a8e2143f" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Vertex_handle</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1af832b7943d1dae0a9160811e68065d23" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>vertex_handles</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ac9e0d41a482a1ce382983871b8e7168d" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>Vertex_iterator</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1aa042e6d15902031a2df0f5c567deb48d" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>vertices_begin</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1a13b01c9fe13b28f40311bcf5df5f2372" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>vertices_end</name></member>
      <member refid="classCGAL_1_1Arrangement__on__surface__2_1ad7f12c4c83fa1d83a3f0d5ceb16c21e1" prot="public" virt="non-virtual"><scope>CGAL::Arrangement_on_surface_2</scope><name>X_monotone_curve_2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
