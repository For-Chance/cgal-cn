<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classArrangementVerticalRayShoot__2" kind="class" language="C++" prot="public">
    <compoundname>ArrangementVerticalRayShoot_2</compoundname>
    <includes local="no">Concepts/ArrangementVerticalRayShoot_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classArrangementVerticalRayShoot__2_1ac76ed5933ac3d26189ca846d96de9c4e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type ArrangementVerticalRayShoot_2::Arrangement_2</definition>
        <argsstring></argsstring>
        <name>Arrangement_2</name>
        <qualifiedname>ArrangementVerticalRayShoot_2::Arrangement_2</qualifiedname>
        <briefdescription>
<para>the associated arrangement type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="44" column="26" bodyfile="Concepts/ArrangementVerticalRayShoot_2.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classArrangementVerticalRayShoot__2_1a33d0c9190d4a9bfd11bb410f14722577" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type ArrangementVerticalRayShoot_2::Point_2</definition>
        <argsstring></argsstring>
        <name>Point_2</name>
        <qualifiedname>ArrangementVerticalRayShoot_2::Point_2</qualifiedname>
        <briefdescription>
<para>equivalent to <computeroutput>Arrangement_2::Point_2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="49" column="26" bodyfile="Concepts/ArrangementVerticalRayShoot_2.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classArrangementVerticalRayShoot__2_1ace4034f248df76e4f5ddc57e51536428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ArrangementVerticalRayShoot_2::ArrangementVerticalRayShoot_2</definition>
        <argsstring>()</argsstring>
        <name>ArrangementVerticalRayShoot_2</name>
        <qualifiedname>ArrangementVerticalRayShoot_2::ArrangementVerticalRayShoot_2</qualifiedname>
        <briefdescription>
<para>default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classArrangementVerticalRayShoot__2_1a90e95f5355e662a81b288a43f92b9a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ArrangementVerticalRayShoot_2::ArrangementVerticalRayShoot_2</definition>
        <argsstring>(const Arrangement_2 &amp;arr)</argsstring>
        <name>ArrangementVerticalRayShoot_2</name>
        <qualifiedname>ArrangementVerticalRayShoot_2::ArrangementVerticalRayShoot_2</qualifiedname>
        <param>
          <type>const <ref refid="classArrangementVerticalRayShoot__2_1ac76ed5933ac3d26189ca846d96de9c4e" kindref="member">Arrangement_2</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>constructs a ray-shooting object <computeroutput>rs</computeroutput> attached to the given arrangement <computeroutput>arr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="65" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Query Functions</header>
      <memberdef kind="function" id="classArrangementVerticalRayShoot__2_1ab5c80d9b290a309278ba1296857e11f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Arr_point_location_result&lt; <ref refid="classArrangementVerticalRayShoot__2_1ac76ed5933ac3d26189ca846d96de9c4e" kindref="member">Arrangement_2</ref> &gt;::Type</type>
        <definition>Arr_point_location_result&lt; Arrangement_2 &gt;::Type ArrangementVerticalRayShoot_2::ray_shoot_up</definition>
        <argsstring>(const Point_2 &amp;q) const</argsstring>
        <name>ray_shoot_up</name>
        <qualifiedname>ArrangementVerticalRayShoot_2::ray_shoot_up</qualifiedname>
        <param>
          <type>const <ref refid="classArrangementVerticalRayShoot__2_1a33d0c9190d4a9bfd11bb410f14722577" kindref="member">Point_2</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>locates the arrangement feature that is first hit by an upward-directed vertical ray emanating from the query point <computeroutput>q</computeroutput>, and returns a handle for this feature. </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns a discriminated union container of the following bounded types: <itemizedlist>
<listitem>
<para><computeroutput>Arrangement_2::Halfedge_const_handle</computeroutput>, in case the vertical ray hits an arrangement edge; </para>
</listitem>
<listitem>
<para><computeroutput>Arrangement_2::Vertex_const_handle</computeroutput>, in case the vertical ray hits an arrangement vertex. </para>
</listitem>
<listitem>
<para><computeroutput>Arrangement_2::Face_const_handle</computeroutput> for the unbounded arrangement face, in case <computeroutput>q</computeroutput> lies above the upper envelope of the arrangement. </para>
</listitem>
</itemizedlist>
<simplesect kind="pre"><para><computeroutput>rs</computeroutput> is attached to a valid arrangement instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="88" column="34"/>
      </memberdef>
      <memberdef kind="function" id="classArrangementVerticalRayShoot__2_1a8f9dc418f3682f40f2b6d27c75c169a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Arr_point_location_result&lt; <ref refid="classArrangementVerticalRayShoot__2_1ac76ed5933ac3d26189ca846d96de9c4e" kindref="member">Arrangement_2</ref> &gt;::Type</type>
        <definition>Arr_point_location_result&lt; Arrangement_2 &gt;::Type ArrangementVerticalRayShoot_2::ray_shoot_down</definition>
        <argsstring>(const Point_2 &amp;q) const</argsstring>
        <name>ray_shoot_down</name>
        <qualifiedname>ArrangementVerticalRayShoot_2::ray_shoot_down</qualifiedname>
        <param>
          <type>const <ref refid="classArrangementVerticalRayShoot__2_1a33d0c9190d4a9bfd11bb410f14722577" kindref="member">Point_2</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>locates the arrangement feature that is first hit by a downward-directed vertical ray emanating from the query point <computeroutput>q</computeroutput>, and returns a handle for this feature. </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns a discriminated union container of the following bounded types: <itemizedlist>
<listitem>
<para><computeroutput>Arrangement_2::Halfedge_const_handle</computeroutput>, in case the vertical ray hits an arrangement edge; </para>
</listitem>
<listitem>
<para><computeroutput>Arrangement_2::Vertex_const_handle</computeroutput>, in case the vertical ray hits an arrangement vertex. </para>
</listitem>
<listitem>
<para><computeroutput>Arrangement_2::Face_const_handle</computeroutput> for the unbounded arrangement face, in case <computeroutput>q</computeroutput> lies below the lower envelope of the arrangement. </para>
</listitem>
</itemizedlist>
<simplesect kind="pre"><para><computeroutput>rs</computeroutput> is attached to a valid arrangement instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="106" column="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classArrangementVerticalRayShoot__2_1aec9ef5dd1cd6a450906b299a833668f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArrangementVerticalRayShoot_2::attach</definition>
        <argsstring>(const Arrangement_2 &amp;arr)</argsstring>
        <name>attach</name>
        <qualifiedname>ArrangementVerticalRayShoot_2::attach</qualifiedname>
        <param>
          <type>const <ref refid="classArrangementVerticalRayShoot__2_1ac76ed5933ac3d26189ca846d96de9c4e" kindref="member">Arrangement_2</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>attaches <computeroutput>rs</computeroutput> to the given arrangement <computeroutput>arr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="116" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classArrangementVerticalRayShoot__2_1a1236b3ea3284af441f542f3ca36f0392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArrangementVerticalRayShoot_2::detach</definition>
        <argsstring>()</argsstring>
        <name>detach</name>
        <qualifiedname>ArrangementVerticalRayShoot_2::detach</qualifiedname>
        <briefdescription>
<para>detaches <computeroutput>rs</computeroutput> from the arrangement it is currently attached to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="121" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A model of the <computeroutput><ref refid="classArrangementVerticalRayShoot__2" kindref="compound">ArrangementVerticalRayShoot_2</ref></computeroutput> concept can answer vertical ray-shooting queries on an arrangement attached to it. Namely, given a <computeroutput>Arrangement_2::Point_2</computeroutput> object, representing a point in the plane, it returns the arrangement feature (edge or vertex) that lies strictly above it (or below it). By &quot;strictly&quot; we mean that if the query point lies on an arrangement edge (or on an arrangement vertex) this edge will <emphasis>not</emphasis> be the query result, but the feature lying above or below it. (An exception to this rule is the degenerate case where the query point lies in the interior of a vertical edge.) Note that it may happen that the query point lies above the upper envelope (or below the lower envelope) of the arrangement, and the vertical ray emanating from the query point goes to infinity without hitting any arrangement feature on its way. In this case the unbounded face is returned. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Arr__naive__point__location" kindref="compound">CGAL::Arr_naive_point_location</ref>&lt;Arrangement&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Arr__walk__along__line__point__location" kindref="compound">CGAL::Arr_walk_along_line_point_location</ref>&lt;Arrangement&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Arr__trapezoid__ric__point__location" kindref="compound">CGAL::Arr_trapezoid_ric_point_location</ref>&lt;Arrangement&gt;</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Arr__landmarks__point__location" kindref="compound">CGAL::Arr_landmarks_point_location</ref>&lt;Arrangement,Generator&gt;</computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Arr__naive__point__location" kindref="compound">CGAL::Arr_naive_point_location</ref>&lt;Arrangement&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Arr__walk__along__line__point__location" kindref="compound">CGAL::Arr_walk_along_line_point_location</ref>&lt;Arrangement&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Arr__trapezoid__ric__point__location" kindref="compound">CGAL::Arr_trapezoid_ric_point_location</ref>&lt;Arrangement&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Arr__landmarks__point__location" kindref="compound">CGAL::Arr_landmarks_point_location</ref>&lt;Arrangement,Generator&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Arr__point__location__result" kindref="compound">CGAL::Arr_point_location_result</ref>&lt;Arrangement&gt;</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/ArrangementVerticalRayShoot_2.h" line="35" column="1" bodyfile="Concepts/ArrangementVerticalRayShoot_2.h" bodystart="35" bodyend="125"/>
    <listofallmembers>
      <member refid="classArrangementVerticalRayShoot__2_1ac76ed5933ac3d26189ca846d96de9c4e" prot="public" virt="non-virtual"><scope>ArrangementVerticalRayShoot_2</scope><name>Arrangement_2</name></member>
      <member refid="classArrangementVerticalRayShoot__2_1ace4034f248df76e4f5ddc57e51536428" prot="public" virt="non-virtual"><scope>ArrangementVerticalRayShoot_2</scope><name>ArrangementVerticalRayShoot_2</name></member>
      <member refid="classArrangementVerticalRayShoot__2_1a90e95f5355e662a81b288a43f92b9a7a" prot="public" virt="non-virtual"><scope>ArrangementVerticalRayShoot_2</scope><name>ArrangementVerticalRayShoot_2</name></member>
      <member refid="classArrangementVerticalRayShoot__2_1aec9ef5dd1cd6a450906b299a833668f8" prot="public" virt="non-virtual"><scope>ArrangementVerticalRayShoot_2</scope><name>attach</name></member>
      <member refid="classArrangementVerticalRayShoot__2_1a1236b3ea3284af441f542f3ca36f0392" prot="public" virt="non-virtual"><scope>ArrangementVerticalRayShoot_2</scope><name>detach</name></member>
      <member refid="classArrangementVerticalRayShoot__2_1a33d0c9190d4a9bfd11bb410f14722577" prot="public" virt="non-virtual"><scope>ArrangementVerticalRayShoot_2</scope><name>Point_2</name></member>
      <member refid="classArrangementVerticalRayShoot__2_1a8f9dc418f3682f40f2b6d27c75c169a7" prot="public" virt="non-virtual"><scope>ArrangementVerticalRayShoot_2</scope><name>ray_shoot_down</name></member>
      <member refid="classArrangementVerticalRayShoot__2_1ab5c80d9b290a309278ba1296857e11f1" prot="public" virt="non-virtual"><scope>ArrangementVerticalRayShoot_2</scope><name>ray_shoot_up</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
