<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="Arrangement_on_surface_2_2polylines_8cpp-example" kind="example">
    <compoundname>Arrangement_on_surface_2/polylines.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename="Arrangement_on_surface_2/polylines.cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructing<sp/>an<sp/>arrangement<sp/>of<sp/>polylines.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/draw_arrangement_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arr_polylines.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arr_print.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Traits<sp/>traits;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Arrangement<sp/>arr(&amp;traits);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>polyline_construct<sp/>=<sp/>traits.construct_curve_2_object();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Point<sp/>points1[5];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points1[0]<sp/>=<sp/>Point(0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points1[1]<sp/>=<sp/>Point(2,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points1[2]<sp/>=<sp/>Point(3,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points1[3]<sp/>=<sp/>Point(4,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points1[4]<sp/>=<sp/>Point(6,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pi1<sp/>=<sp/>polyline_construct(&amp;points1[0],<sp/>&amp;points1[5]);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::list&lt;Point&gt;<sp/>points2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(1,<sp/>3));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(0,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(1,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(2,<sp/>1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(3,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(4,<sp/>1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(5,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(6,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(5,<sp/>3));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>points2.push_back(Point(4,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pi2<sp/>=<sp/>polyline_construct(points2.begin(),<sp/>points2.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Segment&gt;<sp/>segs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>segs.push_back(Segment(Point(0,<sp/>2),<sp/>Point(1,<sp/>2)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>segs.push_back(Segment(Point(1,<sp/>2),<sp/>Point(3,<sp/>6)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>segs.push_back(Segment(Point(3,<sp/>6),<sp/>Point(5,<sp/>2)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pi3<sp/>=<sp/>polyline_construct(segs.begin(),<sp/>segs.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgArrangementOnSurface2Insert_1gaf7d5aac2640c2a706f8c5e6adc8a7e94" kindref="member">insert</ref>(arr,<sp/>pi1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgArrangementOnSurface2Insert_1gaf7d5aac2640c2a706f8c5e6adc8a7e94" kindref="member">insert</ref>(arr,<sp/>pi2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgArrangementOnSurface2Insert_1gaf7d5aac2640c2a706f8c5e6adc8a7e94" kindref="member">insert</ref>(arr,<sp/>pi3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print_arrangement_size(arr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>arrangement<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgDrawPolygonSet2_1gac5ad1c3be15e88df46b096885a023ff4" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Boolean_set_operations_2.tag">CGAL::draw</ref>(arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="examples.txt"/>
  </compounddef>
</doxygen>
