<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Arr__triangulation__point__location" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Arr_triangulation_point_location</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Arrangement_::Observer</basecompoundref>
    <includes local="no">CGAL/Arr_triangulation_point_location.h</includes>
    <templateparamlist>
      <param>
        <type>typename Arrangement_</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para><anchor id="classCGAL_1_1Arr__triangulation__point__location_1arr_reftri_pl"/></para>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput><ref refid="classCGAL_1_1Arr__triangulation__point__location" kindref="compound">Arr_triangulation_point_location</ref></computeroutput> class template implements a point-location (and vertical ray-shooting) strategy that is based on triangulation. In particular, the algorithm uses a constrained triangulation, provided by the 2D Triangulations package, as a search structure. Every time the arrangement is modified the constrained triangulation search-structure is reconstructed from scratch, where the edges of the arrangement are set to be the constrained edges of the triangulation. This strategy is inefficient (especially when the number of modifications applied to the arrangement is high) and provided only for educational purposes.</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classArrangementPointLocation__2" kindref="compound">ArrangementPointLocation_2</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classArrangementVerticalRayShoot__2" kindref="compound">ArrangementVerticalRayShoot_2</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classArrangementPointLocation__2" kindref="compound">ArrangementPointLocation_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classArrangementVerticalRayShoot__2" kindref="compound">ArrangementVerticalRayShoot_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Arr__point__location__result" kindref="compound">CGAL::Arr_point_location_result</ref>&lt;Arrangement&gt;</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Arrangement_::Observer</label>
      </node>
      <node id="1">
        <label>CGAL::Arr_triangulation_point_location&lt; Arrangement_ &gt;</label>
        <link refid="classCGAL_1_1Arr__triangulation__point__location"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Arrangement_::Observer</label>
      </node>
      <node id="1">
        <label>CGAL::Arr_triangulation_point_location&lt; Arrangement_ &gt;</label>
        <link refid="classCGAL_1_1Arr__triangulation__point__location"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="CGAL/Arr_triangulation_point_location.h" line="25" column="1" bodyfile="CGAL/Arr_triangulation_point_location.h" bodystart="25" bodyend="25"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
