<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PMP__hole__filling__grp" kind="group">
    <compoundname>PMP_hole_filling_grp</compoundname>
    <title>Hole Filling</title>
    <innerclass refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" prot="public">CGAL::Polygon_mesh_processing::Hole_filling::Default_visitor</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga3abdf2d0558822e85f060966b69cae98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Polygon_mesh_processing::triangulate_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>triangulates a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on the choice of the underlying algorithm different preconditions apply. When using the 2D constrained Delaunay triangulation, the border edges of the hole must not intersect the surface. Otherwise, additionally, the boundary of the hole must not contain any non-manifold vertex. The patch generated does not introduce non-manifold edges nor degenerate triangles. If a hole cannot be triangulated, <computeroutput>pmesh</computeroutput> is not modified and nothing is recorded in the face output iterator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh containing the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>border_halfedge</parametername>
</parameternamelist>
<parameterdescription>
<para>a border halfedge incident to the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="8" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, use the Delaunay triangulation facet search space. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If no valid triangulation can be found in this search space, the algorithm falls back to the non-Delaunay triangulations search space to find a solution. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_2d_constrained_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the points of the boundary of the hole are used to estimate a fitting plane and a 2D constrained Delaunay triangulation is then used to fill the hole projected in the fitting plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the boundary of the hole is not planar (according to the parameter <computeroutput>threshold_distance</computeroutput>) or if no valid 2D triangulation can be found, the algorithm falls back to the method using the 3D Delaunay triangulation. This parameter is a good choice for near planar holes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum distance between the vertices of the hole boundary and the least squares plane fitted to this boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>one quarter of the height of the bounding box of the hole </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is used only in conjunction with the parameter <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_use_cubic_algorithm</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Set this parameter to <computeroutput>true</computeroutput> if you only want to use the Delaunay based versions of the algorithm, skipping the cubic search space one in case of failure. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If <computeroutput>true</computeroutput>, <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput> or <computeroutput>use_delaunay_triangulation</computeroutput> must be set to <computeroutput>true</computeroutput> otherwise nothing will be done. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track when entering a given phase of the algorithm </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">Hole_filling::Default_visitor</ref> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the face output iterator</para>
</simplesect>
<xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>handle islands </para>
<para>Replace border_halfedge by a range of border halfedges. The first one would describe the hole, the other ones would describe the islands. </para>
<para>Then, insert the holes vertices in the set of possibilities for connecting vertices together </para>
<para>handle the case where an island is reduced to a point </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="167" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="167" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1gad2d3c43bce0ef90a16530478196d7f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::triangulate_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>triangulates a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.6 and the overload with the named parameter <computeroutput>face_output_iterator</computeroutput> should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="258" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="258" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga9868fac4d9dca77462ad7828bc99d8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_and_refine_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>triangulates and refines a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh which has the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>border_halfedge</parametername>
</parameternamelist>
<parameterdescription>
<para>a border halfedge incident to the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="10" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch vertices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> for patch vertices </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, use the Delaunay triangulation facet search space. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If no valid triangulation can be found in this search space, the algorithm falls back to the non-Delaunay triangulations search space to find a solution. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_2d_constrained_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the points of the boundary of the hole are used to estimate a fitting plane and a 2D constrained Delaunay triangulation is then used to fill the hole projected in the fitting plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the boundary of the hole is not planar (according to the parameter <computeroutput>threshold_distance</computeroutput>) or if no valid 2D triangulation can be found, the algorithm falls back to the method using the 3D Delaunay triangulation. This parameter is a good choice for near planar holes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum distance between the vertices of the hole boundary and the least squares plane fitted to this boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>one quarter of the height of the bounding box of the hole </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is used only in conjunction with the parameter <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_use_cubic_algorithm</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Set this parameter to <computeroutput>true</computeroutput> if you only want to use the Delaunay based versions of the algorithm, skipping the cubic search space one in case of failure. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If <computeroutput>true</computeroutput>, <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput> or <computeroutput>use_delaunay_triangulation</computeroutput> must be set to <computeroutput>true</computeroutput> otherwise nothing will be done. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>density_control_factor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>factor to control density of the output mesh, where larger values cause denser refinements, as in <computeroutput><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">refine()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold> <formula id="20">$ \sqrt{2}$</formula> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track when entering a given phase of the algorithm </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">Hole_filling::Default_visitor</ref> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>pair of face and vertex output iterator</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__hole__filling__grp_1ga3abdf2d0558822e85f060966b69cae98" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">CGAL::Polygon_mesh_processing::refine()</ref></para>
</simplesect>
<xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>handle islands </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="372" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="372" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga8d1d144e74cd9a60e0c8a2ab9f39b7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceOutputIterator</type>
          </param>
          <param>
            <type>typename VertexOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; FaceOutputIterator, VertexOutputIterator &gt;</type>
        <definition>std::pair&lt; FaceOutputIterator, VertexOutputIterator &gt; CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, FaceOutputIterator face_out, VertexOutputIterator vertex_out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_and_refine_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>FaceOutputIterator</type>
          <declname>face_out</declname>
        </param>
        <param>
          <type>VertexOutputIterator</type>
          <declname>vertex_out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>triangulates and refines a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.6 and the overload with the named parameters <computeroutput>face_output_iterator</computeroutput> and <computeroutput>vertex_output_iterator</computeroutput> should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> for patch vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="433" column="5" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="433" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga18eac756a8f8e5d5f73e645fd4e26cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_refine_and_fair_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>triangulates, refines and fairs a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh which has the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>border_halfedge</parametername>
</parameternamelist>
<parameterdescription>
<para>a border halfedge incident to the hole</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="11" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch vertices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> for patch vertices </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, use the Delaunay triangulation facet search space. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If no valid triangulation can be found in this search space, the algorithm falls back to the non-Delaunay triangulations search space to find a solution. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_2d_constrained_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the points of the boundary of the hole are used to estimate a fitting plane and a 2D constrained Delaunay triangulation is then used to fill the hole projected in the fitting plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the boundary of the hole is not planar (according to the parameter <computeroutput>threshold_distance</computeroutput>) or if no valid 2D triangulation can be found, the algorithm falls back to the method using the 3D Delaunay triangulation. This parameter is a good choice for near planar holes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum distance between the vertices of the hole boundary and the least squares plane fitted to this boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>one quarter of the height of the bounding box of the hole </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is used only in conjunction with the parameter <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>density_control_factor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>factor to control density of the output mesh, where larger values cause denser refinements, as in <computeroutput><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">refine()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold> <formula id="20">$ \sqrt{2}$</formula> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>fairing_continuity</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A value controlling the tangential continuity of the output surface patch. The possible values are 0, 1 and 2, referring to the C<superscript>0</superscript>, C<superscript>1</superscript> and C<superscript>2</superscript> continuity. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The larger <computeroutput>fairing_continuity</computeroutput> gets, the more fixed vertices are required. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sparse_linear_solver</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of the sparse linear solver used for fairing </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classSparseLinearAlgebraWithFactorTraits__d" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">SparseLinearAlgebraWithFactorTraits_d</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If <ref refid="thirdparty_1thirdpartyEigen" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Eigen</ref> 3.2 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined, then the following overload of <computeroutput><ref refid="classCGAL_1_1Eigen__solver__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">Eigen_solver_traits</ref></computeroutput> is provided as default value:<linebreak/>
 <computeroutput><ref refid="classCGAL_1_1Eigen__solver__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::Eigen_solver_traits</ref>&lt;Eigen::SparseLU&lt;<ref refid="structCGAL_1_1Eigen__sparse__matrix" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::Eigen_sparse_matrix</ref>&lt;double&gt;::EigenType, Eigen::COLAMDOrdering&lt;int&gt; &gt; &gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track when entering a given phase of the algorithm </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">Hole_filling::Default_visitor</ref> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>tuple of <computeroutput>bool</computeroutput> with <computeroutput>true</computeroutput> if fairing is successful, and the face and vertex output iterator</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__hole__filling__grp_1ga3abdf2d0558822e85f060966b69cae98" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">CGAL::Polygon_mesh_processing::refine()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__meshing__grp_1ga9988e9a2eaf92740b3009d06c792f2cd" kindref="member">CGAL::Polygon_mesh_processing::fair()</ref></para>
</simplesect>
<xrefsect id="todo_1_todo000010"><xreftitle>Todo</xreftitle><xrefdescription><para>handle islands </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="561" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="561" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1gae594ae7862ab6f5f9a06755500fb93fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceOutputIterator</type>
          </param>
          <param>
            <type>typename VertexOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; bool, FaceOutputIterator, VertexOutputIterator &gt;</type>
        <definition>std::tuple&lt; bool, FaceOutputIterator, VertexOutputIterator &gt; CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, FaceOutputIterator face_out, VertexOutputIterator vertex_out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_refine_and_fair_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>FaceOutputIterator</type>
          <declname>face_out</declname>
        </param>
        <param>
          <type>VertexOutputIterator</type>
          <declname>vertex_out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>triangulates, refines, and fairs a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.6 and the overload with the named parameters <computeroutput>face_output_iterator</computeroutput> and <computeroutput>vertex_output_iterator</computeroutput> should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> for patch vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="628" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="628" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1gac1054e734715493e32e78d65fc1f0baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange1</type>
          </param>
          <param>
            <type>typename PointRange2</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::triangulate_hole_polyline</definition>
        <argsstring>(const PointRange1 &amp;points, const PointRange2 &amp;third_points, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_hole_polyline</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_hole_polyline</qualifiedname>
        <param>
          <type>const PointRange1 &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PointRange2 &amp;</type>
          <declname>third_points</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>creates triangles to fill the hole defined by points in the range <computeroutput>points</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Triangles are recorded into <computeroutput>out</computeroutput> using the indices of the input points in the range <computeroutput>points</computeroutput>. Note that no degenerate triangles will be produced. If no triangulation can be found, then nothing is recorded in <computeroutput>out</computeroutput>.</para>
<para>If faces incident to the polyline outside the hole are known, it is recommended to use this function. The point range <computeroutput>third_points</computeroutput> indicates for each pair of consecutive points in the range <computeroutput>points</computeroutput>, the third point of the face this segment is incident to. It influences the choice of the best triangulation while avoiding overfolding.</para>
<para>Note that the ranges <computeroutput>points</computeroutput> and <computeroutput>third_points</computeroutput> may or may not contain duplicated first point at the end of sequence.</para>
<para><simplesect kind="pre"><para><computeroutput>third_points.size() == points.size()</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of points, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput>, to collect patch faces. A specialization for <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::value_type_traits</ref>&lt;<ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref>&gt;</computeroutput> must be available, and the corresponding value type <computeroutput>type</computeroutput> must have a constructor <computeroutput>type(int p0, int p1, int p2)</computeroutput> available. The indices correspond to the ones of input points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of input points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>third_points</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of third points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output patch triangles, described by indices of points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, use the Delaunay triangulation facet search space. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If no valid triangulation can be found in this search space, the algorithm falls back to the non-Delaunay triangulations search space to find a solution. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_2d_constrained_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the points of the boundary of the hole are used to estimate a fitting plane and a 2D constrained Delaunay triangulation is then used to fill the hole projected in the fitting plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the boundary of the hole is not planar (according to the parameter <computeroutput>threshold_distance</computeroutput>) or if no valid 2D triangulation can be found, the algorithm falls back to the method using the 3D Delaunay triangulation. This parameter is a good choice for near planar holes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum distance between the vertices of the hole boundary and the least squares plane fitted to this boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>one quarter of the height of the bounding box of the hole </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is used only in conjunction with the parameter <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track when entering a given phase of the algorithm </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">Hole_filling::Default_visitor</ref> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><xrefsect id="todo_1_todo000011"><xreftitle>Todo</xreftitle><xrefdescription><para>handle islands </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="721" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="721" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga3294d97ef095a5ac3b52bc4f0c2c214c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::triangulate_hole_polyline</definition>
        <argsstring>(const PointRange &amp;points, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_hole_polyline</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_hole_polyline</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Same as above but the range of third points is omitted. </para>
        </briefdescription>
        <detaileddescription>
<para>They are not taken into account in the cost computation that leads the hole filling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="812" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="812" bodyend="820"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions to fill holes given as a range of halfedges or as range of points. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
