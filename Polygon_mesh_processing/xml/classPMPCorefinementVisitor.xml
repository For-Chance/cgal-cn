<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classPMPCorefinementVisitor" kind="class" language="C++" prot="public">
    <compoundname>PMPCorefinementVisitor</compoundname>
    <includes local="no">Concepts/PMPCorefinementVisitor.h</includes>
      <sectiondef kind="user-defined">
      <header>Functions used by corefine() when faces are split</header>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a68525c003867c6cbf68f522d949e6a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::before_subface_creations</definition>
        <argsstring>(face_descriptor f_split, const Triangle_mesh &amp;tm)</argsstring>
        <name>before_subface_creations</name>
        <qualifiedname>PMPCorefinementVisitor::before_subface_creations</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a72d353688616d1746e2dd8990a4c3803" kindref="member">face_descriptor</ref></type>
          <declname>f_split</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called before the triangulation of <computeroutput>f_split</computeroutput> in <computeroutput>tm</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>f_split</computeroutput> will be one of the faces of the triangulation. Each subsequent call to <computeroutput><ref refid="classPMPCorefinementVisitor_1aac745bdd3bd7f3ca4d0fd6ced6f4fca8" kindref="member">before_subface_created()</ref></computeroutput>/<computeroutput><ref refid="classPMPCorefinementVisitor_1adc77b92dd3b34ecf38256843f732c2d7" kindref="member">after_subface_created()</ref></computeroutput> will correspond to the creation of a new face of the triangulation of <computeroutput>f_split</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="29" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a7bdf1b81fd005654e19fc344aa026863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::after_subface_creations</definition>
        <argsstring>(const Triangle_mesh &amp;tm)</argsstring>
        <name>after_subface_creations</name>
        <qualifiedname>PMPCorefinementVisitor::after_subface_creations</qualifiedname>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called when the triangulation of a face in <computeroutput>tm</computeroutput> is finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="31" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1aac745bdd3bd7f3ca4d0fd6ced6f4fca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::before_subface_created</definition>
        <argsstring>(const Triangle_mesh &amp;tm)</argsstring>
        <name>before_subface_created</name>
        <qualifiedname>PMPCorefinementVisitor::before_subface_created</qualifiedname>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called before creating a new triangle face in <computeroutput>tm</computeroutput> to triangulate the face passed to <computeroutput><ref refid="classPMPCorefinementVisitor_1a68525c003867c6cbf68f522d949e6a15" kindref="member">before_subface_creations()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="33" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1adc77b92dd3b34ecf38256843f732c2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::after_subface_created</definition>
        <argsstring>(face_descriptor f_new, const Triangle_mesh &amp;tm)</argsstring>
        <name>after_subface_created</name>
        <qualifiedname>PMPCorefinementVisitor::after_subface_created</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a72d353688616d1746e2dd8990a4c3803" kindref="member">face_descriptor</ref></type>
          <declname>f_new</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called after creating a new triangle face <computeroutput>f_new</computeroutput> in <computeroutput>tm</computeroutput> to triangulate the face passed to <computeroutput><ref refid="classPMPCorefinementVisitor_1a68525c003867c6cbf68f522d949e6a15" kindref="member">before_subface_creations()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the call is placed just after a call to <computeroutput>add_face()</computeroutput> so the halfedge pointer is not set yet. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="36" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions used by corefine() when edges are split or created</header>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a2c228867e23eef9b90c2826d303ca8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::before_edge_split</definition>
        <argsstring>(halfedge_descriptor h, const Triangle_mesh &amp;tm)</argsstring>
        <name>before_edge_split</name>
        <qualifiedname>PMPCorefinementVisitor::before_edge_split</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called before the edge of <computeroutput>h</computeroutput> in <computeroutput>tm</computeroutput> is split. </para>
        </briefdescription>
        <detaileddescription>
<para>Each subsequent call to <computeroutput><ref refid="classPMPCorefinementVisitor_1a7e109ecde7ed610a1af1c53d4d8cffe9" kindref="member">edge_split()</ref></computeroutput> until the call to <computeroutput><ref refid="classPMPCorefinementVisitor_1af2f61a0a46ba27c8bc011838fc987058" kindref="member">after_edge_split()</ref></computeroutput> will correspond to the split of that edge. If <computeroutput>edge_split(h_i, tm)</computeroutput> is called for <computeroutput>i=1</computeroutput> to <computeroutput>n</computeroutput>, <computeroutput>h_1</computeroutput>, <computeroutput>h_2</computeroutput>, ... ,<computeroutput>h_n</computeroutput>, <computeroutput>h</computeroutput> is the sequence of halfedges representing the edge split (with the same initial orientation). There is only one call per edge. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="46" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a7e109ecde7ed610a1af1c53d4d8cffe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::edge_split</definition>
        <argsstring>(halfedge_descriptor hnew, const Triangle_mesh &amp;tm)</argsstring>
        <name>edge_split</name>
        <qualifiedname>PMPCorefinementVisitor::edge_split</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>hnew</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called when a new split is done. The target of <computeroutput>hnew</computeroutput> is a new split vertex. There is only one call per edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="48" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1af2f61a0a46ba27c8bc011838fc987058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::after_edge_split</definition>
        <argsstring>()</argsstring>
        <name>after_edge_split</name>
        <qualifiedname>PMPCorefinementVisitor::after_edge_split</qualifiedname>
        <briefdescription>
<para>called when the split of the halfedge <computeroutput>h</computeroutput> passed at the later call to <computeroutput><ref refid="classPMPCorefinementVisitor_1a2c228867e23eef9b90c2826d303ca8a5" kindref="member">before_edge_split()</ref></computeroutput> is finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="50" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1ab819d40a2bda062d883ac2a6fb62e8f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::add_retriangulation_edge</definition>
        <argsstring>(halfedge_descriptor h, const Triangle_mesh &amp;tm)</argsstring>
        <name>add_retriangulation_edge</name>
        <qualifiedname>PMPCorefinementVisitor::add_retriangulation_edge</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called when a new edge has been added to triangulate a face. </para>
        </briefdescription>
        <detaileddescription>
<para>The face triangulated is <computeroutput>f_split</computeroutput> in the last call to <computeroutput>before_subface_creations(f_split, tm)</computeroutput>. There is only one call per edge. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="53" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions used by corefine() when a new vertex is created.</header>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1acd13f3e9b14a96191d1cc07f0014897f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::intersection_point_detected</definition>
        <argsstring>(std::size_t i_id, int sdim, halfedge_descriptor h_e, halfedge_descriptor h_f, const Triangle_mesh &amp;tm_e, const Triangle_mesh &amp;tm_f, bool is_target_coplanar, bool is_source_coplanar)</argsstring>
        <name>intersection_point_detected</name>
        <qualifiedname>PMPCorefinementVisitor::intersection_point_detected</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sdim</declname>
        </param>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_e</declname>
        </param>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_f</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_e</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_target_coplanar</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_source_coplanar</declname>
        </param>
        <briefdescription>
<para>called when a new intersection point is detected. </para>
        </briefdescription>
        <detaileddescription>
<para>The intersection is detected using a face of <computeroutput>tm_f</computeroutput> and an edge of <computeroutput>tm_e</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the intersection point, starting at 0. Ids are consecutive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdim</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates the dimension of the simplex part of the face that is intersected by the edge (0 for a vertex, 1 for an edge, 2 for the interior of the face) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h_e</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge from <computeroutput>tm_e</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h_f</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge from <computeroutput>tm_f</computeroutput> indicating the simplex intersected: if <computeroutput>sdim==0</computeroutput> the target of <computeroutput>h_f</computeroutput> is the intersection point, if <computeroutput>sdim==1</computeroutput> the edge of <computeroutput>h_f</computeroutput> contains the intersection point in its interior, if <computeroutput>sdim==2</computeroutput> the face of <computeroutput>h_f</computeroutput> contains the intersection point in its interior. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm_e</parametername>
</parameternamelist>
<parameterdescription>
<para>mesh containing <computeroutput>h_e</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm_f</parametername>
</parameternamelist>
<parameterdescription>
<para>mesh containing <computeroutput>h_f</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_target_coplanar</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> iff the target of <computeroutput>h_e</computeroutput> is the intersection point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_source_coplanar</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> iff the source of <computeroutput>h_e</computeroutput> is the intersection point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="73" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a98422d4a6689cbaaef3c107a1be439c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::new_vertex_added</definition>
        <argsstring>(std::size_t i_id, vertex_descriptor v, const Triangle_mesh &amp;tm)</argsstring>
        <name>new_vertex_added</name>
        <qualifiedname>PMPCorefinementVisitor::new_vertex_added</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i_id</declname>
        </param>
        <param>
          <type>vertex_descriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called when a new vertex is added in <computeroutput>tm</computeroutput> (either an edge split or a vertex inserted in the interior of a face). </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>i_id</computeroutput> is the intersection point id reported in <computeroutput>new_node_added</computeroutput>. For each mesh, a vertex with a given id will be reported exactly once, except if it is already an existing vertex. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="85" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions used by Boolean operations functions using corefinement.</header>
      <description><para>These functions are not needed if only <computeroutput>corefine()</computeroutput> is called. </para>
</description>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a8a16fd716c8be00a13ead5c7b6656f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::before_face_copy</definition>
        <argsstring>(face_descriptor f_src, const Triangle_mesh &amp;tm_src, const Triangle_mesh &amp;tm_tgt)</argsstring>
        <name>before_face_copy</name>
        <qualifiedname>PMPCorefinementVisitor::before_face_copy</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a72d353688616d1746e2dd8990a4c3803" kindref="member">face_descriptor</ref></type>
          <declname>f_src</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_src</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_tgt</declname>
        </param>
        <briefdescription>
<para>called before importing the face <computeroutput>f_src</computeroutput> of <computeroutput>tm_src</computeroutput> in <computeroutput>tm_tgt</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="92" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a9adc3c945d5965ca82e58af5e01a0652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::after_face_copy</definition>
        <argsstring>(face_descriptor f_src, const Triangle_mesh &amp;tm_src, face_descriptor f_tgt, const Triangle_mesh &amp;tm_tgt)</argsstring>
        <name>after_face_copy</name>
        <qualifiedname>PMPCorefinementVisitor::after_face_copy</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a72d353688616d1746e2dd8990a4c3803" kindref="member">face_descriptor</ref></type>
          <declname>f_src</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_src</declname>
        </param>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a72d353688616d1746e2dd8990a4c3803" kindref="member">face_descriptor</ref></type>
          <declname>f_tgt</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_tgt</declname>
        </param>
        <briefdescription>
<para>called after importing the face <computeroutput>f_src</computeroutput> of <computeroutput>tm_src</computeroutput> in <computeroutput>tm_tgt</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The new face is <computeroutput>f_tgt</computeroutput>. Note that the call is placed just after a call to <computeroutput>add_face()</computeroutput> so the halfedge pointer is not set yet. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="95" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1aceccd3914adea586d117b628e0fcc1e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::before_edge_copy</definition>
        <argsstring>(halfedge_descriptor h_src/, const Triangle_mesh &amp;tm_src, const Triangle_mesh &amp;tm_tgt)</argsstring>
        <name>before_edge_copy</name>
        <qualifiedname>PMPCorefinementVisitor::before_edge_copy</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref> h_src/</type>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_src</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_tgt</declname>
        </param>
        <briefdescription>
<para>called before importing the edge of <computeroutput>h_src</computeroutput> of <computeroutput>tm_src</computeroutput> in <computeroutput>tm_tgt</computeroutput>. There is one call per edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="98" column="8" bodyfile="Concepts/PMPCorefinementVisitor.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1aa606ff79672e2542c1fabb4443688b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::after_edge_copy</definition>
        <argsstring>(halfedge_descriptor h_src, const Triangle_mesh &amp;tm_src, halfedge_descriptor h_tgt, const Triangle_mesh &amp;tm_tgt)</argsstring>
        <name>after_edge_copy</name>
        <qualifiedname>PMPCorefinementVisitor::after_edge_copy</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_src</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_src</declname>
        </param>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_tgt</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_tgt</declname>
        </param>
        <briefdescription>
<para>called after importing the edge of <computeroutput>h_src</computeroutput> of <computeroutput>tm_src</computeroutput> in <computeroutput>tm_tgt</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding new halfedge is <computeroutput>h_tgt</computeroutput>. There is only one call per edge. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="101" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1ae78af2adbbbb4d0c9b6a80a0688e6719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::before_edge_duplicated</definition>
        <argsstring>(halfedge_descriptor h, const Triangle_mesh &amp;tm)</argsstring>
        <name>before_edge_duplicated</name>
        <qualifiedname>PMPCorefinementVisitor::before_edge_duplicated</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called before a patch boundary edge is duplicated to disconnect patches of <computeroutput>tm</computeroutput> (When an in-place operation and an out-of-place are both requested). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="105" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a515678d067926aa9df04677a3f1df6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::after_edge_duplicated</definition>
        <argsstring>(halfedge_descriptor h_src, halfedge_descriptor h_new, const Triangle_mesh &amp;tm)</argsstring>
        <name>after_edge_duplicated</name>
        <qualifiedname>PMPCorefinementVisitor::after_edge_duplicated</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_src</declname>
        </param>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_new</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called when the edge of <computeroutput>h_src</computeroutput> has been duplicated into <computeroutput>h_new</computeroutput> in <computeroutput>tm</computeroutput> (When an in-place operation and an out-of-place are both requested). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="108" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1adcd05ea07c741b505c02902cb3b803d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::intersection_edge_copy</definition>
        <argsstring>(halfedge_descriptor h_src1, const Triangle_mesh &amp;tm_src1, halfedge_descriptor h_src2, const Triangle_mesh &amp;tm_src2, halfedge_descriptor h_tgt, const Triangle_mesh &amp;tm_tgt)</argsstring>
        <name>intersection_edge_copy</name>
        <qualifiedname>PMPCorefinementVisitor::intersection_edge_copy</qualifiedname>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_src1</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_src1</declname>
        </param>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_src2</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_src2</declname>
        </param>
        <param>
          <type><ref refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" kindref="member">halfedge_descriptor</ref></type>
          <declname>h_tgt</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_tgt</declname>
        </param>
        <briefdescription>
<para>called when an intersection edge (represented in input meshes <computeroutput>tm_src1</computeroutput> and <computeroutput>tm_src2</computeroutput> by <computeroutput>h_src1</computeroutput> and <computeroutput>h_src2</computeroutput>, respectively) is imported in <computeroutput>tm_tgt</computeroutput> as <computeroutput>h_tgt</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>There is only one call per edge. (Called only when an out-of-place operation is requested). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="113" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1ae0d4dfeedf82a857b1910f351231443e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::before_vertex_copy</definition>
        <argsstring>(vertex_descriptor v_src, const Triangle_mesh &amp;tm_src, const Triangle_mesh &amp;tm_tgt)</argsstring>
        <name>before_vertex_copy</name>
        <qualifiedname>PMPCorefinementVisitor::before_vertex_copy</qualifiedname>
        <param>
          <type>vertex_descriptor</type>
          <declname>v_src</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_src</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_tgt</declname>
        </param>
        <briefdescription>
<para>called before vertex <computeroutput>v_src</computeroutput> from <computeroutput>tm_src</computeroutput> is copied in <computeroutput>tm_tgt</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="117" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1aad3a4eade447e236ec993fc05cb8020e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::after_vertex_copy</definition>
        <argsstring>(vertex_descriptor v_src, const Triangle_mesh &amp;tm_src, vertex_descriptor v_tgt, const Triangle_mesh &amp;tm_tgt)</argsstring>
        <name>after_vertex_copy</name>
        <qualifiedname>PMPCorefinementVisitor::after_vertex_copy</qualifiedname>
        <param>
          <type>vertex_descriptor</type>
          <declname>v_src</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_src</declname>
        </param>
        <param>
          <type>vertex_descriptor</type>
          <declname>v_tgt</declname>
        </param>
        <param>
          <type>const <ref refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" kindref="member">Triangle_mesh</ref> &amp;</type>
          <declname>tm_tgt</declname>
        </param>
        <briefdescription>
<para>called after vertex <computeroutput>v_src</computeroutput> from <computeroutput>tm_src</computeroutput> is copied in <computeroutput>tm_tgt</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The new vertex is <computeroutput>v_tgt</computeroutput>. The point has already been put in the vertex point map. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="120" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions used by corefine() for progress tracking</header>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1af44d93902c3e1f4afa11f7a1d12b2624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::start_filtering_intersections</definition>
        <argsstring>()</argsstring>
        <name>start_filtering_intersections</name>
        <qualifiedname>PMPCorefinementVisitor::start_filtering_intersections</qualifiedname>
        <briefdescription>
<para>called before starting to detect intersections between faces of one mesh and edges of the other. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="127" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a8bc4cb77915694e7a3dc6428305323d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::progress_filtering_intersections</definition>
        <argsstring>(double d)</argsstring>
        <name>progress_filtering_intersections</name>
        <qualifiedname>PMPCorefinementVisitor::progress_filtering_intersections</qualifiedname>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>called during detection of intersections between faces of one mesh and edges of the other. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>d</computeroutput> is a double value in <computeroutput>[0,1]</computeroutput> that is increasing with the number of calls. The closer <computeroutput>d</computeroutput>is to <computeroutput>1</computeroutput>, the closer the intersection detection is to completion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="131" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1aa8b47a99b7ffa3fad218015286a24fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::end_filtering_intersections</definition>
        <argsstring>()</argsstring>
        <name>end_filtering_intersections</name>
        <qualifiedname>PMPCorefinementVisitor::end_filtering_intersections</qualifiedname>
        <briefdescription>
<para>called after detection of intersections between faces of one mesh and edges of the other. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="133" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1ad742db01b774aed6b3edca64e5795ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::start_handling_intersection_of_coplanar_faces</definition>
        <argsstring>(std::size_t n)</argsstring>
        <name>start_handling_intersection_of_coplanar_faces</name>
        <qualifiedname>PMPCorefinementVisitor::start_handling_intersection_of_coplanar_faces</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>called before processing intersections between the <computeroutput>n</computeroutput> pairs of coplanar faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="136" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a02669432c89cfeaa2c69446afda07f1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::intersection_of_coplanar_faces_step</definition>
        <argsstring>() const</argsstring>
        <name>intersection_of_coplanar_faces_step</name>
        <qualifiedname>PMPCorefinementVisitor::intersection_of_coplanar_faces_step</qualifiedname>
        <briefdescription>
<para>called each time a pair of coplanar faces is processed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="138" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a0da4738da462d803465d09987d315f21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::end_handling_intersection_of_coplanar_faces</definition>
        <argsstring>() const</argsstring>
        <name>end_handling_intersection_of_coplanar_faces</name>
        <qualifiedname>PMPCorefinementVisitor::end_handling_intersection_of_coplanar_faces</qualifiedname>
        <briefdescription>
<para>called after processing all intersections between coplanar faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="140" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a0d160a1573cd93115b300ec86c9221d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::start_handling_edge_face_intersections</definition>
        <argsstring>(std::size_t n)</argsstring>
        <name>start_handling_edge_face_intersections</name>
        <qualifiedname>PMPCorefinementVisitor::start_handling_edge_face_intersections</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>called before processing intersections between edges and faces of two meshes (called twice). </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>n</computeroutput> is the number of edges possibly intersecting faces that will be processed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="144" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a436717c3d86f8858edcd83eed81b733b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::edge_face_intersections_step</definition>
        <argsstring>()</argsstring>
        <name>edge_face_intersections_step</name>
        <qualifiedname>PMPCorefinementVisitor::edge_face_intersections_step</qualifiedname>
        <briefdescription>
<para>called each time an edge is processed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="146" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1ae2943fc8d6bf1b3f9c17b3b9c19c935c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::end_handling_edge_face_intersections</definition>
        <argsstring>()</argsstring>
        <name>end_handling_edge_face_intersections</name>
        <qualifiedname>PMPCorefinementVisitor::end_handling_edge_face_intersections</qualifiedname>
        <briefdescription>
<para>called after having processed edge-face intersections between two meshes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="148" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1adf3a799f88e90df66b9f44468c996bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::start_triangulating_faces</definition>
        <argsstring>(std::size_t n)</argsstring>
        <name>start_triangulating_faces</name>
        <qualifiedname>PMPCorefinementVisitor::start_triangulating_faces</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>called before triangulating the <computeroutput>n</computeroutput> split faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="151" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a9499eac0ae81a5a469e28c3fdc41e2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::triangulating_faces_step</definition>
        <argsstring>()</argsstring>
        <name>triangulating_faces_step</name>
        <qualifiedname>PMPCorefinementVisitor::triangulating_faces_step</qualifiedname>
        <briefdescription>
<para>called when triangulating one split face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="153" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1adfcee239435f91731bab7908e52c9449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::end_triangulating_faces</definition>
        <argsstring>()</argsstring>
        <name>end_triangulating_faces</name>
        <qualifiedname>PMPCorefinementVisitor::end_triangulating_faces</qualifiedname>
        <briefdescription>
<para>called after the triangulation of the split faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="155" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions used by Boolean operations functions using corefinement for progress tracking.</header>
      <description><para>These functions are not needed if only <computeroutput>corefine()</computeroutput> is called.</para>
<para>called before computing the output of the Boolean operations after corefinement. </para>
</description>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a1ca9d8d55b278fc1ae699a8cff6fb809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::start_building_output</definition>
        <argsstring>()</argsstring>
        <name>start_building_output</name>
        <qualifiedname>PMPCorefinementVisitor::start_building_output</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="162" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1acdcad95153212809d7cb86a4e4dbacfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::end_building_output</definition>
        <argsstring>()</argsstring>
        <name>end_building_output</name>
        <qualifiedname>PMPCorefinementVisitor::end_building_output</qualifiedname>
        <briefdescription>
<para>called when the output of the Boolean operations is computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="164" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1ad7346675f069294e78d3425a44f09978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::filter_coplanar_edges</definition>
        <argsstring>()</argsstring>
        <name>filter_coplanar_edges</name>
        <qualifiedname>PMPCorefinementVisitor::filter_coplanar_edges</qualifiedname>
        <briefdescription>
<para>called before filtering intersection edges in the interior of a set of coplanar faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="166" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1aaaf8fed0acc326dcf50496d5649dcc7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::detect_patches</definition>
        <argsstring>()</argsstring>
        <name>detect_patches</name>
        <qualifiedname>PMPCorefinementVisitor::detect_patches</qualifiedname>
        <briefdescription>
<para>called before segmenting input meshes in patches defined by connected components separated by intersection edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="168" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1af2eae8d512832aa4218af4f91a30e045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::classify_patches</definition>
        <argsstring>()</argsstring>
        <name>classify_patches</name>
        <qualifiedname>PMPCorefinementVisitor::classify_patches</qualifiedname>
        <briefdescription>
<para>called before classifying which patches contribute to each Boolean operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="170" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a1bc3aa40f990e83bb6b5cd7f6ddffc42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::classify_intersection_free_patches</definition>
        <argsstring>(const TriangleMesh &amp;tm)</argsstring>
        <name>classify_intersection_free_patches</name>
        <qualifiedname>PMPCorefinementVisitor::classify_intersection_free_patches</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>called before classifying patches of <computeroutput>tm</computeroutput> that are free from intersection with the other mesh. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="172" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a473a93975a089c19c695aeff921e8964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::out_of_place_operation</definition>
        <argsstring>(Boolean_operation_type t)</argsstring>
        <name>out_of_place_operation</name>
        <qualifiedname>PMPCorefinementVisitor::out_of_place_operation</qualifiedname>
        <param>
          <type>Boolean_operation_type</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>called before creating a new mesh for a Boolean operation of type <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="174" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1aa8521c2516475ac2fe9115e381b30ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::in_place_operation</definition>
        <argsstring>(Boolean_operation_type t)</argsstring>
        <name>in_place_operation</name>
        <qualifiedname>PMPCorefinementVisitor::in_place_operation</qualifiedname>
        <param>
          <type>Boolean_operation_type</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>called before updating an input mesh to store the Boolean operation of type <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="176" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPCorefinementVisitor_1a2a2d75da057dcdaf3232c579329ad85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPCorefinementVisitor::in_place_operations</definition>
        <argsstring>(Boolean_operation_type t1, Boolean_operation_type t2)</argsstring>
        <name>in_place_operations</name>
        <qualifiedname>PMPCorefinementVisitor::in_place_operations</qualifiedname>
        <param>
          <type>Boolean_operation_type</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Boolean_operation_type</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>called before updating both input meshes to store the Boolean operations of type <computeroutput>t1</computeroutput> and <computeroutput>t2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="178" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type PMPCorefinementVisitor::Triangle_mesh</definition>
        <argsstring></argsstring>
        <name>Triangle_mesh</name>
        <qualifiedname>PMPCorefinementVisitor::Triangle_mesh</qualifiedname>
        <briefdescription>
<para>Mesh type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="17" column="28" bodyfile="Concepts/PMPCorefinementVisitor.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPMPCorefinementVisitor_1a72d353688616d1746e2dd8990a4c3803" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type PMPCorefinementVisitor::face_descriptor</definition>
        <argsstring></argsstring>
        <name>face_descriptor</name>
        <qualifiedname>PMPCorefinementVisitor::face_descriptor</qualifiedname>
        <briefdescription>
<para>Face descriptor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="19" column="28" bodyfile="Concepts/PMPCorefinementVisitor.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type PMPCorefinementVisitor::halfedge_descriptor</definition>
        <argsstring></argsstring>
        <name>halfedge_descriptor</name>
        <qualifiedname>PMPCorefinementVisitor::halfedge_descriptor</qualifiedname>
        <briefdescription>
<para>Halfedge descriptor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPCorefinementVisitor.h" line="21" column="28" bodyfile="Concepts/PMPCorefinementVisitor.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> defines the requirements for the visitor used in <ref refid="group__PMP__corefinement__grp" kindref="compound">corefinement-related functions </ref> to track the creation of new faces and new edges. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> </para>
</listitem>
</variablelist>
<variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">CGAL::Polygon_mesh_processing::Corefinement::Default_visitor</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Non__manifold__output__visitor" kindref="compound">CGAL::Polygon_mesh_processing::Corefinement::Non_manifold_output_visitor</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/PMPCorefinementVisitor.h" line="14" column="1" bodyfile="Concepts/PMPCorefinementVisitor.h" bodystart="14" bodyend="180"/>
    <listofallmembers>
      <member refid="classPMPCorefinementVisitor_1ab819d40a2bda062d883ac2a6fb62e8f8" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>add_retriangulation_edge</name></member>
      <member refid="classPMPCorefinementVisitor_1aa606ff79672e2542c1fabb4443688b8a" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>after_edge_copy</name></member>
      <member refid="classPMPCorefinementVisitor_1a515678d067926aa9df04677a3f1df6b4" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>after_edge_duplicated</name></member>
      <member refid="classPMPCorefinementVisitor_1af2f61a0a46ba27c8bc011838fc987058" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>after_edge_split</name></member>
      <member refid="classPMPCorefinementVisitor_1a9adc3c945d5965ca82e58af5e01a0652" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>after_face_copy</name></member>
      <member refid="classPMPCorefinementVisitor_1adc77b92dd3b34ecf38256843f732c2d7" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>after_subface_created</name></member>
      <member refid="classPMPCorefinementVisitor_1a7bdf1b81fd005654e19fc344aa026863" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>after_subface_creations</name></member>
      <member refid="classPMPCorefinementVisitor_1aad3a4eade447e236ec993fc05cb8020e" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>after_vertex_copy</name></member>
      <member refid="classPMPCorefinementVisitor_1aceccd3914adea586d117b628e0fcc1e2" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>before_edge_copy</name></member>
      <member refid="classPMPCorefinementVisitor_1ae78af2adbbbb4d0c9b6a80a0688e6719" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>before_edge_duplicated</name></member>
      <member refid="classPMPCorefinementVisitor_1a2c228867e23eef9b90c2826d303ca8a5" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>before_edge_split</name></member>
      <member refid="classPMPCorefinementVisitor_1a8a16fd716c8be00a13ead5c7b6656f23" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>before_face_copy</name></member>
      <member refid="classPMPCorefinementVisitor_1aac745bdd3bd7f3ca4d0fd6ced6f4fca8" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>before_subface_created</name></member>
      <member refid="classPMPCorefinementVisitor_1a68525c003867c6cbf68f522d949e6a15" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>before_subface_creations</name></member>
      <member refid="classPMPCorefinementVisitor_1ae0d4dfeedf82a857b1910f351231443e" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>before_vertex_copy</name></member>
      <member refid="classPMPCorefinementVisitor_1a1bc3aa40f990e83bb6b5cd7f6ddffc42" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>classify_intersection_free_patches</name></member>
      <member refid="classPMPCorefinementVisitor_1af2eae8d512832aa4218af4f91a30e045" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>classify_patches</name></member>
      <member refid="classPMPCorefinementVisitor_1aaaf8fed0acc326dcf50496d5649dcc7a" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>detect_patches</name></member>
      <member refid="classPMPCorefinementVisitor_1a436717c3d86f8858edcd83eed81b733b" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>edge_face_intersections_step</name></member>
      <member refid="classPMPCorefinementVisitor_1a7e109ecde7ed610a1af1c53d4d8cffe9" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>edge_split</name></member>
      <member refid="classPMPCorefinementVisitor_1acdcad95153212809d7cb86a4e4dbacfb" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>end_building_output</name></member>
      <member refid="classPMPCorefinementVisitor_1aa8b47a99b7ffa3fad218015286a24fde" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>end_filtering_intersections</name></member>
      <member refid="classPMPCorefinementVisitor_1ae2943fc8d6bf1b3f9c17b3b9c19c935c" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>end_handling_edge_face_intersections</name></member>
      <member refid="classPMPCorefinementVisitor_1a0da4738da462d803465d09987d315f21" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>end_handling_intersection_of_coplanar_faces</name></member>
      <member refid="classPMPCorefinementVisitor_1adfcee239435f91731bab7908e52c9449" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>end_triangulating_faces</name></member>
      <member refid="classPMPCorefinementVisitor_1a72d353688616d1746e2dd8990a4c3803" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>face_descriptor</name></member>
      <member refid="classPMPCorefinementVisitor_1ad7346675f069294e78d3425a44f09978" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>filter_coplanar_edges</name></member>
      <member refid="classPMPCorefinementVisitor_1a9f5a635e082e2a12dcc98baeffe7efac" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>halfedge_descriptor</name></member>
      <member refid="classPMPCorefinementVisitor_1aa8521c2516475ac2fe9115e381b30ff7" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>in_place_operation</name></member>
      <member refid="classPMPCorefinementVisitor_1a2a2d75da057dcdaf3232c579329ad85b" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>in_place_operations</name></member>
      <member refid="classPMPCorefinementVisitor_1adcd05ea07c741b505c02902cb3b803d9" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>intersection_edge_copy</name></member>
      <member refid="classPMPCorefinementVisitor_1a02669432c89cfeaa2c69446afda07f1e" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>intersection_of_coplanar_faces_step</name></member>
      <member refid="classPMPCorefinementVisitor_1acd13f3e9b14a96191d1cc07f0014897f" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>intersection_point_detected</name></member>
      <member refid="classPMPCorefinementVisitor_1a98422d4a6689cbaaef3c107a1be439c6" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>new_vertex_added</name></member>
      <member refid="classPMPCorefinementVisitor_1a473a93975a089c19c695aeff921e8964" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>out_of_place_operation</name></member>
      <member refid="classPMPCorefinementVisitor_1a8bc4cb77915694e7a3dc6428305323d8" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>progress_filtering_intersections</name></member>
      <member refid="classPMPCorefinementVisitor_1a1ca9d8d55b278fc1ae699a8cff6fb809" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>start_building_output</name></member>
      <member refid="classPMPCorefinementVisitor_1af44d93902c3e1f4afa11f7a1d12b2624" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>start_filtering_intersections</name></member>
      <member refid="classPMPCorefinementVisitor_1a0d160a1573cd93115b300ec86c9221d8" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>start_handling_edge_face_intersections</name></member>
      <member refid="classPMPCorefinementVisitor_1ad742db01b774aed6b3edca64e5795ee3" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>start_handling_intersection_of_coplanar_faces</name></member>
      <member refid="classPMPCorefinementVisitor_1adf3a799f88e90df66b9f44468c996bd6" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>start_triangulating_faces</name></member>
      <member refid="classPMPCorefinementVisitor_1a1ecf573a53a439e94ff33d0619efb390" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>Triangle_mesh</name></member>
      <member refid="classPMPCorefinementVisitor_1a9499eac0ae81a5a469e28c3fdc41e2b0" prot="public" virt="non-virtual"><scope>PMPCorefinementVisitor</scope><name>triangulating_faces_step</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
