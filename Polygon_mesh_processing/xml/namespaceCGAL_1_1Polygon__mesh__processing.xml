<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL_1_1Polygon__mesh__processing" kind="namespace" language="C++">
    <compoundname>CGAL::Polygon_mesh_processing</compoundname>
    <innerclass refid="classCGAL_1_1Polygon__mesh__processing_1_1Adaptive__sizing__field" prot="public">CGAL::Polygon_mesh_processing::Adaptive_sizing_field</innerclass>
    <innerclass refid="structCGAL_1_1Polygon__mesh__processing_1_1Default__orientation__visitor" prot="public">CGAL::Polygon_mesh_processing::Default_orientation_visitor</innerclass>
    <innerclass refid="structCGAL_1_1Polygon__mesh__processing_1_1Non__manifold__feature__map" prot="public">CGAL::Polygon_mesh_processing::Non_manifold_feature_map</innerclass>
    <innerclass refid="structCGAL_1_1Polygon__mesh__processing_1_1Principal__curvatures__and__directions" prot="public">CGAL::Polygon_mesh_processing::Principal_curvatures_and_directions</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__mesh__processing_1_1Uniform__sizing__field" prot="public">CGAL::Polygon_mesh_processing::Uniform_sizing_field</innerclass>
    <innernamespace refid="namespaceCGAL_1_1Polygon__mesh__processing_1_1Autorefinement">CGAL::Polygon_mesh_processing::Autorefinement</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Polygon__mesh__processing_1_1Corefinement">CGAL::Polygon_mesh_processing::Corefinement</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Polygon__mesh__processing_1_1extrude__impl">CGAL::Polygon_mesh_processing::extrude_impl</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Polygon__mesh__processing_1_1Hole__filling">CGAL::Polygon_mesh_processing::Hole_filling</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Polygon__mesh__processing_1_1IO">CGAL::Polygon_mesh_processing::IO</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Polygon__mesh__processing_1_1Planar__segmentation">CGAL::Polygon_mesh_processing::Planar_segmentation</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Polygon__mesh__processing_1_1Triangulate__faces">CGAL::Polygon_mesh_processing::Triangulate_faces</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Polygon__mesh__processing_1_1Triangulate__polygons">CGAL::Polygon_mesh_processing::Triangulate_polygons</innernamespace>
      <sectiondef kind="user-defined">
      <header>Location Predicates</header>
      <memberdef kind="function" id="group__PMP__locate__grp_1gaf90da1db1204afbf66dbebd17d2e3e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_in_face</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm)</argsstring>
        <name>is_in_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_in_face</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether the location is in the face (boundary included) or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="762" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="762" bodyend="766" declfile="CGAL/Polygon_mesh_processing/locate.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga90eb394aab0e2f1a78d5f69c87cdcb53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_on_vertex</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor vd, const TriangleMesh &amp;tm)</argsstring>
        <name>is_on_vertex</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_on_vertex</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether the location is on the vertex <computeroutput>vd</computeroutput> or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="644" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="644" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gad94f826508b2a7d47bffe1c9e9164fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_on_halfedge</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor hd, const TriangleMesh &amp;tm)</argsstring>
        <name>is_on_halfedge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_on_halfedge</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether this location is on the halfedge <computeroutput>hd</computeroutput> or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hd</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="683" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="683" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga475c1e0acddee2198db30289fa331b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_in_face</definition>
        <argsstring>(const Barycentric_coordinates&lt; FT &gt; &amp;bar, const TriangleMesh &amp;tm)</argsstring>
        <name>is_in_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_in_face</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga6581d3f34a14d533fdab2e6beef2873f" kindref="member">Barycentric_coordinates</ref>&lt; FT &gt; &amp;</type>
          <declname>bar</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a set of barycentric coordinates, returns whether those barycentric coordinates correspond to a point within the face (boundary included), that is, if all the barycentric coordinates are positive. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bar</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of barycentric coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="724" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="724" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga455a6b4f1edfd88358a1150c870691e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_on_face_border</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm)</argsstring>
        <name>is_on_face_border</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_on_face_border</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether the location is on the boundary of the face or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="789" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="789" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga905f903215a1123afef50b74d5424bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_on_mesh_border</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm)</argsstring>
        <name>is_on_mesh_border</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_on_mesh_border</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether the location is on the border of the mesh or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="825" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="825" bodyend="859"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Random Location Generation</header>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga23816d7cea5cba77e56363c5ebd17b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::random_location_on_halfedge</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor hd, const TriangleMesh &amp;tm, CGAL::Random &amp;rnd=get_default_random())</argsstring>
        <name>random_location_on_halfedge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::random_location_on_halfedge</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">CGAL::Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">get_default_random</ref>()</defval>
        </param>
        <briefdescription>
<para>returns a random point over the halfedge <computeroutput>hd</computeroutput>, as a location. </para>
        </briefdescription>
        <detaileddescription>
<para>The random point is chosen on the halfedge, meaning that all its barycentric coordinates are positive. It is constructed by uniformly generating a value <computeroutput>t</computeroutput> between <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> and setting the barycentric coordinates to <computeroutput>t</computeroutput>, <computeroutput>1-t</computeroutput>, and <computeroutput>0</computeroutput> for respetively the source and target of <computeroutput>hd</computeroutput>, and the third vertex.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hd</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>optional random number generator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="401" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="401" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gac78863fa23c382d08f9944a4f70b7a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::random_location_on_face</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tm, CGAL::Random &amp;rnd=get_default_random())</argsstring>
        <name>random_location_on_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::random_location_on_face</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">CGAL::Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">get_default_random</ref>()</defval>
        </param>
        <briefdescription>
<para>returns a random point over the face <computeroutput>fd</computeroutput>, as a location. </para>
        </briefdescription>
        <detaileddescription>
<para>The random point is on the face, meaning that all its barycentric coordinates are positive. It is constructed by uniformly picking a value <computeroutput>u</computeroutput> between <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput>, a value <computeroutput>v</computeroutput> between <computeroutput>1-u</computeroutput>, and setting the barycentric coordinates to <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput>, and <computeroutput>1-u-v</computeroutput> for respectively the source and target of <computeroutput>halfedge(fd, tm)</computeroutput>, and the third point.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>optional random number generator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="436" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="436" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga6d90010ec9ad9c07c3659d12d7453d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::random_location_on_mesh</definition>
        <argsstring>(const TriangleMesh &amp;tm, CGAL::Random &amp;rnd=get_default_random())</argsstring>
        <name>random_location_on_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::random_location_on_mesh</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">CGAL::Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">get_default_random</ref>()</defval>
        </param>
        <briefdescription>
<para>returns a random point over the mesh <computeroutput>tm</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned location is obtained by choosing a random face of the mesh and a random point on that face. The barycentric coordinates of the point in the face are thus all positive. Note that all faces have the same probability to be chosen.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>optional random number generator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__locate__grp_1gac78863fa23c382d08f9944a4f70b7a75" kindref="member">random_location_on_face()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="469" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="469" bodyend="478"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Point Location</header>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga777f3083d65c79021429c9884a828682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_vertex</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor vd, const TriangleMesh &amp;tm)</argsstring>
        <name>locate_vertex</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_vertex</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>returns the location of the given vertex <computeroutput>vd</computeroutput> as a location, that is an ordered pair specifying a face incident to <computeroutput>vd</computeroutput> and the barycentric coordinates of the vertex <computeroutput>vd</computeroutput> in that face. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>vd</computeroutput> is not an isolated vertex </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="889" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="889" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga59628d063d4bc22dd52142a365c2f274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_vertex</definition>
        <argsstring>(const typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor vd, const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tm)</argsstring>
        <name>locate_vertex</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_vertex</qualifiedname>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>returns the location of a given vertex as a location in <computeroutput>fd</computeroutput>, that is an ordered pair composed of <computeroutput>fd</computeroutput> and of the barycentric coordinates of the vertex in <computeroutput>fd</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>tm</computeroutput> and a vertex of the face <computeroutput>fd</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>fd</computeroutput> is not the null face </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="951" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="951" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gaea15285dfafaa66a11deede8fdba473e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_on_halfedge</definition>
        <argsstring>(const typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor hd, const FT t, const TriangleMesh &amp;tm)</argsstring>
        <name>locate_on_halfedge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_on_halfedge</qualifiedname>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const FT</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a point described by a halfedge <computeroutput>hd</computeroutput> and a scalar <computeroutput>t</computeroutput> as <computeroutput>p = (1 - t) * source(hd, tm) + t * target(hd, tm)</computeroutput>, returns this location along the given edge as a location, that is an ordered pair specifying a face containing the location and the barycentric coordinates of that location in that face. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hd</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the parametric distance of the desired point along <computeroutput>hd</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="988" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="988" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gaa8b9a0579a35e7beff2ab54aa911cff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_in_face</definition>
        <argsstring>(const Point &amp;query, const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate_in_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_in_face</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Given a point <computeroutput>query</computeroutput> and a face <computeroutput>fd</computeroutput> of a triangulated surface mesh, returns this location as a location, that is an ordered pair composed of <computeroutput>fd</computeroutput> and of the barycentric coordinates of <computeroutput>query</computeroutput> with respect to the vertices of <computeroutput>fd</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a point, whose type is equal to the value type of the vertex point property map (either user-provided via named parameters or the internal point map of the mesh <computeroutput>tm</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If such traits class is provided, its type <computeroutput>FT</computeroutput> must be identical to the template parameter <computeroutput>FT</computeroutput> of this function. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>fd</computeroutput> is not the null face</para>
</simplesect>
<simplesect kind="return"><para>a face location. The type <computeroutput>FT</computeroutput> is deduced from the geometric traits, either provided by the user via named parameters (with <computeroutput>geom_traits</computeroutput>) or using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> and the point type of the vertex point property map in use. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1066" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1066" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gae0f1a2098f3f8c86c3bca86926517f21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_in_adjacent_face</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tm)</argsstring>
        <name>locate_in_adjacent_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_in_adjacent_face</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location and a second face adjacent to the first, returns the location of the point in the second face. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>the first location, with <computeroutput>loc.first</computeroutput> being a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the second face, adjacent to <computeroutput>loc.first</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to which <computeroutput>fd</computeroutput> belongs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc</computeroutput> corresponds to a point that lies on a face incident to both <computeroutput>loc.first</computeroutput> and <computeroutput>fd</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1141" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1141" bodyend="1198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Nearest Face Location Queries</header>
      <description><para>The following functions can be used to find the closest point on a triangle mesh, given either a point or a ray.</para>
<para>This closest point is computed using a <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">CGAL::AABB_tree</ref></computeroutput>. Users intending to call location functions on more than a single point (or ray) should first compute an AABB tree to store it (otherwise, it will be recomputed every time). Note that since the AABB tree class is a 3D structure, it might be required to wrap your point property map to convert your point type to the 3D point type (i.e., your traits&apos; <computeroutput>Point_3</computeroutput>) if you are working with a 2D triangle structure. </para>
</description>
      <memberdef kind="function" id="group__PMP__locate__grp_1gafa64630e9a7b1cbc28875d63ac8a3eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename Point3VPM</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::build_AABB_tree</definition>
        <argsstring>(const TriangleMesh &amp;tm, AABB_tree&lt; AABB_traits_3&lt; Geom_traits, CGAL::AABB_face_graph_triangle_primitive&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;outTree, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>build_AABB_tree</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::build_AABB_tree</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref>&lt; <ref refid="classCGAL_1_1AABB__traits__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_traits_3</ref>&lt; Geom_traits, <ref refid="classCGAL_1_1AABB__face__graph__triangle__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">CGAL::AABB_face_graph_triangle_primitive</ref>&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;</type>
          <declname>outTree</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>creates an AABB tree suitable for use with <computeroutput><ref refid="group__PMP__locate__grp_1ga609d1fd3a16ecc381a1b131386fc708c" kindref="member">locate_with_AABB_tree()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should first be called by users who intend to locate multiple points: in this case, it is better to first build an AABB tree, and use the function <computeroutput><ref refid="group__PMP__locate__grp_1ga609d1fd3a16ecc381a1b131386fc708c" kindref="member">locate_with_AABB_tree()</ref></computeroutput> that takes as parameter an AABB tree, instead of calling <computeroutput><ref refid="group__PMP__locate__grp_1ga817d3417a9711b3efbfde45e46e0aa00" kindref="member">locate()</ref></computeroutput> multiple times, which will build a new AABB tree on every call.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point3VPM</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and the CGAL 3D point type (your traits&apos; <computeroutput>Point_3</computeroutput>) as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outTree</parametername>
</parameternamelist>
<parameterdescription>
<para>output parameter that stores the computed <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Must be identical to the traits used in the template parameter of the <computeroutput>AABB_traits</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1523" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1523" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga609d1fd3a16ecc381a1b131386fc708c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename Point3VPM</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_with_AABB_tree</definition>
        <argsstring>(const Point &amp;p, const AABB_tree&lt; AABB_traits_3&lt; Geom_traits, AABB_face_graph_triangle_primitive&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;tree, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate_with_AABB_tree</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_with_AABB_tree</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref>&lt; <ref refid="classCGAL_1_1AABB__traits__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_traits_3</ref>&lt; Geom_traits, <ref refid="classCGAL_1_1AABB__face__graph__triangle__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_face_graph_triangle_primitive</ref>&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the face location nearest to the given point, as a location. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that it is possible for the triangle mesh to have ambiant dimension <computeroutput>2</computeroutput> (e.g. the mesh is a 2D triangulation, or a <ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref>&lt;CGAL::Point_2&lt;Kernel&gt; &gt;), as long as an appropriate vertex point property map is passed in the AABB tree, which will convert from 2D to 3D.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point3VPM</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and the CGAL 3D point type (your traits&apos; <computeroutput>Point_3</computeroutput>) as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point to locate on the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>an AABB tree containing the triangular faces of the input surface mesh to perform the point location with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Must be identical to the traits used in the template parameter of the <computeroutput>AABB_traits</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>a face location. The type <computeroutput>FT</computeroutput> is deduced from the geometric traits, either provided by the user via named parameters (with <computeroutput>geom_traits</computeroutput>) or using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> and the point type of the vertex point property map in use. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1598" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1598" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga817d3417a9711b3efbfde45e46e0aa00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate</definition>
        <argsstring>(const Point &amp;p, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the nearest face location to the given point. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function will build an AABB tree on each call. If you need to call this function more than once, first use <computeroutput><ref refid="group__PMP__locate__grp_1gafa64630e9a7b1cbc28875d63ac8a3eaa" kindref="member">build_AABB_tree()</ref></computeroutput> to create a an AABB tree that you can store and use the function <computeroutput><ref refid="group__PMP__locate__grp_1ga609d1fd3a16ecc381a1b131386fc708c" kindref="member">locate_with_AABB_tree()</ref></computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point to locate on the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1687" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1687" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga32bd9c2a74c9e475340a7e761539b3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename Point3VPM</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_with_AABB_tree</definition>
        <argsstring>(const Ray &amp;ray, const AABB_tree&lt; AABB_traits_3&lt; Geom_traits, AABB_face_graph_triangle_primitive&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;tree, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate_with_AABB_tree</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_with_AABB_tree</qualifiedname>
        <param>
          <type>const Ray &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref>&lt; <ref refid="classCGAL_1_1AABB__traits__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_traits_3</ref>&lt; Geom_traits, <ref refid="classCGAL_1_1AABB__face__graph__triangle__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_face_graph_triangle_primitive</ref>&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the face location along <computeroutput>ray</computeroutput> nearest to its source point. </para>
        </briefdescription>
        <detaileddescription>
<para>If the ray does not intersect the mesh, a default constructed location is returned.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point3VPM</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and the CGAL 3D point type (your traits&apos; <computeroutput>Point_3</computeroutput>) as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>a ray to intersect with the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>an AABB tree containing the triangular faces of the input surface mesh to perform the point location with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Must be identical to the traits used in the template parameter of the <computeroutput>AABB_traits</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>ray</computeroutput> is an object with the same ambient dimension as the point type (the value type of the vertex point map). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1774" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1774" bodyend="1853"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga34d601277f6003a751716e29eb830038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate</definition>
        <argsstring>(const Ray &amp;ray, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate</qualifiedname>
        <param>
          <type>const Ray &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the face location along <computeroutput>ray</computeroutput> nearest to its source point. </para>
        </briefdescription>
        <detaileddescription>
<para>If the ray does not intersect the mesh, a default constructed location is returned.</para>
<para>Note that this function will build an AABB tree on each call. If you need to call this function more than once, use <computeroutput><ref refid="group__PMP__locate__grp_1gafa64630e9a7b1cbc28875d63ac8a3eaa" kindref="member">build_AABB_tree()</ref></computeroutput> to cache a copy of the <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref></computeroutput>, and use the overloads of this function that accept a reference to an AABB tree as input.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>a ray to intersect with the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>ray</computeroutput> is an object with the same ambient dimension as the point type (the value type of the vertex point map). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1905" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1905" bodyend="1934"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__PMP__orientation__grp_1ga0cc8819f7a6e09086a9381fa29918d48" prot="public" static="no" strong="no">
        <type></type>
        <name>Volume_error_code</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::Volume_error_code</qualifiedname>
        <enumvalue id="group__PMP__orientation__grp_1gga0cc8819f7a6e09086a9381fa29918d48ab0b5c051e298e25b83338c5e7b3a4704" prot="public">
          <name>VALID_VOLUME</name>
          <briefdescription>
<para>The set of faces bounds a volume. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PMP__orientation__grp_1gga0cc8819f7a6e09086a9381fa29918d48ad9e462d2dfe21137aa9dfb56e0a8d067" prot="public">
          <name>SURFACE_WITH_SELF_INTERSECTIONS</name>
          <briefdescription>
<para>The set of faces is self-intersecting. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PMP__orientation__grp_1gga0cc8819f7a6e09086a9381fa29918d48a421e502b1cb8f48d1f9f3e84a046c31d" prot="public">
          <name>VOLUME_INTERSECTION</name>
          <briefdescription>
<para>The set of faces intersects another surface connected component. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PMP__orientation__grp_1gga0cc8819f7a6e09086a9381fa29918d48a7c11c1c20f8917e666b1fa936d0571f1" prot="public">
          <name>INCOMPATIBLE_ORIENTATION</name>
          <briefdescription>
<para>The set of faces is included in a volume but has an incompatible orientation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration type used to indicate the status of a set of faces classified by the function <computeroutput><ref refid="group__PMP__orientation__grp_1gab43990ca5541b788c6db2ba509a73ee3" kindref="member">volume_connected_components()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The set of faces defines either a volume connected connected component in the case of <computeroutput>VALID_VOLUME</computeroutput> or a surface connected component otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="491" column="1" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="491" bodyend="495"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__PMP__locate__grp_1ga8ec69004f1d28b296aa9e89926bb3981" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>std::variant&lt; typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor, typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor, typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor &gt;</type>
        <definition>using CGAL::Polygon_mesh_processing::descriptor_variant = typedef std::variant&lt;typename boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor, typename boost::graph_traits&lt;TriangleMesh&gt;::halfedge_descriptor, typename boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor&gt;</definition>
        <argsstring></argsstring>
        <name>descriptor_variant</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::descriptor_variant</qualifiedname>
        <briefdescription>
<para>A variant used in the function <computeroutput><ref refid="group__PMP__locate__grp_1ga1be5d5de27953a11b593797d5224fefd" kindref="member">get_descriptor_from_location()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="59" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PMP__locate__grp_1ga6581d3f34a14d533fdab2e6beef2873f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; FT, 3 &gt;</type>
        <definition>using CGAL::Polygon_mesh_processing::Barycentric_coordinates = typedef std::array&lt;FT, 3&gt;</definition>
        <argsstring></argsstring>
        <name>Barycentric_coordinates</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::Barycentric_coordinates</qualifiedname>
        <briefdescription>
<para>A triplet of coordinates describing the barycentric coordinates of a point with respect to the vertices of a triangular face. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="70" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor, <ref refid="group__PMP__locate__grp_1ga6581d3f34a14d533fdab2e6beef2873f" kindref="member">Barycentric_coordinates</ref>&lt; FT &gt; &gt;</type>
        <definition>using CGAL::Polygon_mesh_processing::Face_location = typedef std::pair&lt;typename boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor, Barycentric_coordinates&lt;FT&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Face_location</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::Face_location</qualifiedname>
        <briefdescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="81" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PMP__meshing__grp_1gad5a9a90355bab0613d94a6b9d73d54ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::angle_and_area_smoothing</definition>
        <argsstring>(const FaceRange &amp;faces, TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>angle_and_area_smoothing</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::angle_and_area_smoothing</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>smooths a triangulated region of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This function aims to make the triangle angle and area distributions as uniform as possible by moving (non-constrained) vertices.</para>
<para>Angle-based smoothing does not change the combinatorial information of the mesh. Area-based smoothing might change the combinatorial information, unless specified otherwise. It is also possible to make the smoothing algorithm &quot;safer&quot; by rejecting moves that, when applied, would worsen the quality of the mesh, e.g. that would decrease the value of the smallest angle around a vertex or create self-intersections.</para>
<para>Optionally, the points are reprojected after each iteration.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh with triangulated surface patches to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faces</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of triangular faces defining one or several surface patches to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="10" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_iterations</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the number of iterations for the sequence of the smoothing iterations performed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_angle_smoothing</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>value to indicate whether angle-based smoothing should be used </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_area_smoothing</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>value to indicate whether area-based smoothing should be used </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_safety_constraints</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, vertex moves that would worsen the mesh are ignored. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_Delaunay_flips</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, area-based smoothing will be completed by a phase of Delaunay-based edge-flips to prevent the creation of elongated triangles. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_project</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, points are projected onto the initial surface after each iteration. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertex is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained vertex cannot be modified at all during smoothing. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no edge is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained edge cannot be modified at all during smoothing. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="warning"><para>The third party library <ref refid="thirdparty.html_1thirdpartyCeres" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Ceres </ref> is required to use area-based smoothing.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>tmesh</computeroutput> does not contain any degenerate faces. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/angle_and_area_smoothing.h" line="133" column="6" bodyfile="CGAL/Polygon_mesh_processing/angle_and_area_smoothing.h" bodystart="133" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga6e971b85a933e194198218130ba98c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::angle_and_area_smoothing</definition>
        <argsstring>(TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>angle_and_area_smoothing</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::angle_and_area_smoothing</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>smooths a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This function aims to make the triangle angle and area distributions as uniform as possible by moving (non-constrained) vertices.</para>
<para>Angle-based smoothing does not change the combinatorial information of the mesh. Area-based smoothing might change the combinatorial information, unless specified otherwise. It is also possible to make the smoothing algorithm &quot;safer&quot; by rejecting moves that, when applied, would worsen the quality of the mesh, e.g. that would decrease the value of the smallest angle around a vertex or create self-intersections.</para>
<para>Optionally, the points are reprojected after each iteration.</para>
<para>See the overload which takes a face range as additional parameter for a comprehensive description of the parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/angle_and_area_smoothing.h" line="344" column="6" bodyfile="CGAL/Polygon_mesh_processing/angle_and_area_smoothing.h" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1gaec85370aa0b2acc0919e5f8406cfb74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class TriangleRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::autorefine_triangle_soup</definition>
        <argsstring>(PointRange &amp;soup_points, TriangleRange &amp;soup_triangles, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>autorefine_triangle_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::autorefine_triangle_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>soup_points</declname>
        </param>
        <param>
          <type>TriangleRange &amp;</type>
          <declname>soup_triangles</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>refines a soup of triangles so that no pair of triangles intersects. </para>
        </briefdescription>
        <detaileddescription>
<para>Output triangles may share a common edge or a common vertex (but with the same indexed position in <computeroutput>points</computeroutput>). Note that points in <computeroutput>soup_points</computeroutput> can only be added (intersection points) at the end of the container, with the initial order preserved. Note that if <computeroutput>soup_points</computeroutput> contains two or more identical points then only the first copy (following the order in the <computeroutput>soup_points</computeroutput>) will be used in <computeroutput>soup_triangles</computeroutput>. <computeroutput>soup_triangles</computeroutput> will be updated to contain both the input triangles and the new subdivided triangles. Degenerate triangles will be removed. Also triangles in <computeroutput>soup_triangles</computeroutput> will be triangles without intersection first, followed by triangles coming from a subdivision induced by an intersection. The named parameter <computeroutput>visitor()</computeroutput> can be used to track</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput>, <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> and <computeroutput><ref refid="classSwappable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Swappable</ref></computeroutput>, whose value type is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is convertible to <computeroutput>std::size_t</computeroutput> and that is constructible from an <computeroutput>std::initializer_list&lt;std::size_t&gt;</computeroutput> of size 3. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soup_points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>soup_triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a triangle using the indexed position of the points in <computeroutput>soup_points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>concurrency_tag</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tag indicating if the task should be done using one or several threads. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Either <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref></computeroutput>, or <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref></computeroutput>, or <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_if_available_tag</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the range <computeroutput>soup_points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> whose value type is a point type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPAutorefinementVisitor" kindref="compound">PMPAutorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Autorefinement_1_1Default__visitor" kindref="compound">Autorefinement::Default_visitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The visitor will be copied. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/autorefinement.h" line="1028" column="6" bodyfile="CGAL/Polygon_mesh_processing/autorefinement.h" bodystart="1028" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga3e3a0a82b6c04bdc3a6c070e8da4aed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::autorefine</definition>
        <argsstring>(TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>autorefine</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::autorefine</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>refines a triangle mesh so that no triangles intersects in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function is only provided as a shortcut for calling <computeroutput><ref refid="group__PMP__corefinement__grp_1gaec85370aa0b2acc0919e5f8406cfb74c" kindref="member">autorefine_triangle_soup()</ref></computeroutput> with a mesh. For any advance usage the aforementioned function should be called directly.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para><computeroutput>clear(tm)</computeroutput> will be called before filling <computeroutput>tm</computeroutput> with the refined mesh.</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>concurrency_tag</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tag indicating if the task should be done using one or several threads. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Either <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref></computeroutput>, or <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref></computeroutput>, or <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_if_available_tag</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/autorefinement.h" line="1688" column="1" bodyfile="CGAL/Polygon_mesh_processing/autorefinement.h" bodystart="1688" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref></type>
        <definition>CGAL::Bbox_3 CGAL::Polygon_mesh_processing::bbox</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::bbox</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes a bounding box of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class providing the functor <computeroutput>Construct_bbox_3</computeroutput> and the function <computeroutput>Construct_bbox_3 construct_bbox_3_object()</computeroutput>. <computeroutput>Construct_bbox_3</computeroutput> must provide the functor <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> operator()(Point_3)</computeroutput> where <computeroutput>Point_3</computeroutput> is the value type of the vertex point map. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>bbox_scaling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a double used to scale the bounding box. The default value is 1 and the bounding box is the smallest possible axis-aligned bounding box. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1. </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>bbox_scaling &gt; 0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" kindref="member">vertex_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" kindref="member">edge_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" kindref="member">face_bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="74" column="18" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="74" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref></type>
        <definition>CGAL::Bbox_3 CGAL::Polygon_mesh_processing::vertex_bbox</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor vd, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>vertex_bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::vertex_bbox</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes a bounding box of the vertex of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Graph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a descriptor of a vertex in <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class providing the functor <computeroutput>Construct_bbox_3</computeroutput> and the function <computeroutput>Construct_bbox_3 construct_bbox_3_object()</computeroutput>. <computeroutput>Construct_bbox_3</computeroutput> must provide <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> operator()(Point_3)</computeroutput> where <computeroutput>Point_3</computeroutput> is the value type of the vertex point map. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" kindref="member">edge_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" kindref="member">face_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="138" column="18" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="138" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref></type>
        <definition>CGAL::Bbox_3 CGAL::Polygon_mesh_processing::edge_bbox</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor ed, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>edge_bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::edge_bbox</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor</type>
          <declname>ed</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes a bounding box of an edge of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Graph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ed</parametername>
</parameternamelist>
<parameterdescription>
<para>a descriptor of an edge in <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class providing the functor <computeroutput>Construct_bbox_3</computeroutput> and the function <computeroutput>Construct_bbox_3 construct_bbox_3_object()</computeroutput>. <computeroutput>Construct_bbox_3</computeroutput> must provide <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> operator()(Point_3)</computeroutput> where <computeroutput>Point_3</computeroutput> is the value type of the vertex point map. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" kindref="member">vertex_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" kindref="member">face_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="190" column="18" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="190" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref></type>
        <definition>CGAL::Bbox_3 CGAL::Polygon_mesh_processing::face_bbox</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor fd, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>face_bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::face_bbox</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes a bounding box of a face of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Graph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a descriptor of a face in <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class providing the functor <computeroutput>Construct_bbox_3</computeroutput> and the function <computeroutput>Construct_bbox_3 construct_bbox_3_object()</computeroutput>. <computeroutput>Construct_bbox_3</computeroutput> must provide <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> operator()(Point_3)</computeroutput> where <computeroutput>Point_3</computeroutput> is the value type of the vertex point map. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" kindref="member">vertex_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" kindref="member">edge_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="247" column="18" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="247" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gabaf98d2fd9ae599ff1f3a5a6cde79cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::add_bbox</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>add_bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::add_bbox</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>adds an axis-aligned bounding box to a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>bbox_scaling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a double used to scale the bounding box. The default value is 1 and the bounding box is the smallest possible axis-aligned bounding box. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1. </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>bbox_scaling &gt; 0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_triangulate_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a Boolean used to specify whether the bounding box&apos;s faces should be triangulated or not. The default value is <computeroutput>true</computeroutput>, and faces are not triangulated. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>true </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="316" column="10" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="316" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga132e91e574d2454eb39f05a4e8e72099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename HalfedgeOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>HalfedgeOutputIterator</type>
        <definition>HalfedgeOutputIterator CGAL::Polygon_mesh_processing::border_halfedges</definition>
        <argsstring>(const FaceRange &amp;face_range, const PolygonMesh &amp;pmesh, HalfedgeOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>border_halfedges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::border_halfedges</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>HalfedgeOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>collects the border halfedges of a surface patch defined as a face range. </para>
        </briefdescription>
        <detaileddescription>
<para>For each returned halfedge <computeroutput>h</computeroutput>, <computeroutput>opposite(h, pmesh)</computeroutput> belongs to a face of the patch, but <computeroutput>face(h, pmesh)</computeroutput> does not belong to the patch.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HalfedgeOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> for patch border </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to which the faces in <computeroutput>face_range</computeroutput> belong </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face_range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of faces defining the patch whose border halfedges are collected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator that collects the border halfedges of the patch, seen from outside. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>out</computeroutput></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga42723af60dc8810d938490a8caceb7f0" kindref="member">extract_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/border.h" line="185" column="26" bodyfile="CGAL/Polygon_mesh_processing/border.h" bodystart="185" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="border_8h_1a909d265f8074fadc8c85b3c42cc4f7ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename HalfedgeOutputIterator</type>
          </param>
        </templateparamlist>
        <type>HalfedgeOutputIterator</type>
        <definition>HalfedgeOutputIterator CGAL::Polygon_mesh_processing::border_halfedges</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, HalfedgeOutputIterator out)</argsstring>
        <name>border_halfedges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::border_halfedges</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>HalfedgeOutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/border.h" line="201" column="26" bodyfile="CGAL/Polygon_mesh_processing/border.h" bodystart="201" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="border_8h_1a2013d2ff18c28ff73c5da65bdf588c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>unsigned int</type>
        <definition>unsigned int CGAL::Polygon_mesh_processing::number_of_borders</definition>
        <argsstring>(const PolygonMesh &amp;pmesh)</argsstring>
        <name>number_of_borders</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::number_of_borders</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/border.h" line="219" column="16" bodyfile="CGAL/Polygon_mesh_processing/border.h" bodystart="219" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga42723af60dc8810d938490a8caceb7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::extract_boundary_cycles</definition>
        <argsstring>(const PolygonMesh &amp;pm, OutputIterator out)</argsstring>
        <name>extract_boundary_cycles</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::extract_boundary_cycles</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>extracts boundary cycles as a list of halfedges, with one halfedge per border. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator where the border halfedges will be put</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga132e91e574d2454eb39f05a4e8e72099" kindref="member">border_halfedges()</ref></computeroutput></para>
</simplesect>
<xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>It could make sense to also return the length of each cycle. </para>
<para>It should probably go into BGL package (like the rest of this file). </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/border.h" line="255" column="18" bodyfile="CGAL/Polygon_mesh_processing/border.h" bodystart="255" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga5dc9e7acf8433235adc7b91ac93a7d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::clip</definition>
        <argsstring>(TriangleMesh &amp;tm, TriangleMesh &amp;clipper, const NamedParameters1 &amp;np_tm=parameters::default_values(), const NamedParameters2 &amp;np_c=parameters::default_values())</argsstring>
        <name>clip</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::clip</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>clipper</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np_tm</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np_c</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>clips <computeroutput>tm</computeroutput> by keeping the part that is inside the volume <ref refid="index_1coref_def_subsec" kindref="member">bounded </ref> by <computeroutput>clipper</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is closed, the clipped part can be closed too if the named parameter <computeroutput>clip_volume</computeroutput> is set to <computeroutput>true</computeroutput>. See Subsection <ref refid="index_1coref_clip" kindref="member">Clipping</ref> for more details.</para>
<para><simplesect kind="attention"><para>With the current implementation, <computeroutput>clipper</computeroutput> will be modified (refined with the intersection with <computeroutput>tm</computeroutput>).</para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(clipper)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(clipper)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>, <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clipper</parametername>
</parameternamelist>
<parameterdescription>
<para>triangulated surface mesh used to clip <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_c</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="7" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> (resp. <computeroutput>clipper</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm (resp. clipper))</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> (<computeroutput>clipper</computeroutput>) a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm (resp. clipper)) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>if the property map is writable, the indices of the faces of <computeroutput>tm</computeroutput> and <computeroutput>clipper</computeroutput> will be set after refining <computeroutput>tm</computeroutput> with the intersection with <computeroutput>clipper</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the set of triangles close to the intersection of <computeroutput>tm</computeroutput> and <computeroutput>clipper</computeroutput> will be checked for self-intersections and <computeroutput>Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>clip_volume</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, and <computeroutput>tm</computeroutput> is closed, the clipping will be done on the volume <ref refid="index_1coref_def_subsec" kindref="member">bounded </ref> by <computeroutput>tm</computeroutput> rather than on its surface (i.e., <computeroutput>tm</computeroutput> will be kept closed). </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_compact_clipper</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>false</computeroutput>, the parts of <computeroutput>tm</computeroutput> coplanar with <computeroutput>clipper</computeroutput> will not be part of the output. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This option has an effect only if a surface and not a volume is clipped, (i.e., if <computeroutput>clip_volume</computeroutput> is <computeroutput>false</computeroutput> or if <computeroutput>tm</computeroutput> is open). </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_modify</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>(<computeroutput>np_c</computeroutput> only) if <computeroutput>true</computeroutput>, <computeroutput>clipper</computeroutput> will not be modified. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this option is set to <computeroutput>true</computeroutput>, <computeroutput>tm</computeroutput> is no longer required to be without self-intersection. Setting this option to <computeroutput>true</computeroutput> will automatically set <computeroutput>throw_on_self_intersection</computeroutput> to <computeroutput>false</computeroutput> and <computeroutput>clip_volume</computeroutput> to <computeroutput>false</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the output surface mesh is manifold. If <computeroutput>false</computeroutput> is returned <computeroutput>tm</computeroutput> and <computeroutput>clipper</computeroutput> are only corefined.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga642520055888a41a3e1a76965a1f9fbb" kindref="member">split()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/clip.h" line="610" column="1" bodyfile="CGAL/Polygon_mesh_processing/clip.h" bodystart="610" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga88ea5360f9fe65458f9086b453447662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::clip</definition>
        <argsstring>(TriangleMesh &amp;tm, const Plane_3 &amp;plane, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>clip</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::clip</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>clips <computeroutput>tm</computeroutput> by keeping the part that is on the negative side of <computeroutput>plane</computeroutput> (side opposite to its normal vector). </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is closed, the clipped part can be closed too if the named parameter <computeroutput>clip_volume</computeroutput> is set to <computeroutput>true</computeroutput>. See Subsection <ref refid="index_1coref_clip" kindref="member">Clipping</ref> for more details.</para>
<para><simplesect kind="note"><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput> must be from the same Kernel as the point of the internal vertex point map of <computeroutput>TriangleMesh</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput> must be from the same Kernel as the point of the vertex point map of <computeroutput>tm</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>, <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. An internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plane</parametername>
</parameternamelist>
<parameterdescription>
<para>plane whose negative side defines the half-space to intersect <computeroutput>tm</computeroutput> with. <computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput> is the plane type for the same <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> kernel as the point of the vertex point map of <computeroutput>tm</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the set of triangles close to the intersection of <computeroutput>tm</computeroutput> and <computeroutput>plane</computeroutput> will be checked for self-intersections and <computeroutput>CGAL::Polygon_mesh_processing::Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>clip_volume</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, and <computeroutput>tm</computeroutput> is closed, the clipping will be done on the volume <ref refid="index_1coref_def_subsec" kindref="member">bounded </ref> by <computeroutput>tm</computeroutput> rather than on its surface (i.e., <computeroutput>tm</computeroutput> will be kept closed). </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_compact_clipper</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>false</computeroutput> the parts of <computeroutput>tm</computeroutput> coplanar with <computeroutput>plane</computeroutput> will not be part of the output </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>allow_self_intersections</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, self-intersections are accepted for <computeroutput>tm</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this option is set to <computeroutput>true</computeroutput>, <computeroutput>tm</computeroutput> is no longer required to be without self-intersection. Setting this option to <computeroutput>true</computeroutput> will automatically set <computeroutput>throw_on_self_intersection</computeroutput> to <computeroutput>false</computeroutput> and <computeroutput>clip_volume</computeroutput> to <computeroutput>false</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the output surface mesh is manifold. If <computeroutput>false</computeroutput> is returned <computeroutput>tm</computeroutput> is only refined by the intersection with <computeroutput>plane</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga642520055888a41a3e1a76965a1f9fbb" kindref="member">split()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/clip.h" line="710" column="6" bodyfile="CGAL/Polygon_mesh_processing/clip.h" bodystart="710" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1gad934517ebf9a6427e52d457ed24faf79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::clip</definition>
        <argsstring>(TriangleMesh &amp;tm, const Iso_cuboid_3 &amp;iso_cuboid, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>clip</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::clip</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Iso_cuboid_3</ref> &amp;</type>
          <declname>iso_cuboid</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>clips <computeroutput>tm</computeroutput> by keeping the part that is inside <computeroutput>iso_cuboid</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is closed, the clipped part can be closed too if the named parameter <computeroutput>clip_volume</computeroutput> is set to <computeroutput>true</computeroutput>. See Subsection <ref refid="index_1coref_clip" kindref="member">Clipping</ref> for more details.</para>
<para><simplesect kind="note"><para><computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Iso_cuboid_3</ref></computeroutput> must be from the same Kernel as the point of the internal vertex point map of <computeroutput>TriangleMesh</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Iso_cuboid_3</ref></computeroutput> must be from the same Kernel as the point of the vertex point map of <computeroutput>tm</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>, <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. An internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iso_cuboid</parametername>
</parameternamelist>
<parameterdescription>
<para>iso-cuboid used to clip <computeroutput>tm</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the set of triangles close to the intersection of <computeroutput>tm</computeroutput> and <computeroutput>iso_cuboid</computeroutput> will be checked for self-intersections and <computeroutput>CGAL::Polygon_mesh_processing::Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>clip_volume</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, and <computeroutput>tm</computeroutput> is closed, the clipping will be done on the volume <ref refid="index_1coref_def_subsec" kindref="member">bounded </ref> by <computeroutput>tm</computeroutput> rather than on its surface (i.e., <computeroutput>tm</computeroutput> will be kept closed). </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_compact_clipper</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>false</computeroutput> the parts of <computeroutput>tm</computeroutput> coplanar with <computeroutput>iso_cuboid</computeroutput> will not be part of the output </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>allow_self_intersections</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, self-intersections are accepted for <computeroutput>tm</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this option is set to <computeroutput>true</computeroutput>, <computeroutput>tm</computeroutput> is no longer required to be without self-intersection. Setting this option to <computeroutput>true</computeroutput> will automatically set <computeroutput>throw_on_self_intersection</computeroutput> to <computeroutput>false</computeroutput> and <computeroutput>clip_volume</computeroutput> to <computeroutput>false</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the output surface mesh is manifold. If <computeroutput>false</computeroutput> is returned <computeroutput>tm</computeroutput> is only refined by the intersection with <computeroutput>iso_cuboid</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga642520055888a41a3e1a76965a1f9fbb" kindref="member">split()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/clip.h" line="820" column="6" bodyfile="CGAL/Polygon_mesh_processing/clip.h" bodystart="820" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga642520055888a41a3e1a76965a1f9fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::split</definition>
        <argsstring>(TriangleMesh &amp;tm, TriangleMesh &amp;splitter, const NamedParameters1 &amp;np_tm=parameters::default_values(), const NamedParameters2 &amp;np_s=parameters::default_values())</argsstring>
        <name>split</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::split</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>splitter</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np_tm</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np_s</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>corefines <computeroutput>tm</computeroutput> and <computeroutput>splitter</computeroutput> and duplicates edges in <computeroutput>tm</computeroutput> that are on the intersection with <computeroutput>splitter</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(splitter)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>, <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitter</parametername>
</parameternamelist>
<parameterdescription>
<para>triangulated surface mesh used to split <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_s</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> (<computeroutput>splitter</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>(<computeroutput>np_tm</computeroutput> only) a visitor used to track a series of events such as the creation of new faces, edges... in both <computeroutput>tm</computeroutput> and <computeroutput>splitter</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the set of triangles closed to the intersection of <computeroutput>tm</computeroutput> and <computeroutput>splitter</computeroutput> will be checked for self-intersections and <computeroutput>CGAL::Polygon_mesh_processing::Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_modify</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>(<computeroutput>np_s</computeroutput> only) if <computeroutput>true</computeroutput>, <computeroutput>splitter</computeroutput> will not be modified. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this option is set to <computeroutput>true</computeroutput>, <computeroutput>tm</computeroutput> is no longer required to be without self-intersection. Setting this option to <computeroutput>true</computeroutput> will automatically set <computeroutput>throw_on_self_intersection</computeroutput> to <computeroutput>false</computeroutput> and <computeroutput>clip_volume</computeroutput> to <computeroutput>false</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga5dc9e7acf8433235adc7b91ac93a7d42" kindref="member">clip()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/clip.h" line="906" column="6" bodyfile="CGAL/Polygon_mesh_processing/clip.h" bodystart="906" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1gad3aded948e73bd683903b9449601acb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::split</definition>
        <argsstring>(TriangleMesh &amp;tm, const Plane_3 &amp;plane, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>split</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::split</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>adds intersection edges of <computeroutput>plane</computeroutput> and <computeroutput>tm</computeroutput> in <computeroutput>tm</computeroutput> and duplicates those edges. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput> must be from the same Kernel as the point of the internal vertex point map of <computeroutput>TriangleMesh</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput> must be from the same Kernel as the point of the vertex point map of <computeroutput>tm</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>, <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. An internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plane</parametername>
</parameternamelist>
<parameterdescription>
<para>the plane that will be used to split <computeroutput>tm</computeroutput>. <computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput> is the plane type for the same <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> kernel as the point of the vertex point map of <computeroutput>tm</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the set of triangles close to the intersection of <computeroutput>tm</computeroutput> and <computeroutput>plane</computeroutput> will be checked for self-intersections and <computeroutput>CGAL::Polygon_mesh_processing::Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>allow_self_intersections</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, self-intersections are accepted for <computeroutput>tm</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this option is set to <computeroutput>true</computeroutput>, <computeroutput>tm</computeroutput> is no longer required to be without self-intersection. Setting this option to <computeroutput>true</computeroutput> will automatically set <computeroutput>throw_on_self_intersection</computeroutput> to <computeroutput>false</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga5dc9e7acf8433235adc7b91ac93a7d42" kindref="member">clip()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/clip.h" line="1004" column="6" bodyfile="CGAL/Polygon_mesh_processing/clip.h" bodystart="1004" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga0c49ffd458b13ee9489cad2321656f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::split</definition>
        <argsstring>(TriangleMesh &amp;tm, const Iso_cuboid_3 &amp;iso_cuboid, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>split</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::split</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Iso_cuboid_3</ref> &amp;</type>
          <declname>iso_cuboid</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>adds intersection edges of <computeroutput>iso_cuboid</computeroutput> and <computeroutput>tm</computeroutput> in <computeroutput>tm</computeroutput> and duplicates those edges. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Iso_cuboid_3</ref></computeroutput> must be from the same Kernel as the point of the internal vertex point map of <computeroutput>TriangleMesh</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Iso_cuboid_3</ref></computeroutput> must be from the same Kernel as the point of the vertex point map of <computeroutput>tm</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>, <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. An internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iso_cuboid</parametername>
</parameternamelist>
<parameterdescription>
<para>iso-cuboid used to split <computeroutput>tm</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the set of triangles close to the intersection of <computeroutput>tm</computeroutput> and <computeroutput>iso_cuboid</computeroutput> will be checked for self-intersections and <computeroutput>CGAL::Polygon_mesh_processing::Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>clip_volume</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, and <computeroutput>tm</computeroutput> is closed, the clipping will be done on the volume <ref refid="index_1coref_def_subsec" kindref="member">bounded </ref> by <computeroutput>tm</computeroutput> rather than on its surface (i.e., <computeroutput>tm</computeroutput> will be kept closed). </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_compact_clipper</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>false</computeroutput>, the parts of <computeroutput>tm</computeroutput> coplanar with <computeroutput>iso_cuboid</computeroutput> will not be part of the output. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para><itemizedlist>
<listitem></listitem></itemizedlist>
</para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>allow_self_intersections</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, self-intersections are accepted for <computeroutput>tm</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this option is set to <computeroutput>true</computeroutput>, <computeroutput>tm</computeroutput> is no longer required to be without self-intersection. Setting this option to <computeroutput>true</computeroutput> will automatically set <computeroutput>throw_on_self_intersection</computeroutput> to <computeroutput>false</computeroutput> and <computeroutput>clip_volume</computeroutput> to <computeroutput>false</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga5dc9e7acf8433235adc7b91ac93a7d42" kindref="member">clip()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/clip.h" line="1108" column="6" bodyfile="CGAL/Polygon_mesh_processing/clip.h" bodystart="1108" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__normal__grp_1ga8d98ee0b7fdfe2e3a0fad7ec18e2cb71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Vector_3</ref></type>
        <definition>Vector_3 CGAL::Polygon_mesh_processing::compute_face_normal</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor f, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>compute_face_normal</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::compute_face_normal</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the outward unit vector normal to face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the face whose normal is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh containing <computeroutput>f</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the computed normal. The return type is a 3D vector type. It is either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or from the geometric traits class deduced from the point property map of <computeroutput>pmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If the field type (<computeroutput>FT</computeroutput>) of the traits does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__normal__grp_1ga99095686a49fe6a45c933dae6217beb5" kindref="member">compute_face_normals()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/compute_normal.h" line="170" column="1" bodyfile="CGAL/Polygon_mesh_processing/compute_normal.h" bodystart="170" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__normal__grp_1ga99095686a49fe6a45c933dae6217beb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename Face_normal_map</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::compute_face_normals</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, Face_normal_map face_normals, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>compute_face_normals</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::compute_face_normals</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>Face_normal_map</type>
          <declname>face_normals</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the outward unit vector normal for all faces of the polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Face_normal_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput><ref refid="classKernel_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel::Vector_3</ref></computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face_normals</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map in which the normals are written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="warning"><para>This function involves a square root computation. If the field type (<computeroutput>FT</computeroutput>) of the traits does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__normal__grp_1ga8d98ee0b7fdfe2e3a0fad7ec18e2cb71" kindref="member">compute_face_normal()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/compute_normal.h" line="237" column="6" bodyfile="CGAL/Polygon_mesh_processing/compute_normal.h" bodystart="237" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__normal__grp_1ga8346b5625ca097a9938616d10079cec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Vector_3</ref></type>
        <definition>Vector_3 CGAL::Polygon_mesh_processing::compute_vertex_normal</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor v, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>compute_vertex_normal</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::compute_vertex_normal</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the unit normal at vertex <computeroutput>v</computeroutput> as a function of the normals of incident faces. </para>
        </briefdescription>
        <detaileddescription>
<para>The implementation is inspired by Aubry et al. &quot;On the most &apos;normal&apos; normal&quot; <ref refid="citelist_1CITEREF_cgal:al-otmnn-08" kindref="member">[2]</ref>, which aims to compute a normal that maximizes the visibility to the incident faces. If such normal does not exist or if the optimization process fails to find it, a fallback normal is computed as a sine-weighted sum of the normals of the incident faces.</para>
<para><simplesect kind="note"><para>The function <computeroutput><ref refid="group__PMP__normal__grp_1ga74e6b247d7e28beb677076aad5614d8c" kindref="member">compute_vertex_normals()</ref></computeroutput> should be preferred if normals are intended to be computed at all vertices of the graph.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertex whose normal is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh containing <computeroutput>v</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the computed normal. The return type is a 3D vector type. It is either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>pmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If the field type (<computeroutput>FT</computeroutput>) of the traits does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__normal__grp_1ga74e6b247d7e28beb677076aad5614d8c" kindref="member">compute_vertex_normals()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/compute_normal.h" line="669" column="1" bodyfile="CGAL/Polygon_mesh_processing/compute_normal.h" bodystart="669" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__normal__grp_1ga74e6b247d7e28beb677076aad5614d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename VertexNormalMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::compute_vertex_normals</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, VertexNormalMap vertex_normals, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>compute_vertex_normals</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::compute_vertex_normals</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>VertexNormalMap</type>
          <declname>vertex_normals</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the outward unit vector normal for all vertices of the polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexNormalMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and the return type of <computeroutput><ref refid="group__PMP__normal__grp_1ga8346b5625ca097a9938616d10079cec5" kindref="member">compute_vertex_normal()</ref></computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_normals</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map in which the normals are written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="warning"><para>This function involves a square root computation. If the field type (<computeroutput>FT</computeroutput>) of the traits does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__normal__grp_1ga8346b5625ca097a9938616d10079cec5" kindref="member">compute_vertex_normal()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/compute_normal.h" line="787" column="6" bodyfile="CGAL/Polygon_mesh_processing/compute_normal.h" bodystart="787" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__normal__grp_1ga4224769cbbedf39c9e73cb4997744ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename VertexNormalMap</type>
          </param>
          <param>
            <type>typename FaceNormalMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::compute_normals</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, VertexNormalMap vertex_normals, FaceNormalMap face_normals, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>compute_normals</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::compute_normals</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>VertexNormalMap</type>
          <declname>vertex_normals</declname>
        </param>
        <param>
          <type>FaceNormalMap</type>
          <declname>face_normals</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the outward unit vector normal for all vertices and faces of the polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexNormalMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput><ref refid="classKernel_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel::Vector_3</ref></computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceNormalMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput><ref refid="classKernel_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel::Vector_3</ref></computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_normals</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map in which the vertex normals are written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face_normals</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map in which the face normals are written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="warning"><para>This function involves a square root computation. If the field type (<computeroutput>FT</computeroutput>) of the traits does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__normal__grp_1ga74e6b247d7e28beb677076aad5614d8c" kindref="member">compute_vertex_normals()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__normal__grp_1ga99095686a49fe6a45c933dae6217beb5" kindref="member">compute_face_normals()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/compute_normal.h" line="887" column="6" bodyfile="CGAL/Polygon_mesh_processing/compute_normal.h" bodystart="887" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1gad417b04f530806789515a25530547a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>FaceOutputIterator</type>
        <definition>FaceOutputIterator CGAL::Polygon_mesh_processing::connected_component</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor seed_face, const PolygonMesh &amp;pmesh, FaceOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>connected_component</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::connected_component</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor</type>
          <declname>seed_face</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>FaceOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>discovers all the faces in the same connected component as <computeroutput>seed_face</computeroutput> and records them in <computeroutput>out</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>seed_face</computeroutput> will also be added in <computeroutput>out</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed_face</parametername>
</parameternamelist>
<parameterdescription>
<para>a face of <computeroutput>pmesh</computeroutput> from which exploration starts to detect the connected component that contains it </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator that collects faces from the same connected component as <computeroutput>seed_face</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge key </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the output iterator.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga239704e9a2752ed67d361be55acf3bf9" kindref="member">connected_components()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="121" column="1" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="121" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1ga239704e9a2752ed67d361be55acf3bf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceComponentMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>boost::property_traits&lt; FaceComponentMap &gt;::value_type</type>
        <definition>boost::property_traits&lt; FaceComponentMap &gt;::value_type CGAL::Polygon_mesh_processing::connected_components</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, FaceComponentMap fcm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::connected_components</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>FaceComponentMap</type>
          <declname>fcm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes for each face the index of the corresponding connected component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceComponentMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::faces_size_type</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcm</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map with indices of components associated to faces in <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of connected components.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gad417b04f530806789515a25530547a36" kindref="member">connected_component()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="201" column="1" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="201" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1ga7dd1414e9366fed26c1f12c12c376b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename ComponentRange</type>
          </param>
          <param>
            <type>typename FaceComponentMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::keep_connected_components</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const ComponentRange &amp;components_to_keep, const FaceComponentMap &amp;fcm, const NamedParameters &amp;np)</argsstring>
        <name>keep_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::keep_connected_components</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const ComponentRange &amp;</type>
          <declname>components_to_keep</declname>
        </param>
        <param>
          <type>const FaceComponentMap &amp;</type>
          <declname>fcm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>keeps the connected components designated by theirs ids in <computeroutput>components_to_keep</computeroutput>, and removes the other connected components as well as all isolated vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>The connected component id of a face is given by <computeroutput>fcm</computeroutput>.</para>
<para><simplesect kind="note"><para>If the removal of the connected components makes <computeroutput>pmesh</computeroutput> a non-manifold surface, then the behavior of this function is undefined.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ComponentRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of ids convertible to <computeroutput>std::size</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceComponentMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::faces_size_type</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>components_to_keep</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of ids of connected components to keep </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcm</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map with indices of components associated to faces in <computeroutput>pmesh</computeroutput>. After calling this function, the values of <computeroutput>fcm</computeroutput> are undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gaa30dc31656db0f4d1cab5b2c977bf855" kindref="member">remove_connected_components()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="789" column="6" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="789" bodyend="795" declfile="CGAL/Polygon_mesh_processing/connected_components.h" declline="261" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1gae3812da28af74bdf9602a70ae1f9c817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::keep_largest_connected_components</definition>
        <argsstring>(PolygonMesh &amp;pmesh, std::size_t nb_components_to_keep, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>keep_largest_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::keep_largest_connected_components</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nb_components_to_keep</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>removes the small connected components and all isolated vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Keep the <computeroutput>nb_components_to_keep</computeroutput> largest connected components, where the size of a connected component is computed as the sum of the individual sizes of all the faces of the connected component. By default, the size of a face is <computeroutput>1</computeroutput> (and thus the size of a connected component is the number of faces it contains), but it is also possible to pass custom sizes, such as the area of the face.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_components_to_keep</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of components to be kept. If this number is larger than the number of components in the mesh, all components are kept. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_size_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a size </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type. The value type is chosen by the user, but must be constructible from <computeroutput>0</computeroutput> and support summation and comparisons. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>A constant property map returning <computeroutput>1</computeroutput> for any face </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>dry_run</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If set to <computeroutput>true</computeroutput>, the mesh will not be altered, but the number of components that would be removed is returned. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an output iterator to collect the faces that would be removed by the algorithm, when using the &quot;dry run&quot; mode (see parameter <computeroutput>dry_run</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>face_descriptor</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of connected components removed (ignoring isolated vertices).</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gad08d3489808a6ec8382a9fba3d288f39" kindref="member">keep_large_connected_components()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="386" column="13" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="386" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1gad08d3489808a6ec8382a9fba3d288f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename ThresholdValueType</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::keep_large_connected_components</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const ThresholdValueType threshold_value, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>keep_large_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::keep_large_connected_components</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const ThresholdValueType</type>
          <declname>threshold_value</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>removes connected components whose size is (strictly) smaller than a given threshold value, where the size of a connected component is computed as the sum of the individual sizes of all the faces of the connected component. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, the size of a face is <computeroutput>1</computeroutput> (and thus the size of a connected component is the number of faces it contains), but it is also possible to pass custom sizes, such as the area of the face.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ThresholdValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the threshold value. If a face size property map is passed by the user, <computeroutput>ThresholdValueType</computeroutput> must be the same type as the value type of the property map. Otherwise, <computeroutput>ThresholdValueType</computeroutput> must be <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold_value</parametername>
</parameternamelist>
<parameterdescription>
<para>any connected component with a size (strictly) smaller than this value will be discarded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_size_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a size </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type. The value type is chosen by the user, but must be constructible from <computeroutput>0</computeroutput> and support summation and comparisons. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>A constant property map returning <computeroutput>1</computeroutput> for any face </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>dry_run</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If set to <computeroutput>true</computeroutput>, the mesh will not be altered, but the number of components that would be removed is returned. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an output iterator to collect the faces that would be removed by the algorithm, when using the &quot;dry run&quot; mode (see parameter <computeroutput>dry_run</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>face_descriptor</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of connected components removed (ignoring isolated vertices).</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gae3812da28af74bdf9602a70ae1f9c817" kindref="member">keep_largest_connected_components()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="537" column="13" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="537" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="connected__components_8h_1a7d1d8933ba99382e5a99a07edec21008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename ComponentRange</type>
          </param>
          <param>
            <type>typename FaceComponentMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::keep_or_remove_connected_components</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const ComponentRange &amp;components_to_keep, const FaceComponentMap &amp;fcm, bool keep, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>keep_or_remove_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::keep_or_remove_connected_components</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const ComponentRange &amp;</type>
          <declname>components_to_keep</declname>
        </param>
        <param>
          <type>const FaceComponentMap &amp;</type>
          <declname>fcm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="613" column="6" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="613" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1gaa30dc31656db0f4d1cab5b2c977bf855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename ComponentRange</type>
          </param>
          <param>
            <type>typename FaceComponentMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::remove_connected_components</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const ComponentRange &amp;components_to_remove, const FaceComponentMap &amp;fcm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_connected_components</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const ComponentRange &amp;</type>
          <declname>components_to_remove</declname>
        </param>
        <param>
          <type>const FaceComponentMap &amp;</type>
          <declname>fcm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>removes in <computeroutput>pmesh</computeroutput> the connected components designated by theirs ids in <computeroutput>components_to_remove</computeroutput> as well as all isolated vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>The connected component id of a face is given by <computeroutput>fcm</computeroutput>.</para>
<para><simplesect kind="note"><para>If the removal of the connected components makes <computeroutput>pmesh</computeroutput> a non-manifold surface, then the behavior of this function is undefined.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ComponentRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of ids convertible to <computeroutput>std::size</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceComponentMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::faces_size_type</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>components_to_remove</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of ids of connected components to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcm</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map with indices of components associated to faces in <computeroutput>pmesh</computeroutput>. After calling this function, the values of <computeroutput>fcm</computeroutput> are undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga7dd1414e9366fed26c1f12c12c376b39" kindref="member">keep_connected_components()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="835" column="6" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="835" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1gac1f733c7e7735c3fcec1ca107e6962ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::remove_connected_components</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const FaceRange &amp;components_to_remove, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_connected_components</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>components_to_remove</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>keeps the connected components not designated by the faces in <computeroutput>components_to_remove</computeroutput>, and removes the other connected components and all isolated vertices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the removal of the connected components makes <computeroutput>pmesh</computeroutput> a non-manifold surface, then the behavior of this function is undefined.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> indicating the connected components to be removed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>components_to_remove</parametername>
</parameternamelist>
<parameterdescription>
<para>a face range, including one face or more on each component to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga7dd1414e9366fed26c1f12c12c376b39" kindref="member">keep_connected_components()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="890" column="6" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="890" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1ga21048d100cc51ab6d1f5e48189e10d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::keep_connected_components</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const FaceRange &amp;components_to_keep, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>keep_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::keep_connected_components</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>components_to_keep</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>keeps the connected components designated by the faces in <computeroutput>components_to_keep</computeroutput>, and removes the other connected components and all isolated vertices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the removal of the connected components makes <computeroutput>pmesh</computeroutput> a non-manifold surface, then the behavior of this function is undefined.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> indicating the connected components to be kept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>components_to_keep</parametername>
</parameternamelist>
<parameterdescription>
<para>a face range, including one face or more on each component to be kept </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gaa30dc31656db0f4d1cab5b2c977bf855" kindref="member">remove_connected_components()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="962" column="6" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="962" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__keep__connected__components__grp_1ga510bdc621fa423d202b22ba82c20ca7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class PolygonMeshRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::split_connected_components</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, PolygonMeshRange &amp;cc_meshes, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>split_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::split_connected_components</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>PolygonMeshRange &amp;</type>
          <declname>cc_meshes</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>identifies the connected components of <computeroutput>pmesh</computeroutput> and pushes back a new <computeroutput>PolygonMesh</computeroutput> for each connected component in <computeroutput>cc_meshes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMeshRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> with <computeroutput>PolygonMesh</computeroutput> as value type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc_meshes</parametername>
</parameternamelist>
<parameterdescription>
<para>container that is filled with the extracted connected components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>halfedge_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each halfedge of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_halfedges(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_patch_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map with the patch id&apos;s associated to the faces of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and the desired property, model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where each face is associated with the ID of the connected component it belongs to. Connected components are computed with respect to the constrained edges listed in the property map <computeroutput>edge_is_constrained_map</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The map is updated during the remeshing process while new faces are created. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/connected_components.h" line="1104" column="6" bodyfile="CGAL/Polygon_mesh_processing/connected_components.h" bodystart="1104" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1gaafa5e46c35c3fef461a47d73b4566961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NPIn1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NPIn2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NPOut0</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NPOut1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NPOut2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NPOut3</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::array&lt; bool, 4 &gt;</type>
        <definition>std::array&lt; bool, 4 &gt; CGAL::Polygon_mesh_processing::corefine_and_compute_boolean_operations</definition>
        <argsstring>(TriangleMesh &amp;tm1, TriangleMesh &amp;tm2, const std::array&lt; std::optional&lt; TriangleMesh * &gt;, 4 &gt; &amp;output, const NPIn1 &amp;np1=parameters::default_values(), const NPIn2 &amp;np2=parameters::default_values(), const std::tuple&lt; NPOut0, NPOut1, NPOut2, NPOut3 &gt; &amp;nps_out=std::tuple&lt; NPOut0, NPOut1, NPOut2, NPOut3 &gt;())</argsstring>
        <name>corefine_and_compute_boolean_operations</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::corefine_and_compute_boolean_operations</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const std::array&lt; std::optional&lt; TriangleMesh * &gt;, 4 &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NPIn1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NPIn2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const std::tuple&lt; NPOut0, NPOut1, NPOut2, NPOut3 &gt; &amp;</type>
          <declname>nps_out</declname>
          <defval>std::tuple&lt; NPOut0, NPOut1, NPOut2, NPOut3 &gt;()</defval>
        </param>
        <briefdescription>
<para><ref refid="index_1coref_def_subsec" kindref="member">corefines </ref> <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> and for each triangle mesh <computeroutput>tm_out</computeroutput> passed as an optional in <computeroutput>output</computeroutput> different from <computeroutput>std::nullopt</computeroutput>, the triangulated surface mesh <ref refid="index_1coref_def_subsec" kindref="member">bounding </ref> the result of a particular Boolean operation between the volumes bounded by <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be put in the corresponding triangle mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The positions of the meshes in the array <computeroutput>output</computeroutput> are specific to the Boolean operation to compute and <computeroutput><ref refid="group__PMP__corefinement__grp_1ga3be2ae4b7de3a1d9288f7febfc27eb9a" kindref="member">Corefinement::Boolean_operation_type</ref></computeroutput> encodes and describes the ordering. Constructing the default array means that no Boolean operation will be done. Overwriting a default value will trigger the corresponding operation. In such a case, the address to a valid surface mesh must be provided. The optional named parameters for all output meshes are provided as a <computeroutput>tuple</computeroutput> and follow the same order as the array <computeroutput>output</computeroutput>. A call to <computeroutput><ref refid="group__PMP__corefinement__grp_1gaafa5e46c35c3fef461a47d73b4566961" kindref="member">corefine_and_compute_boolean_operations()</ref></computeroutput> with optional named parameters passed for output meshes should be done using <computeroutput>make_tuple()</computeroutput> as the types of named parameters are unspecified.</para>
<para>If <computeroutput>tm1</computeroutput> and/or <computeroutput>tm2</computeroutput> are part of the output surface meshes, they will be updated to contain the output (in-place operation), in any other case, the corresponding result will be inserted into the mesh without clearing it first. <simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm2)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(tm2)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NPIn1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NPIn2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NPOut0</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for computing the union of the volumes bounded by <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NPOut1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for computing the intersection of the volumes bounded by <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NPOut2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for computing the difference of the volumes bounded by <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NPOut3</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for computing the difference of the volumes bounded by <computeroutput>tm2</computeroutput> and <computeroutput>tm1</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>first input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>second input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of output surface meshes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm1 (tm2))</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm1) - 1</computeroutput> (<computeroutput>num_faces(tm2) - 1</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the property map is writable, the indices of the faces of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be set after the corefinement is done. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the set of triangles close to the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be checked for self-intersections and <computeroutput>Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nps_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional tuple of sequences of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> each among the ones listed below (<computeroutput>tm_out</computeroutput> being used to refer to the output surface mesh in <computeroutput>output</computeroutput> corresponding to a given named parameter sequence)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm_out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm_out)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm_out</computeroutput>. An edge of <computeroutput>tm_out</computeroutput> is constrained if it is on the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>, or if the edge corresponds to a constrained edge in <computeroutput>tm1</computeroutput> or <computeroutput>tm2</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>an array filled as follows: for each operation computed, the position in the array will contain <computeroutput>true</computeroutput> iff the output surface mesh is manifold, and it is put in the surface mesh at the same position as in <computeroutput>output</computeroutput>. Note that if an output surface mesh also was an input mesh but the output operation was generating a non-manifold mesh, the surface mesh will only be corefined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/corefinement.h" line="273" column="1" bodyfile="CGAL/Polygon_mesh_processing/corefinement.h" bodystart="273" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga95f618914f8d54d840065204b029492f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParametersOut</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::corefine_and_compute_union</definition>
        <argsstring>(TriangleMesh &amp;tm1, TriangleMesh &amp;tm2, TriangleMesh &amp;tm_out, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values(), const NamedParametersOut &amp;np_out=parameters::default_values())</argsstring>
        <name>corefine_and_compute_union</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::corefine_and_compute_union</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm_out</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParametersOut &amp;</type>
          <declname>np_out</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="index_1coref_def_subsec" kindref="member">corefines </ref> <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> and puts in <computeroutput>tm_out</computeroutput> a triangulated surface mesh <ref refid="index_1coref_def_subsec" kindref="member">bounding </ref> the union of the volumes bounded by <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm_out</computeroutput> is one of the input surface meshes, it will be updated to contain the output (in-place operation), otherwise the result will be inserted into <computeroutput>tm_out</computeroutput> without clearing it first. <simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm2)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(tm2)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParametersOut</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>first input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>second input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm1 (tm2))</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm1) - 1</computeroutput> (<computeroutput>num_faces(tm2) - 1</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the property map is writable, the indices of the faces of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be set after the corefinement is done. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> the set of triangles close to the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be checked for self-intersections and <computeroutput>Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm_out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm_out)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm_out</computeroutput>. An edge of <computeroutput>tm_out</computeroutput> is constrained if it is on the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>, or if the edge corresponds to a constrained edge in <computeroutput>tm1</computeroutput> or <computeroutput>tm2</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the output surface mesh is manifold and is put into <computeroutput>tm_out</computeroutput>. If <computeroutput>false</computeroutput> is returned and if <computeroutput>tm_out</computeroutput> is one of the input surface meshes, then <computeroutput>tm_out</computeroutput> is only corefined. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/corefinement.h" line="605" column="1" bodyfile="CGAL/Polygon_mesh_processing/corefinement.h" bodystart="605" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga3ff96d36cad8f37efcdada916c46fbbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParametersOut</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::corefine_and_compute_intersection</definition>
        <argsstring>(TriangleMesh &amp;tm1, TriangleMesh &amp;tm2, TriangleMesh &amp;tm_out, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values(), const NamedParametersOut &amp;np_out=parameters::default_values())</argsstring>
        <name>corefine_and_compute_intersection</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::corefine_and_compute_intersection</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm_out</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParametersOut &amp;</type>
          <declname>np_out</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="index_1coref_def_subsec" kindref="member">corefines </ref> <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> and puts in <computeroutput>tm_out</computeroutput> a triangulated surface mesh <ref refid="index_1coref_def_subsec" kindref="member">bounding </ref> the intersection of the volumes bounded by <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm_out</computeroutput> is one of the input surface meshes, it will be updated to contain the output (in-place operation), otherwise the result will be inserted into <computeroutput>tm_out</computeroutput> without clearing it first. <simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm2)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(tm2)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParametersOut</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>first input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>second input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm1 (tm2))</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm1) - 1</computeroutput> (<computeroutput>num_faces(tm2) - 1</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the property map is writable, the indices of the faces of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be set after the corefinement is done. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> the set of triangles close to the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be checked for self-intersections and <computeroutput>Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm_out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm_out)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm_out</computeroutput>. An edge of <computeroutput>tm_out</computeroutput> is constrained if it is on the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>, or if the edge corresponds to a constrained edge in <computeroutput>tm1</computeroutput> or <computeroutput>tm2</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the output surface mesh is manifold and is put into <computeroutput>tm_out</computeroutput>. If <computeroutput>false</computeroutput> is returned and if <computeroutput>tm_out</computeroutput> is one of the input surface meshes, then <computeroutput>tm_out</computeroutput> is only corefined. <linebreak/>
   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/corefinement.h" line="637" column="1" bodyfile="CGAL/Polygon_mesh_processing/corefinement.h" bodystart="637" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga02fa6ed9116a759ecfb87063392f5455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParametersOut</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::corefine_and_compute_difference</definition>
        <argsstring>(TriangleMesh &amp;tm1, TriangleMesh &amp;tm2, TriangleMesh &amp;tm_out, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values(), const NamedParametersOut &amp;np_out=parameters::default_values())</argsstring>
        <name>corefine_and_compute_difference</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::corefine_and_compute_difference</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm_out</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParametersOut &amp;</type>
          <declname>np_out</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="index_1coref_def_subsec" kindref="member">corefines </ref> <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> and puts in <computeroutput>tm_out</computeroutput> a triangulated surface mesh <ref refid="index_1coref_def_subsec" kindref="member">bounding </ref> the volume bounded by <computeroutput>tm1</computeroutput> minus the volume bounded by <computeroutput>tm2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm_out</computeroutput> is one of the input surface meshes, it will be updated to contain the output (in-place operation), otherwise the result will be inserted into <computeroutput>tm_out</computeroutput> without clearing it first. <simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm2)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::does_bound_a_volume(tm2)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParametersOut</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>first input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>second input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm1 (tm2))</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm1) - 1</computeroutput> (<computeroutput>num_faces(tm2) - 1</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the property map is writable, the indices of the faces of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be set after the corefinement is done. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> the set of triangles close to the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be checked for self-intersections and <computeroutput>Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm_out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm_out)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm_out</computeroutput>. An edge of <computeroutput>tm_out</computeroutput> is constrained if it is on the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>, or if the edge corresponds to a constrained edge in <computeroutput>tm1</computeroutput> or <computeroutput>tm2</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the output surface mesh is manifold and is put into <computeroutput>tm_out</computeroutput>. If <computeroutput>false</computeroutput> is returned and if <computeroutput>tm_out</computeroutput> is one of the input surface meshes, then <computeroutput>tm_out</computeroutput> is only corefined. <linebreak/>
   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/corefinement.h" line="669" column="1" bodyfile="CGAL/Polygon_mesh_processing/corefinement.h" bodystart="669" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga54baccf4fbd1b1ada67465ec1d4bddc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::corefine</definition>
        <argsstring>(TriangleMesh &amp;tm1, TriangleMesh &amp;tm2, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>corefine</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::corefine</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="index_1coref_def_subsec" kindref="member">corefines </ref> <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>For each input triangulated surface mesh, if a constrained edge is provided, intersection edges will be marked as constrained. If an edge that was marked as constrained is split, its sub-edges will be marked as constrained as well.</para>
<para><simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm2)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>first input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>second input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm1 (tm2))</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a constant property map returning <computeroutput>false</computeroutput> for any edge </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track the creation of new faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPCorefinementVisitor" kindref="compound">PMPCorefinementVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Corefinement_1_1Default__visitor" kindref="compound">Corefinement::Default_visitor</ref>&lt;TriangleMesh&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> the set of triangles close to the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be checked for self-intersections and <computeroutput>Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_modify</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>true</computeroutput>, the corresponding mesh will not be updated. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is set to <computeroutput>true</computeroutput> for both meshes nothing will be done. If this option is set to <computeroutput>true</computeroutput> for one mesh, the other mesh is no longer required to be without self-intersection. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/corefinement.h" line="756" column="1" bodyfile="CGAL/Polygon_mesh_processing/corefinement.h" bodystart="756" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__detect__features__grp_1gadd3d18c0a9773463cd57902f85d0b23d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename EdgeIsFeatureMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::detect_sharp_edges</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, FT angle_in_deg, EdgeIsFeatureMap edge_is_feature_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>detect_sharp_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::detect_sharp_edges</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>angle_in_deg</declname>
        </param>
        <param>
          <type>EdgeIsFeatureMap</type>
          <declname>edge_is_feature_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>detects and marks the edges that are considered to be sharp with respect to the given angle bound. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>angle_in_deg</computeroutput> gives the maximum angle (in degrees) between the two normal vectors of adjacent triangles. For an edge of the input polygon mesh, if the angle between the two normal vectors of its incident facets is bigger than the given bound, then the edge is marked as being a feature edge.</para>
<para>Also computes the number of sharp edges incident to each vertex, if <computeroutput>vertex_feature_degree_map</computeroutput> is provided.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>a number type. It is either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or from the geometric traits class deduced from the point property map of <computeroutput>PolygonMesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeIsFeatureMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_in_deg</parametername>
</parameternamelist>
<parameterdescription>
<para>the dihedral angle bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_is_feature_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map that will contain the sharp-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_feature_degree_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that will associate to each vertex of <computeroutput>pmesh</computeroutput> the number of incident feature edges </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_feature_degree_t(), pmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__detect__features__grp_1gad9cf9f1c459540156fb235a487bebd01" kindref="member">sharp_edges_segmentation()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/detect_features.h" line="275" column="6" bodyfile="CGAL/Polygon_mesh_processing/detect_features.h" bodystart="275" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__detect__features__grp_1ga68042f21c5cafe94d316c4b1fe7c9aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename PatchIdMap</type>
          </param>
          <param>
            <type>typename VertexIncidentPatchesMap</type>
          </param>
          <param>
            <type>typename EdgeIsFeatureMap</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::detect_vertex_incident_patches</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, const PatchIdMap patch_id_map, VertexIncidentPatchesMap vertex_incident_patches_map, const EdgeIsFeatureMap edge_is_feature_map)</argsstring>
        <name>detect_vertex_incident_patches</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::detect_vertex_incident_patches</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const PatchIdMap</type>
          <declname>patch_id_map</declname>
        </param>
        <param>
          <type>VertexIncidentPatchesMap</type>
          <declname>vertex_incident_patches_map</declname>
        </param>
        <param>
          <type>const EdgeIsFeatureMap</type>
          <declname>edge_is_feature_map</declname>
        </param>
        <briefdescription>
<para>collects the surface patches of the faces incident to each vertex of the input polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PatchIdMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and the desired patch id, model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexIncidentPatchesMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of mutable <computeroutput><ref refid="classLvaluePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LvaluePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type. Its value type must be a container of <computeroutput>boost::property_traits&lt;PatchIdMap&gt;::value_type</computeroutput> and have a function <computeroutput>insert()</computeroutput>. A <computeroutput>std::set</computeroutput> or a <computeroutput>boost::unordered_set</computeroutput> are recommended, as a patch index may be inserted several times. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeIsFeatureMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map containing the surface patch ids for the faces of <computeroutput>pmesh</computeroutput>. It must be already filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_incident_patches_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map that will contain the patch ids of all the faces incident to each vertex of <computeroutput>pmesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_is_feature_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a filled property map that will contain the sharp-or-not status of each edge of <computeroutput>pmesh</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__detect__features__grp_1gad9cf9f1c459540156fb235a487bebd01" kindref="member">sharp_edges_segmentation()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/detect_features.h" line="326" column="6" bodyfile="CGAL/Polygon_mesh_processing/detect_features.h" bodystart="326" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__detect__features__grp_1gad9cf9f1c459540156fb235a487bebd01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename EdgeIsFeatureMap</type>
          </param>
          <param>
            <type>typename PatchIdMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; PolygonMesh &gt;::faces_size_type</type>
        <definition>boost::graph_traits&lt; PolygonMesh &gt;::faces_size_type CGAL::Polygon_mesh_processing::sharp_edges_segmentation</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, FT angle_in_deg, EdgeIsFeatureMap edge_is_feature_map, PatchIdMap patch_id_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>sharp_edges_segmentation</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::sharp_edges_segmentation</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>angle_in_deg</declname>
        </param>
        <param>
          <type>EdgeIsFeatureMap</type>
          <declname>edge_is_feature_map</declname>
        </param>
        <param>
          <type>PatchIdMap</type>
          <declname>patch_id_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>This function calls successively <computeroutput><ref refid="group__PMP__detect__features__grp_1gadd3d18c0a9773463cd57902f85d0b23d" kindref="member">CGAL::Polygon_mesh_processing::detect_sharp_edges()</ref></computeroutput>, <computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga239704e9a2752ed67d361be55acf3bf9" kindref="member">CGAL::Polygon_mesh_processing::connected_components()</ref></computeroutput>, and <computeroutput><ref refid="group__PMP__detect__features__grp_1ga68042f21c5cafe94d316c4b1fe7c9aed" kindref="member">CGAL::Polygon_mesh_processing::detect_vertex_incident_patches()</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>It detects and marks the sharp edges of <computeroutput>pmesh</computeroutput> according to <computeroutput>angle_in_deg</computeroutput>. The sharp edges define a segmentation of <computeroutput>pmesh</computeroutput>, that is done by computing a surface patch id for each face.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>a number type. It is either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or from the geometric traits class deduced from the point property map of <computeroutput>PolygonMesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeIsFeatureMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PatchIdMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and the desired patch id, model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_in_deg</parametername>
</parameternamelist>
<parameterdescription>
<para>the dihedral angle bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_is_feature_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map that will contain the sharp-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map that will contain the surface patch ids for the faces of <computeroutput>pmesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_feature_degree_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that will associate to each vertex of <computeroutput>pmesh</computeroutput> the number of incident feature edges </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_feature_degree_t(), pmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>first_index</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the index of the first surface patch of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::size_t</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The patches will be numbered on <computeroutput>[first_index; first_index + num_patches]</computeroutput>, where <computeroutput>num_patches</computeroutput> is the number of surface patches. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_incident_patches_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that will contain the patch ids of all the faces incident to each vertex of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of mutable <computeroutput><ref refid="classLvaluePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LvaluePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type. Its value type must be a container of <computeroutput>boost::property_traits&lt;PatchIdMap&gt;::value_type</computeroutput> and have a function <computeroutput>insert()</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A <computeroutput>std::set</computeroutput> or a <computeroutput>boost::unordered_set</computeroutput> are recommended, as a patch index may be inserted several times. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
<simplesect kind="return"><para>the number of surface patches.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__detect__features__grp_1gadd3d18c0a9773463cd57902f85d0b23d" kindref="member">CGAL::Polygon_mesh_processing::detect_sharp_edges()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga239704e9a2752ed67d361be55acf3bf9" kindref="member">CGAL::Polygon_mesh_processing::connected_components()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__detect__features__grp_1ga68042f21c5cafe94d316c4b1fe7c9aed" kindref="member">CGAL::Polygon_mesh_processing::detect_vertex_incident_patches()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/detect_features.h" line="451" column="1" bodyfile="CGAL/Polygon_mesh_processing/detect_features.h" bodystart="451" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="distance_8h_1a89ec0a5600eabf925fcebe1e8fe2a20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
          </param>
          <param>
            <type>class FaceRange</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class VertexPointMap</type>
          </param>
          <param>
            <type>class PointOutputIterator</type>
          </param>
        </templateparamlist>
        <type>PointOutputIterator</type>
        <definition>PointOutputIterator CGAL::Polygon_mesh_processing::sample_triangles</definition>
        <argsstring>(const FaceRange &amp;triangles, const TriangleMesh &amp;tm, VertexPointMap vpm, double distance, PointOutputIterator out, bool sample_faces, bool sample_edges, bool add_vertices)</argsstring>
        <name>sample_triangles</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::sample_triangles</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>VertexPointMap</type>
          <declname>vpm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample_faces</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample_edges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>add_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="343" column="1" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="343" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointOutputIterator</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>PointOutputIterator</type>
        <definition>PointOutputIterator CGAL::Polygon_mesh_processing::sample_triangle_mesh</definition>
        <argsstring>(const TriangleMesh &amp;tm, PointOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>sample_triangle_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::sample_triangle_mesh</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>generates points on <computeroutput>tm</computeroutput> and outputs them to <computeroutput>out</computeroutput>; the sampling method is selected using named parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of the same point type as the value type of the point type associated to the mesh <computeroutput>tm</computeroutput>, i.e., the value type of the vertex point map property map, if provided, or the value type of the internal point property map otherwise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to be sampled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator to be filled with sample points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="16" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPDistanceTraits" kindref="compound">PMPDistanceTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>random_seed</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value to seed the random number generator </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a value generated with <computeroutput>std::time()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_random_uniform_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, points are generated uniformly at random on faces and/or edges of <computeroutput>tm</computeroutput>. If <computeroutput>do_sample_faces</computeroutput> is <computeroutput>true</computeroutput>, random points will be iteratively generated uniformly at random in the triangle of a face selected with probability proportional to its area. If <computeroutput>do_sample_edges</computeroutput> is <computeroutput>true</computeroutput>, random points will be iteratively generated uniformly at random in the segment of an edge selected with probability proportional to its length. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>For faces, the number of sample points is the value passed to the named parameter <computeroutput>number_of_points_on_faces</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_area_unit</computeroutput> is multiplied by the area of <computeroutput>tm</computeroutput> to get the number of sample points. If none of these parameters is set, the number of points sampled is <computeroutput>num_vertices(tm)</computeroutput>. For edges, the number of the number of sample points is the value passed to the named parameter <computeroutput>number_of_points_on_edges</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_distance_unit</computeroutput> is multiplied by the sum of the length of edges of <computeroutput>tm</computeroutput> to get the number of sample points. If none of these parameters is set, the number of points sampled is <computeroutput>num_vertices(tm)</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_grid_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, points are generated on a grid in each triangle, with a minimum of one point per triangle. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The distance between two consecutive points in the grid is that of the length of the smallest non-null edge of <computeroutput>tm</computeroutput> or the value passed to the named parameter <computeroutput>grid_spacing</computeroutput>. Edges are also split using the same distance, if requested. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_monte_carlo_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>true</computeroutput> is passed, points are generated randomly in each triangle and/or on each edge. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>For faces, the number of points per triangle is the value passed to the named parameter <computeroutput>number_of_points_per_face</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_area_unit</computeroutput> is used to pick a number of points per face proportional to the triangle area with a minimum of one point per face. If none of these parameters is set, 2 divided by the square of the length of the smallest non-null edge of <computeroutput>tm</computeroutput> is used as if it was passed to <computeroutput>number_of_points_per_area_unit</computeroutput>. For edges, the number of points per edge is the value passed to the named parameter <computeroutput>number_of_points_per_edge</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_distance_unit</computeroutput> is used to pick a number of points per edge proportional to the length of the edge with a minimum of one point per face. If none of these parameters is set, 1 divided by the length of the smallest non-null edge of <computeroutput>tm</computeroutput> is used as if it was passed to <computeroutput>number_of_points_per_distance_unit</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_vertices</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, the vertices of <computeroutput>tm</computeroutput> are part of the sample. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_edges</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, edges of <computeroutput>tm</computeroutput> are sampled. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, faces of <computeroutput>tm</computeroutput> are sampled. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>grid_spacing</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used as the grid spacing for the grid sampling method </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the length of the shortest, non-degenerate edge of <computeroutput>tm</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_on_edges</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling method as the number of points to pick exclusively on edges </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>num_vertices(tm)</computeroutput> or a value based on <computeroutput>nb_points_per_distance_unit</computeroutput>, if it is defined </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_on_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling method as the number of points to pick on the surface </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>num_vertices(tm)</computeroutput> or a value based on <computeroutput>nb_points_per_area_unit</computeroutput>, if it is defined </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_distance_unit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling and the Monte Carlo sampling methods to respectively determine the total number of points on edges and the number of points per edge </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> divided by the length of the shortest, non-degenerate edge of <computeroutput>tm</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_edge</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used by the Monte-Carlo sampling method as the number of points per edge to pick </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_area_unit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling and the Monte Carlo sampling methods to respectively determine the total number of points inside faces and the number of points per face </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>2</computeroutput> divided by the squared length of the shortest, non-degenerate edge of <computeroutput>tm</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_face</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used by the Monte-Carlo sampling method as the number of points per face to pick </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__distance__grp_1ga276e117793ebf6abbb3629423ad700e9" kindref="member">CGAL::Polygon_mesh_processing::sample_triangle_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="899" column="1" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="899" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga276e117793ebf6abbb3629423ad700e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointOutputIterator</type>
          </param>
          <param>
            <type>class TriangleRange</type>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>PointOutputIterator</type>
        <definition>PointOutputIterator CGAL::Polygon_mesh_processing::sample_triangle_soup</definition>
        <argsstring>(const PointRange &amp;points, const TriangleRange &amp;triangles, PointOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>sample_triangle_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::sample_triangle_soup</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>generates points on a triangle soup and puts them to <computeroutput>out</computeroutput>; the sampling method is selected using named parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integral value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of the same type as <computeroutput>PointRange</computeroutput>&apos;s value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the points of the soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>TriangleRange</computeroutput> containing the triangles of the soup to be sampled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator to be filled with sample points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="11" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPDistanceTraits" kindref="compound">PMPDistanceTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the point range&apos;s point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>random_seed</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value to seed the random number generator </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a value generated with <computeroutput>std::time()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_random_uniform_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, points are generated in a random and uniform way over the triangles of the soup. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The number of sample points is the value passed to the named parameter <computeroutput>number_of_points_on_faces</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_area_unit</computeroutput> is multiplied by the area of the soup to get the number of sample points. If none of these parameters is set, the number of points sampled is <computeroutput>points.size()</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_grid_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, points are generated on a grid in each triangle, with a minimum of one point per triangle. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The distance between two consecutive points in the grid is that of the length of the smallest non-null edge of the soup or the value passed to the named parameter <computeroutput>grid_spacing</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para><itemizedlist>
<listitem></listitem></itemizedlist>
</para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_monte_carlo_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>true</computeroutput> is passed, points are generated randomly in each triangle. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The number of points per triangle is the value passed to the named parameter <computeroutput>number_of_points_per_face</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_area_unit</computeroutput> is used to pick a number of points per face proportional to the triangle area with a minimum of one point per face. If none of these parameters is set, the number of points per area unit is set to 2 divided by the square of the length of the smallest non-null edge of the soup. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_vertices</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, the points of <computeroutput>points</computeroutput> are part of the sample. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, faces of the soup are sampled. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>grid_spacing</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used as the grid spacing for the grid sampling method </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the length of the shortest, non-degenerate edge of the soup </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_on_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling method as the number of points to pick on the surface </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>points.size()</computeroutput> or a value based on <computeroutput>nb_points_per_area_unit</computeroutput>, if it is defined </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_face</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used by the Monte-Carlo sampling method as the number of points per face to pick </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_area_unit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling and the Monte Carlo sampling methods to respectively determine the total number of points inside faces and the number of points per face </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>2</computeroutput> divided by the squared length of the shortest, non-degenerate edge of the soup </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="attention"><para>Contrary to <computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">sample_triangle_mesh()</ref></computeroutput>, this method does not allow to sample edges.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">CGAL::Polygon_mesh_processing::sample_triangle_mesh()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1032" column="1" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1032" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1gaed9454c6ed046cd4fb7928cf2b5f7c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::max_distance_to_triangle_mesh</definition>
        <argsstring>(const PointRange &amp;points, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>max_distance_to_triangle_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::max_distance_to_triangle_mesh</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the distance to <computeroutput>tm</computeroutput> of the point from <computeroutput>points</computeroutput> that is the furthest from <computeroutput>tm</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of points of interest </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to compute the distance to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPDistanceTraits" kindref="compound">PMPDistanceTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm</computeroutput> is a non-empty triangle mesh and <computeroutput>points</computeroutput> is not empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1093" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1093" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga74376aa81d44d745426acfad5a0ac8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::approximate_Hausdorff_distance</definition>
        <argsstring>(const TriangleMesh &amp;tm1, const TriangleMesh &amp;tm2, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>approximate_Hausdorff_distance</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::approximate_Hausdorff_distance</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the approximate Hausdorff distance from <computeroutput>tm1</computeroutput> to <computeroutput>tm2</computeroutput> by returning the distance of the farthest point from <computeroutput>tm2</computeroutput> amongst a sampling of <computeroutput>tm1</computeroutput> generated with the function <computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">sample_triangle_mesh()</ref></computeroutput> with <computeroutput>tm1</computeroutput> and <computeroutput>np1</computeroutput> as parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>A parallel version is provided and requires the executable to be linked against the <ulink url="https://github.com/oneapi-src/oneTBB">Intel TBB library</ulink>. To control the number of threads used, the user may use the <computeroutput>tbb::task_scheduler_init</computeroutput> class. See the <ulink url="https://software.intel.com/content/www/us/en/develop/documentation/onetbb-documentation/top.html">TBB documentation</ulink> for more details.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Concurrency_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>tm1</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>tm2</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh that will be sampled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to compute the distance to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> forwarded to <computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">sample_triangle_mesh()</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm2)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> are non-empty triangle meshes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1173" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1173" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga035fdbf660615b036cb3f47f7997b739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::approximate_symmetric_Hausdorff_distance</definition>
        <argsstring>(const TriangleMesh &amp;tm1, const TriangleMesh &amp;tm2, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>approximate_symmetric_Hausdorff_distance</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::approximate_symmetric_Hausdorff_distance</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the approximate symmetric Hausdorff distance between <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>, that is the maximum of <computeroutput>approximate_Hausdorff_distance(tm1, tm2, np1, np2)</computeroutput> and <computeroutput>approximate_Hausdorff_distance(tm2, tm1, np2, np1)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See the function <computeroutput><ref refid="group__PMP__distance__grp_1ga74376aa81d44d745426acfad5a0ac8de" kindref="member">approximate_Hausdorff_distance()</ref></computeroutput> for a complete description of the parameters and requirements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1204" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1204" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga3451246234c24dd4f03d17fc17d50336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::approximate_max_distance_to_point_set</definition>
        <argsstring>(const TriangleMesh &amp;tm, const PointRange &amp;points, const double precision, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>approximate_max_distance_to_point_set</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::approximate_max_distance_to_point_set</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns an approximation of the distance between <computeroutput>points</computeroutput> and the point lying on <computeroutput>tm</computeroutput> that is the farthest from <computeroutput>points</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>for each triangle of <computeroutput>tm</computeroutput>, the distance of its farthest point from <computeroutput>points</computeroutput> is bounded. A triangle is subdivided into sub-triangles so that the difference of its distance bounds is smaller than <computeroutput>precision</computeroutput>. <computeroutput>precision</computeroutput> must be strictly positive to avoid infinite loops. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPDistanceTraits" kindref="compound">PMPDistanceTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm</computeroutput> is a non-empty triangle mesh and <computeroutput>points</computeroutput> is not empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1252" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1252" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1gac251a5e983df7ee6aa61623cdb9ec454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh1</type>
          </param>
          <param>
            <type>class TriangleMesh2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance</definition>
        <argsstring>(const TriangleMesh1 &amp;tm1, const TriangleMesh2 &amp;tm2, const double error_bound=0.0001, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>bounded_error_Hausdorff_distance</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance</qualifiedname>
        <param>
          <type>const TriangleMesh1 &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh2 &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>error_bound</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns an estimate on the Hausdorff distance from <computeroutput>tm1</computeroutput> to <computeroutput>tm2</computeroutput> that is at most <computeroutput>error_bound</computeroutput> away from the actual Hausdorff distance from <computeroutput>tm1</computeroutput> to <computeroutput>tm2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Concurrency_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput> and <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>. Currently, the parallel version is not implemented and the sequential version is always used whatever tag is chosen!</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh1</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh2</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>another triangle mesh</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>a maximum bound by which the Hausdorff distance estimate is allowed to deviate from the actual Hausdorff distance.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmX</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshX&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmX)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMeshX</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>match_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a boolean tag that turns on the preprocessing step that filters out all faces which belong to both meshes and hence do not contribute to the final distance </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold>true </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Both <computeroutput>np1</computeroutput> and <computeroutput>np2</computeroutput> must have this tag set to <computeroutput>true</computeroutput> in order to activate this preprocessing. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> are non-empty triangle meshes.</para>
</simplesect>
<simplesect kind="return"><para>the one-sided Hausdorff distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="2511" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="2511" bodyend="2544"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1gaff7bb1f6909363380f3947f1fabf06a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh1</type>
          </param>
          <param>
            <type>class TriangleMesh2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::bounded_error_symmetric_Hausdorff_distance</definition>
        <argsstring>(const TriangleMesh1 &amp;tm1, const TriangleMesh2 &amp;tm2, const double error_bound, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>bounded_error_symmetric_Hausdorff_distance</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::bounded_error_symmetric_Hausdorff_distance</qualifiedname>
        <param>
          <type>const TriangleMesh1 &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh2 &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>error_bound</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the the symmetric Hausdorff distance, that is the maximum of <computeroutput>bounded_error_Hausdorff_distance(tm1, tm2, error_bound, np1, np2)</computeroutput> and <computeroutput>bounded_error_Hausdorff_distance(tm2, tm1, error_bound, np2, np1)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function optimizes all internal calls to shared data structures in order to speed up the computation.</para>
<para>See the function <computeroutput><ref refid="group__PMP__distance__grp_1gac251a5e983df7ee6aa61623cdb9ec454" kindref="member">CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance()</ref></computeroutput> for a complete description of the parameters and requirements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="2564" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="2564" bodyend="2600"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1gacd7487071c9d409e91c37a731999a239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh1</type>
          </param>
          <param>
            <type>class TriangleMesh2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_Hausdorff_distance_larger</definition>
        <argsstring>(const TriangleMesh1 &amp;tm1, const TriangleMesh2 &amp;tm2, const double distance_bound, const double error_bound, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>is_Hausdorff_distance_larger</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_Hausdorff_distance_larger</qualifiedname>
        <param>
          <type>const TriangleMesh1 &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh2 &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>distance_bound</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>error_bound</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the Hausdorff distance between two meshes is larger than the user-defined max distance, otherwise it returns <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The distance used to compute the proximity of the meshes is the bounded-error Hausdorff distance. Instead of computing the full distance and checking it against the user-provided value, this function returns early if certain criteria show that the meshes do not satisfy the provided <computeroutput>distance_bound</computeroutput>.</para>
<para>See the function <computeroutput><ref refid="group__PMP__distance__grp_1gac251a5e983df7ee6aa61623cdb9ec454" kindref="member">CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance()</ref></computeroutput> for a complete description of the parameters and requirements. The following extra named parameter is available for <computeroutput>np1</computeroutput>:</para>
<para><variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_one_sided_hausdorff</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a boolean tag indicating if the one-sided Hausdorff distance should be used. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this tag is set to <computeroutput>false</computeroutput>, the symmetric Hausdorff distance is used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="2631" column="6" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="2631" bodyend="2686"/>
      </memberdef>
      <memberdef kind="function" id="distance_8h_1a046202c52e96c4714ab06a053cfd522f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh1</type>
          </param>
          <param>
            <type>class TriangleMesh2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance_naive</definition>
        <argsstring>(const TriangleMesh1 &amp;tm1, const TriangleMesh2 &amp;tm2, const double error_bound, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>bounded_error_Hausdorff_distance_naive</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance_naive</qualifiedname>
        <param>
          <type>const TriangleMesh1 &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh2 &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>error_bound</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="2694" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="2694" bodyend="2720"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga300c5eedd7d62bbd10ad2655405562f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputMesh</type>
          </param>
          <param>
            <type>class OutputMesh</type>
          </param>
          <param>
            <type>class BottomFunctor</type>
          </param>
          <param>
            <type>class TopFunctor</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>CGAL::parameters::Default_named_parameter</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>CGAL::parameters::Default_named_parameter</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::extrude_mesh</definition>
        <argsstring>(const InputMesh &amp;input, OutputMesh &amp;output, const BottomFunctor &amp;bot, const TopFunctor &amp;top, const NamedParameters1 &amp;np_in=parameters::default_values(), const NamedParameters2 &amp;np_out=parameters::default_values())</argsstring>
        <name>extrude_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::extrude_mesh</qualifiedname>
        <param>
          <type>const InputMesh &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const BottomFunctor &amp;</type>
          <declname>bot</declname>
        </param>
        <param>
          <type>const TopFunctor &amp;</type>
          <declname>top</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np_in</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np_out</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>performs a generalized extrusion of <computeroutput>input</computeroutput> and puts it in <computeroutput>output</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function extrudes the open surface mesh <computeroutput>input</computeroutput> and puts the result in <computeroutput>output</computeroutput>. The mesh generated is a closed surface mesh with a bottom and top part, both having the same graph combinatorics as <computeroutput>input</computeroutput> (except that the orientation of the faces of the bottom part is reversed). The bottom and the top parts are connected by a triangle strip between boundary cycles. The coordinates of the points associated to the vertices of the bottom and top part are first initialized to the same value as the corresponding vertices of <computeroutput>input</computeroutput>. Then for each vertex, a call to <computeroutput>bot</computeroutput> and <computeroutput>top</computeroutput> is done for the vertices of the bottom part and the top part, respectively.</para>
<para><simplesect kind="attention"><para><computeroutput>output</computeroutput> may be self intersecting.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>InputMesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>OutputMesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BottomFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor providing <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(boost::graph_traits&lt;InputMesh&gt;::vertex_descriptor<sp/>input_v,boost::graph_traits&lt;OutputMesh&gt;::vertex_descriptor<sp/>output_v)</highlight></codeline>
</programlisting> where <computeroutput>output_v</computeroutput> is the copy of <computeroutput>input_v</computeroutput> from <computeroutput>input</computeroutput> into the bottom part of <computeroutput>output</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TopFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor providing a similar <computeroutput>operator()</computeroutput> as <computeroutput>BottomFunctor</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>an open surface mesh to extrude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>a surface mesh that will contain the result of the extrusion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bot</parametername>
</parameternamelist>
<parameterdescription>
<para>functor that will transform all points copied from <computeroutput>input</computeroutput> in order to shape the bottom part of the extrusion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>functor that will transform all points copied from <computeroutput>input</computeroutput> in order to shape the top part of the extrusion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_in</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>input</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;InputMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, input)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>input</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>output</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;OutputMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, output)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>output</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/extrude.h" line="164" column="6" bodyfile="CGAL/Polygon_mesh_processing/extrude.h" bodystart="164" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1gaf70b64f0ab2649785c14876a6ed328d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputMesh</type>
          </param>
          <param>
            <type>class OutputMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>CGAL::parameters::Default_named_parameter</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>CGAL::parameters::Default_named_parameter</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::extrude_mesh</definition>
        <argsstring>(const InputMesh &amp;input, OutputMesh &amp;output, Vector_3 v, const NamedParameters1 &amp;np_in=parameters::default_values(), const NamedParameters2 &amp;np_out=parameters::default_values())</argsstring>
        <name>extrude_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::extrude_mesh</qualifiedname>
        <param>
          <type>const InputMesh &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>OutputMesh &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Vector_3</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np_in</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np_out</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>fills <computeroutput>output</computeroutput> with a closed mesh bounding the volume swept by <computeroutput>input</computeroutput> when translating its vertices by <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The mesh is oriented so that the faces corresponding to <computeroutput>input</computeroutput> in <computeroutput>output</computeroutput> have the same orientation.</para>
<para><simplesect kind="attention"><para><computeroutput>output</computeroutput> may be self intersecting.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classCGAL_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Vector_3</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>vector type from the same <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> kernel as the point of the vertex point map used for <computeroutput>OutputMesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>InputMesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>OutputMesh</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>an open surface mesh to extrude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>a surface mesh that will contain the result of the extrusion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector defining the direction of the extrusion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_in</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>input</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;InputMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, input)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>input</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>output</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;OutputMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, output)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>output</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/extrude.h" line="281" column="6" bodyfile="CGAL/Polygon_mesh_processing/extrude.h" bodystart="281" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga9988e9a2eaf92740b3009d06c792f2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename VertexRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::fair</definition>
        <argsstring>(TriangleMesh &amp;tmesh, const VertexRange &amp;vertices, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>fair</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::fair</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const VertexRange &amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>fairs a region on a triangle mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The points of the selected vertices are relocated to yield an as-smooth-as-possible surface patch, based on solving a linear bi-Laplacian system with boundary constraints, described in <ref refid="citelist_1CITEREF_Botsch2008OnLinearVariational" kindref="member">[4]</ref>. The optional parameter <computeroutput>fairing_continuity</computeroutput> gives the ability to control the tangential continuity C<superscript> n</superscript> of the output mesh.</para>
<para>The region described by <computeroutput>vertices</computeroutput> might contain multiple disconnected components. Note that the mesh connectivity is not altered in any way, only vertex locations get updated.</para>
<para>Fairing might fail if fixed vertices, which are used as boundary conditions, do not suffice to solve constructed linear system.</para>
<para>Note that if the vertex range to which fairing is applied contains all the vertices of the triangle mesh, fairing does not fail, but the mesh gets shrunk to <computeroutput><ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref></computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of vertex descriptors of <computeroutput>TriangleMesh</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh with patches to be faired </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertices of the patches to be faired (the positions of only those vertices will be changed) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>fairing_continuity</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A value controlling the tangential continuity of the output surface patch. The possible values are 0, 1 and 2, referring to the C<superscript>0</superscript>, C<superscript>1</superscript> and C<superscript>2</superscript> continuity. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The larger <computeroutput>fairing_continuity</computeroutput> gets, the more fixed vertices are required. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sparse_linear_solver</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of the sparse linear solver used for fairing </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classSparseLinearAlgebraWithFactorTraits__d" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">SparseLinearAlgebraWithFactorTraits_d</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If <ref refid="thirdparty_1thirdpartyEigen" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Eigen</ref> 3.2 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined, then the following overload of <computeroutput><ref refid="classCGAL_1_1Eigen__solver__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">Eigen_solver_traits</ref></computeroutput> is provided as default value:<linebreak/>
 <computeroutput><ref refid="classCGAL_1_1Eigen__solver__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::Eigen_solver_traits</ref>&lt;Eigen::SparseLU&lt;<ref refid="structCGAL_1_1Eigen__sparse__matrix" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::Eigen_sparse_matrix</ref>&lt;double&gt;::EigenType, Eigen::COLAMDOrdering&lt;int&gt; &gt; &gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if fairing is successful, otherwise no vertices are relocated.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>is_triangle_mesh(tmesh)</computeroutput></para>
</simplesect>
<simplesect kind="warning"><para>This function involves linear algebra, that is computed using non-exact, floating-point arithmetic.</para>
</simplesect>
<xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>accuracy of solvers are not good, for example when there is no boundary condition pre_factor should fail, but it does not. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/fair.h" line="130" column="8" bodyfile="CGAL/Polygon_mesh_processing/fair.h" bodystart="130" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corrected__curvatures__grp_1ga22665c9ce92aaedab07df1b05f20bdb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::interpolated_corrected_curvatures</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>interpolated_corrected_curvatures</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::interpolated_corrected_curvatures</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the interpolated corrected curvatures across the mesh <computeroutput>pmesh</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>By providing mean, Gaussian and/or principal curvature and direction property maps as named parameters, the user can choose which quantities to compute.</para>
<para><simplesect kind="note"><para>This function depends on the Eigen 3.1 (or later) library.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below. <computeroutput>GT</computeroutput> stands for the type of the object provided to the named parameter <computeroutput>geom_traits()</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="7" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_mean_curvature_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating mean curvatures to the vertices of <computeroutput>pmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GT::FT</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, mean curvatures will not be computed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_Gaussian_curvature_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating Gaussian curvatures to the vertices of <computeroutput>pmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GT::FT</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, Gaussian curvatures will not be computed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_principal_curvatures_and_directions_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating principal curvatures and directions to the vertices of <computeroutput>pmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Principal__curvatures__and__directions" kindref="compound">Principal_curvatures_and_directions</ref>&lt;GT&gt;</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, principal curvatures and directions will not be computed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>ball_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a strictly positive scalar value specifying the radius used for expanding curvature measures by summing measures of faces inside a ball of this radius centered at the vertex expanded from. The summed face measures are weighted by their inclusion ratio inside this ball. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GT::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>-1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted (<computeroutput>-1</computeroutput>), the expansion is then just a sum of measures on faces around the vertex. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GT::Point_3</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normal vectors to the vertices of <computeroutput>pmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GT::Vector_3</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>get(<ref refid="structCGAL_1_1dynamic__vertex__property__t" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">dynamic_vertex_property_t</ref>&lt;GT::Vector_3&gt;(), pmesh)</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, vertex normals will be computed using <computeroutput><ref refid="group__PMP__normal__grp_1ga74e6b247d7e28beb677076aad5614d8c" kindref="member">compute_vertex_normals()</ref></computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/interpolated_corrected_curvatures.h" line="1083" column="6" bodyfile="CGAL/Polygon_mesh_processing/interpolated_corrected_curvatures.h" bodystart="1083" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corrected__curvatures__grp_1ga78329aab7b2fcd86880fd79dd36bd55b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VertexDescriptor</type>
          </param>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::interpolated_corrected_curvatures</definition>
        <argsstring>(VertexDescriptor v, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>interpolated_corrected_curvatures</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::interpolated_corrected_curvatures</qualifiedname>
        <param>
          <type>VertexDescriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the interpolated corrected curvatures at a vertex <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>By providing mean, Gaussian and/or principal curvature and direction property maps as named parameters, the user can choose which quantities to compute.</para>
<para><simplesect kind="note"><para>This function depends on the Eigen 3.1 (or later) library.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexDescriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>must be convertible to <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertex of <computeroutput>pmesh</computeroutput> to compute the curvatures at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below. <computeroutput>GT</computeroutput> stands for the type of the object provided to the named parameter <computeroutput>geom_traits()</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="7" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_mean_curvature</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a reference to a scalar value to store the mean curvature at the vertex <computeroutput>v</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::reference_wrapper&lt;GT::FT&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, mean curvature will not be computed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_Gaussian_curvature</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a reference to a scalar value to store the Gaussian curvature at the vertex <computeroutput>v</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::reference_wrapper&lt;GT::FT&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, Gaussian curvature will not be computed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_principal_curvatures_and_directions</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a reference to a <computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Principal__curvatures__and__directions" kindref="compound">Principal_curvatures_and_directions</ref>&lt;GT&gt;</computeroutput> object to store the principal curvatures and directions at the vertex <computeroutput>v</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::reference_wrapper&lt;<ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Principal__curvatures__and__directions" kindref="compound">Principal_curvatures_and_directions</ref>&lt;GT&gt;&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, principal curvatures and directions will not be computed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>ball_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a scalar value specifying the radius used for expanding curvature measures by summing measures of faces inside a ball of this radius centered at the vertex expanded from. The summed face measures are weighted by their inclusion ratio inside this ball. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GT::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>-1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted (<computeroutput>-1</computeroutput>), the expansion is then just a sum of measures on faces around the vertex. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GT::Point_3</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normal vectors to the vertices of <computeroutput>pmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GT::Vector_3</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>get(<ref refid="structCGAL_1_1dynamic__vertex__property__t" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">dynamic_vertex_property_t</ref>&lt;GT::Vector_3&gt;(), pmesh)</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, vertex normals will be computed using <computeroutput><ref refid="group__PMP__normal__grp_1ga74e6b247d7e28beb677076aad5614d8c" kindref="member">compute_vertex_normals()</ref></computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/interpolated_corrected_curvatures.h" line="1169" column="6" bodyfile="CGAL/Polygon_mesh_processing/interpolated_corrected_curvatures.h" bodystart="1169" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga2cb4019111658999234b3e377e3eabcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolylineRange</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::do_intersect</definition>
        <argsstring>(const PolylineRange &amp;polylines1, const PolylineRange &amp;polylines2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::do_intersect</qualifiedname>
        <param>
          <type>const PolylineRange &amp;</type>
          <declname>polylines1</declname>
        </param>
        <param>
          <type>const PolylineRange &amp;</type>
          <declname>polylines2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if there exists a segment of a polyline of <computeroutput>polylines1</computeroutput> and a segment of a polyline of <computeroutput>polylines2</computeroutput> which intersect, and <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolylineRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput><ref refid="classRandomAccessRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessRange</ref></computeroutput> of <computeroutput><ref refid="classRandomAccessRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessRange</ref></computeroutput> of points. The point type must be from a 3D point from a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>. A polyline is defined as a sequence of points, each pair of contiguous points defines a segment of the polyline. If the first and last points of the polyline are identical, the polyline is closed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polylines1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first range of polylines to check for intersections. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polylines2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second range of polylines to check for intersections. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1141" column="6" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1141" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga202575b5d28a41b7246e60e1be95a1ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Polyline</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::do_intersect</definition>
        <argsstring>(const Polyline &amp;polyline1, const Polyline &amp;polyline2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::do_intersect</qualifiedname>
        <param>
          <type>const Polyline &amp;</type>
          <declname>polyline1</declname>
        </param>
        <param>
          <type>const Polyline &amp;</type>
          <declname>polyline2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if there exists a segment of <computeroutput>polyline1</computeroutput> and a segment of <computeroutput>polyline2</computeroutput> which intersect, and <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Polyline</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput><ref refid="classRandomAccessRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessRange</ref></computeroutput> of points. The point type must be from a 3D point type from CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>. A polyline is defined as a sequence of points, each pair of contiguous points defines a segment of the polyline. If the first and last points of the polyline are identical, the polyline is closed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polyline1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first polyline to check for intersections. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polyline2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second polyline to check for intersections. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1185" column="6" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1185" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga362b69dbf22a03e5a852e5b2efe47e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>CGAL::parameters::Default_named_parameter</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>CGAL::parameters::Default_named_parameter</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::do_intersect</definition>
        <argsstring>(const TriangleMesh &amp;tm1, const TriangleMesh &amp;tm2, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::do_intersect</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if there exists a face of <computeroutput>tm1</computeroutput> and a face of <computeroutput>tm2</computeroutput> which intersect, and <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>do_overlap_test_of_bounded_sides</computeroutput> is set to <computeroutput>true</computeroutput>, the overlap of bounded sides are tested as well. In that case, the meshes must be closed. This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tm1)</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tm2)</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>!do_overlap_test_of_bounded_sides || CGAL::is_closed(tm1)</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>!do_overlap_test_of_bounded_sides || CGAL::is_closed(tm2)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>tm1</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>tm2</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first triangulated surface mesh to check for intersections </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second triangulated surface mesh to check for intersections </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm1 (tm2))</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Both vertex point maps must have the same value type </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>np1 only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_overlap_test_of_bounded_sides</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, also tests the overlap of the bounded sides of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>. If <computeroutput>false</computeroutput>, only the intersection of surface triangles is tested. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1gaf0a7348487c7bf93dced127d82afc918" kindref="member">intersecting_meshes()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1271" column="6" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1271" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1gaea4f28410f96a748e21db75c884224e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class PolylineRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::do_intersect</definition>
        <argsstring>(const TriangleMesh &amp;tm, const PolylineRange &amp;polylines, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::do_intersect</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const PolylineRange &amp;</type>
          <declname>polylines</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if there exists a face of <computeroutput>tm</computeroutput> and a segment of a polyline of <computeroutput>polylines</computeroutput> which intersect, and <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tm)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolylineRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput><ref refid="classRandomAccessRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessRange</ref></computeroutput> of <computeroutput><ref refid="classRandomAccessRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessRange</ref></computeroutput> of points. The point type of the range must be the same as the value type of the vertex point map. A polyline is defined as a sequence of points, each pair of contiguous points defines a segment of the polyline. If the first and last points of the polyline are identical, the polyline is closed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to check for intersections </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polylines</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of polylines to check for intersections. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tm</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1358" column="6" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1358" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga1d563c139d9803ed0211f9828805d881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class Polyline</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::do_intersect</definition>
        <argsstring>(const TriangleMesh &amp;tm, const Polyline &amp;polyline, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::do_intersect</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const Polyline &amp;</type>
          <declname>polyline</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if there exists a face of <computeroutput>tm</computeroutput> and a segment of <computeroutput>polyline</computeroutput> which intersect, and <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tm)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Polyline</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput><ref refid="classRandomAccessRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessRange</ref></computeroutput> of points. The point type of the range must be the same as the value type of the vertex point map. A polyline is defined as a sequence of points, each pair of contiguous points defines a segment of the polyline. If the first and last points of the polyline are identical, the polyline is closed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to check for intersections </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polyline</parametername>
</parameternamelist>
<parameterdescription>
<para>the polyline to check for intersections. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tm</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1425" column="6" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1425" bodyend="1453"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1gaf0a7348487c7bf93dced127d82afc918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMeshRange</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>class NamedParameters</type>
          </param>
          <param>
            <type>class NamedParametersRange</type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::intersecting_meshes</definition>
        <argsstring>(const TriangleMeshRange &amp;range, OutputIterator out, const NamedParameters &amp;np, const NamedParametersRange &amp;nps)</argsstring>
        <name>intersecting_meshes</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::intersecting_meshes</qualifiedname>
        <param>
          <type>const TriangleMeshRange &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <param>
          <type>const NamedParametersRange &amp;</type>
          <declname>nps</declname>
        </param>
        <briefdescription>
<para>detects and reports all the pairs of meshes intersecting in a range of triangulated surface meshes. </para>
        </briefdescription>
        <detaileddescription>
<para>A pair of meshes intersecting is put in the output iterator <computeroutput>out</computeroutput> as a <computeroutput>std::pair&lt;std::size_t, std::size_t&gt;</computeroutput>, each index referring to the index of the triangle mesh in the input range. If <computeroutput>do_overlap_test_of_bounded_sides</computeroutput> is <computeroutput>true</computeroutput>, the overlap of bounded sides are tested as well. In that case, the meshes must be closed. This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMeshRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRandomAccessRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessRange</ref></computeroutput> of triangulated surface meshes model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator in which <computeroutput>std::pair&lt;std::size_t, std::size_t&gt;</computeroutput> can be put. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for the algorithm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParametersRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for the meshes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of triangulated surface meshes to be checked for intersections. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator used to collect pairs of intersecting meshes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput>, where <computeroutput>Point</computeroutput> is the value type of the vertex point map of the meshes </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_overlap_test_of_bounded_sides</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, reports also overlap of bounded sides of meshes. If <computeroutput>false</computeroutput>, only the intersection of surface triangles are tested. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional range of sequences of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of a mesh <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tm</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>All vertex point maps must have the same value type </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga2cb4019111658999234b3e377e3eabcd" kindref="member">do_intersect()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1624" column="16" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1624" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="intersection_8h_1ac24d8f674dd02b0388245d47a1b1fef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMeshRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::intersecting_meshes</definition>
        <argsstring>(const TriangleMeshRange &amp;range, OutputIterator out, const NamedParameters &amp;np)</argsstring>
        <name>intersecting_meshes</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::intersecting_meshes</qualifiedname>
        <param>
          <type>const TriangleMeshRange &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1663" column="16" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1663" bodyend="1670"/>
      </memberdef>
      <memberdef kind="function" id="intersection_8h_1a84c80099b41215a5779f94fa00636aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMeshRange</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::intersecting_meshes</definition>
        <argsstring>(const TriangleMeshRange &amp;range, OutputIterator out)</argsstring>
        <name>intersecting_meshes</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::intersecting_meshes</qualifiedname>
        <param>
          <type>const TriangleMeshRange &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1673" column="16" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1673" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__corefinement__grp_1ga6e6c4a724ce19e7a207de56f3a7408ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::surface_intersection</definition>
        <argsstring>(const TriangleMesh &amp;tm1, const TriangleMesh &amp;tm2, OutputIterator polyline_output, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>surface_intersection</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::surface_intersection</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>polyline_output</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the intersection of triangles of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The output is a set of polylines with all vertices but endpoints being of degree 2.</para>
<para><simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm1)</computeroutput> </ref> </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member"><computeroutput>!CGAL::Polygon_mesh_processing::does_self_intersect(tm2)</computeroutput> </ref></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>, <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator in which <computeroutput>std::vector</computeroutput> of points can be put. The point type is the one from the vertex property map</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>first input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>second input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polyline_output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator of polylines. Each polyline will be given as a vector of points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm1 (tm2))</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tm1</computeroutput> (<computeroutput>tm2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Both vertex point maps must have the same value type </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>throw_on_self_intersection</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the set of triangles close to the intersection of <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> will be checked for self-intersections and <computeroutput>Corefinement::Self_intersection_exception</computeroutput> will be thrown if at least one self-intersection is found. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>np1</computeroutput> only </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga2cb4019111658999234b3e377e3eabcd" kindref="member">do_intersect()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/intersection.h" line="1730" column="1" bodyfile="CGAL/Polygon_mesh_processing/intersection.h" bodystart="1730" bodyend="1758"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga1be5d5de27953a11b593797d5224fefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga8ec69004f1d28b296aa9e89926bb3981" kindref="member">descriptor_variant</ref>&lt; TriangleMesh &gt;</type>
        <definition>descriptor_variant&lt; TriangleMesh &gt; CGAL::Polygon_mesh_processing::get_descriptor_from_location</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm)</argsstring>
        <name>get_descriptor_from_location</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::get_descriptor_from_location</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns a descriptor to the simplex of smallest dimension on which the point corresponding to the location lies. </para>
        </briefdescription>
        <detaileddescription>
<para>In other words:<itemizedlist>
<listitem><para>if the point lies on a vertex, this function returns a <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> <computeroutput>v</computeroutput>;</para>
</listitem><listitem><para>if the point lies on a halfedge, this function returns a <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::halfedge_descriptor</computeroutput> <computeroutput>hd</computeroutput> (note that in that case, <computeroutput>loc.first == face(hd, tm)</computeroutput> holds).</para>
</listitem><listitem><para>otherwise, this function returns a <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> <computeroutput>fd</computeroutput> (equal to <computeroutput>loc.first</computeroutput>).</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>loc</computeroutput> describes the barycentric coordinates of a point that lives within the face (boundary included), meaning the barycentric coordinates are all positive. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="507" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="507" bodyend="546" declfile="CGAL/Polygon_mesh_processing/locate.h" declline="130" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga72808d7750dab4989b4613dfa1dd46fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GeomTraits</type>
          </param>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga6581d3f34a14d533fdab2e6beef2873f" kindref="member">Barycentric_coordinates</ref>&lt; typename GeomTraits::FT &gt;</type>
        <definition>Barycentric_coordinates&lt; typename GeomTraits::FT &gt; CGAL::Polygon_mesh_processing::barycentric_coordinates</definition>
        <argsstring>(const Point &amp;p, const Point &amp;q, const Point &amp;r, const Point &amp;query, const GeomTraits &amp;gt)</argsstring>
        <name>barycentric_coordinates</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::barycentric_coordinates</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>gt</declname>
        </param>
        <briefdescription>
<para>Given a set of three points and a query point, computes the barycentric coordinates of the query point with respect to the first three points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of a geometric traits. Must be a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> and be compatible with the template parameter <computeroutput>Point</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of a geometric 2D or 3D point</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
<parametername>q</parametername>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>three points with respect to whom the barycentric coordinates of <computeroutput>query</computeroutput> will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>the query point whose barycentric coordinates will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gt</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of the geometric traits</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>query</computeroutput> lies on the plane defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="364" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="364" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="locate_8h_1a58624255ba6642ab2cd8dc7631db6b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__PMP__locate__grp_1ga6581d3f34a14d533fdab2e6beef2873f" kindref="member">Barycentric_coordinates</ref>&lt; typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; Point &gt;::type::FT &gt;</type>
        <definition>Barycentric_coordinates&lt; typename CGAL::Kernel_traits&lt; Point &gt;::type::FT &gt; CGAL::Polygon_mesh_processing::barycentric_coordinates</definition>
        <argsstring>(const Point &amp;p, const Point &amp;q, const Point &amp;r, const Point &amp;query)</argsstring>
        <name>barycentric_coordinates</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::barycentric_coordinates</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="373" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="373" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga7632ebc56378e6ded961eab21540cecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Point</type>
        <definition>Point CGAL::Polygon_mesh_processing::construct_point</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>construct_point</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::construct_point</qualifiedname>
        <param>
          <type>const <ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref>&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Given a location in a face, returns the geometric position described by these coordinates, as a point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>the location from which a point is constructed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If such traits class is provided, its type <computeroutput>FT</computeroutput> must be identical to the template parameter <computeroutput>FT</computeroutput> of this function. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>.</para>
</simplesect>
<simplesect kind="return"><para>a point whose type is the same as the value type of the vertex point property map provided by the user or via named parameters, or the internal point map of the mesh <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="590" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="590" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga121f588ac324938d9a6b6931a08661e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_non_manifold_vertex</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor v, const PolygonMesh &amp;pm)</argsstring>
        <name>is_non_manifold_vertex</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_non_manifold_vertex</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <briefdescription>
<para>returns whether a vertex of a polygon mesh is non-manifold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function has linear runtime with respect to the size of the mesh. The function <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga36098d2415efd0604b7b996163bc22db" kindref="member">non_manifold_vertices()</ref></computeroutput> should be used when gathering all non manifold vertices.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>pm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh containing <computeroutput>v</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the vertex is non-manifold, <computeroutput>false</computeroutput> otherwise</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" kindref="member">duplicate_non_manifold_vertices()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/manifoldness.h" line="52" column="6" bodyfile="CGAL/Polygon_mesh_processing/manifoldness.h" bodystart="52" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga36098d2415efd0604b7b996163bc22db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::non_manifold_vertices</definition>
        <argsstring>(const PolygonMesh &amp;pm, OutputIterator out)</argsstring>
        <name>non_manifold_vertices</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::non_manifold_vertices</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>collects the non-manifold vertices (if any) present in the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>A non-manifold vertex <computeroutput>v</computeroutput> is returned via one incident halfedge <computeroutput>h</computeroutput> such that <computeroutput>target(h, pm) = v</computeroutput> for all the umbrellas that <computeroutput>v</computeroutput> appears in (an <emphasis>umbrella</emphasis> being the set of faces incident to all the halfedges reachable by walking around <computeroutput>v</computeroutput> using <computeroutput>hnext = prev(opposite(h, pm), pm)</computeroutput>, starting from <computeroutput>h</computeroutput>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator that collects halfedges incident to <computeroutput>v</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output iterator</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga121f588ac324938d9a6b6931a08661e1" kindref="member">is_non_manifold_vertex()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" kindref="member">duplicate_non_manifold_vertices()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/manifoldness.h" line="306" column="16" bodyfile="CGAL/Polygon_mesh_processing/manifoldness.h" bodystart="306" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::duplicate_non_manifold_vertices</definition>
        <argsstring>(PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>duplicate_non_manifold_vertices</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::duplicate_non_manifold_vertices</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>duplicates all the non-manifold vertices of the input mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableHalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the surface mesh to be repaired </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>pm</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertex is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>put(vcm, v, true)</computeroutput> will be called for each duplicated vertices, as well as the original non-manifold vertex in the input mesh. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an output iterator to collect the duplicated vertices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>std::vector&lt;vertex_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The first vertex of each vector is a non-manifold vertex of the input mesh, followed by the new vertices that were created to fix the given non-manifold configuration. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of vertices created</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga36098d2415efd0604b7b996163bc22db" kindref="member">non_manifold_vertices()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/manifoldness.h" line="428" column="13" bodyfile="CGAL/Polygon_mesh_processing/manifoldness.h" bodystart="428" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1gaaffc67e631d83a7da4b1096b782ead94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::edge_length</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor h, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>edge_length</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::edge_length</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the length of an edge of a given polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The edge is given by one of its halfedges, or the edge itself.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>one halfedge of the edge whose length is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to which <computeroutput>h</computeroutput> belongs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the length of <computeroutput>h</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>pmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If <computeroutput>FT</computeroutput> does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga36667883a2aea525e578f95100006ab5" kindref="member">squared_edge_length()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga3cb8dd4133e21dc9f6db97d2f50cc3f0" kindref="member">face_border_length()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="109" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="109" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="measure_8h_1a106fa397a75f5bb67e348904bc265899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>GetGeomTraits&lt; PolygonMesh, NamedParameters &gt;::type::FT</type>
        <definition>GetGeomTraits&lt; PolygonMesh, NamedParameters &gt;::type::FT CGAL::Polygon_mesh_processing::edge_length</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor e, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>edge_length</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::edge_length</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="134" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="134" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1ga36667883a2aea525e578f95100006ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::squared_edge_length</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor h, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>squared_edge_length</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::squared_edge_length</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the squared length of an edge of a given polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The edge is given by one of its halfedges, or the edge itself.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>one halfedge of the edge whose squared length is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to which <computeroutput>h</computeroutput> belongs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the squared length of <computeroutput>h</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>pmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1gaaffc67e631d83a7da4b1096b782ead94" kindref="member">edge_length()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga3cb8dd4133e21dc9f6db97d2f50cc3f0" kindref="member">face_border_length()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="186" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="186" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="measure_8h_1a624e725340451c1fb37dd28636d20d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>GetGeomTraits&lt; PolygonMesh, NamedParameters &gt;::type::FT</type>
        <definition>GetGeomTraits&lt; PolygonMesh, NamedParameters &gt;::type::FT CGAL::Polygon_mesh_processing::squared_edge_length</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor e, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>squared_edge_length</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::squared_edge_length</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="212" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="212" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="measure_8h_1a1dc3de697daf328fa3e6de28d5d4c0b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>GetGeomTraits&lt; PolygonMesh, NamedParameters &gt;::type::FT</type>
        <definition>GetGeomTraits&lt; PolygonMesh, NamedParameters &gt;::type::FT CGAL::Polygon_mesh_processing::average_edge_length</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>average_edge_length</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::average_edge_length</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="224" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="224" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1ga3cb8dd4133e21dc9f6db97d2f50cc3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::face_border_length</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor h, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>face_border_length</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::face_border_length</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the length of the border polyline that contains a given halfedge. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge of the border polyline whose length is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to which <computeroutput>h</computeroutput> belongs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the length of the sequence of border edges of <computeroutput>face(h, pmesh)</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>pmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If <computeroutput>Kernel::FT</computeroutput> does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1gaaffc67e631d83a7da4b1096b782ead94" kindref="member">edge_length()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="286" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="286" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1ga90dc3dc18ae03b37e825f6b4b4ee2dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; halfedge_descriptor, FT &gt;</type>
        <definition>std::pair&lt; halfedge_descriptor, FT &gt; CGAL::Polygon_mesh_processing::longest_border</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>longest_border</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::longest_border</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>finds the longest border of a given triangulated surface and returns a halfedge that is part of this border as well as the length of this border. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>a pair composed of two members:<itemizedlist>
<listitem><para><computeroutput>first</computeroutput>: a halfedge on the longest border. The return type <computeroutput>halfedge_descriptor</computeroutput> is a halfedge descriptor. It is deduced from the graph traits corresponding to the type <computeroutput>PolygonMesh</computeroutput>. <computeroutput>first</computeroutput> is among the halfedges reported by <computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga42723af60dc8810d938490a8caceb7f0" kindref="member">extract_boundary_cycles()</ref></computeroutput>.</para>
</listitem><listitem><para><computeroutput>second</computeroutput>: the length of the longest border The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>pmesh</computeroutput></para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If <computeroutput>Kernel::FT</computeroutput> does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga3cb8dd4133e21dc9f6db97d2f50cc3f0" kindref="member">face_border_length()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga42723af60dc8810d938490a8caceb7f0" kindref="member">extract_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="356" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="356" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1ga28ad46d585ae505c6f6696b1af9b18ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::face_area</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor f, const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>face_area</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::face_area</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the area of a face of a given triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the face whose area is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to which <computeroutput>f</computeroutput> belongs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>f != boost::graph_traits&lt;TriangleMesh&gt;::null_face()</computeroutput></para>
</simplesect>
<simplesect kind="return"><para>the area of <computeroutput>f</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>tmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If <computeroutput>Kernel::FT</computeroutput> does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga03162f7ecf67254f318a230b6dad3653" kindref="member">squared_face_area()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga8124de2121266ce57f9ad71de570cf5d" kindref="member">area()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="429" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="429" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1ga03162f7ecf67254f318a230b6dad3653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::squared_face_area</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor f, const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>squared_face_area</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::squared_face_area</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the squared area of a face of a given triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the face whose squared area is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to which <computeroutput>f</computeroutput> belongs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>f != boost::graph_traits&lt;TriangleMesh&gt;::null_face()</computeroutput></para>
</simplesect>
<simplesect kind="return"><para>the squared area of <computeroutput>f</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>tmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga28ad46d585ae505c6f6696b1af9b18ae" kindref="member">face_area()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="500" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="500" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1ga8124de2121266ce57f9ad71de570cf5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::area</definition>
        <argsstring>(FaceRange face_range, const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>area</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::area</qualifiedname>
        <param>
          <type>FaceRange</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the area of a range of faces of a given triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>face_range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of faces of whose area is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to which the faces of <computeroutput>face_range</computeroutput> belong </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>sum of face areas of <computeroutput>faces</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>tmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If <computeroutput>Kernel::FT</computeroutput> does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga28ad46d585ae505c6f6696b1af9b18ae" kindref="member">face_area()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="576" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="576" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1gadcc6926cfa00708e48d006074ce69c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::area</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>area</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::area</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the surface area of a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the surface area of <computeroutput>tmesh</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>tmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If <computeroutput>Kernel::FT</computeroutput> does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__measure__grp_1ga28ad46d585ae505c6f6696b1af9b18ae" kindref="member">face_area()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="639" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="639" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1ga1190f04c4b91b33cbb13f4f429c50005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::volume</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>volume</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::volume</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the volume of the domain bounded by a closed triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the closed triangulated surface mesh bounding the volume </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>tmesh</computeroutput> is closed</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the volume bounded by <computeroutput>tmesh</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>tmesh</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="686" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="686" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1gaf643adc62ed10ec185c67f611378ef77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::Polygon_mesh_processing::face_aspect_ratio</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor f, const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>face_aspect_ratio</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::face_aspect_ratio</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the aspect ratio of a face of a given triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the face whose aspect ratio is computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to which <computeroutput>f</computeroutput> belongs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>f != boost::graph_traits&lt;TriangleMesh&gt;::null_face()</computeroutput></para>
</simplesect>
<simplesect kind="return"><para>the aspect ratio of <computeroutput>f</computeroutput>. The return type <computeroutput>FT</computeroutput> is a number type either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or the geometric traits class deduced from the point property map of <computeroutput>tmesh</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>This function involves a square root computation. If <computeroutput>Kernel::FT</computeroutput> does not support the <computeroutput><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">sqrt()</ref></computeroutput> operation, the square root computation will be performed approximately. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="766" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="766" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1gae1b5dbd88bbd5b58517e685ee4e0172c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></type>
        <definition>Point_3 CGAL::Polygon_mesh_processing::centroid</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::centroid</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes the centroid of a volume bounded by a closed triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the closed triangulated surface mesh bounding the volume </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>tmesh</computeroutput> is closed</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the centroid of the domain bounded by <computeroutput>tmesh</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="873" column="1" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="873" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__measure__grp_1ga654cb1da1be38e141b6340bd33aaf66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh1</type>
          </param>
          <param>
            <type>typename PolygonMesh2</type>
          </param>
          <param>
            <type>typename FacePairOutputIterator</type>
          </param>
          <param>
            <type>typename FaceOutputIterator1</type>
          </param>
          <param>
            <type>typename FaceOutputIterator2</type>
          </param>
          <param>
            <type>typename NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::match_faces</definition>
        <argsstring>(const PolygonMesh1 &amp;m1, const PolygonMesh2 &amp;m2, FacePairOutputIterator common, FaceOutputIterator1 m1_only, FaceOutputIterator2 m2_only, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>match_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::match_faces</qualifiedname>
        <param>
          <type>const PolygonMesh1 &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const PolygonMesh2 &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>FacePairOutputIterator</type>
          <declname>common</declname>
        </param>
        <param>
          <type>FaceOutputIterator1</type>
          <declname>m1_only</declname>
        </param>
        <param>
          <type>FaceOutputIterator2</type>
          <declname>m2_only</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>identifies faces only present in <computeroutput>m1</computeroutput> and <computeroutput>m2</computeroutput> as well as the faces present in both polygon meshes. </para>
        </briefdescription>
        <detaileddescription>
<para>Two faces are matching if they have the same orientation and the same points.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh1</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh2</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceOutputIterator1</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh1&gt;::face_descriptor</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceOutputIterator2</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh2&gt;::face_descriptor</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FacePairOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>std::pair&lt;boost::graph_traits&lt;PolygonMesh1&gt;::face_descriptor, boost::graph_traits&lt;PolygonMesh2&gt;::face_descriptor</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>common</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator collecting the faces that are common to both meshes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m1_only</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator collecting the faces that are only in <computeroutput>m1</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m2_only</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator collecting the faces that are only in <computeroutput>m2</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>m1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh1&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type. <computeroutput>Point_3</computeroutput> must be <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, m1)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The same holds for <computeroutput>m2</computeroutput> and <computeroutput>PolygonMesh2</computeroutput> and the point type must be the same for both meshes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>m1</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(m1) - 1</computeroutput>, and similarly for <computeroutput>m2</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. The same holds for <computeroutput>m2</computeroutput> and <computeroutput>PolygonMesh2</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/measure.h" line="998" column="6" bodyfile="CGAL/Polygon_mesh_processing/measure.h" bodystart="998" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga95ff13c1578f509fa8ed58b1884d0e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycle</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor h, PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_duplicated_vertices_in_boundary_cycle</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycle</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>merges identical vertices around a cycle of boundary edges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge that belongs to a boundary cycle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh which contains the boundary cycle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga2af4c26afc4872bafd0caabe6af23f9a" kindref="member">merge_duplicated_vertices_in_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/merge_border_vertices.h" line="285" column="6" bodyfile="CGAL/Polygon_mesh_processing/merge_border_vertices.h" bodystart="285" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga2af4c26afc4872bafd0caabe6af23f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycles</definition>
        <argsstring>(PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_duplicated_vertices_in_boundary_cycles</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycles</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>extracts boundary cycles and merges the duplicated vertices of each cycle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh which contains the cycles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga95ff13c1578f509fa8ed58b1884d0e46" kindref="member">merge_duplicated_vertices_in_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/merge_border_vertices.h" line="344" column="6" bodyfile="CGAL/Polygon_mesh_processing/merge_border_vertices.h" bodystart="344" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class PolygonRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::orient_polygon_soup</definition>
        <argsstring>(PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>orient_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::orient_polygon_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>tries to consistently orient a soup of polygons in 3D space. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm re-orients polygons such that the orientation of adjacent polygons is consistent. Note that the adjacency is defined in a combinatorial sense, i.e. two polygons are sharing an edge if and only if the endpoints of this edge are represented by the same point indices in both faces (possibly in a different order); it is not sufficient for the points to be geometrically identical. One may use <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga1f215926ed8794db827e2993d2960870" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup()</ref></computeroutput> to convert geometrical point equality into combinatorial point equality.</para>
<para>When it is not possible to produce a combinatorial manifold surface (for example, if the polygon soup makes up a Möbius strip), some points are duplicated. Because a polygon soup does not have any connectivity (each point has as many occurrences as the number of polygons it belongs to), duplicating one point (or a pair of points) amounts to duplicating the polygon to which it belongs.</para>
<para>These points are either an endpoint of an edge incident to more than two polygons, an endpoint of an edge between two polygons with incompatible orientations (during the re-orientation process), or more generally a point <emphasis>p</emphasis> at which the intersection of an infinitesimally small ball centered at <emphasis>p</emphasis> with the polygons incident to it is not a topological disk.</para>
<para>The algorithm is described in <ref refid="citelist_1CITEREF_gueziec2001cutting" kindref="member">[1]</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of named parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons. Some additional points might be pushed back to resolve non-manifoldness or non-orientability issues. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the vector describes a polygon using the index of the points in <computeroutput>points</computeroutput>. If needed the order of the indices of a polygon might be reversed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of named parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to be notified of the presence of non-manifold simplices and of the modifications done to polygons during orientation. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPPolygonSoupOrientationVisitor" kindref="compound">PMPPolygonSoupOrientationVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Default__orientation__visitor" kindref="compound">Default_orientation_visitor</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the orientation operation succeeded. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if some points were duplicated, thus producing a combinatorially manifold but self-intersecting polyhedron.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga2f504990a24f599c20cd57161f9755f0" kindref="member">orient_triangle_soup_with_reference_triangle_mesh()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orient_polygon_soup.h" line="540" column="6" bodyfile="CGAL/Polygon_mesh_processing/orient_polygon_soup.h" bodystart="540" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1ga2aa4f7b500dc51d1fc4747705a050946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class PolygonRange</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::duplicate_non_manifold_edges_in_polygon_soup</definition>
        <argsstring>(PointRange &amp;points, PolygonRange &amp;polygons)</argsstring>
        <name>duplicate_non_manifold_edges_in_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::duplicate_non_manifold_edges_in_polygon_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>duplicates each point <emphasis>p</emphasis> at which the intersection of an infinitesimally small ball centered at <emphasis>p</emphasis> with the polygons incident to it is not a topological disk. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>, and is also a model of <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons. Some additional points might be pushed back to resolve non-manifoldness or non-orientability issues. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. If needed the order of the indices of a polygon might be reversed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if some points were duplicated, thus producing a self-intersecting surface mesh. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">orient_polygon_soup()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" kindref="member">duplicate_non_manifold_vertices()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orient_polygon_soup_extension.h" line="65" column="1" bodyfile="CGAL/Polygon_mesh_processing/orient_polygon_soup_extension.h" bodystart="65" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1ga855b1c55c201b91ab04eebd2811a87fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
            <defval><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref></defval>
          </param>
          <param>
            <type>class ReferencePointRange</type>
          </param>
          <param>
            <type>class ReferenceFaceRange</type>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class FaceRange</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_soup</definition>
        <argsstring>(const ReferencePointRange &amp;ref_points, const ReferenceFaceRange &amp;ref_faces, const PointRange &amp;points, FaceRange &amp;faces, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>orient_triangle_soup_with_reference_triangle_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_soup</qualifiedname>
        <param>
          <type>const ReferencePointRange &amp;</type>
          <declname>ref_points</declname>
        </param>
        <param>
          <type>const ReferenceFaceRange &amp;</type>
          <declname>ref_faces</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>orients each triangle of a triangle soup using the orientation of its closest non degenerate triangle in a triangle soup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Concurrency_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel orientation. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput> (the default), <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReferencePointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReferenceTriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput> and is of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>and is of size 3. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref_points</parametername>
</parameternamelist>
<parameterdescription>
<para>the points of the reference soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref_faces</parametername>
</parameternamelist>
<parameterdescription>
<para>triples of indices of points in <computeroutput>ref_points</computeroutput> defining the triangles of the reference soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the points of the soup to be oriented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faces</parametername>
</parameternamelist>
<parameterdescription>
<para>triples of indices of points in <computeroutput>points</computeroutput> defining the triangles of the soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>ref_points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>ReferencePointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="attention"><para>The types of points in <computeroutput>ReferencePointRange</computeroutput>, <computeroutput>PointRange</computeroutput>, and <computeroutput>geom_traits</computeroutput> must be the same. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orient_polygon_soup_extension.h" line="144" column="6" bodyfile="CGAL/Polygon_mesh_processing/orient_polygon_soup_extension.h" bodystart="144" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1ga2f504990a24f599c20cd57161f9755f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
            <defval>Sequential_tag</defval>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class TriangleRange</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_mesh</definition>
        <argsstring>(const TriangleMesh &amp;tm_ref, const PointRange &amp;points, TriangleRange &amp;triangles, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>orient_triangle_soup_with_reference_triangle_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_mesh</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm_ref</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>TriangleRange &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>orients each triangle of a triangle soup using the orientation of its closest non degenerate triangle in <computeroutput>tm_ref</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Concurrency_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel orientation. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput> (the default), <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>and of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference triangle_mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the points of the soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangles of the soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm_ref</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm_ref)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="attention"><para>The types of points in <computeroutput>PointRange</computeroutput>, <computeroutput>geom_traits</computeroutput>, and <computeroutput>vertex_point_map</computeroutput> must be the same.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">orient_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orient_polygon_soup_extension.h" line="284" column="6" bodyfile="CGAL/Polygon_mesh_processing/orient_polygon_soup_extension.h" bodystart="284" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1gabdb85ef9ccc1a4da632f1a697c6d5163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_outward_oriented</definition>
        <argsstring>(const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>is_outward_oriented</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_outward_oriented</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>tests whether a closed triangle mesh has a positive orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>A closed triangle mesh is considered to have a positive orientation if the normal vectors to all its faces point outside the domain bounded by the triangle mesh. The normal vector to each face is chosen pointing on the side of the face where its sequence of vertices is seen counterclockwise.</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_closed(tm)</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tm)</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>If <computeroutput>tm</computeroutput> contains several connected components, they are oriented consistently. In other words, the answer to this predicate would be the same for each isolated connected component.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the closed triangle mesh free from self-intersections to be tested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="note"><para>This function is only doing an orientation test for one connected component of <computeroutput>tm</computeroutput>. For performance reasons, it is left to the user to call the function <computeroutput><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member">does_bound_a_volume()</ref></computeroutput> on a triangulated version of <computeroutput>tm</computeroutput> to ensure the result returned is relevant. For advanced usages, the function <computeroutput><ref refid="group__PMP__orientation__grp_1gab43990ca5541b788c6db2ba509a73ee3" kindref="member">volume_connected_components()</ref></computeroutput> should be used instead.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad8a3439883e3e76651f96d15ba58b2bc" kindref="member">CGAL::Polygon_mesh_processing::reverse_face_orientations()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="189" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="189" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="orientation_8h_1a5a00dd17ca9f4f68532d51d6ab535712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::reverse_orientation</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor first, PolygonMesh &amp;pmesh)</argsstring>
        <name>reverse_orientation</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::reverse_orientation</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="238" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="238" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1gad8a3439883e3e76651f96d15ba58b2bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::reverse_face_orientations</definition>
        <argsstring>(PolygonMesh &amp;pmesh)</argsstring>
        <name>reverse_face_orientations</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::reverse_face_orientations</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <briefdescription>
<para>reverses for each face the order of the vertices along the face boundary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gabdb85ef9ccc1a4da632f1a697c6d5163" kindref="member">is_outward_oriented()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="274" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="274" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="orientation_8h_1a9c45c3222be85ba52f17617a68070865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::reverse_face_orientations_of_mesh_with_polylines</definition>
        <argsstring>(PolygonMesh &amp;pmesh)</argsstring>
        <name>reverse_face_orientations_of_mesh_with_polylines</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::reverse_face_orientations_of_mesh_with_polylines</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="300" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="300" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1ga21119757bf5835496ae1c9a6d4f5fa0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::reverse_face_orientations</definition>
        <argsstring>(const FaceRange &amp;face_range, PolygonMesh &amp;pmesh)</argsstring>
        <name>reverse_face_orientations</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::reverse_face_orientations</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <briefdescription>
<para>reverses for each face in <computeroutput>face_range</computeroutput> the order of the vertices along the face boundary. </para>
        </briefdescription>
        <detaileddescription>
<para>The function does not perform any control and if the change of orientation of the faces makes the polygon mesh invalid, the behavior is undefined.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of face descriptors, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gabdb85ef9ccc1a4da632f1a697c6d5163" kindref="member">is_outward_oriented()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="339" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="339" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1ga6e71985647e2705328a6df45b7961994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::orient</definition>
        <argsstring>(TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>orient</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::orient</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>makes each closed connected component of a triangulated surface mesh inward or outward oriented. </para>
        </briefdescription>
        <detaileddescription>
<para>If a connected component is not closed, the orientation may or may not be changed or not is not guaranteed.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a closed triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>CGAL::is_closed(tm)</computeroutput></para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>outward_orientation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, each connected component will be outward oriented (and inward oriented if <computeroutput>false</computeroutput>). </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="410" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="410" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1gab43990ca5541b788c6db2ba509a73ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class VolumeFaceIndexMap</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::volume_connected_components</definition>
        <argsstring>(const TriangleMesh &amp;tm, VolumeFaceIndexMap volume_id_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>volume_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::volume_connected_components</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>VolumeFaceIndexMap</type>
          <declname>volume_id_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>assigns to each face of <computeroutput>tm</computeroutput> an id corresponding to the volume connected component it contributes to. </para>
        </briefdescription>
        <detaileddescription>
<para>Using the adjacency relation of two faces along an edge, a triangle mesh can be split into connected components (<emphasis>surface components</emphasis> in the following). A surface component without boundary separates the 3D space into an infinite and a finite volume. We say that the finite volume is <emphasis>enclosed</emphasis> by this surface component.</para>
<para>The volume connected components (<emphasis>volume components</emphasis> in the following) are defined as follows: Each surface component <computeroutput>S</computeroutput> that is outside any volume enclosed by another surface component defines the <emphasis>outer boundary</emphasis> of a volume component. Each surface component that is inside the volume enclosed by <computeroutput>S</computeroutput> defines a <emphasis>hole</emphasis> if it is included in no other volume enclosed by a surface component but <computeroutput>S</computeroutput>. Ignoring the identified volume component, the same procedure is recursively repeated for all surface components in each hole.</para>
<para>There are some special cases:<itemizedlist>
<listitem><para>a non-closed surface component is reported as a volume component ignoring any inclusion test</para>
</listitem><listitem><para>a self-intersecting surface component is reported as a volume component ignoring any inclusion test</para>
</listitem><listitem><para>a surface component intersecting another surface component is reported as a volume component, and so are all the surface components inside its enclosed volume</para>
</listitem><listitem><para>if <computeroutput>do_orientation_tests</computeroutput> is set to <computeroutput>true</computeroutput>, if the holes are not all equally oriented (all inward or all outward) or if the holes and the outer boundary are equally oriented, each surface component is reported as a volume component, and so are all the surface components inside the corresponding enclosed volumes</para>
</listitem><listitem><para>If <computeroutput>do_orientation_tests</computeroutput> is set to <computeroutput>true</computeroutput> and the surface components that are outside all enclosed volumes are inward oriented, they are then considered as holes of the unbounded volume (that has no outer boundary)</para>
</listitem></itemizedlist>
</para>
<para>A property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be either available as an internal property map of <computeroutput>tm</computeroutput> or provided as one of the <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VolumeFaceIndexMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::faces_size_type</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the input triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>volume_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map filled by this function with indices of volume components associated to the faces of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>CGAL::is_closed(tm)</computeroutput></para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="12" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_connected_component_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each face the id of its surface component in the range <computeroutput>[0, number of surface components - 1]</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>volume_inclusions</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a container, which contains at position <computeroutput>k</computeroutput> the ids of all the surface components that are the first intersected by any ray with source on the surface component <computeroutput>k</computeroutput> and directed outside the volume enclosed by the surface component <computeroutput>k</computeroutput>. There is only one such id but when some surface components intersect. The size of the container is exactly the number of surface components of <computeroutput>tm</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a <computeroutput>reference_wrapper</computeroutput> (either from <computeroutput>boost</computeroutput> or the standard library) containing a reference to an object that must be a model of the <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> concept, with a value type being a model of <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> of <computeroutput>std::size_t</computeroutput>, both types having the functions <computeroutput>reserve()</computeroutput> and <computeroutput>push_back()</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_orientation_tests</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the orientation of the faces of each surface components will be taken into account for the definition of the volume. If <computeroutput>false</computeroutput>, the face orientation is ignored and the volumes are defined only by the nesting of surface components. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>error_codes</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a container which indicates the status of a volume assigned to a set of faces. The description of the value type is given in the documentation of the enumeration type. The size of the container is exactly the number of volume components. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a <computeroutput>reference_wrapper</computeroutput> (either from <computeroutput>boost</computeroutput> or the standard library) containing a reference to a container that must be a model of the <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> concept, with value type <ref refid="group__PMP__orientation__grp" kindref="compound"><computeroutput>Volume_error_code</computeroutput> </ref> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_self_intersection_tests</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>false</computeroutput>, it is assumed that <computeroutput>tm</computeroutput> does not contains any self-intersections. If <computeroutput>true</computeroutput>, the input might contain some self-intersections and a test is done prior to the volume decomposition. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>connected_component_id_to_volume_id</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>For each connected component identified using its id <computeroutput>ccid</computeroutput>, the id of the volume it contributes to describe is the value at the position <computeroutput>ccid</computeroutput> in the container. The size of the container is exactly the number of connected components. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a <computeroutput>reference_wrapper</computeroutput> (either from <computeroutput>boost</computeroutput> or the standard library) containing a reference to a container that must be a model of the <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> concept, with value type <computeroutput>std::size_t</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>nesting_levels</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>For each connected component identified using its id <computeroutput>ccid</computeroutput>, the container contains the number of connected components containing on its bounded side this component. The size of the container is exactly the number of connected components. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a <computeroutput>reference_wrapper</computeroutput> (either from <computeroutput>boost</computeroutput> or the standard library) containing a reference to a container that must be a model of the <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> concept, with value type <computeroutput>std::size_t</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>is_cc_outward_oriented</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>For each connected component identified using its id <computeroutput>ccid</computeroutput>, the output of <computeroutput><ref refid="group__PMP__orientation__grp_1gabdb85ef9ccc1a4da632f1a697c6d5163" kindref="member">is_outward_oriented()</ref></computeroutput> called on the triangle mesh corresponding to this connected component is the value at the position <computeroutput>ccid</computeroutput> in the container. The size of the container is exactly the number of connected components. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a <computeroutput>reference_wrapper</computeroutput> (either from <computeroutput>boost</computeroutput> or the standard library) containing a reference to a container that must be a model of the <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> concept, with value type <computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>intersecting_volume_pairs_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Output iterator into which pairs of ids (id must be convertible to <computeroutput>std::size_t</computeroutput>) can be put. Each pair of connected components intersecting will be reported using their ids. If <computeroutput>do_self_intersection_tests</computeroutput> named parameter is set to <computeroutput>false</computeroutput>, nothing will be reported. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of volume components defined by <computeroutput>tm</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="820" column="1" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="820" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::does_bound_a_volume</definition>
        <argsstring>(const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>does_bound_a_volume</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::does_bound_a_volume</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>indicates if <computeroutput>tm</computeroutput> bounds a volume. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="index_1coref_def_subsec" kindref="member">Definitions</ref> for details.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a closed triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>CGAL::is_closed(tm)</computeroutput></para>
</simplesect>
<simplesect kind="attention"><para>if <computeroutput>tm</computeroutput> is self-intersecting the behavior of this function is undefined.</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>is_cc_outward_oriented</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>For each connected component identified using its id <computeroutput>ccid</computeroutput>, the output of <computeroutput><ref refid="group__PMP__orientation__grp_1gabdb85ef9ccc1a4da632f1a697c6d5163" kindref="member">is_outward_oriented()</ref></computeroutput> called on the triangle mesh corresponding to this connected component is the value at the position <computeroutput>ccid</computeroutput> in the container. The size of the container is exactly the number of connected components. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a <computeroutput>reference_wrapper</computeroutput> (either from <computeroutput>boost</computeroutput> or the standard library) containing a reference to a container that must be a model of the <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> concept, with value type <computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gadf6efc8f4475792ccafe36f3e8734302" kindref="member">CGAL::Polygon_mesh_processing::orient_to_bound_a_volume()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="1281" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="1281" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1gadf6efc8f4475792ccafe36f3e8734302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::orient_to_bound_a_volume</definition>
        <argsstring>(TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>orient_to_bound_a_volume</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::orient_to_bound_a_volume</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>orients the connected components of <computeroutput>tm</computeroutput> to make it bound a volume. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="index_1coref_def_subsec" kindref="member">Definitions</ref> for a precise definition.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a closed triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>CGAL::is_closed(tm)</computeroutput></para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>outward_orientation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, each connected component will be outward oriented (and inward oriented if <computeroutput>false</computeroutput>). </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the outer connected components are inward oriented, it means that the infinity will be considered as part of the volume bounded by <computeroutput>tm</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member">CGAL::Polygon_mesh_processing::does_bound_a_volume()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="1347" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="1347" bodyend="1412"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1ga10325d30c17096eed40938545b53cb14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::merge_reversible_connected_components</definition>
        <argsstring>(PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_reversible_connected_components</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_reversible_connected_components</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>reverses the connected components of <computeroutput>tm</computeroutput> having compatible boundary cycles that could be merged if their orientation were made compatible, and stitches them. </para>
        </briefdescription>
        <detaileddescription>
<para>Connected components are examined by increasing number of faces.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>a surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>pm</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pm) - 1</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_number_of_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If not <computeroutput>0</computeroutput>, a connected component is considered reversible only if it has no more faces than the value given. Otherwise, it is always considered reversible. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::size_t</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="1456" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="1456" bodyend="1620"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__orientation__grp_1ga9ac9b9434084b64f3304df636c3178a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class FaceBitMap</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::compatible_orientations</definition>
        <argsstring>(const PolygonMesh &amp;pm, FaceBitMap fbm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>compatible_orientations</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::compatible_orientations</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>FaceBitMap</type>
          <declname>fbm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>identifies faces whose orientation must be reversed in order to enable stitching of connected components. </para>
        </briefdescription>
        <detaileddescription>
<para>Each face is assigned a bit (<computeroutput>false</computeroutput> or <computeroutput>true</computeroutput>) such that two faces have compatible orientations iff they are assigned the same bits. If <computeroutput>pm</computeroutput> features several connected components (ignoring edge orientations), the property map passed to the named parameter <computeroutput>face_partition_id_map</computeroutput> will indicate for each face to which connected component it belongs. Note that two faces in different connected components are not impacting each others&apos; orientations, so comparing their associated bits in <computeroutput>face_bit_map</computeroutput> is irrelevant.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput>, <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceBitMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>face_descriptor</computeroutput> as key and <computeroutput>bool</computeroutput> as value_type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>a surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fbm</parametername>
</parameternamelist>
<parameterdescription>
<para>face bit map indicating if a face orientation should be reversed to be stitchable (see <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" kindref="member">CGAL::Polygon_mesh_processing::stitch_borders()</ref></computeroutput>) with another face. If <computeroutput>false</computeroutput> is returned, the map will not be filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pm</computeroutput> can be reoriented and <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>pm</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_partition_id_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each face the id of its surface component after reversal and stitching in the range <computeroutput>[0, n - 1]</computeroutput>, with <computeroutput>n</computeroutput> the number of such components. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><ref refid="group__PMP__orientation__grp_1gad8a3439883e3e76651f96d15ba58b2bc" kindref="member">reverse_face_orientations()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" kindref="member">stitch_borders()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/orientation.h" line="1668" column="6" bodyfile="CGAL/Polygon_mesh_processing/orientation.h" bodystart="1668" bodyend="1882"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga3be94f1f7968022a294dd533400ad554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup</definition>
        <argsstring>(const PolygonMesh &amp;mesh, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>polygon_mesh_to_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>adds the vertices and faces of a mesh into a (possibly non-empty) polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type can be constructed from the point type of the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type is itself a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type is <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh whose faces are being put in the polygon soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points making the polygons of the soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>mesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, mesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para><computeroutput>PolygonRange</computeroutput> can also be a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type is an array, but it is the user&apos;s responsibility to ensure that all faces have the same number of vertices, and that this number is equal to the size of the array. <htmlonly block="yes"> &lt;/div&gt; </htmlonly></para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">CGAL::Polygon_mesh_processing::orient_polygon_soup()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" kindref="member">CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga2ba9722ec8472a1455107ffce7145e46" kindref="member">CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/polygon_mesh_to_polygon_soup.h" line="98" column="6" bodyfile="CGAL/Polygon_mesh_processing/polygon_mesh_to_polygon_soup.h" bodystart="98" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonRange</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh</definition>
        <argsstring>(const PolygonRange &amp;polygons)</argsstring>
        <name>is_polygon_soup_a_polygon_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh</qualifiedname>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the soup of polygons defines a valid polygon mesh that can be handled by <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga2ba9722ec8472a1455107ffce7145e46" kindref="member">CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It checks that each edge has at most two incident faces and such an edge is visited in opposite direction along the two face boundaries, no polygon has twice the same vertex, and the polygon soup describes a manifold surface. This function does not require a range of points as an argument since the check is purely topological. To each vertex of the mesh is associated an index that is used in the description of the boundaries of the polygons provided in <computeroutput>polygons</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a polygon using the indices of the vertices.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">CGAL::Polygon_mesh_processing::orient_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h" line="195" column="6" bodyfile="CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h" bodystart="195" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga2ba9722ec8472a1455107ffce7145e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters_PS</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename NamedParameters_PM</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh</definition>
        <argsstring>(const PointRange &amp;points, const PolygonRange &amp;polygons, PolygonMesh &amp;out, const NamedParameters_PS &amp;np_ps=parameters::default_values(), const NamedParameters_PM &amp;np_pm=parameters::default_values())</argsstring>
        <name>polygon_soup_to_polygon_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters_PS &amp;</type>
          <declname>np_ps</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters_PM &amp;</type>
          <declname>np_pm</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>builds a polygon mesh from a soup of polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>the input polygon soup describes a consistently oriented polygon mesh. This can be checked using the function <ref refid="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh(polygons)</computeroutput> </ref>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters_PS</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters_PM</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a polygon using the indices of the points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be built </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_ps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the range <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose value type is a point type convertible to the point type of the vertex point map associated to the polygon mesh </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_to_vertex_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs source-vertex-index from <computeroutput>points</computeroutput>, target-vertex. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> accepting <computeroutput>std::pair&lt;int, boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>polygon_to_face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs polygon-index from <computeroutput>polygons</computeroutput>, target-face. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> accepting <computeroutput>std::pair&lt;int, boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_to_vertex_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating each soup point of <computeroutput>points</computeroutput> to a vertex of <computeroutput>out</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with an integer type as key type and <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>polygon_to_face_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating each soup polygon of <computeroutput>polygons</computeroutput> to a face of <computeroutput>out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with an integer type as key type and <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_pm</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, out)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">CGAL::Polygon_mesh_processing::orient_polygon_soup()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" kindref="member">CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3be94f1f7968022a294dd533400ad554" kindref="member">CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h" line="330" column="6" bodyfile="CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h" bodystart="330" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1gae6be1cd5e76dcc3d6b63a0c55ae78999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VertexRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::random_perturbation</definition>
        <argsstring>(VertexRange vertices, TriangleMesh &amp;tmesh, const double &amp;perturbation_max_size, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>random_perturbation</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::random_perturbation</qualifiedname>
        <param>
          <type>VertexRange</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>perturbation_max_size</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>randomly perturbs the locations of non-border vertices of a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, the vertices are re-projected onto the input surface after perturbation. Note that no geometric checks are performed after the perturbation (self-intersections might be introduced).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VertexRange</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>, holding vertices of type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput>. Its iterator type is <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of vertices to be perturbed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perturbation_max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximal length of moves that can be applied to vertices of <computeroutput>tmesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertex is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained vertex cannot be modified at all during perturbation </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_project</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether vertices are reprojected on the input surface after their coordinates random perturbation </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>random_seed</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value to seed the random number generator, and make the perturbation deterministic </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>unsigned int(-1)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/random_perturbation.h" line="156" column="6" bodyfile="CGAL/Polygon_mesh_processing/random_perturbation.h" bodystart="156" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga8dd9fe24ba2faa55a1ca3eb75c4806ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::random_perturbation</definition>
        <argsstring>(TriangleMesh &amp;tmesh, const double &amp;perturbation_max_size, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>random_perturbation</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::random_perturbation</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>perturbation_max_size</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>randomly perturbs the locations of all non-border vertices of a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, the vertices are re-projected onto the input surface after perturbation. Note that no geometric checks are performed after the perturbation (self-intersections might be introduced).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perturbation_max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximal length of moves that can be applied to vertices of <computeroutput>tmesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertex is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained vertex cannot be modified at all during perturbation </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_project</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether vertices are reprojected on the input surface after their coordinates random perturbation </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>random_seed</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value to seed the random number generator, and make the perturbation deterministic </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>unsigned int(-1)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/random_perturbation.h" line="264" column="6" bodyfile="CGAL/Polygon_mesh_processing/random_perturbation.h" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename FaceOutputIterator</type>
          </param>
          <param>
            <type>typename VertexOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; FaceOutputIterator, VertexOutputIterator &gt;</type>
        <definition>std::pair&lt; FaceOutputIterator, VertexOutputIterator &gt; CGAL::Polygon_mesh_processing::refine</definition>
        <argsstring>(TriangleMesh &amp;tmesh, const FaceRange &amp;faces, FaceOutputIterator faces_out, VertexOutputIterator vertices_out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>refine</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::refine</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>FaceOutputIterator</type>
          <declname>faces_out</declname>
        </param>
        <param>
          <type>VertexOutputIterator</type>
          <declname>vertices_out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>refines a region of a triangle mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of face descriptors, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> for patch faces </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> for patch vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>triangle mesh with patches to be refined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faces</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of faces defining the patches to refine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faces_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator into which descriptors of new faces are recorded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator into which descriptors of new vertices are recorded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>density_control_factor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a factor to control density of the output mesh, where larger values lead to denser refinements </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold> <formula id="20">$ \sqrt{2}$</formula> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The density of vertices of <computeroutput>faces_out</computeroutput> is this factor times higher than the vertices of <computeroutput>faces</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>pair of <computeroutput>faces_out</computeroutput> and <computeroutput>vertices_out</computeroutput></para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>is_triangle_mesh(tmesh)</computeroutput></para>
</simplesect>
<xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>current algorithm iterates 10 times at most, since (I guess) there is no termination proof. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/refine.h" line="78" column="5" bodyfile="CGAL/Polygon_mesh_processing/refine.h" bodystart="78" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga396505d5a60b5f6d29792b214fa59352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class ValueMap</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::refine_mesh_at_isolevel</definition>
        <argsstring>(PolygonMesh &amp;pm, ValueMap value_map, typename boost::property_traits&lt; ValueMap &gt;::value_type isovalue, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>refine_mesh_at_isolevel</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::refine_mesh_at_isolevel</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>ValueMap</type>
          <declname>value_map</declname>
        </param>
        <param>
          <type>typename boost::property_traits&lt; ValueMap &gt;::value_type</type>
          <declname>isovalue</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>refines <computeroutput>pm</computeroutput> by adding new vertices on edges having their incident vertices associated with values respectively larger and smaller than <computeroutput>isovalue</computeroutput> in <computeroutput>value_map</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The placement of new vertices on edges will be done by linear interpolation using the aforementioned values. New vertices will be associated <computeroutput>isovalue</computeroutput> in <computeroutput>value_map</computeroutput> when created. Additionally, new edges will be added by connecting new vertices created sharing a common incident face. Note that in case more than two new vertices are added on a face boundary, no edges will be created in that face.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and with its value type being the type of the coordinates of points associated with vertices in the vertex map provided to the <computeroutput>vertex_point_map()</computeroutput> named parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>pm</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be refined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map containing a value at each vertex for a given function defined over the mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isovalue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value used to refine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an output property map associating <computeroutput>true</computeroutput> to all edges connecting vertices on the isolevel, and <computeroutput>false</computeroutput> for all other edges. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>No marks on edges will be put </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/refine_mesh_at_isolevel.h" line="71" column="6" bodyfile="CGAL/Polygon_mesh_processing/refine_mesh_at_isolevel.h" bodystart="71" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga66cb01cf228ed22f0a2a474cfa2aeb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename SizingFunction</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if_t&lt;!std::is_convertible_v&lt;SizingFunction, double&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::isotropic_remeshing</definition>
        <argsstring>(const FaceRange &amp;faces, SizingFunction &amp;sizing, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>isotropic_remeshing</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::isotropic_remeshing</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>SizingFunction &amp;</type>
          <declname>sizing</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>remeshes a triangulated region of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This operation sequentially performs edge splits, edge collapses, edge flips, tangential relaxation and projection to the initial surface to generate a smooth mesh with a prescribed edge length.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. The descriptor types <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> and <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> must be models of <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SizingFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classPMPSizingField" kindref="compound">PMPSizingField</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh with triangulated surface patches to be remeshed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faces</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of triangular faces defining one or several surface patches to be remeshed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizing</parametername>
</parameternamelist>
<parameterdescription>
<para>field that determines a target length for individual edges. If a number convertible to a <computeroutput>double</computeroutput> is passed, <computeroutput>Uniform_sizing_field()</computeroutput> will be used, with the number as a target edge length. If <computeroutput>0</computeroutput> is passed then only the edge-flip, tangential relaxation, and projection steps will be done. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>if constraints protection is activated, the constrained edges must not be longer than 4/3*<computeroutput>target_edge_length</computeroutput>.</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="17" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Exact constructions kernels are not supported by this function. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_iterations</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the number of iterations for the sequence of atomic operations performed (listed in the above description) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no edge is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained edge can be split or collapsed, but not flipped, nor its endpoints moved by smoothing. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Sub-edges generated by splitting are set to be constrained. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Patch boundary edges (i.e. incident to only one face in the range) are always considered as constrained edges. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>pmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertex is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained vertex cannot be modified during remeshing. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>protect_constraints</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the edges set as constrained in <computeroutput>edge_is_constrained_map</computeroutput> (or by default the boundary edges) are neither split nor collapsed during remeshing. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Note that around constrained edges that have their length higher than twice <computeroutput>target_edge_length</computeroutput>, remeshing will fail to provide good quality results. It can even fail to terminate because of cascading vertex insertions. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>collapse_constraints</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the edges set as constrained in <computeroutput>edge_is_constrained_map</computeroutput> (or by default the boundary edges) are collapsed during remeshing. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This value is ignored if <computeroutput>protect_constraints</computeroutput> is <computeroutput>true</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_patch_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map with the patch id&apos;s associated to the faces of <computeroutput>faces</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and the desired property, model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> and <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where each face is associated with the ID of the connected component it belongs to. Connected components are computed with respect to the constrained edges listed in the property map <computeroutput>edge_is_constrained_map</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The map is updated during the remeshing process while new faces are created. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_split</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>whether edges that are too long with respect to the given sizing are split </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_collapse</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>whether edges that are too short with respect to the given sizing are collapsed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_flip</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>whether edge flips are performed to improve shape and valence </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_relaxation_steps</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the number of iterations of tangential relaxation that are performed at each iteration of the remeshing process </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>relax_constraints</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the end vertices of the edges set as constrained in <computeroutput>edge_is_constrained_map</computeroutput> and boundary edges move along the constrained polylines they belong to. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>allow_move_functor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A function object used to determinate if a vertex move should be allowed or not during the relaxation step. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Functor that provides <computeroutput>bool operator()(vertex_descriptor v, Point_3 src, Point_3 tgt)</computeroutput> returning <computeroutput>true</computeroutput> if the vertex <computeroutput>v</computeroutput> can be moved from <computeroutput>src</computeroutput> to <computeroutput>tgt</computeroutput>; <computeroutput>Point_3</computeroutput> being the value type of the vertex point map  </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If not provided, all moves are allowed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_project</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>whether vertices should be reprojected on the input surface after creation or displacement </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>projection_functor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A function object used to project input vertices (moved by the smoothing) and created vertices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Unary functor that provides <computeroutput>Point_3 operator()(vertex_descriptor)</computeroutput>, <computeroutput>Point_3</computeroutput> being the value type of the vertex point map. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If not provided, vertices are projected on the input surface mesh. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1gac41cfadd5e5018aa3d036fa6addad7ad" kindref="member">split_long_edges()</ref></computeroutput></para>
</simplesect>
<xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>Deal with exact constructions <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>. The only thing that makes sense is to guarantee that the output vertices are exactly on the input surface. To do so, we can do every construction in <computeroutput>double</computeroutput>, and use an exact process for projection. For each vertex, the <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref></computeroutput> would be used in an inexact manner to find the triangle on which projection has to be done. Then, use <computeroutput>CGAL::intersection(triangle, line)</computeroutput> in the exact constructions kernel to get a point which is exactly on the surface.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/remesh.h" line="214" column="6" bodyfile="CGAL/Polygon_mesh_processing/remesh.h" bodystart="214" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="remesh_8h_1a92522d1a110e1895925487b14c9f9352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename SizingValue</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if_t&lt;std::is_convertible_v&lt;SizingValue, double&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::isotropic_remeshing</definition>
        <argsstring>(const FaceRange &amp;faces, const SizingValue target_edge_length, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>isotropic_remeshing</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::isotropic_remeshing</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const SizingValue</type>
          <declname>target_edge_length</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/remesh.h" line="360" column="6" bodyfile="CGAL/Polygon_mesh_processing/remesh.h" bodystart="360" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1gac41cfadd5e5018aa3d036fa6addad7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename EdgeRange</type>
          </param>
          <param>
            <type>typename SizingFunction</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if_t&lt;!std::is_convertible_v&lt;SizingFunction, double&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::split_long_edges</definition>
        <argsstring>(const EdgeRange &amp;edges, SizingFunction &amp;sizing, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>split_long_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::split_long_edges</qualifiedname>
        <param>
          <type>const EdgeRange &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>SizingFunction &amp;</type>
          <declname>sizing</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>splits the edges listed in <computeroutput>edges</computeroutput> into sub-edges that are not longer than the given threshold <computeroutput>max_length</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note this function is useful to split constrained edges before calling <computeroutput><ref refid="group__PMP__meshing__grp_1ga66cb01cf228ed22f0a2a474cfa2aeb3f" kindref="member">isotropic_remeshing()</ref></computeroutput> with protection of constraints activated (to match the constrained edge length required by the remeshing algorithm to be guaranteed to terminate)</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> that has an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SizingFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classPMPSizingField" kindref="compound">PMPSizingField</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edges</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of edges to be split if they are longer than given threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizing</parametername>
</parameternamelist>
<parameterdescription>
<para>the sizing function that is used to split edges from &apos;edges&apos; list. If a number convertible to a <computeroutput>double</computeroutput> is passed, <computeroutput>Uniform_sizing_field()</computeroutput> will be used, with the number as target edge length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_patch_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map with the patch id&apos;s associated to the faces of <computeroutput>faces</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and the desired property, model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> and <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where each face is associated with the ID of the connected component it belongs to. Connected components are computed with respect to the constrained edges listed in the property map <computeroutput>edge_is_constrained_map</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The map is updated during the remeshing process while new faces are created. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no edge is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained edge can be split or collapsed, but not flipped, nor its endpoints moved by smoothing. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga66cb01cf228ed22f0a2a474cfa2aeb3f" kindref="member">isotropic_remeshing()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/remesh.h" line="447" column="6" bodyfile="CGAL/Polygon_mesh_processing/remesh.h" bodystart="447" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="remesh_8h_1ad7cc52e6c8d8272e083bcbfdc9ef5204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename EdgeRange</type>
          </param>
          <param>
            <type>typename SizingValue</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if_t&lt;std::is_convertible_v&lt;SizingValue, double&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::split_long_edges</definition>
        <argsstring>(const EdgeRange &amp;edges, const SizingValue max_length, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>split_long_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::split_long_edges</qualifiedname>
        <param>
          <type>const EdgeRange &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>const SizingValue</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/remesh.h" line="504" column="6" bodyfile="CGAL/Polygon_mesh_processing/remesh.h" bodystart="504" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga7fca6fa2db94560ab6d32e6a77fc35b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMeshIn</type>
          </param>
          <param>
            <type>typename PolygonMeshOut</type>
          </param>
          <param>
            <type>typename NamedParametersIn</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename NamedParametersOut</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::remesh_planar_patches</definition>
        <argsstring>(const TriangleMeshIn &amp;tm_in, PolygonMeshOut &amp;pm_out, const NamedParametersIn &amp;np_in=parameters::default_values(), const NamedParametersOut &amp;np_out=parameters::default_values())</argsstring>
        <name>remesh_planar_patches</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remesh_planar_patches</qualifiedname>
        <param>
          <type>const TriangleMeshIn &amp;</type>
          <declname>tm_in</declname>
        </param>
        <param>
          <type>PolygonMeshOut &amp;</type>
          <declname>pm_out</declname>
        </param>
        <param>
          <type>const NamedParametersIn &amp;</type>
          <declname>np_in</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParametersOut &amp;</type>
          <declname>np_out</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>generates a new triangle mesh <computeroutput>pm_out</computeroutput> with the minimal number of triangles while preserving the shape of <computeroutput>tm_in</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In practice, this means that connected components of edge-connected faces belonging to the same plane are first extracted (each such connected component is called a <emphasis>patch</emphasis>). Then, the connected components of vertex-connected patch border edges belonging to the same line are extracted. Endpoints of such components and vertices incident to more than two patches (or two patches + one mesh boundary) are called <emphasis>corners</emphasis>. <computeroutput>pm_out</computeroutput> contains the 2D constrained Delaunay triangulation of each patch using only corner vertices on the boundary of the patch.</para>
<para><simplesect kind="warning"><para>if <computeroutput>tm_in</computeroutput> contains a non-manifold vertex, <computeroutput>pm_out</computeroutput> will be empty. Those vertices must be duplicated with <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" kindref="member">duplicate_non_manifold_vertices()</ref></computeroutput> to get an output.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMeshIn</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMeshOut</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParametersIn</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParametersOut</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm_in</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_in</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm_in</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshIn&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GeomTraits::Point_3</computeroutput> as value type, <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm_in)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMeshIn</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map where the user should put <computeroutput>true</computeroutput> for edges that must be considered as on the boundary of a patch. Additionally, the map is updated by this function and will contain <computeroutput>true</computeroutput> if, based on the angle criteria, an edge is on the boundary of a patch and <computeroutput>false</computeroutput> otherwise. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshIn&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_patch_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each face the id of its patch in the range <computeroutput>[0, number of patches - 1]</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshIn&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_corner_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each vertex that is a corner an id in the range <computeroutput>[0, number of corners - 1]</computeroutput>, and <computeroutput>std::size_t(-1)</computeroutput> otherwise. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshIn&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>cosine_of_maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum angle, given as a cosine, (i) between the normals of the supporting planes of adjacent faces such that they are considered coplanar, and (ii) for the smallest angle between the supporting line of a segment and an adjacent segment such that they are considered collinear. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>FT</computeroutput> type from the <computeroutput>geom_traits</computeroutput> parameter </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1, which means exact coplanarity and collinearity </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The value must be in the interval <computeroutput>[0,1]</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_triangulate_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>true</computeroutput>, faces of <computeroutput>pm_out</computeroutput> will not be triangulated, but the one with more than one connected component of the boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>false </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm_out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMeshOut&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GeomTraits::Point_3</computeroutput> as value type, <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm_out)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMeshOut</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_patch_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each face the id of its patch in the range <computeroutput>[0, number of patches - 1]</computeroutput>, the patch id of two identical patches in the input and output meshes being equal. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMeshOut&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_corner_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each vertex its corner an id in the range <computeroutput>[0, number of corners - 1]</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMeshOut&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a callable with <computeroutput>visitor(pm_out)</computeroutput> being called once <computeroutput>tm_in</computeroutput> is no longer needed and before <computeroutput>pm_out</computeroutput> starts being built. It should be used in the case when <computeroutput>tm_in</computeroutput> and <computeroutput>pm_out</computeroutput> are the same mesh, so that <computeroutput>pm_out</computeroutput> can be cleared before being filled. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>visitor(pm_out)</computeroutput> must be a valid expression. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/remesh_planar_patches.h" line="1423" column="6" bodyfile="CGAL/Polygon_mesh_processing/remesh_planar_patches.h" bodystart="1423" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga0e6da479548199a5d82c3cf0ed36e8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMeshIn</type>
          </param>
          <param>
            <type>typename PolygonMeshOut</type>
          </param>
          <param>
            <type>typename FacePatchMap</type>
          </param>
          <param>
            <type>typename EdgeIsConstrainedMap</type>
          </param>
          <param>
            <type>typename VertexCornerMap</type>
          </param>
          <param>
            <type>typename NamedParametersIn</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename NamedParametersOut</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::remesh_almost_planar_patches</definition>
        <argsstring>(const TriangleMeshIn &amp;tm_in, PolygonMeshOut &amp;pm_out, std::size_t nb_patches, std::size_t nb_corners, FacePatchMap face_patch_map, VertexCornerMap vertex_corner_map, EdgeIsConstrainedMap ecm, const NamedParametersIn &amp;np_in=parameters::default_values(), const NamedParametersOut &amp;np_out=parameters::default_values())</argsstring>
        <name>remesh_almost_planar_patches</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remesh_almost_planar_patches</qualifiedname>
        <param>
          <type>const TriangleMeshIn &amp;</type>
          <declname>tm_in</declname>
        </param>
        <param>
          <type>PolygonMeshOut &amp;</type>
          <declname>pm_out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nb_patches</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nb_corners</declname>
        </param>
        <param>
          <type>FacePatchMap</type>
          <declname>face_patch_map</declname>
        </param>
        <param>
          <type>VertexCornerMap</type>
          <declname>vertex_corner_map</declname>
        </param>
        <param>
          <type>EdgeIsConstrainedMap</type>
          <declname>ecm</declname>
        </param>
        <param>
          <type>const NamedParametersIn &amp;</type>
          <declname>np_in</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParametersOut &amp;</type>
          <declname>np_out</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>generates a new triangle mesh <computeroutput>pm_out</computeroutput> with the minimal number of triangles from a partition of <computeroutput>tm_in</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The terminology used here and the global idea is very similar to what is done by <computeroutput><ref refid="group__PMP__meshing__grp_1ga7fca6fa2db94560ab6d32e6a77fc35b6" kindref="member">remesh_planar_patches()</ref></computeroutput> except that here the partition into patches and corner identification is provided by the user. It allows to have a remeshing of almost coplanar regions, detected for example using the region growing algorithm with the functions <computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga50dcd2f6295f584d2e378b57290ae2af" kindref="member">region_growing_of_planes_on_faces()</ref></computeroutput> and <computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gac8e445730d718a2fc49604e865017d2e" kindref="member">detect_corners_of_regions()</ref></computeroutput>. If a patch cannot be triangulated, it is left untouched in the output and all its vertices become corners so that the output is still a valid conformal triangle mesh. <simplesect kind="return"><para><computeroutput>true</computeroutput> if all patches could be triangulated and <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMeshIn</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMeshOut</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FacePatchMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshIn&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeIsConstrainedMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshIn&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexCornerMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshIn&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParametersIn</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParametersOut</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm_in</parametername>
</parameternamelist>
<parameterdescription>
<para>input triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_patches</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of patches in the partition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_corners</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of corners </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face_patch_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map that contains for each face the id of its patch in the range <computeroutput>[0, nb_patches]</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_corner_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map that contains for each vertex that is a corner an id in the range <computeroutput>[0, nb_corners - 1]</computeroutput>, and <computeroutput>std::size_t(-1)</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ecm</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map that contains <computeroutput>true</computeroutput> if an edge is on the border of a patch and <computeroutput>false</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_in</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>patch_normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map providing for each patch the normal of the supporting plane of the patch (used to triangulate it) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadPropertyMap</computeroutput> with the value type of <computeroutput>FacePatchMap</computeroutput> as key and <computeroutput>GeomTraits::Vector_3</computeroutput> as value type, <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If not provided, patch normals will be estimated using corners of the patches </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm_in</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshIn&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GeomTraits::Point_3</computeroutput> as value type, <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm_in)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMeshIn</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_triangulate_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>true</computeroutput>, faces of <computeroutput>pm_out</computeroutput> will not be triangulated, but the one with more than one connected component of the boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>false </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm_out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMeshOut&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>GeomTraits::Point_3</computeroutput> as value type, <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm_out)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMeshOut</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_patch_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each face the id of its patch in the range <computeroutput>[0, number of patches - 1]</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMeshOut&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_corner_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each vertex its corner an id in the range <computeroutput>[0, number of corners - 1]</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMeshOut&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a callable with <computeroutput>visitor(pm_out)</computeroutput> being called once <computeroutput>tm_in</computeroutput> is no longer needed and before <computeroutput>pm_out</computeroutput> starts being built. It should be used in the case when <computeroutput>tm_in</computeroutput> and <computeroutput>pm_out</computeroutput> are the same mesh, so that <computeroutput>pm_out</computeroutput> can be cleared before being filled. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>visitor(pm_out)</computeroutput> must be a valid expression. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/remesh_planar_patches.h" line="1605" column="6" bodyfile="CGAL/Polygon_mesh_processing/remesh_planar_patches.h" bodystart="1605" bodyend="1644"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__geometric__repair__grp_1ga91c02ef57e638faf2622eae93e7a25e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::remove_isolated_vertices</definition>
        <argsstring>(PolygonMesh &amp;pmesh)</argsstring>
        <name>remove_isolated_vertices</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_isolated_vertices</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <briefdescription>
<para>removes the isolated vertices from any polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>A vertex is considered isolated if it is not incident to a simplex of higher dimension.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be repaired</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of removed isolated vertices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair.h" line="44" column="13" bodyfile="CGAL/Polygon_mesh_processing/repair.h" bodystart="44" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__geometric__repair__grp_1ga571b1605486d5cec0f4474aae3fa1905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size</definition>
        <argsstring>(TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_connected_components_of_negligible_size</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>removes connected components whose area or volume is under a certain threshold value. </para>
        </briefdescription>
        <detaileddescription>
<para>Thresholds are provided via <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>. (see below). If thresholds are not provided by the user, default values are computed as follows:<itemizedlist>
<listitem><para>the area threshold is taken as the square of one percent of the length of the diagonal of the bounding box of the mesh.</para>
</listitem><listitem><para>the volume threshold is taken as the third power of one percent of the length of the diagonal of the bounding box of the mesh.</para>
</listitem></itemizedlist>
</para>
<para>The area and volume of a connected component will always be positive values (regardless of the orientation of the mesh).</para>
<para>As a consequence of the last sentence, the area or volume criteria can be disabled by passing zero (<computeroutput>0</computeroutput>) as threshold value.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="8" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Exact constructions kernels are not supported by this function. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>area_threshold</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a fixed value such that only connected components whose area is larger than this value are kept </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>geom_traits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1% of the length of the diagonal of the axis-aligned bounding box of the mesh, squared </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>volume_threshold</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a fixed value such that only connected components whose volume is larger than this value are kept (only applies to closed connected components) </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>geom_traits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1% of the length of the diagonal of the axis-aligned bounding box of the mesh, cubed </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The mesh must be closed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no edge is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained edge can be split or collapsed, but not flipped, nor its endpoints moved by smoothing. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>dry_run</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the mesh will not be altered, but the number of components that would be removed is returned. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>An output iterator to collect the faces that would be removed by the algorithm, when using the &quot;dry run&quot; mode (see parameter <computeroutput>dry_run</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>face_descriptor</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of connected components removed (ignoring isolated vertices).</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga7dd1414e9366fed26c1f12c12c376b39" kindref="member">keep_connected_components()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gaa30dc31656db0f4d1cab5b2c977bf855" kindref="member">remove_connected_components()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair.h" line="154" column="13" bodyfile="CGAL/Polygon_mesh_processing/repair.h" bodystart="154" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__geometric__repair__grp_1ga48008d2b66de8a68a7068f29db15dad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces</definition>
        <argsstring>(const FaceRange &amp;face_range, TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_almost_degenerate_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>removes almost degenerate faces in a range of faces from a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>Almost degenerated triangle faces are classified as caps or needles: a triangle is said to be a <emphasis>needle</emphasis> if its longest edge is much longer than its shortest edge. A triangle is said to be a <emphasis>cap</emphasis> if one of its angles is close to <computeroutput>180</computeroutput> degrees. Needles are removed by collapsing their shortest edges, while caps are removed by flipping the edge opposite to the largest angle (with the exception of caps on the boundary that are simply removed from the mesh).</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tmesh)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>face_range</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial range of faces to be considered to look for badly shaped triangles. Note that modifications of <computeroutput>tmesh</computeroutput> are not limited to faces in <computeroutput>face_range</computeroutput> and neighbor faces might also be impacted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to be modified </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="9" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>cap_threshold</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the cosine of a minimum angle such that if a face has an angle greater than this bound, it is a cap. The threshold is in range <computeroutput>[-1 0]</computeroutput> and corresponds to an angle between <computeroutput>90</computeroutput> and <computeroutput>180</computeroutput> degrees. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the cosinus corresponding to an angle of 160 degrees </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>needle_threshold</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a bound on the ratio of the lengths of the longest edge and the shortest edge, such that a face having a ratio larger than the threshold is a needle. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>4 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>collapse_length_threshold</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if different from 0, an edge collapsed will be prevented if the edge is longer than the threshold given. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>flip_triangle_height_threshold</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if different from 0, an edge flip will be prevented if the height of the triangle (whose base is the edge to be flipped) is longer than the threshold given. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no edge is constrained. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained edge can not be collapsed nor flipped. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertex is constrained. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained vertex is guaranteed to be present in <computeroutput>tmesh</computeroutput> after the function call. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>filter</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A function object providing <computeroutput>bool operator()(geom_traits::Point_3,geom_traits::Point_3,geom_traits::Point_3)</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The function object is queried each time a new triangle is about to be created by a flip or a collapse operation. If <computeroutput>false</computeroutput> is returned, the operation is canceled. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a functor always returning <computeroutput>true</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if no almost degenerate face could not be removed (due to topological constraints), and <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga4e1b0b968527ce2d0c2f903022b41db4" kindref="member">is_needle_triangle_face()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__predicates__grp_1gad901eb3ea93d84417ffcd0da602be78f" kindref="member">is_cap_triangle_face()</ref></computeroutput></para>
</simplesect>
<xrefsect id="todo_1_todo000006"><xreftitle>Todo</xreftitle><xrefdescription><para>check what to use as priority queue with removable elements, set might not be optimal </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="598" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="598" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__geometric__repair__grp_1ga2abeabce0ee6906cd274570fcc38c146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces</definition>
        <argsstring>(TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_almost_degenerate_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>removes all almost degenerate faces from a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <computeroutput>remove_almost_degenerate_faces(faces(tmesh), tmesh, np)</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="1014" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="1014" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="repair__degeneracies_8h_1a3c2eb9abc8cf9c9dbb82c8ea969ad986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename EdgeSet</type>
          </param>
          <param>
            <type>typename FaceSet</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
        <definition>boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor CGAL::Polygon_mesh_processing::remove_a_border_edge</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::edge_descriptor ed, TriangleMesh &amp;tm, EdgeSet &amp;input_range, EdgeSet &amp;edge_set, FaceSet &amp;face_set)</argsstring>
        <name>remove_a_border_edge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_a_border_edge</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::edge_descriptor</type>
          <declname>ed</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>EdgeSet &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>EdgeSet &amp;</type>
          <declname>edge_set</declname>
        </param>
        <param>
          <type>FaceSet &amp;</type>
          <declname>face_set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="1052" column="1" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="1052" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="repair__degeneracies_8h_1a8a478a5a5804da2a5aa2a40c959988f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
        <definition>boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor CGAL::Polygon_mesh_processing::remove_a_border_edge</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::edge_descriptor ed, TriangleMesh &amp;tm)</argsstring>
        <name>remove_a_border_edge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_a_border_edge</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::edge_descriptor</type>
          <declname>ed</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="1292" column="1" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="1292" bodyend="1300"/>
      </memberdef>
      <memberdef kind="function" id="repair__degeneracies_8h_1a3b1d0e1f43e1cd24d3c40f319835f723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EdgeRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename FaceSet</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::remove_degenerate_edges</definition>
        <argsstring>(const EdgeRange &amp;edge_range, TriangleMesh &amp;tmesh, FaceSet &amp;face_set, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_degenerate_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_degenerate_edges</qualifiedname>
        <param>
          <type>const EdgeRange &amp;</type>
          <declname>edge_range</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>FaceSet &amp;</type>
          <declname>face_set</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="1342" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="1342" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="repair__degeneracies_8h_1abf2f8e5506bffe4601805e7096b17103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EdgeRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::remove_degenerate_edges</definition>
        <argsstring>(const EdgeRange &amp;edge_range, TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_degenerate_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_degenerate_edges</qualifiedname>
        <param>
          <type>const EdgeRange &amp;</type>
          <declname>edge_range</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="1840" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="1840" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="repair__degeneracies_8h_1afde16d9278c8977d6bd6d412ad0bdc53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::remove_degenerate_edges</definition>
        <argsstring>(TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_degenerate_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_degenerate_edges</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="1849" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="1849" bodyend="1854"/>
      </memberdef>
      <memberdef kind="function" id="repair__degeneracies_8h_1a1c51f5d64466a9712ae77628dd83c916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::remove_degenerate_faces</definition>
        <argsstring>(const FaceRange &amp;face_range, TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_degenerate_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_degenerate_faces</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="1901" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="1901" bodyend="2714"/>
      </memberdef>
      <memberdef kind="function" id="repair__degeneracies_8h_1a8987f6df8f92afdada03249529eef23c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::remove_degenerate_faces</definition>
        <argsstring>(TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_degenerate_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_degenerate_faces</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_degeneracies.h" line="2717" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_degeneracies.h" bodystart="2717" bodyend="2721"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1gaef5c13fc9dd4cae14c860351c479a45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup</definition>
        <argsstring>(PointRange &amp;points, PolygonRange &amp;polygons)</argsstring>
        <name>remove_isolated_points_in_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>removes the isolated points from a polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para>A point is considered <emphasis>isolated</emphasis> if it does not appear in any polygon of the soup.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of polygons. Each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of removed isolated points</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" kindref="member">repair_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" line="418" column="13" bodyfile="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" bodystart="418" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga1f215926ed8794db827e2993d2960870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup</definition>
        <argsstring>(PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_duplicate_points_in_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>merges the duplicate points in a polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the index of a point that is merged with another point will thus change in all the polygons that the point appears in.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> and <computeroutput><ref refid="classSwappable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Swappable</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of polygons. Each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested functor <computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points a function <computeroutput>Less_xyz_3 less_xyz_3_object()</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of removed points</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" kindref="member">repair_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" line="536" column="13" bodyfile="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" bodystart="536" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga93d14c26c259b5844dbd5a7753278e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup</definition>
        <argsstring>(const PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_duplicate_polygons_in_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>merges the duplicate polygons in a polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para>Two polygons are duplicate if they share the same vertices in the same order. Note that the first vertex of the polygon does not matter, that is the triangle <computeroutput>0,1,2</computeroutput> is a duplicate of the triangle <computeroutput>2,0,1</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classReversibleContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReversibleContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of polygons. Each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested functor <computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points a function <computeroutput>Less_xyz_3 less_xyz_3_object()</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>erase_all_duplicates</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Parameter to indicate, when multiple polygons are duplicates, whether all the duplicate polygons should be removed or if one (arbitrarily chosen) face should be kept. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>require_same_orientation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Parameter to indicate if polygon orientation should be taken into account when determining whether two polygons are duplicates, that is, whether e.g. the triangles <computeroutput>0,1,2</computeroutput> and <computeroutput>0,2,1</computeroutput> are duplicates. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of removed polygons</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" kindref="member">repair_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" line="947" column="13" bodyfile="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" bodystart="947" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::repair_polygon_soup</definition>
        <argsstring>(PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>repair_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::repair_polygon_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>cleans a given polygon soup through various repairing operations. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, this function carries out the following tasks, in the same order as they are listed:<itemizedlist>
<listitem><para>merging of duplicate points, using the function <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga1f215926ed8794db827e2993d2960870" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup()</ref></computeroutput>;</para>
</listitem><listitem><para>simplification of polygons to remove geometrically identical consecutive vertices;</para>
</listitem><listitem><para>splitting of &quot;pinched&quot; polygons, that is polygons in which a geometric position appears more than once. The splitting process results in multiple non-pinched polygons;</para>
</listitem><listitem><para>removal of invalid polygons, that is polygons with fewer than 2 vertices;</para>
</listitem><listitem><para>removal of duplicate polygons, using the function <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga93d14c26c259b5844dbd5a7753278e5f" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup()</ref></computeroutput>;</para>
</listitem><listitem><para>removal of isolated points, using the function <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1gaef5c13fc9dd4cae14c860351c479a45f" kindref="member">CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup()</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>Note that the point and polygon containers will be modified by the repairing operations, and thus the indexing of the polygons will also be changed.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> and <computeroutput><ref refid="classSwappable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Swappable</ref></computeroutput> and whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput>, <computeroutput><ref refid="classSwappable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Swappable</ref></computeroutput>, and <computeroutput><ref refid="classReversibleContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReversibleContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of polygons. Each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested functors <computeroutput>Less_xyz_3</computeroutput> and <computeroutput>Equal_3</computeroutput> to respectivelycompare lexicographically two points and to check if two points are identical. For each functor <computeroutput>Foo</computeroutput>, a function <computeroutput>Foo foo_object()</computeroutput> must be provided. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>erase_all_duplicates</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Parameter to indicate, when multiple polygons are duplicates, whether all the duplicate polygons should be removed or if one (arbitrarily chosen) face should be kept. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>require_same_orientation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Parameter to indicate if polygon orientation should be taken into account when determining whether two polygons are duplicates, that is, whether e.g. the triangles <computeroutput>0,1,2</computeroutput> and <computeroutput>0,2,1</computeroutput> are duplicates. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" line="1166" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" bodystart="1166" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga5c8f1c1aba66b32be12d88f852f87fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConcurrencyTag</type>
            <defval>Sequential_tag</defval>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class FaceRange</type>
          </param>
          <param>
            <type>class FacePairOutputIterator</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>FacePairOutputIterator</type>
        <definition>FacePairOutputIterator CGAL::Polygon_mesh_processing::self_intersections</definition>
        <argsstring>(const FaceRange &amp;face_range, const TriangleMesh &amp;tmesh, FacePairOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>self_intersections</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::self_intersections</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>FacePairOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>collects intersections between a subset of faces of a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>Two faces are said to intersect if the corresponding triangles intersect and the intersection is neither an edge nor a vertex incident to both faces.</para>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tmesh)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FacePairOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of type <computeroutput>std::pair&lt;boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor, boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor&gt;</computeroutput>. It does not need to be thread-safe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>face_range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of faces to check for self-intersection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to be checked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator to be filled with all pairs of non-adjacent faces that intersect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_number</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum number of self intersections that will be detected and returned by the function. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>No limit. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>In parallel mode, the number of returned self-intersections is at least <computeroutput>maximum_number</computeroutput> (and not exactly that number) as no strong synchronization is put on threads for performance reasons. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>out</computeroutput></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member">does_self_intersect()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/self_intersections.h" line="577" column="1" bodyfile="CGAL/Polygon_mesh_processing/self_intersections.h" bodystart="577" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga6c5bed399d14ddbba820ce50d3145712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConcurrencyTag</type>
            <defval>Sequential_tag</defval>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class FacePairOutputIterator</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>FacePairOutputIterator</type>
        <definition>FacePairOutputIterator CGAL::Polygon_mesh_processing::self_intersections</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, FacePairOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>self_intersections</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::self_intersections</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>FacePairOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>collects intersections between all the faces of a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>Two faces are said to intersect if the corresponding triangles intersect and the intersection is neither an edge nor a vertex incident to both faces.</para>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tmesh)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FacePairOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of type <computeroutput>std::pair&lt;boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor, boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor&gt;</computeroutput>. It does not need to be thread-safe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to be checked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator to be filled with all pairs of non-adjacent faces that intersect. In case <computeroutput>tmesh</computeroutput> contains some degenerate faces, for each degenerate face <computeroutput>f</computeroutput> a pair <computeroutput>(f,f)</computeroutput> will be put in <computeroutput>out</computeroutput> before any other self intersection between non-degenerate faces. <linebreak/>
 Note that these are the only pairs where degenerate faces will be reported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_number</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum number of self intersections that will be detected and returned by the function. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>No limit. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>In parallel mode, the number of returned self-intersections is at least <computeroutput>maximum_number</computeroutput> (and not exactly that number) as no strong synchronization is put on threads for performance reasons. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>out</computeroutput></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member">does_self_intersect()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/self_intersections.h" line="645" column="1" bodyfile="CGAL/Polygon_mesh_processing/self_intersections.h" bodystart="645" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConcurrencyTag</type>
            <defval>Sequential_tag</defval>
          </param>
          <param>
            <type>class FaceRange</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::does_self_intersect</definition>
        <argsstring>(const FaceRange &amp;face_range, const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>does_self_intersect</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::does_self_intersect</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>tests if a set of faces of a triangulated surface mesh self-intersects. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tmesh)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>face_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>face_range</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of faces to test for self-intersection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to be tested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the faces in <computeroutput>face_range</computeroutput> self-intersect</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga5c8f1c1aba66b32be12d88f852f87fb0" kindref="member">self_intersections()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/self_intersections.h" line="696" column="6" bodyfile="CGAL/Polygon_mesh_processing/self_intersections.h" bodystart="696" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga28affb9bdf1b38765479609084cd1e94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConcurrencyTag</type>
            <defval>Sequential_tag</defval>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::does_self_intersect</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>does_self_intersect</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::does_self_intersect</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>tests if a triangulated surface mesh self-intersects. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><simplesect kind="pre"><para><computeroutput>CGAL::is_triangle_mesh(tmesh)</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh to be tested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>tmesh</computeroutput> self-intersects</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga5c8f1c1aba66b32be12d88f852f87fb0" kindref="member">self_intersections()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/self_intersections.h" line="764" column="6" bodyfile="CGAL/Polygon_mesh_processing/self_intersections.h" bodystart="764" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga1c5fee17bd0d92d5a2fba77ed94d4b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConcurrencyTag</type>
            <defval>Sequential_tag</defval>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class TriangleRange</type>
          </param>
          <param>
            <type>class TriangleIdPairOutputIterator</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>TriangleIdPairOutputIterator</type>
        <definition>TriangleIdPairOutputIterator CGAL::Polygon_mesh_processing::triangle_soup_self_intersections</definition>
        <argsstring>(const PointRange &amp;points, const TriangleRange &amp;triangles, TriangleIdPairOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangle_soup_self_intersections</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangle_soup_self_intersections</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>TriangleIdPairOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>collects intersections between all the triangles in a triangle soup. </para>
        </briefdescription>
        <detaileddescription>
<para>Two triangles of the soup are said to intersect if the corresponding geometric triangles intersect and the intersection is neither an edge nor a vertex of both triangles (with the same point ids, ignoring the orientation for an edge).</para>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleIdPairOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of type <computeroutput>std::pair&lt;std::size_t,std::size_t&gt;</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of triangles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a triangle using the indices of the points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator to be filled with all pairs of ids of triangles intersecting (the id of a triangle is its position in <computeroutput>triangles</computeroutput>). In case the triangle soup contains some degenerate triangles, for each degenerate triangle <computeroutput>t</computeroutput> with id <computeroutput>i</computeroutput> a pair <computeroutput>(i,i)</computeroutput> will be put in <computeroutput>out</computeroutput> before any other self intersection between non-degenerate triangles.<linebreak/>
 Note that these are the only pairs where degenerate triangles will be reported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_number</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum number of self intersections that will be detected and returned by the function. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>No limit. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>In parallel mode, the number of returned self-intersections is at least <computeroutput>maximum_number</computeroutput> (and not exactly that number) as no strong synchronization is put on threads for performance reasons. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the range <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose value type is a point type from a CGAL <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the point type of the point map. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>out</computeroutput></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga4909920dc48b8285e69feb845feb1e53" kindref="member">does_triangle_soup_self_intersect()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga5c8f1c1aba66b32be12d88f852f87fb0" kindref="member">self_intersections()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member">does_self_intersect()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/self_intersections.h" line="861" column="1" bodyfile="CGAL/Polygon_mesh_processing/self_intersections.h" bodystart="861" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__intersection__grp_1ga4909920dc48b8285e69feb845feb1e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ConcurrencyTag</type>
            <defval>Sequential_tag</defval>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class TriangleRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::does_triangle_soup_self_intersect</definition>
        <argsstring>(const PointRange &amp;points, const TriangleRange &amp;triangles, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>does_triangle_soup_self_intersect</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::does_triangle_soup_self_intersect</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>tests if a triangle soup self-intersects. </para>
        </briefdescription>
        <detaileddescription>
<para>A triangle soup self-intersects if at least two triangles of the soup intersect. Two triangles of the soup are said to intersect if the corresponding geometric triangles intersect and the intersection is neither an edge nor a vertex of both triangles (with the same point ids, ignoring the orientation for an edge).</para>
<para>This function depends on the package <ref refid="packages_1PkgBoxIntersectionD" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Intersecting Sequences of dD Iso-oriented Boxes</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of triangles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a triangle using the indices of the points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the range <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose value type is a point type from a CGAL <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPSelfIntersectionTraits" kindref="compound">PMPSelfIntersectionTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the point type of the point map. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the triangle soup self-intersects, and <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga1c5fee17bd0d92d5a2fba77ed94d4b4d" kindref="member">triangle_soup_self_intersections()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga5c8f1c1aba66b32be12d88f852f87fb0" kindref="member">self_intersections()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member">does_self_intersect()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/self_intersections.h" line="943" column="6" bodyfile="CGAL/Polygon_mesh_processing/self_intersections.h" bodystart="943" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__predicates__grp_1ga3f58569399266bf51bc3156f310e6bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_degenerate_edge</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor e, const PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>is_degenerate_edge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_degenerate_edge</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>checks whether an edge is degenerate. </para>
        </briefdescription>
        <detaileddescription>
<para>An edge is considered degenerate if the geometric positions of its two extremities are identical.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>an edge of <computeroutput>pm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh containing <computeroutput>e</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functor <computeroutput>Equal_3</computeroutput> to check whether two points are identical. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the edge <computeroutput>e</computeroutput> is degenerate, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga8792f19475d1b066ed9b9bf35d69c695" kindref="member">degenerate_edges()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/shape_predicates.h" line="76" column="6" bodyfile="CGAL/Polygon_mesh_processing/shape_predicates.h" bodystart="76" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__predicates__grp_1ga8792f19475d1b066ed9b9bf35d69c695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EdgeRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::degenerate_edges</definition>
        <argsstring>(const EdgeRange &amp;edges, const TriangleMesh &amp;tm, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>degenerate_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::degenerate_edges</qualifiedname>
        <param>
          <type>const EdgeRange &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>collects the degenerate edges within a given range of edges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EdgeRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>edges</parametername>
</parameternamelist>
<parameterdescription>
<para>a subset of edges of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator in which the degenerate edges are written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functor <computeroutput>Equal_3</computeroutput> to check whether two points are identical. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga3f58569399266bf51bc3156f310e6bd0" kindref="member">is_degenerate_edge()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/shape_predicates.h" line="130" column="16" bodyfile="CGAL/Polygon_mesh_processing/shape_predicates.h" bodystart="130" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__predicates__grp_1gaaaa700acb908e56b939b0279020ee06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::degenerate_edges</definition>
        <argsstring>(const TriangleMesh &amp;tm, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>degenerate_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::degenerate_edges</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>calls the function <computeroutput><ref refid="group__PMP__predicates__grp_1ga8792f19475d1b066ed9b9bf35d69c695" kindref="member">degenerate_edges()</ref></computeroutput> with the range: <computeroutput>edges(tm)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See the other overload for the comprehensive description of the parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/shape_predicates.h" line="150" column="16" bodyfile="CGAL/Polygon_mesh_processing/shape_predicates.h" bodystart="150" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__predicates__grp_1ga482e70b514067bb25403009e0a861262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_degenerate_triangle_face</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor f, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>is_degenerate_triangle_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_degenerate_triangle_face</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>checks whether a triangle face is degenerate. </para>
        </briefdescription>
        <detaileddescription>
<para>A triangle face is considered degenerate if the geometric positions of its vertices are collinear.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh containing <computeroutput>f</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functor <computeroutput>Collinear_3</computeroutput> to check whether three points are aligned. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the face <computeroutput>f</computeroutput> is degenerate, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga349da012e9a09a6085e2607c3e9ea9fb" kindref="member">degenerate_faces()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/shape_predicates.h" line="191" column="6" bodyfile="CGAL/Polygon_mesh_processing/shape_predicates.h" bodystart="191" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__predicates__grp_1ga349da012e9a09a6085e2607c3e9ea9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::degenerate_faces</definition>
        <argsstring>(const FaceRange &amp;faces, const TriangleMesh &amp;tm, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>degenerate_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::degenerate_faces</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>collects the degenerate faces within a given range of faces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>faces</parametername>
</parameternamelist>
<parameterdescription>
<para>a subset of faces of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator in which the degenerate faces are put </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functor <computeroutput>Collinear_3</computeroutput> to check whether three points are collinear. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga482e70b514067bb25403009e0a861262" kindref="member">is_degenerate_triangle_face()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/shape_predicates.h" line="250" column="16" bodyfile="CGAL/Polygon_mesh_processing/shape_predicates.h" bodystart="250" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__predicates__grp_1gafd9ae763020a18b55902b88402c6537c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::degenerate_faces</definition>
        <argsstring>(const TriangleMesh &amp;tm, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>degenerate_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::degenerate_faces</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>calls the function <computeroutput><ref refid="group__PMP__predicates__grp_1ga349da012e9a09a6085e2607c3e9ea9fb" kindref="member">degenerate_faces()</ref></computeroutput> with the range: <computeroutput>faces(tm)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See the other overload for the comprehensive description of the parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/shape_predicates.h" line="271" column="16" bodyfile="CGAL/Polygon_mesh_processing/shape_predicates.h" bodystart="271" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__predicates__grp_1ga4e1b0b968527ce2d0c2f903022b41db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor CGAL::Polygon_mesh_processing::is_needle_triangle_face</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor f, const TriangleMesh &amp;tm, const double threshold, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>is_needle_triangle_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_needle_triangle_face</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>checks whether a triangle face is needle. </para>
        </briefdescription>
        <detaileddescription>
<para>A triangle is said to be a <emphasis>needle</emphasis> if its longest edge is much longer than its shortest edge.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>triangle mesh containing <computeroutput>f</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>a bound on the ratio of the longest edge length and the shortest edge length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput>FT</computeroutput>, and the nested functor <computeroutput>Compute_squared_distance_3</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the shortest halfedge if the triangle face is a needle, and a null halfedge otherwise. If the face contains degenerate edges, a halfedge corresponding to one of these edges is returned.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__predicates__grp_1gad901eb3ea93d84417ffcd0da602be78f" kindref="member">is_cap_triangle_face()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__geometric__repair__grp_1ga48008d2b66de8a68a7068f29db15dad6" kindref="member">remove_almost_degenerate_faces()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/shape_predicates.h" line="397" column="1" bodyfile="CGAL/Polygon_mesh_processing/shape_predicates.h" bodystart="397" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__predicates__grp_1gad901eb3ea93d84417ffcd0da602be78f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor CGAL::Polygon_mesh_processing::is_cap_triangle_face</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor f, const TriangleMesh &amp;tm, const double threshold, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>is_cap_triangle_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_cap_triangle_face</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>checks whether a triangle face is a cap. </para>
        </briefdescription>
        <detaileddescription>
<para>A triangle is said to be a <emphasis>cap</emphasis> if one of its angles is close to <computeroutput>180</computeroutput> degrees.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>triangle mesh containing <computeroutput>f</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>the cosine of a minimum angle such that if <computeroutput>f</computeroutput> has an angle greater than this bound, it is a cap. The threshold is in range <computeroutput>[-1 0]</computeroutput> and corresponds to an angle between <computeroutput>90</computeroutput> and <computeroutput>180</computeroutput> degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, the nested functors <computeroutput>Compute_squared_distance_3</computeroutput>, <computeroutput>Construct_vector_3</computeroutput>, and <computeroutput>Compute_scalar_product_3</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the halfedge opposite of the largest angle if the face is a cap, and a null halfedge otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga4e1b0b968527ce2d0c2f903022b41db4" kindref="member">is_needle_triangle_face()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__geometric__repair__grp_1ga48008d2b66de8a68a7068f29db15dad6" kindref="member">remove_almost_degenerate_faces()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/shape_predicates.h" line="546" column="1" bodyfile="CGAL/Polygon_mesh_processing/shape_predicates.h" bodystart="546" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="group__PMPDeprecated_1ga79c2b4ad31e2dd15b93725e8efd5208a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::smooth_mesh</definition>
        <argsstring>(const FaceRange &amp;faces, TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>smooth_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::smooth_mesh</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.5, <computeroutput>CGAL::angle_and_area_smoothing()</computeroutput> should be used instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/smooth_mesh.h" line="37" column="7" bodyfile="CGAL/Polygon_mesh_processing/smooth_mesh.h" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga57fa999abe8dc557003482444df2a189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::smooth_shape</definition>
        <argsstring>(const FaceRange &amp;faces, TriangleMesh &amp;tmesh, const double time, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>smooth_shape</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::smooth_shape</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>smooths the overall shape of the mesh by using the mean curvature flow. </para>
        </briefdescription>
        <detaileddescription>
<para>The effect depends on the curvature of each area and on a time step which represents the amount by which vertices are allowed to move. The result conformally maps the initial surface to a sphere.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh with triangulated surface patches to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faces</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of triangular faces defining one or several surface patches to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>a time step that corresponds to the speed by which the surface is smoothed. A larger time step results in faster convergence but details may be distorted to a larger extent compared to more iterations with a smaller step. Typical values scale in the interval (1e-6, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_iterations</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the number of iterations for the sequence of the smoothing iterations performed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>tmesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertex is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A constrained vertex cannot be modified at all during smoothing. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_scale</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Whether to apply rescaling after smoothing. This is useful because the mean curvature flow tends to shrink the surface. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><ref refid="classCGAL_1_1Scaling" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Scaling</ref> can only be applied if the mesh is closed and if there is no more than a single constrained vertex. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If a vertex is constrained, it is the fixed point of the scaling, otherwise the centroid is used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sparse_linear_solver</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of the sparse linear solver used for smoothing </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classSparseLinearAlgebraWithFactorTraits__d" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">SparseLinearAlgebraWithFactorTraits_d</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>if <ref refid="thirdparty_1thirdpartyEigen" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Eigen</ref> 3.2 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined, then the following overload of <computeroutput><ref refid="classCGAL_1_1Eigen__solver__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">Eigen_solver_traits</ref></computeroutput> is provided as default value: <computeroutput><ref refid="classCGAL_1_1Eigen__solver__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::Eigen_solver_traits</ref>&lt;Eigen::BiCGSTAB&lt;<ref refid="structCGAL_1_1Eigen__sparse__matrix" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::Eigen_sparse_matrix</ref>&lt;double&gt;::EigenType, Eigen::IncompleteLUT&lt;double&gt; &gt; &gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="warning"><para>This function involves linear algebra, that is computed using non-exact, floating-point arithmetic.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1gad5a9a90355bab0613d94a6b9d73d54ed" kindref="member">angle_and_area_smoothing()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/smooth_shape.h" line="115" column="6" bodyfile="CGAL/Polygon_mesh_processing/smooth_shape.h" bodystart="115" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_boundary_cycle</definition>
        <argsstring>(const typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor h, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>stitch_boundary_cycle</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_boundary_cycle</qualifiedname>
        <param>
          <type>const typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>stitches together, whenever possible, two halfedges belonging to the boundary cycle described by the halfedge <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Two border halfedges <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> can be stitched if the points associated to the source and target vertices of <computeroutput>h1</computeroutput> are the same as those of the target and source vertices of <computeroutput>h2</computeroutput>, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>a border halfedge of the polygon mesh <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be stitched </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functors:<itemizedlist>
<listitem><para><computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points</para>
</listitem><listitem><para><computeroutput>Equal_3</computeroutput> to check whether two points are identical. For each functor <computeroutput>Foo</computeroutput>, a function <computeroutput>Foo foo_object()</computeroutput> must be provided. </para>
</listitem></itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">stitch_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" kindref="member">stitch_borders()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1166" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1166" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BorderHalfedgeRange</type>
          </param>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_boundary_cycles</definition>
        <argsstring>(const BorderHalfedgeRange &amp;boundary_cycle_representatives, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>stitch_boundary_cycles</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_boundary_cycles</qualifiedname>
        <param>
          <type>const BorderHalfedgeRange &amp;</type>
          <declname>boundary_cycle_representatives</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>stitches together, whenever possible, two halfedges belonging to the same boundary cycle. </para>
        </briefdescription>
        <detaileddescription>
<para>Two border halfedges <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> can be stitched if the points associated to the source and target vertices of <computeroutput>h1</computeroutput> are the same as those of the target and source vertices of <computeroutput>h2</computeroutput>, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BorderHalfedgeRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boundary_cycle_representatives</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of border halfedges, each describing a boundary cycle of the mesh <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be modified by stitching </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functors:<itemizedlist>
<listitem><para><computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points</para>
</listitem><listitem><para><computeroutput>Equal_3</computeroutput> to check whether two points are identical. For each functor <computeroutput>Foo</computeroutput>, a function <computeroutput>Foo foo_object()</computeroutput> must be provided. </para>
</listitem></itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">stitch_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" kindref="member">stitch_borders()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1238" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1238" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename HalfedgePairsRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_borders</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const HalfedgePairsRange &amp;hedge_pairs_to_stitch, const NamedParameters &amp;np=parameters::default_values(), std::enable_if_t&lt; boost::has_range_iterator&lt; HalfedgePairsRange &gt;::value &gt; *=0)</argsstring>
        <name>stitch_borders</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_borders</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const HalfedgePairsRange &amp;</type>
          <declname>hedge_pairs_to_stitch</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>std::enable_if_t&lt; boost::has_range_iterator&lt; HalfedgePairsRange &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>stitches together border halfedges in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The halfedges to be stitched are provided in <computeroutput>hedge_pairs_to_stitch</computeroutput>. For each pair <computeroutput>p</computeroutput> in this vector, <computeroutput>p.second</computeroutput> and its opposite will be removed from <computeroutput>pmesh</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HalfedgePairsRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>std::pair&lt;boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor, boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor&gt;</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be modified by stitching </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hedge_pairs_to_stitch</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>std::pair</computeroutput> of halfedges to be stitched together </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">stitch_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">stitch_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1306" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1306" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga740c417af0ef24a16faebb23727d089c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_borders</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>stitch_borders</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_borders</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as the other overload, but the pairs of halfedges to be stitched are automatically found amongst all border halfedges. </para>
        </briefdescription>
        <detaileddescription>
<para>Two border halfedges <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are set to be stitched if the points associated to the source and target vertices of <computeroutput>h1</computeroutput> are the same as those of the target and source vertices of <computeroutput>h2</computeroutput>, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BorderHalfedgeRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be modified by the stitching procedure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>apply_per_connected_component</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>specifies if the borders should only be stitched only within their own connected component. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">stitch_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">stitch_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1438" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1438" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga562d3f935e55a6378d407183f9533dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BorderHalfedgeRange</type>
          </param>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_borders</definition>
        <argsstring>(const BorderHalfedgeRange &amp;boundary_cycle_representatives, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>stitch_borders</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_borders</qualifiedname>
        <param>
          <type>const BorderHalfedgeRange &amp;</type>
          <declname>boundary_cycle_representatives</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as the other overload, but the pairs of halfedges to be stitched are automatically found amongst halfedges in cycles described by <computeroutput>boundary_cycle_representatives</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Two border halfedges <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are set to be stitched if the points associated to the source and target vertices of <computeroutput>h1</computeroutput> are the same as those of the target and source vertices of <computeroutput>h2</computeroutput>, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BorderHalfedgeRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boundary_cycle_representatives</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of border halfedges, each describing a boundary cycle whose halfedges will be considered for stitching </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be modified by the stitching procedure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>apply_per_connected_component</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>specifies if the borders should only be stitched only within their own connected component. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functors:<itemizedlist>
<listitem><para><computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points</para>
</listitem><listitem><para><computeroutput>Equal_3</computeroutput> to check whether two points are identical. For each functor <computeroutput>Foo</computeroutput>, a function <computeroutput>Foo foo_object()</computeroutput> must be provided. </para>
</listitem></itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">stitch_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">stitch_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1510" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1510" bodyend="1523"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga136c659162e5360354db5879db7431b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VertexRange</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::tangential_relaxation</definition>
        <argsstring>(const VertexRange &amp;vertices, TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>tangential_relaxation</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::tangential_relaxation</qualifiedname>
        <param>
          <type>const VertexRange &amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>applies an iterative area-based tangential smoothing to the given range of vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Each vertex <computeroutput>v</computeroutput> is relocated to its gravity-weighted centroid, and the relocation vector is projected back to the tangent plane to the surface at <computeroutput>v</computeroutput>, iteratively. The connectivity remains unchanged.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> and <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput>. The descriptor types <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> and <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::halfedge_descriptor</computeroutput> must be models of <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of vertices which will be relocated by relaxation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to which <computeroutput>vertices</computeroutput> belong </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="8" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Exact constructions kernels are not supported by this function. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_iterations</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the number of smoothing iterations </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tm</computeroutput>. The endpoints of a constrained edge cannot be moved by relaxation. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no edges are constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Boundary edges are always considered as constrained edges. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>tm</computeroutput>. A constrained vertex cannot be modified during relaxation. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertices are constrained </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>relax_constraints</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the end vertices of the edges set as constrained in <computeroutput>edge_is_constrained_map</computeroutput> and boundary edges move along the constrained polylines they belong to. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>allow_move_functor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A function object used to determinate if a vertex move should be allowed or not </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Unary functor that provides <computeroutput>bool operator()(vertex_descriptor v, Point_3 src, Point_3 tgt)</computeroutput> returning <computeroutput>true</computeroutput> if the vertex <computeroutput>v</computeroutput> can be moved from <computeroutput>src</computeroutput> to <computeroutput>tgt</computeroutput>; <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> being the value type of the vertex point map  </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If not provided, all moves are allowed. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sizing_function</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>An object containing sizing field for individual vertices. Used to derive smoothing weights. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <computeroutput><ref refid="classPMPSizingField" kindref="compound">PMPSizingField</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If not provided, smoothing weights are the same for all vertices. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><xrefsect id="todo_1_todo000007"><xreftitle>Todo</xreftitle><xrefdescription><para>check if it should really be a triangle mesh or if a polygon mesh is fine </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/tangential_relaxation.h" line="133" column="6" bodyfile="CGAL/Polygon_mesh_processing/tangential_relaxation.h" bodystart="133" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga8a906fba78439b213e06dbd7ba510a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::tangential_relaxation</definition>
        <argsstring>(TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>tangential_relaxation</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::tangential_relaxation</qualifiedname>
        <param>
          <type>TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>applies <computeroutput><ref refid="group__PMP__meshing__grp_1ga136c659162e5360354db5879db7431b4" kindref="member">tangential_relaxation()</ref></computeroutput> to all the vertices of <computeroutput>tm</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/tangential_relaxation.h" line="381" column="6" bodyfile="CGAL/Polygon_mesh_processing/tangential_relaxation.h" bodystart="381" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gaf2cbaecebb112bc4857782728481ccec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Transformation</type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::transform</definition>
        <argsstring>(const Transformation &amp;transformation, PolygonMesh &amp;mesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>transform</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::transform</qualifiedname>
        <param>
          <type>const Transformation &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>applies a transformation to every vertex of a <computeroutput>PolygonMesh</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor that has an <computeroutput>operator()(Point_3)</computeroutput>, with <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> the <computeroutput>value_type</computeroutput> of <computeroutput>vertex_point_map</computeroutput> (see below). Such a functor can be <computeroutput><ref refid="classCGAL_1_1Aff__transformation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Aff_transformation_3</ref></computeroutput> for example. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>the transformation functor to apply to the points of <computeroutput>mesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>PolygonMesh</computeroutput> to transform. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>mesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, mesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/transform.h" line="48" column="6" bodyfile="CGAL/Polygon_mesh_processing/transform.h" bodystart="48" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga0542a44d0d081f84e387b1e6bcbca471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triangle__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Triangle_3</ref></type>
        <definition>Triangle_3 CGAL::Polygon_mesh_processing::triangle</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangle</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangle</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>computes a triangle for a face descriptor of a triangle mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the descriptor of the face to construct the triangle from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangle.h" line="62" column="1" bodyfile="CGAL/Polygon_mesh_processing/triangle.h" bodystart="62" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga54559e61c73ce4481f4a3374a61ca038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::triangulate_face</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor f, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_face</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates a single face of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgTriangulation2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">2D Triangulations</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>face to be triangulated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to which the face to be triangulated belongs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor that enables to track how faces are triangulated into subfaces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPTriangulateFaceVisitor" kindref="compound">PMPTriangulateFaceVisitor</ref></computeroutput> and <computeroutput><ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Triangulate__faces_1_1Default__visitor" kindref="compound">Triangulate_faces::Default_visitor</ref>&lt;PolygonMesh&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Note that the visitor will be copied, so it must not have any data member that does not have a reference-like type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>This function calls <computeroutput><ref refid="group__PMP__hole__filling__grp_1gac1054e734715493e32e78d65fc1f0baf" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole_polyline()</ref></computeroutput>. Refer to its documentation for its named parameters.</para>
<para><simplesect kind="pre"><para>The face <computeroutput>f</computeroutput> is not degenerate.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the face has been triangulated.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1gaf094a938993d7353589a55010edf63a6" kindref="member">triangulate_faces()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_faces.h" line="311" column="6" bodyfile="CGAL/Polygon_mesh_processing/triangulate_faces.h" bodystart="311" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1gaf094a938993d7353589a55010edf63a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::triangulate_faces</definition>
        <argsstring>(FaceRange face_range, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_faces</qualifiedname>
        <param>
          <type>FaceRange</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates given faces of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgTriangulation2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">2D Triangulations</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>face_range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of faces to be triangulated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be triangulated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor that enables to track how faces are triangulated into subfaces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPTriangulateFaceVisitor" kindref="compound">PMPTriangulateFaceVisitor</ref></computeroutput> and <computeroutput><ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Triangulate__faces_1_1Default__visitor" kindref="compound">Triangulate_faces::Default_visitor</ref>&lt;PolygonMesh&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Note that the visitor will be copied, so it must not have any data member that does not have a reference-like type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>This function calls <computeroutput><ref refid="group__PMP__hole__filling__grp_1gac1054e734715493e32e78d65fc1f0baf" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole_polyline()</ref></computeroutput> for each face. Refer to its documentation for its named parameters.</para>
<para><simplesect kind="pre"><para>No face within <computeroutput>face_range</computeroutput> is degenerate.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all the faces have been triangulated.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga54559e61c73ce4481f4a3374a61ca038" kindref="member">triangulate_face()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga8b7db6aa8c3e79526b594739ba926d82" kindref="member">triangulate_polygons()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_faces.h" line="372" column="6" bodyfile="CGAL/Polygon_mesh_processing/triangulate_faces.h" bodystart="372" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga626f12385ac7fb10125772c3786b4ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::triangulate_faces</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_faces</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates all faces of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgTriangulation2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">2D Triangulations</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be triangulated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor that enables to track how faces are triangulated into subfaces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPTriangulateFaceVisitor" kindref="compound">PMPTriangulateFaceVisitor</ref></computeroutput> and <computeroutput><ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Triangulate__faces_1_1Default__visitor" kindref="compound">Triangulate_faces::Default_visitor</ref>&lt;PolygonMesh&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Note that the visitor will be copied, so it must not have any data member that does not have a reference-like type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>This function calls <computeroutput><ref refid="group__PMP__hole__filling__grp_1gac1054e734715493e32e78d65fc1f0baf" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole_polyline()</ref></computeroutput> on all the faces of the polygon mesh. Refer to its documentation for its named parameters.</para>
<para><simplesect kind="pre"><para>No face of <computeroutput>pmesh</computeroutput> is degenerate.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all the faces have been triangulated.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga54559e61c73ce4481f4a3374a61ca038" kindref="member">triangulate_face()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga8b7db6aa8c3e79526b594739ba926d82" kindref="member">triangulate_polygons()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_faces.h" line="443" column="6" bodyfile="CGAL/Polygon_mesh_processing/triangulate_faces.h" bodystart="443" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1ga8b7db6aa8c3e79526b594739ba926d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::triangulate_polygons</definition>
        <argsstring>(const PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_polygons</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_polygons</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates all polygons of a polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para>This function depends on the package <ref refid="packages_1PkgTriangulation2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">2D Triangulations</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> and <computeroutput><ref refid="classSwappable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Swappable</ref></computeroutput>, whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the point geometry of the soup to be triangulated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygons to be triangulated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor that enables to track how polygons are divided into triangles </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPTriangulateFaceVisitor" kindref="compound">PMPTriangulateFaceVisitor</ref></computeroutput> and <computeroutput><ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Triangulate__polygons_1_1Default__visitor" kindref="compound">Triangulate_polygons::Default_visitor</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Note that the visitor will be copied, so it must not have any data member that does not have a reference-like type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>This function calls <computeroutput><ref refid="group__PMP__hole__filling__grp_1gac1054e734715493e32e78d65fc1f0baf" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole_polyline()</ref></computeroutput> for each polygon. Refer to its documentation for its named parameters.</para>
<para><simplesect kind="pre"><para>No polygon within <computeroutput>polygons</computeroutput> is degenerate.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if all the polygons have been triangulated.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__meshing__grp_1gaf094a938993d7353589a55010edf63a6" kindref="member">triangulate_faces()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_faces.h" line="698" column="6" bodyfile="CGAL/Polygon_mesh_processing/triangulate_faces.h" bodystart="698" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga3abdf2d0558822e85f060966b69cae98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Polygon_mesh_processing::triangulate_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on the choice of the underlying algorithm different preconditions apply. When using the 2D constrained Delaunay triangulation, the border edges of the hole must not intersect the surface. Otherwise, additionally, the boundary of the hole must not contain any non-manifold vertex. The patch generated does not introduce non-manifold edges nor degenerate triangles. If a hole cannot be triangulated, <computeroutput>pmesh</computeroutput> is not modified and nothing is recorded in the face output iterator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh containing the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>border_halfedge</parametername>
</parameternamelist>
<parameterdescription>
<para>a border halfedge incident to the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="8" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, use the Delaunay triangulation facet search space. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If no valid triangulation can be found in this search space, the algorithm falls back to the non-Delaunay triangulations search space to find a solution. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_2d_constrained_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the points of the boundary of the hole are used to estimate a fitting plane and a 2D constrained Delaunay triangulation is then used to fill the hole projected in the fitting plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the boundary of the hole is not planar (according to the parameter <computeroutput>threshold_distance</computeroutput>) or if no valid 2D triangulation can be found, the algorithm falls back to the method using the 3D Delaunay triangulation. This parameter is a good choice for near planar holes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum distance between the vertices of the hole boundary and the least squares plane fitted to this boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>one quarter of the height of the bounding box of the hole </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is used only in conjunction with the parameter <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_use_cubic_algorithm</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Set this parameter to <computeroutput>true</computeroutput> if you only want to use the Delaunay based versions of the algorithm, skipping the cubic search space one in case of failure. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If <computeroutput>true</computeroutput>, <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput> or <computeroutput>use_delaunay_triangulation</computeroutput> must be set to <computeroutput>true</computeroutput> otherwise nothing will be done. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track when entering a given phase of the algorithm </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">Hole_filling::Default_visitor</ref> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the face output iterator</para>
</simplesect>
<xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>handle islands </para>
<para>Replace border_halfedge by a range of border halfedges. The first one would describe the hole, the other ones would describe the islands. </para>
<para>Then, insert the holes vertices in the set of possibilities for connecting vertices together </para>
<para>handle the case where an island is reduced to a point </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="167" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="167" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1gad2d3c43bce0ef90a16530478196d7f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::triangulate_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.6 and the overload with the named parameter <computeroutput>face_output_iterator</computeroutput> should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="258" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="258" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga9868fac4d9dca77462ad7828bc99d8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_and_refine_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates and refines a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh which has the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>border_halfedge</parametername>
</parameternamelist>
<parameterdescription>
<para>a border halfedge incident to the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="10" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch vertices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> for patch vertices </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, use the Delaunay triangulation facet search space. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If no valid triangulation can be found in this search space, the algorithm falls back to the non-Delaunay triangulations search space to find a solution. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_2d_constrained_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the points of the boundary of the hole are used to estimate a fitting plane and a 2D constrained Delaunay triangulation is then used to fill the hole projected in the fitting plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the boundary of the hole is not planar (according to the parameter <computeroutput>threshold_distance</computeroutput>) or if no valid 2D triangulation can be found, the algorithm falls back to the method using the 3D Delaunay triangulation. This parameter is a good choice for near planar holes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum distance between the vertices of the hole boundary and the least squares plane fitted to this boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>one quarter of the height of the bounding box of the hole </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is used only in conjunction with the parameter <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_use_cubic_algorithm</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Set this parameter to <computeroutput>true</computeroutput> if you only want to use the Delaunay based versions of the algorithm, skipping the cubic search space one in case of failure. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If <computeroutput>true</computeroutput>, <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput> or <computeroutput>use_delaunay_triangulation</computeroutput> must be set to <computeroutput>true</computeroutput> otherwise nothing will be done. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>density_control_factor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>factor to control density of the output mesh, where larger values cause denser refinements, as in <computeroutput><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">refine()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold> <formula id="20">$ \sqrt{2}$</formula> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track when entering a given phase of the algorithm </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">Hole_filling::Default_visitor</ref> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>pair of face and vertex output iterator</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__hole__filling__grp_1ga3abdf2d0558822e85f060966b69cae98" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">CGAL::Polygon_mesh_processing::refine()</ref></para>
</simplesect>
<xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>handle islands </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="372" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="372" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga8d1d144e74cd9a60e0c8a2ab9f39b7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceOutputIterator</type>
          </param>
          <param>
            <type>typename VertexOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; FaceOutputIterator, VertexOutputIterator &gt;</type>
        <definition>std::pair&lt; FaceOutputIterator, VertexOutputIterator &gt; CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, FaceOutputIterator face_out, VertexOutputIterator vertex_out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_and_refine_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>FaceOutputIterator</type>
          <declname>face_out</declname>
        </param>
        <param>
          <type>VertexOutputIterator</type>
          <declname>vertex_out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates and refines a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.6 and the overload with the named parameters <computeroutput>face_output_iterator</computeroutput> and <computeroutput>vertex_output_iterator</computeroutput> should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> for patch vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="433" column="5" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="433" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga18eac756a8f8e5d5f73e645fd4e26cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_refine_and_fair_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates, refines and fairs a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh which has the hole </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>border_halfedge</parametername>
</parameternamelist>
<parameterdescription>
<para>a border halfedge incident to the hole</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="11" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>iterator over patch vertices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> for patch vertices </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, use the Delaunay triangulation facet search space. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If no valid triangulation can be found in this search space, the algorithm falls back to the non-Delaunay triangulations search space to find a solution. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_2d_constrained_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the points of the boundary of the hole are used to estimate a fitting plane and a 2D constrained Delaunay triangulation is then used to fill the hole projected in the fitting plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the boundary of the hole is not planar (according to the parameter <computeroutput>threshold_distance</computeroutput>) or if no valid 2D triangulation can be found, the algorithm falls back to the method using the 3D Delaunay triangulation. This parameter is a good choice for near planar holes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum distance between the vertices of the hole boundary and the least squares plane fitted to this boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>one quarter of the height of the bounding box of the hole </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is used only in conjunction with the parameter <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>density_control_factor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>factor to control density of the output mesh, where larger values cause denser refinements, as in <computeroutput><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">refine()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold> <formula id="20">$ \sqrt{2}$</formula> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>fairing_continuity</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A value controlling the tangential continuity of the output surface patch. The possible values are 0, 1 and 2, referring to the C<superscript>0</superscript>, C<superscript>1</superscript> and C<superscript>2</superscript> continuity. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The larger <computeroutput>fairing_continuity</computeroutput> gets, the more fixed vertices are required. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sparse_linear_solver</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of the sparse linear solver used for fairing </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classSparseLinearAlgebraWithFactorTraits__d" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">SparseLinearAlgebraWithFactorTraits_d</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If <ref refid="thirdparty_1thirdpartyEigen" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Eigen</ref> 3.2 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined, then the following overload of <computeroutput><ref refid="classCGAL_1_1Eigen__solver__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">Eigen_solver_traits</ref></computeroutput> is provided as default value:<linebreak/>
 <computeroutput><ref refid="classCGAL_1_1Eigen__solver__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::Eigen_solver_traits</ref>&lt;Eigen::SparseLU&lt;<ref refid="structCGAL_1_1Eigen__sparse__matrix" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::Eigen_sparse_matrix</ref>&lt;double&gt;::EigenType, Eigen::COLAMDOrdering&lt;int&gt; &gt; &gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track when entering a given phase of the algorithm </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">Hole_filling::Default_visitor</ref> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>tuple of <computeroutput>bool</computeroutput> with <computeroutput>true</computeroutput> if fairing is successful, and the face and vertex output iterator</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__hole__filling__grp_1ga3abdf2d0558822e85f060966b69cae98" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">CGAL::Polygon_mesh_processing::refine()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PMP__meshing__grp_1ga9988e9a2eaf92740b3009d06c792f2cd" kindref="member">CGAL::Polygon_mesh_processing::fair()</ref></para>
</simplesect>
<xrefsect id="todo_1_todo000010"><xreftitle>Todo</xreftitle><xrefdescription><para>handle islands </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="561" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="561" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1gae594ae7862ab6f5f9a06755500fb93fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceOutputIterator</type>
          </param>
          <param>
            <type>typename VertexOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; bool, FaceOutputIterator, VertexOutputIterator &gt;</type>
        <definition>std::tuple&lt; bool, FaceOutputIterator, VertexOutputIterator &gt; CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</definition>
        <argsstring>(PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, FaceOutputIterator face_out, VertexOutputIterator vertex_out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_refine_and_fair_hole</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>border_halfedge</declname>
        </param>
        <param>
          <type>FaceOutputIterator</type>
          <declname>face_out</declname>
        </param>
        <param>
          <type>VertexOutputIterator</type>
          <declname>vertex_out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>triangulates, refines, and fairs a hole in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since CGAL 5.6 and the overload with the named parameters <computeroutput>face_output_iterator</computeroutput> and <computeroutput>vertex_output_iterator</computeroutput> should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> for patch faces. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> for patch vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="628" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="628" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1gac1054e734715493e32e78d65fc1f0baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange1</type>
          </param>
          <param>
            <type>typename PointRange2</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::triangulate_hole_polyline</definition>
        <argsstring>(const PointRange1 &amp;points, const PointRange2 &amp;third_points, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_hole_polyline</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_hole_polyline</qualifiedname>
        <param>
          <type>const PointRange1 &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PointRange2 &amp;</type>
          <declname>third_points</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>creates triangles to fill the hole defined by points in the range <computeroutput>points</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Triangles are recorded into <computeroutput>out</computeroutput> using the indices of the input points in the range <computeroutput>points</computeroutput>. Note that no degenerate triangles will be produced. If no triangulation can be found, then nothing is recorded in <computeroutput>out</computeroutput>.</para>
<para>If faces incident to the polyline outside the hole are known, it is recommended to use this function. The point range <computeroutput>third_points</computeroutput> indicates for each pair of consecutive points in the range <computeroutput>points</computeroutput>, the third point of the face this segment is incident to. It influences the choice of the best triangulation while avoiding overfolding.</para>
<para>Note that the ranges <computeroutput>points</computeroutput> and <computeroutput>third_points</computeroutput> may or may not contain duplicated first point at the end of sequence.</para>
<para><simplesect kind="pre"><para><computeroutput>third_points.size() == points.size()</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>range of points, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput>, to collect patch faces. A specialization for <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::value_type_traits</ref>&lt;<ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref>&gt;</computeroutput> must be available, and the corresponding value type <computeroutput>type</computeroutput> must have a constructor <computeroutput>type(int p0, int p1, int p2)</computeroutput> available. The indices correspond to the ones of input points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of input points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>third_points</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of third points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output patch triangles, described by indices of points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, use the Delaunay triangulation facet search space. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If no valid triangulation can be found in this search space, the algorithm falls back to the non-Delaunay triangulations search space to find a solution. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_2d_constrained_delaunay_triangulation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the points of the boundary of the hole are used to estimate a fitting plane and a 2D constrained Delaunay triangulation is then used to fill the hole projected in the fitting plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the boundary of the hole is not planar (according to the parameter <computeroutput>threshold_distance</computeroutput>) or if no valid 2D triangulation can be found, the algorithm falls back to the method using the 3D Delaunay triangulation. This parameter is a good choice for near planar holes. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum distance between the vertices of the hole boundary and the least squares plane fitted to this boundary. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>one quarter of the height of the bounding box of the hole </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is used only in conjunction with the parameter <computeroutput>use_2d_constrained_delaunay_triangulation</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>visitor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a visitor used to track when entering a given phase of the algorithm </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A model of <ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">Hole_filling::Default_visitor</ref> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><xrefsect id="todo_1_todo000011"><xreftitle>Todo</xreftitle><xrefdescription><para>handle islands </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="721" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="721" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__hole__filling__grp_1ga3294d97ef095a5ac3b52bc4f0c2c214c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::triangulate_hole_polyline</definition>
        <argsstring>(const PointRange &amp;points, OutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangulate_hole_polyline</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangulate_hole_polyline</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as above but the range of third points is omitted. </para>
        </briefdescription>
        <detaileddescription>
<para>They are not taken into account in the cost computation that leads the hole filling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangulate_hole.h" line="812" column="3" bodyfile="CGAL/Polygon_mesh_processing/triangulate_hole.h" bodystart="812" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__meshing__grp_1gaff62f9415d2fe96d1d3095351f156ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename TriangleMeshOut</type>
            <defval>TriangleMesh</defval>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>TriangleMeshOut</type>
        <definition>TriangleMeshOut CGAL::Polygon_mesh_processing::surface_Delaunay_remeshing</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>surface_Delaunay_remeshing</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::surface_Delaunay_remeshing</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>remeshes a surface triangle mesh following the Delaunay refinement algorithm described in the <ref refid="packages_1PkgMesh3" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">3D Mesh Generation</ref> package. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMeshOut</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>, model of <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, with an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> with <computeroutput>geom_traits::Point_3</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the triangulated surface mesh following the requirements of the input meshing criteria</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="12" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Exact construction kernels are not supported by this function. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>features_angle_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the dihedral angle bound (in degrees) for detection of feature edges </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A number type <computeroutput>FT</computeroutput>, either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or from the geometric traits class deduced from the point property map of <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>60</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Border edges are protected, along with detected sharp edges. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If the given value is <computeroutput>180</computeroutput>, only the border edges are protected. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each edge of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no edge is constrained </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>polyline_constraints</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a set of polylines that will be resampled and appear as protected polyline constraints in the output mesh </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>, of which value type is model of <computeroutput><ref refid="classMeshPolyline__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag">MeshPolyline_3</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an empty range of segments </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>protect_constraints</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, the feature edges of the input are re-sampled and present in the output mesh. If <computeroutput>edge_is_constrained_map</computeroutput> is provided, the corresponding &quot;constrained&quot; edges are protected. Else, if <computeroutput>polyline_constraints</computeroutput> is provided, the corresponding polylines are protected. Otherwise, <computeroutput>features_angle_bound</computeroutput> is used, and the edges that form a sharp dihedral angle with respect to that bound are protected. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Note that only one of these three input parameters is taken into account, in the priority order listed above. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_patch_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map with the patch id&apos;s associated to the faces of <computeroutput>faces</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and the desired property, model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> and <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput>, as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where each face is associated with the ID of the connected component it belongs to. Connected components are computed with respect to the constrained edges listed in the property map <computeroutput>edge_is_constrained_map</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The map is updated during the remeshing process while new faces are created. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>mesh_edge_size</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A scalar field (resp. a constant) providing a space-varying (resp. a uniform) upper bound for the lengths of curve edges. This parameter has to be set to a positive value when 1-dimensional features protection is used (when <computeroutput>protect_constraints</computeroutput> is <computeroutput>true</computeroutput>). </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A number type <computeroutput>FT</computeroutput> model of the concept <computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput>, or a model of the concept <computeroutput><ref refid="classMeshDomainField__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag">MeshDomainField_3</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>(std::numeric_limits&lt;FT&gt;::max)()</computeroutput>, with <computeroutput>FT</computeroutput> a number type, either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or from the geometric traits class deduced from the point property map of <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>mesh_facet_size</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A scalar field (resp. a constant) describing a space-varying (resp. a uniform) upper bound for the radii of the surface Delaunay balls. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A number type <computeroutput>FT</computeroutput> model of the concept <computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput>, or a model of the concept <computeroutput><ref refid="classMeshDomainField__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag">MeshDomainField_3</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0.</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>mesh_facet_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A lower bound for the angles (in degrees) of the surface mesh facets. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A number type <computeroutput>FT</computeroutput> model of the concept <computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0.</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>mesh_facet_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>A scalar field (resp. a constant) describing a space-varying (resp. a uniform) upper bound for the distance between the facet circumcenter and the center of its surface Delaunay ball. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>A number type <computeroutput>FT</computeroutput> model of the concept <computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput>, or a model of the concept <computeroutput><ref refid="classMeshDomainField__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag">MeshDomainField_3</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0.</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>mesh_facet_topology</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The set of topological constraints which have to be verified by each surface facet. The default value is <computeroutput><ref refid="group__PkgMesh3Enum_1ggaac682a581ddebf8daff681621911d1f3ad6594c00cfd02e9c61a483fc2efc9f9e" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag">CGAL::FACET_VERTICES_ON_SURFACE</ref></computeroutput>. See <computeroutput><ref refid="group__PkgMesh3Enum_1gaac682a581ddebf8daff681621911d1f3" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag">CGAL::Mesh_facet_topology</ref></computeroutput> manual page for a description of the possible values. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="group__PkgMesh3Enum" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag"><computeroutput>CGAL::Mesh_facet_topology</computeroutput> </ref> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Enum_1ggaac682a581ddebf8daff681621911d1f3ad6594c00cfd02e9c61a483fc2efc9f9e" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_3.tag">CGAL::FACET_VERTICES_ON_SURFACE</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tmesh</computeroutput> must be free of self-intersections.</para>
</simplesect>
<simplesect kind="note"><para>Only one of the named parameters defining constrained edges is taken into account for meshing, in the following priority order : <computeroutput>edge_is_constrained_map</computeroutput>, <computeroutput>polyline_constraints</computeroutput>, and <computeroutput>features_angle_bound</computeroutput>. The selected edges are protected only if <computeroutput>protect_constraints</computeroutput> is set to <computeroutput>true</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/surface_Delaunay_remeshing.h" line="180" column="1" bodyfile="CGAL/Polygon_mesh_processing/surface_Delaunay_remeshing.h" bodystart="180" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga50dcd2f6295f584d2e378b57290ae2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename RegionMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces</definition>
        <argsstring>(const PolygonMesh &amp;mesh, RegionMap region_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>region_growing_of_planes_on_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>RegionMap</type>
          <declname>region_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>applies a region growing algorithm to fit planes on faces of a mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>See Section <ref refid="index_1Shape_detection_RegionGrowing" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Shape_detection.tag">Region Growing</ref> for more details on the method.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RegionMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh whose faces are used for region growing </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map storing the region index of each face. Values start at <computeroutput>0</computeroutput> up to the value returned minus <computeroutput>1</computeroutput>. <computeroutput>std::size_t(-1)</computeroutput> is put for faces with no region assigned (it can happen if <computeroutput>minimum_region_size &gt; 1</computeroutput> or for a non-triangular face having a fitting plane not satisfying the maximum distance criterium). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of regions detected</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="8" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum distance from a face to a plane such that it is considered part of the region of the plane </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum angle (in degrees) between the normals of the supporting planes of two adjacent faces such that they are considered part of the same region </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>25 degrees </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>this parameter and <computeroutput>cosine_of_maximum_angle</computeroutput> are exclusive </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>postprocess_regions</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Apply a post-processing step to the output of the region growing algorithm. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>false </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>cosine_of_maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum angle, given as a cosine, between the normals of the supporting planes of adjacent faces such that they are considered part of the same region </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>cos(25 * PI / 180)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>this parameter and <computeroutput>maximum_angle</computeroutput> are exclusive </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>minimum_region_size</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the minimum number of faces such that a new region can be created from a set of faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::size_t</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>mesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, mesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>region_primitive_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each region the plane (or only its orthognonal vector) estimated that approximates it. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with the value type of <computeroutput>RegionMap</computeroutput> as key and <computeroutput>GeomTraits::Plane_3</computeroutput> or <computeroutput>GeomTraits::Vector_3</computeroutput> as value type, <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/region_growing.h" line="173" column="1" bodyfile="CGAL/Polygon_mesh_processing/region_growing.h" bodystart="173" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gac8e445730d718a2fc49604e865017d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename RegionMap</type>
          </param>
          <param>
            <type>typename CornerIdMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::detect_corners_of_regions</definition>
        <argsstring>(const PolygonMesh &amp;mesh, RegionMap region_map, std::size_t nb_regions, CornerIdMap corner_id_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>detect_corners_of_regions</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::detect_corners_of_regions</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>RegionMap</type>
          <declname>region_map</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nb_regions</declname>
        </param>
        <param>
          <type>CornerIdMap</type>
          <declname>corner_id_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>detects the corners on the boundary of almost planar regions by applying the region growing algorithm fitting lines on segment edges of a partition of a mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, a corner on the boundary of a region is a vertex that is either shared by at least three regions (two if it is also a vertex on the boundary of the mesh), or that is incident to two segments edges assigned to different lines. See Section <ref refid="index_1Shape_detection_RegionGrowing" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Shape_detection.tag">Region Growing</ref> for more details on the method.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RegionMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CornerIdMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh for region growing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map providing the region index of each face, values must be in <computeroutput>[0, nb_regions-1]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>corner_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map storing the corner index of each vertex. Values start at <computeroutput>0</computeroutput> up to the value returned minus 1. <computeroutput>std::size_t(-1)</computeroutput> is put for vertices that are not corners. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_regions</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of patches in the partition of <computeroutput>mesh</computeroutput> defined by <computeroutput>region_map</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of corners detected</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function such that an edge is marked as constrained if it is at the interface of two different regions or on the boundary of the mesh </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>Unused if not provided </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The value for each edge must be initialized to <computeroutput>false</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum distance from a segment to a line such that it is considered part of the region of the line </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum angle in degrees between two adjacent segments such that they are considered part of the same region </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>25 degrees </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>this parameter and <computeroutput>cosine_of_maximum_angle</computeroutput> are exclusive </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>cosine_of_maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum angle, given as a cosine, for the smallest angle between the supporting line of a segment and an adjacent segment such that they are considered part of the same region </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>cos(25 * PI / 180)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>this parameter and <computeroutput>maximum_angle</computeroutput> are exclusive </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>mesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, mesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/region_growing.h" line="346" column="1" bodyfile="CGAL/Polygon_mesh_processing/region_growing.h" bodystart="346" bodyend="513"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Polygon_mesh_processing/Adaptive_sizing_field.h" line="28" column="1"/>
  </compounddef>
</doxygen>
