<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PMP__locate__grp" kind="group">
    <compoundname>PMP_locate_grp</compoundname>
    <title>Location Functions</title>
      <sectiondef kind="user-defined">
      <header>Random Location Generation</header>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga23816d7cea5cba77e56363c5ebd17b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::random_location_on_halfedge</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor hd, const TriangleMesh &amp;tm, CGAL::Random &amp;rnd=get_default_random())</argsstring>
        <name>random_location_on_halfedge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::random_location_on_halfedge</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">CGAL::Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval>get_default_random()</defval>
        </param>
        <briefdescription>
<para>returns a random point over the halfedge <computeroutput>hd</computeroutput>, as a location. </para>
        </briefdescription>
        <detaileddescription>
<para>The random point is chosen on the halfedge, meaning that all its barycentric coordinates are positive. It is constructed by uniformly generating a value <computeroutput>t</computeroutput> between <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> and setting the barycentric coordinates to <computeroutput>t</computeroutput>, <computeroutput>1-t</computeroutput>, and <computeroutput>0</computeroutput> for respetively the source and target of <computeroutput>hd</computeroutput>, and the third vertex.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hd</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>optional random number generator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="401" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="401" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gac78863fa23c382d08f9944a4f70b7a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::random_location_on_face</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tm, CGAL::Random &amp;rnd=get_default_random())</argsstring>
        <name>random_location_on_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::random_location_on_face</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">CGAL::Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval>get_default_random()</defval>
        </param>
        <briefdescription>
<para>returns a random point over the face <computeroutput>fd</computeroutput>, as a location. </para>
        </briefdescription>
        <detaileddescription>
<para>The random point is on the face, meaning that all its barycentric coordinates are positive. It is constructed by uniformly picking a value <computeroutput>u</computeroutput> between <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput>, a value <computeroutput>v</computeroutput> between <computeroutput>1-u</computeroutput>, and setting the barycentric coordinates to <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput>, and <computeroutput>1-u-v</computeroutput> for respectively the source and target of <computeroutput>halfedge(fd, tm)</computeroutput>, and the third point.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>optional random number generator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="436" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="436" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga6d90010ec9ad9c07c3659d12d7453d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::random_location_on_mesh</definition>
        <argsstring>(const TriangleMesh &amp;tm, CGAL::Random &amp;rnd=get_default_random())</argsstring>
        <name>random_location_on_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::random_location_on_mesh</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Generator.tag">CGAL::Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval>get_default_random()</defval>
        </param>
        <briefdescription>
<para>returns a random point over the mesh <computeroutput>tm</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned location is obtained by choosing a random face of the mesh and a random point on that face. The barycentric coordinates of the point in the face are thus all positive. Note that all faces have the same probability to be chosen.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>optional random number generator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__locate__grp_1gac78863fa23c382d08f9944a4f70b7a75" kindref="member">random_location_on_face()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="469" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="469" bodyend="478"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Location Predicates</header>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga90eb394aab0e2f1a78d5f69c87cdcb53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_on_vertex</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor vd, const TriangleMesh &amp;tm)</argsstring>
        <name>is_on_vertex</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_on_vertex</qualifiedname>
        <param>
          <type>const Face_location&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether the location is on the vertex <computeroutput>vd</computeroutput> or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="644" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="644" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gad94f826508b2a7d47bffe1c9e9164fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_on_halfedge</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor hd, const TriangleMesh &amp;tm)</argsstring>
        <name>is_on_halfedge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_on_halfedge</qualifiedname>
        <param>
          <type>const Face_location&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether this location is on the halfedge <computeroutput>hd</computeroutput> or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hd</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="683" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="683" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga475c1e0acddee2198db30289fa331b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_in_face</definition>
        <argsstring>(const Barycentric_coordinates&lt; FT &gt; &amp;bar, const TriangleMesh &amp;tm)</argsstring>
        <name>is_in_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_in_face</qualifiedname>
        <param>
          <type>const Barycentric_coordinates&lt; FT &gt; &amp;</type>
          <declname>bar</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a set of barycentric coordinates, returns whether those barycentric coordinates correspond to a point within the face (boundary included), that is, if all the barycentric coordinates are positive. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bar</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of barycentric coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="724" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="724" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gaf90da1db1204afbf66dbebd17d2e3e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_in_face</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm)</argsstring>
        <name>is_in_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_in_face</qualifiedname>
        <param>
          <type>const Face_location&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether the location is in the face (boundary included) or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="762" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="762" bodyend="766" declfile="CGAL/Polygon_mesh_processing/locate.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga455a6b4f1edfd88358a1150c870691e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_on_face_border</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm)</argsstring>
        <name>is_on_face_border</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_on_face_border</qualifiedname>
        <param>
          <type>const Face_location&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether the location is on the boundary of the face or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="789" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="789" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga905f903215a1123afef50b74d5424bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_on_mesh_border</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm)</argsstring>
        <name>is_on_mesh_border</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_on_mesh_border</qualifiedname>
        <param>
          <type>const Face_location&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns whether the location is on the border of the mesh or not. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="825" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="825" bodyend="859"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Point Location</header>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga777f3083d65c79021429c9884a828682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_vertex</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor vd, const TriangleMesh &amp;tm)</argsstring>
        <name>locate_vertex</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_vertex</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>returns the location of the given vertex <computeroutput>vd</computeroutput> as a location, that is an ordered pair specifying a face incident to <computeroutput>vd</computeroutput> and the barycentric coordinates of the vertex <computeroutput>vd</computeroutput> in that face. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>vd</computeroutput> is not an isolated vertex </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="889" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="889" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga59628d063d4bc22dd52142a365c2f274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_vertex</definition>
        <argsstring>(const typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor vd, const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tm)</argsstring>
        <name>locate_vertex</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_vertex</qualifiedname>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>returns the location of a given vertex as a location in <computeroutput>fd</computeroutput>, that is an ordered pair composed of <computeroutput>fd</computeroutput> and of the barycentric coordinates of the vertex in <computeroutput>fd</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>tm</computeroutput> and a vertex of the face <computeroutput>fd</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>fd</computeroutput> is not the null face </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="951" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="951" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gaea15285dfafaa66a11deede8fdba473e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_on_halfedge</definition>
        <argsstring>(const typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor hd, const FT t, const TriangleMesh &amp;tm)</argsstring>
        <name>locate_on_halfedge</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_on_halfedge</qualifiedname>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const FT</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a point described by a halfedge <computeroutput>hd</computeroutput> and a scalar <computeroutput>t</computeroutput> as <computeroutput>p = (1 - t) * source(hd, tm) + t * target(hd, tm)</computeroutput>, returns this location along the given edge as a location, that is an ordered pair specifying a face containing the location and the barycentric coordinates of that location in that face. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hd</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the parametric distance of the desired point along <computeroutput>hd</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="988" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="988" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gaa8b9a0579a35e7beff2ab54aa911cff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_in_face</definition>
        <argsstring>(const Point &amp;query, const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate_in_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_in_face</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Given a point <computeroutput>query</computeroutput> and a face <computeroutput>fd</computeroutput> of a triangulated surface mesh, returns this location as a location, that is an ordered pair composed of <computeroutput>fd</computeroutput> and of the barycentric coordinates of <computeroutput>query</computeroutput> with respect to the vertices of <computeroutput>fd</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>a point, whose type is equal to the value type of the vertex point property map (either user-provided via named parameters or the internal point map of the mesh <computeroutput>tm</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If such traits class is provided, its type <computeroutput>FT</computeroutput> must be identical to the template parameter <computeroutput>FT</computeroutput> of this function. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>fd</computeroutput> is not the null face</para>
</simplesect>
<simplesect kind="return"><para>a face location. The type <computeroutput>FT</computeroutput> is deduced from the geometric traits, either provided by the user via named parameters (with <computeroutput>geom_traits</computeroutput>) or using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> and the point type of the vertex point property map in use. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1066" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1066" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1gae0f1a2098f3f8c86c3bca86926517f21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_in_adjacent_face</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tm)</argsstring>
        <name>locate_in_adjacent_face</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_in_adjacent_face</qualifiedname>
        <param>
          <type>const Face_location&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location and a second face adjacent to the first, returns the location of the point in the second face. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following:<itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>the first location, with <computeroutput>loc.first</computeroutput> being a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the second face, adjacent to <computeroutput>loc.first</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to which <computeroutput>fd</computeroutput> belongs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc</computeroutput> corresponds to a point that lies on a face incident to both <computeroutput>loc.first</computeroutput> and <computeroutput>fd</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1141" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1141" bodyend="1198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Nearest Face Location Queries</header>
      <description><para>The following functions can be used to find the closest point on a triangle mesh, given either a point or a ray.</para>
<para>This closest point is computed using a <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">CGAL::AABB_tree</ref></computeroutput>. Users intending to call location functions on more than a single point (or ray) should first compute an AABB tree to store it (otherwise, it will be recomputed every time). Note that since the AABB tree class is a 3D structure, it might be required to wrap your point property map to convert your point type to the 3D point type (i.e., your traits&apos; <computeroutput>Point_3</computeroutput>) if you are working with a 2D triangle structure. </para>
</description>
      <memberdef kind="function" id="group__PMP__locate__grp_1gafa64630e9a7b1cbc28875d63ac8a3eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename Point3VPM</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::build_AABB_tree</definition>
        <argsstring>(const TriangleMesh &amp;tm, AABB_tree&lt; AABB_traits_3&lt; Geom_traits, CGAL::AABB_face_graph_triangle_primitive&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;outTree, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>build_AABB_tree</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::build_AABB_tree</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>AABB_tree&lt; AABB_traits_3&lt; Geom_traits, <ref refid="classCGAL_1_1AABB__face__graph__triangle__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">CGAL::AABB_face_graph_triangle_primitive</ref>&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;</type>
          <declname>outTree</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>creates an AABB tree suitable for use with <computeroutput><ref refid="group__PMP__locate__grp_1ga609d1fd3a16ecc381a1b131386fc708c" kindref="member">locate_with_AABB_tree()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should first be called by users who intend to locate multiple points: in this case, it is better to first build an AABB tree, and use the function <computeroutput><ref refid="group__PMP__locate__grp_1ga609d1fd3a16ecc381a1b131386fc708c" kindref="member">locate_with_AABB_tree()</ref></computeroutput> that takes as parameter an AABB tree, instead of calling <computeroutput><ref refid="group__PMP__locate__grp_1ga817d3417a9711b3efbfde45e46e0aa00" kindref="member">locate()</ref></computeroutput> multiple times, which will build a new AABB tree on every call.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point3VPM</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and the CGAL 3D point type (your traits&apos; <computeroutput>Point_3</computeroutput>) as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outTree</parametername>
</parameternamelist>
<parameterdescription>
<para>output parameter that stores the computed <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Must be identical to the traits used in the template parameter of the <computeroutput>AABB_traits</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1523" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1523" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga609d1fd3a16ecc381a1b131386fc708c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename Point3VPM</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_with_AABB_tree</definition>
        <argsstring>(const Point &amp;p, const AABB_tree&lt; AABB_traits_3&lt; Geom_traits, AABB_face_graph_triangle_primitive&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;tree, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate_with_AABB_tree</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_with_AABB_tree</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const AABB_tree&lt; AABB_traits_3&lt; Geom_traits, AABB_face_graph_triangle_primitive&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns the face location nearest to the given point, as a location. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that it is possible for the triangle mesh to have ambiant dimension <computeroutput>2</computeroutput> (e.g. the mesh is a 2D triangulation, or a <ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref>&lt;CGAL::Point_2&lt;Kernel&gt; &gt;), as long as an appropriate vertex point property map is passed in the AABB tree, which will convert from 2D to 3D.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point3VPM</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and the CGAL 3D point type (your traits&apos; <computeroutput>Point_3</computeroutput>) as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point to locate on the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>an AABB tree containing the triangular faces of the input surface mesh to perform the point location with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Must be identical to the traits used in the template parameter of the <computeroutput>AABB_traits</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>a face location. The type <computeroutput>FT</computeroutput> is deduced from the geometric traits, either provided by the user via named parameters (with <computeroutput>geom_traits</computeroutput>) or using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> and the point type of the vertex point property map in use. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1598" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1598" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga817d3417a9711b3efbfde45e46e0aa00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate</definition>
        <argsstring>(const Point &amp;p, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns the nearest face location to the given point. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function will build an AABB tree on each call. If you need to call this function more than once, first use <computeroutput><ref refid="group__PMP__locate__grp_1gafa64630e9a7b1cbc28875d63ac8a3eaa" kindref="member">build_AABB_tree()</ref></computeroutput> to create a an AABB tree that you can store and use the function <computeroutput><ref refid="group__PMP__locate__grp_1ga609d1fd3a16ecc381a1b131386fc708c" kindref="member">locate_with_AABB_tree()</ref></computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point to locate on the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1687" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1687" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga32bd9c2a74c9e475340a7e761539b3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename Point3VPM</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate_with_AABB_tree</definition>
        <argsstring>(const Ray &amp;ray, const AABB_tree&lt; AABB_traits_3&lt; Geom_traits, AABB_face_graph_triangle_primitive&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;tree, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate_with_AABB_tree</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate_with_AABB_tree</qualifiedname>
        <param>
          <type>const Ray &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const AABB_tree&lt; AABB_traits_3&lt; Geom_traits, AABB_face_graph_triangle_primitive&lt; TriangleMesh, Point3VPM &gt; &gt; &gt; &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns the face location along <computeroutput>ray</computeroutput> nearest to its source point. </para>
        </briefdescription>
        <detaileddescription>
<para>If the ray does not intersect the mesh, a default constructed location is returned.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point3VPM</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and the CGAL 3D point type (your traits&apos; <computeroutput>Point_3</computeroutput>) as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>a ray to intersect with the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>an AABB tree containing the triangular faces of the input surface mesh to perform the point location with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Must be identical to the traits used in the template parameter of the <computeroutput>AABB_traits</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>ray</computeroutput> is an object with the same ambient dimension as the point type (the value type of the vertex point map). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1774" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1774" bodyend="1853"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga34d601277f6003a751716e29eb830038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Face_location&lt; TriangleMesh, FT &gt;</type>
        <definition>Face_location&lt; TriangleMesh, FT &gt; CGAL::Polygon_mesh_processing::locate</definition>
        <argsstring>(const Ray &amp;ray, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::locate</qualifiedname>
        <param>
          <type>const Ray &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns the face location along <computeroutput>ray</computeroutput> nearest to its source point. </para>
        </briefdescription>
        <detaileddescription>
<para>If the ray does not intersect the mesh, a default constructed location is returned.</para>
<para>Note that this function will build an AABB tree on each call. If you need to call this function more than once, use <computeroutput><ref refid="group__PMP__locate__grp_1gafa64630e9a7b1cbc28875d63ac8a3eaa" kindref="member">build_AABB_tree()</ref></computeroutput> to cache a copy of the <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref></computeroutput>, and use the overloads of this function that accept a reference to an AABB tree as input.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>a ray to intersect with the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the input triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>snapping_tolerance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tolerance value used to snap barycentric coordinates </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Depending on the geometric traits used, the computation of the barycentric coordinates might be an inexact construction, thus leading to sometimes surprising values (e.g. a triplet <computeroutput>[0.5, 0.5, -1-e17]</computeroutput> for a point at the middle of an edge). The coordinates will be snapped towards <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput> if the difference is smaller than the tolerance value, while still ensuring that the total sum of the coordinates is <computeroutput>1</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>ray</computeroutput> is an object with the same ambient dimension as the point type (the value type of the vertex point map). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="1905" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="1905" bodyend="1934"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__PMP__locate__grp_1ga8ec69004f1d28b296aa9e89926bb3981" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>std::variant&lt; typename boost::graph_traits&lt; TriangleMesh &gt;::vertex_descriptor, typename boost::graph_traits&lt; TriangleMesh &gt;::halfedge_descriptor, typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor &gt;</type>
        <definition>using CGAL::Polygon_mesh_processing::descriptor_variant = typedef std::variant&lt;typename boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor, typename boost::graph_traits&lt;TriangleMesh&gt;::halfedge_descriptor, typename boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor&gt;</definition>
        <argsstring></argsstring>
        <name>descriptor_variant</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::descriptor_variant</qualifiedname>
        <briefdescription>
<para>A variant used in the function <computeroutput><ref refid="group__PMP__locate__grp_1ga1be5d5de27953a11b593797d5224fefd" kindref="member">get_descriptor_from_location()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="59" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PMP__locate__grp_1ga6581d3f34a14d533fdab2e6beef2873f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; FT, 3 &gt;</type>
        <definition>using CGAL::Polygon_mesh_processing::Barycentric_coordinates = typedef std::array&lt;FT, 3&gt;</definition>
        <argsstring></argsstring>
        <name>Barycentric_coordinates</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::Barycentric_coordinates</qualifiedname>
        <briefdescription>
<para>A triplet of coordinates describing the barycentric coordinates of a point with respect to the vertices of a triangular face. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" kindref="member">Face_location</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="70" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PMP__locate__grp_1ga35604eae6b378b8254a3f41f1a274b9e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor, Barycentric_coordinates&lt; FT &gt; &gt;</type>
        <definition>using CGAL::Polygon_mesh_processing::Face_location = typedef std::pair&lt;typename boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor, Barycentric_coordinates&lt;FT&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Face_location</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::Face_location</qualifiedname>
        <briefdescription>
<para>If <computeroutput>tm</computeroutput> is the input triangulated surface mesh and given the pair (<computeroutput>f</computeroutput>, <computeroutput>bc</computeroutput>) such that <computeroutput>bc</computeroutput> is the triplet of barycentric coordinates <computeroutput>(w0, w1, w2)</computeroutput>, the correspondence between the coordinates in <computeroutput>bc</computeroutput> and the vertices of the face <computeroutput>f</computeroutput> is the following: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>w0</computeroutput> corresponds to <computeroutput>source(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w1</computeroutput> corresponds to <computeroutput>target(halfedge(f, tm), tm)</computeroutput></para>
</listitem><listitem><para><computeroutput>w2</computeroutput> corresponds to <computeroutput>target(next(halfedge(f, tm), tm), tm)</computeroutput> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="81" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PMP__locate__grp_1ga72808d7750dab4989b4613dfa1dd46fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GeomTraits</type>
          </param>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>Barycentric_coordinates&lt; typename GeomTraits::FT &gt;</type>
        <definition>Barycentric_coordinates&lt; typename GeomTraits::FT &gt; CGAL::Polygon_mesh_processing::barycentric_coordinates</definition>
        <argsstring>(const Point &amp;p, const Point &amp;q, const Point &amp;r, const Point &amp;query, const GeomTraits &amp;gt)</argsstring>
        <name>barycentric_coordinates</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::barycentric_coordinates</qualifiedname>
        <param>
          <type>const Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const GeomTraits &amp;</type>
          <declname>gt</declname>
        </param>
        <briefdescription>
<para>Given a set of three points and a query point, computes the barycentric coordinates of the query point with respect to the first three points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of a geometric traits. Must be a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> and be compatible with the template parameter <computeroutput>Point</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of a geometric 2D or 3D point</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
<parametername>q</parametername>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>three points with respect to whom the barycentric coordinates of <computeroutput>query</computeroutput> will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>the query point whose barycentric coordinates will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gt</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of the geometric traits</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput> are not collinear. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>query</computeroutput> lies on the plane defined by <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, and <computeroutput>r</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="364" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="364" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga1be5d5de27953a11b593797d5224fefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
        </templateparamlist>
        <type>descriptor_variant&lt; TriangleMesh &gt;</type>
        <definition>descriptor_variant&lt; TriangleMesh &gt; CGAL::Polygon_mesh_processing::get_descriptor_from_location</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm)</argsstring>
        <name>get_descriptor_from_location</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::get_descriptor_from_location</qualifiedname>
        <param>
          <type>const Face_location&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Given a location, returns a descriptor to the simplex of smallest dimension on which the point corresponding to the location lies. </para>
        </briefdescription>
        <detaileddescription>
<para>In other words:<itemizedlist>
<listitem><para>if the point lies on a vertex, this function returns a <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> <computeroutput>v</computeroutput>;</para>
</listitem><listitem><para>if the point lies on a halfedge, this function returns a <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::halfedge_descriptor</computeroutput> <computeroutput>hd</computeroutput> (note that in that case, <computeroutput>loc.first == face(hd, tm)</computeroutput> holds).</para>
</listitem><listitem><para>otherwise, this function returns a <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> <computeroutput>fd</computeroutput> (equal to <computeroutput>loc.first</computeroutput>).</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a location with <computeroutput>loc.first</computeroutput> a face of <computeroutput>tm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>loc</computeroutput> describes the barycentric coordinates of a point that lives within the face (boundary included), meaning the barycentric coordinates are all positive. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="507" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="507" bodyend="546" declfile="CGAL/Polygon_mesh_processing/locate.h" declline="130" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__locate__grp_1ga7632ebc56378e6ded961eab21540cecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Point</type>
        <definition>Point CGAL::Polygon_mesh_processing::construct_point</definition>
        <argsstring>(const Face_location&lt; TriangleMesh, FT &gt; &amp;loc, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>construct_point</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::construct_point</qualifiedname>
        <param>
          <type>const Face_location&lt; TriangleMesh, FT &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Given a location in a face, returns the geometric position described by these coordinates, as a point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>the location from which a point is constructed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If such traits class is provided, its type <computeroutput>FT</computeroutput> must be identical to the template parameter <computeroutput>FT</computeroutput> of this function. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>loc.first</computeroutput> is a face descriptor corresponding to a face of <computeroutput>tm</computeroutput>.</para>
</simplesect>
<simplesect kind="return"><para>a point whose type is the same as the value type of the vertex point property map provided by the user or via named parameters, or the internal point map of the mesh <computeroutput>tm</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/locate.h" line="590" column="1" bodyfile="CGAL/Polygon_mesh_processing/locate.h" bodystart="590" bodyend="617"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions to locate points on a mesh, and manipulate such locations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
