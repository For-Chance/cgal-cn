<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="todo" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Member <ref refid="group__PkgPolygonMeshProcessingRef_1ga42723af60dc8810d938490a8caceb7f0" kindref="member">CGAL::Polygon_mesh_processing::extract_boundary_cycles</ref>  (const PolygonMesh &amp;pm, <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref> out)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000002"/>It could make sense to also return the length of each cycle. </para>
<para></para>
<para>It should probably go into BGL package (like the rest of this file).  </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__meshing__grp_1ga9988e9a2eaf92740b3009d06c792f2cd" kindref="member">CGAL::Polygon_mesh_processing::fair</ref>  (TriangleMesh &amp;tmesh, const VertexRange &amp;vertices, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000003"/>accuracy of solvers are not good, for example when there is no boundary condition pre_factor should fail, but it does not.  </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__meshing__grp_1ga66cb01cf228ed22f0a2a474cfa2aeb3f" kindref="member">CGAL::Polygon_mesh_processing::isotropic_remeshing</ref>  (const FaceRange &amp;faces, SizingFunction &amp;sizing, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000005"/>Deal with exact constructions <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>. The only thing that makes sense is to guarantee that the output vertices are exactly on the input surface. To do so, we can do every construction in <computeroutput>double</computeroutput>, and use an exact process for projection. For each vertex, the <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref></computeroutput> would be used in an inexact manner to find the triangle on which projection has to be done. Then, use <computeroutput>CGAL::intersection(triangle, line)</computeroutput> in the exact constructions kernel to get a point which is exactly on the surface. </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">CGAL::Polygon_mesh_processing::refine</ref>  (TriangleMesh &amp;tmesh, const FaceRange &amp;faces, FaceOutputIterator faces_out, VertexOutputIterator vertices_out, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000004"/>current algorithm iterates 10 times at most, since (I guess) there is no termination proof.  </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__geometric__repair__grp_1ga48008d2b66de8a68a7068f29db15dad6" kindref="member">CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces</ref>  (const FaceRange &amp;face_range, TriangleMesh &amp;tmesh, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000006"/>check what to use as priority queue with removable elements, set might not be optimal  </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__meshing__grp_1ga136c659162e5360354db5879db7431b4" kindref="member">CGAL::Polygon_mesh_processing::tangential_relaxation</ref>  (const VertexRange &amp;vertices, TriangleMesh &amp;tm, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000007"/>check if it should really be a triangle mesh or if a polygon mesh is fine  </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__hole__filling__grp_1ga9868fac4d9dca77462ad7828bc99d8a1" kindref="member">CGAL::Polygon_mesh_processing::triangulate_and_refine_hole</ref>  (PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000009"/>handle islands  </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__hole__filling__grp_1ga3abdf2d0558822e85f060966b69cae98" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole</ref>  (PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000008"/>handle islands </para>
<para></para>
<para>Replace border_halfedge by a range of border halfedges. The first one would describe the hole, the other ones would describe the islands. </para>
<para></para>
<para>Then, insert the holes vertices in the set of possibilities for connecting vertices together </para>
<para></para>
<para>handle the case where an island is reduced to a point  </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__hole__filling__grp_1gac1054e734715493e32e78d65fc1f0baf" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole_polyline</ref>  (const PointRange1 &amp;points, const PointRange2 &amp;third_points, <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref> out, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000011"/>handle islands  </para>
</listitem>
<varlistentry><term>Member <ref refid="group__PMP__hole__filling__grp_1ga18eac756a8f8e5d5f73e645fd4e26cad" kindref="member">CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole</ref>  (PolygonMesh &amp;pmesh, typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor border_halfedge, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000010"/>handle islands  </para>
</listitem>
<varlistentry><term>Class <ref refid="classCGAL_1_1Polygon__mesh__slicer" kindref="compound">CGAL::Polygon_mesh_slicer&lt; TriangleMesh, Traits, VertexPointMap, AABBTree, UseParallelPlaneOptimization &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000012"/>Shall we document more in details what is required? <computeroutput>Traits</computeroutput> must provide:<itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Segment__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Segment_3</ref></computeroutput></para>
</listitem><listitem><para><computeroutput>Oriented_side_3</computeroutput> with <computeroutput>Oriented_side operator()(Plane_3, Point_3)</computeroutput></para>
</listitem><listitem><para><computeroutput>Do_intersect_3</computeroutput> with <computeroutput>std::optional&lt;variant&lt;<ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref>,<ref refid="classCGAL_1_1Segment__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Segment_3</ref>&gt; operator()(Plane_3,Segment_3)</computeroutput></para>
</listitem><listitem><para><computeroutput>Do_intersect_3</computeroutput> with <computeroutput>bool operator()(Plane_3, Bbox_3)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><anchor id="todo_1_todo000013"/>If we keep the traits for plane orthogonal to a frame axis, <computeroutput>Traits</computeroutput> must also provide:<itemizedlist>
<listitem><para><computeroutput>FT</computeroutput></para>
</listitem><listitem><para><computeroutput>Construct_cartesian_const_iterator_3</computeroutput> with <computeroutput><ref refid="classIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Iterator</ref> operator()(Point_3)</computeroutput> <computeroutput><ref refid="classIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Iterator</ref></computeroutput> being a random access iterator with <computeroutput>FT</computeroutput> as value type</para>
</listitem><listitem><para><computeroutput>Construct_point_3</computeroutput> with <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref> operator()(FT,FT,FT)</computeroutput>; <computeroutput>Construct_source_3</computeroutput> with <computeroutput>const <ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref>&amp; operator()(Segment_3)</computeroutput></para>
</listitem><listitem><para><computeroutput>Construct_target_3</computeroutput> with <computeroutput>const <ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref>&amp; operator()(Segment_3)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><anchor id="todo_1_todo000014"/><computeroutput>_object()</computeroutput> functions must also be provided  </para>
</listitem>
<varlistentry><term>Member <ref refid="structCGAL_1_1Polyhedral__envelope_1a81553453f9dbdbd5156c8b462262b29e" kindref="member">CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator()</ref>  (const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=<ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values()</ref>) const</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000015"/>Add ConcurrencyTag as template parameter + use TBB parallel for </para>
<para></para>
<para>Find a way to test the containment of the vertices first and then the triangles. It requires to have a map vertex-&gt;prism id so that we can test if the 3 vertices of a face are in the same face + have the initial list of prisms. </para>
<para></para>
<para>apply that to the soup versions  </para>
</listitem>
<varlistentry><term>page <ref refid="index" kindref="compound">User Manual</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000001"/>more information on coplanar patches.</para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="todo"/>
  </compounddef>
</doxygen>
