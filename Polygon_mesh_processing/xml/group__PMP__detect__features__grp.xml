<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PMP__detect__features__grp" kind="group">
    <compoundname>PMP_detect_features_grp</compoundname>
    <title>Feature Detection Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PMP__detect__features__grp_1gadd3d18c0a9773463cd57902f85d0b23d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename EdgeIsFeatureMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::detect_sharp_edges</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, FT angle_in_deg, EdgeIsFeatureMap edge_is_feature_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>detect_sharp_edges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::detect_sharp_edges</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>angle_in_deg</declname>
        </param>
        <param>
          <type>EdgeIsFeatureMap</type>
          <declname>edge_is_feature_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>detects and marks the edges that are considered to be sharp with respect to the given angle bound. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>angle_in_deg</computeroutput> gives the maximum angle (in degrees) between the two normal vectors of adjacent triangles. For an edge of the input polygon mesh, if the angle between the two normal vectors of its incident facets is bigger than the given bound, then the edge is marked as being a feature edge.</para>
<para>Also computes the number of sharp edges incident to each vertex, if <computeroutput>vertex_feature_degree_map</computeroutput> is provided.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>a number type. It is either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or from the geometric traits class deduced from the point property map of <computeroutput>PolygonMesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeIsFeatureMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_in_deg</parametername>
</parameternamelist>
<parameterdescription>
<para>the dihedral angle bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_is_feature_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map that will contain the sharp-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_feature_degree_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that will associate to each vertex of <computeroutput>pmesh</computeroutput> the number of incident feature edges </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_feature_degree_t(), pmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__detect__features__grp_1gad9cf9f1c459540156fb235a487bebd01" kindref="member">sharp_edges_segmentation()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/detect_features.h" line="275" column="6" bodyfile="CGAL/Polygon_mesh_processing/detect_features.h" bodystart="275" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__detect__features__grp_1ga68042f21c5cafe94d316c4b1fe7c9aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename PatchIdMap</type>
          </param>
          <param>
            <type>typename VertexIncidentPatchesMap</type>
          </param>
          <param>
            <type>typename EdgeIsFeatureMap</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::detect_vertex_incident_patches</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, const PatchIdMap patch_id_map, VertexIncidentPatchesMap vertex_incident_patches_map, const EdgeIsFeatureMap edge_is_feature_map)</argsstring>
        <name>detect_vertex_incident_patches</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::detect_vertex_incident_patches</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const PatchIdMap</type>
          <declname>patch_id_map</declname>
        </param>
        <param>
          <type>VertexIncidentPatchesMap</type>
          <declname>vertex_incident_patches_map</declname>
        </param>
        <param>
          <type>const EdgeIsFeatureMap</type>
          <declname>edge_is_feature_map</declname>
        </param>
        <briefdescription>
<para>collects the surface patches of the faces incident to each vertex of the input polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PatchIdMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and the desired patch id, model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexIncidentPatchesMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of mutable <computeroutput><ref refid="classLvaluePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LvaluePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type. Its value type must be a container of <computeroutput>boost::property_traits&lt;PatchIdMap&gt;::value_type</computeroutput> and have a function <computeroutput>insert()</computeroutput>. A <computeroutput>std::set</computeroutput> or a <computeroutput>boost::unordered_set</computeroutput> are recommended, as a patch index may be inserted several times. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeIsFeatureMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map containing the surface patch ids for the faces of <computeroutput>pmesh</computeroutput>. It must be already filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_incident_patches_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map that will contain the patch ids of all the faces incident to each vertex of <computeroutput>pmesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_is_feature_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a filled property map that will contain the sharp-or-not status of each edge of <computeroutput>pmesh</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__detect__features__grp_1gad9cf9f1c459540156fb235a487bebd01" kindref="member">sharp_edges_segmentation()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/detect_features.h" line="326" column="6" bodyfile="CGAL/Polygon_mesh_processing/detect_features.h" bodystart="326" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__detect__features__grp_1gad9cf9f1c459540156fb235a487bebd01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename EdgeIsFeatureMap</type>
          </param>
          <param>
            <type>typename PatchIdMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; PolygonMesh &gt;::faces_size_type</type>
        <definition>boost::graph_traits&lt; PolygonMesh &gt;::faces_size_type CGAL::Polygon_mesh_processing::sharp_edges_segmentation</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, FT angle_in_deg, EdgeIsFeatureMap edge_is_feature_map, PatchIdMap patch_id_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>sharp_edges_segmentation</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::sharp_edges_segmentation</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>FT</type>
          <declname>angle_in_deg</declname>
        </param>
        <param>
          <type>EdgeIsFeatureMap</type>
          <declname>edge_is_feature_map</declname>
        </param>
        <param>
          <type>PatchIdMap</type>
          <declname>patch_id_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>This function calls successively <computeroutput><ref refid="group__PMP__detect__features__grp_1gadd3d18c0a9773463cd57902f85d0b23d" kindref="member">CGAL::Polygon_mesh_processing::detect_sharp_edges()</ref></computeroutput>, <computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga239704e9a2752ed67d361be55acf3bf9" kindref="member">CGAL::Polygon_mesh_processing::connected_components()</ref></computeroutput>, and <computeroutput><ref refid="group__PMP__detect__features__grp_1ga68042f21c5cafe94d316c4b1fe7c9aed" kindref="member">CGAL::Polygon_mesh_processing::detect_vertex_incident_patches()</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>It detects and marks the sharp edges of <computeroutput>pmesh</computeroutput> according to <computeroutput>angle_in_deg</computeroutput>. The sharp edges define a segmentation of <computeroutput>pmesh</computeroutput>, that is done by computing a surface patch id for each face.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>a number type. It is either deduced from the <computeroutput>geom_traits</computeroutput> <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> if provided, or from the geometric traits class deduced from the point property map of <computeroutput>PolygonMesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeIsFeatureMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PatchIdMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and the desired patch id, model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_in_deg</parametername>
</parameternamelist>
<parameterdescription>
<para>the dihedral angle bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_is_feature_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map that will contain the sharp-or-not status of each edge of <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map that will contain the surface patch ids for the faces of <computeroutput>pmesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_feature_degree_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that will associate to each vertex of <computeroutput>pmesh</computeroutput> the number of incident feature edges </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_feature_degree_t(), pmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>first_index</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the index of the first surface patch of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::size_t</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The patches will be numbered on <computeroutput>[first_index; first_index + num_patches]</computeroutput>, where <computeroutput>num_patches</computeroutput> is the number of surface patches. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_incident_patches_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that will contain the patch ids of all the faces incident to each vertex of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of mutable <computeroutput><ref refid="classLvaluePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LvaluePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type. Its value type must be a container of <computeroutput>boost::property_traits&lt;PatchIdMap&gt;::value_type</computeroutput> and have a function <computeroutput>insert()</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A <computeroutput>std::set</computeroutput> or a <computeroutput>boost::unordered_set</computeroutput> are recommended, as a patch index may be inserted several times. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
<simplesect kind="return"><para>the number of surface patches.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__detect__features__grp_1gadd3d18c0a9773463cd57902f85d0b23d" kindref="member">CGAL::Polygon_mesh_processing::detect_sharp_edges()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga239704e9a2752ed67d361be55acf3bf9" kindref="member">CGAL::Polygon_mesh_processing::connected_components()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__detect__features__grp_1ga68042f21c5cafe94d316c4b1fe7c9aed" kindref="member">CGAL::Polygon_mesh_processing::detect_vertex_incident_patches()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/detect_features.h" line="451" column="1" bodyfile="CGAL/Polygon_mesh_processing/detect_features.h" bodystart="451" bodyend="470"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions to detect sharp edges and surface patches of polygon meshes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
