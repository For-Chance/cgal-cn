<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PMP__distance__grp" kind="group">
    <compoundname>PMP_distance_grp</compoundname>
    <title>Distance Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointOutputIterator</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>PointOutputIterator</type>
        <definition>PointOutputIterator CGAL::Polygon_mesh_processing::sample_triangle_mesh</definition>
        <argsstring>(const TriangleMesh &amp;tm, PointOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>sample_triangle_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::sample_triangle_mesh</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>generates points on <computeroutput>tm</computeroutput> and outputs them to <computeroutput>out</computeroutput>; the sampling method is selected using named parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of the same point type as the value type of the point type associated to the mesh <computeroutput>tm</computeroutput>, i.e., the value type of the vertex point map property map, if provided, or the value type of the internal point property map otherwise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to be sampled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator to be filled with sample points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="16" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPDistanceTraits" kindref="compound">PMPDistanceTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>random_seed</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value to seed the random number generator </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a value generated with <computeroutput>std::time()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_random_uniform_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, points are generated uniformly at random on faces and/or edges of <computeroutput>tm</computeroutput>. If <computeroutput>do_sample_faces</computeroutput> is <computeroutput>true</computeroutput>, random points will be iteratively generated uniformly at random in the triangle of a face selected with probability proportional to its area. If <computeroutput>do_sample_edges</computeroutput> is <computeroutput>true</computeroutput>, random points will be iteratively generated uniformly at random in the segment of an edge selected with probability proportional to its length. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>For faces, the number of sample points is the value passed to the named parameter <computeroutput>number_of_points_on_faces</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_area_unit</computeroutput> is multiplied by the area of <computeroutput>tm</computeroutput> to get the number of sample points. If none of these parameters is set, the number of points sampled is <computeroutput>num_vertices(tm)</computeroutput>. For edges, the number of the number of sample points is the value passed to the named parameter <computeroutput>number_of_points_on_edges</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_distance_unit</computeroutput> is multiplied by the sum of the length of edges of <computeroutput>tm</computeroutput> to get the number of sample points. If none of these parameters is set, the number of points sampled is <computeroutput>num_vertices(tm)</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_grid_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, points are generated on a grid in each triangle, with a minimum of one point per triangle. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The distance between two consecutive points in the grid is that of the length of the smallest non-null edge of <computeroutput>tm</computeroutput> or the value passed to the named parameter <computeroutput>grid_spacing</computeroutput>. Edges are also split using the same distance, if requested. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_monte_carlo_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>true</computeroutput> is passed, points are generated randomly in each triangle and/or on each edge. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>For faces, the number of points per triangle is the value passed to the named parameter <computeroutput>number_of_points_per_face</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_area_unit</computeroutput> is used to pick a number of points per face proportional to the triangle area with a minimum of one point per face. If none of these parameters is set, 2 divided by the square of the length of the smallest non-null edge of <computeroutput>tm</computeroutput> is used as if it was passed to <computeroutput>number_of_points_per_area_unit</computeroutput>. For edges, the number of points per edge is the value passed to the named parameter <computeroutput>number_of_points_per_edge</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_distance_unit</computeroutput> is used to pick a number of points per edge proportional to the length of the edge with a minimum of one point per face. If none of these parameters is set, 1 divided by the length of the smallest non-null edge of <computeroutput>tm</computeroutput> is used as if it was passed to <computeroutput>number_of_points_per_distance_unit</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_vertices</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, the vertices of <computeroutput>tm</computeroutput> are part of the sample. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_edges</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, edges of <computeroutput>tm</computeroutput> are sampled. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, faces of <computeroutput>tm</computeroutput> are sampled. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>grid_spacing</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used as the grid spacing for the grid sampling method </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the length of the shortest, non-degenerate edge of <computeroutput>tm</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_on_edges</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling method as the number of points to pick exclusively on edges </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>num_vertices(tm)</computeroutput> or a value based on <computeroutput>nb_points_per_distance_unit</computeroutput>, if it is defined </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_on_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling method as the number of points to pick on the surface </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>num_vertices(tm)</computeroutput> or a value based on <computeroutput>nb_points_per_area_unit</computeroutput>, if it is defined </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_distance_unit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling and the Monte Carlo sampling methods to respectively determine the total number of points on edges and the number of points per edge </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> divided by the length of the shortest, non-degenerate edge of <computeroutput>tm</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_edge</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used by the Monte-Carlo sampling method as the number of points per edge to pick </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_area_unit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling and the Monte Carlo sampling methods to respectively determine the total number of points inside faces and the number of points per face </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>2</computeroutput> divided by the squared length of the shortest, non-degenerate edge of <computeroutput>tm</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_face</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used by the Monte-Carlo sampling method as the number of points per face to pick </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__distance__grp_1ga276e117793ebf6abbb3629423ad700e9" kindref="member">CGAL::Polygon_mesh_processing::sample_triangle_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="899" column="1" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="899" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga276e117793ebf6abbb3629423ad700e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointOutputIterator</type>
          </param>
          <param>
            <type>class TriangleRange</type>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>PointOutputIterator</type>
        <definition>PointOutputIterator CGAL::Polygon_mesh_processing::sample_triangle_soup</definition>
        <argsstring>(const PointRange &amp;points, const TriangleRange &amp;triangles, PointOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>sample_triangle_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::sample_triangle_soup</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>generates points on a triangle soup and puts them to <computeroutput>out</computeroutput>; the sampling method is selected using named parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integral value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of the same type as <computeroutput>PointRange</computeroutput>&apos;s value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the points of the soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>TriangleRange</computeroutput> containing the triangles of the soup to be sampled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator to be filled with sample points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="11" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPDistanceTraits" kindref="compound">PMPDistanceTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the point range&apos;s point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>random_seed</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value to seed the random number generator </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a value generated with <computeroutput>std::time()</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_random_uniform_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, points are generated in a random and uniform way over the triangles of the soup. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The number of sample points is the value passed to the named parameter <computeroutput>number_of_points_on_faces</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_area_unit</computeroutput> is multiplied by the area of the soup to get the number of sample points. If none of these parameters is set, the number of points sampled is <computeroutput>points.size()</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_grid_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, points are generated on a grid in each triangle, with a minimum of one point per triangle. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The distance between two consecutive points in the grid is that of the length of the smallest non-null edge of the soup or the value passed to the named parameter <computeroutput>grid_spacing</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para><itemizedlist>
<listitem></listitem></itemizedlist>
</para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_monte_carlo_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>if <computeroutput>true</computeroutput> is passed, points are generated randomly in each triangle. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The number of points per triangle is the value passed to the named parameter <computeroutput>number_of_points_per_face</computeroutput>. If not set, the value passed to the named parameter <computeroutput>number_of_points_per_area_unit</computeroutput> is used to pick a number of points per face proportional to the triangle area with a minimum of one point per face. If none of these parameters is set, the number of points per area unit is set to 2 divided by the square of the length of the smallest non-null edge of the soup. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_vertices</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, the points of <computeroutput>points</computeroutput> are part of the sample. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_sample_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput> is passed, faces of the soup are sampled. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>grid_spacing</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used as the grid spacing for the grid sampling method </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the length of the shortest, non-degenerate edge of the soup </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_on_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling method as the number of points to pick on the surface </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>points.size()</computeroutput> or a value based on <computeroutput>nb_points_per_area_unit</computeroutput>, if it is defined </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_face</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used by the Monte-Carlo sampling method as the number of points per face to pick </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_points_per_area_unit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value used for the random sampling and the Monte Carlo sampling methods to respectively determine the total number of points inside faces and the number of points per face </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>2</computeroutput> divided by the squared length of the shortest, non-degenerate edge of the soup </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="attention"><para>Contrary to <computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">sample_triangle_mesh()</ref></computeroutput>, this method does not allow to sample edges.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">CGAL::Polygon_mesh_processing::sample_triangle_mesh()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1032" column="1" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1032" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1gaed9454c6ed046cd4fb7928cf2b5f7c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::max_distance_to_triangle_mesh</definition>
        <argsstring>(const PointRange &amp;points, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>max_distance_to_triangle_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::max_distance_to_triangle_mesh</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns the distance to <computeroutput>tm</computeroutput> of the point from <computeroutput>points</computeroutput> that is the furthest from <computeroutput>tm</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of points of interest </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to compute the distance to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPDistanceTraits" kindref="compound">PMPDistanceTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm</computeroutput> is a non-empty triangle mesh and <computeroutput>points</computeroutput> is not empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1093" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1093" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga74376aa81d44d745426acfad5a0ac8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::approximate_Hausdorff_distance</definition>
        <argsstring>(const TriangleMesh &amp;tm1, const TriangleMesh &amp;tm2, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>approximate_Hausdorff_distance</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::approximate_Hausdorff_distance</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes the approximate Hausdorff distance from <computeroutput>tm1</computeroutput> to <computeroutput>tm2</computeroutput> by returning the distance of the farthest point from <computeroutput>tm2</computeroutput> amongst a sampling of <computeroutput>tm1</computeroutput> generated with the function <computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">sample_triangle_mesh()</ref></computeroutput> with <computeroutput>tm1</computeroutput> and <computeroutput>np1</computeroutput> as parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>A parallel version is provided and requires the executable to be linked against the <ulink url="https://github.com/oneapi-src/oneTBB">Intel TBB library</ulink>. To control the number of threads used, the user may use the <computeroutput>tbb::task_scheduler_init</computeroutput> class. See the <ulink url="https://software.intel.com/content/www/us/en/develop/documentation/onetbb-documentation/top.html">TBB documentation</ulink> for more details.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Concurrency_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>tm1</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>tm2</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh that will be sampled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangle mesh to compute the distance to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> forwarded to <computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">sample_triangle_mesh()</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm2)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> are non-empty triangle meshes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1173" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1173" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga035fdbf660615b036cb3f47f7997b739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::approximate_symmetric_Hausdorff_distance</definition>
        <argsstring>(const TriangleMesh &amp;tm1, const TriangleMesh &amp;tm2, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>approximate_symmetric_Hausdorff_distance</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::approximate_symmetric_Hausdorff_distance</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns the approximate symmetric Hausdorff distance between <computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput>, that is the maximum of <computeroutput>approximate_Hausdorff_distance(tm1, tm2, np1, np2)</computeroutput> and <computeroutput>approximate_Hausdorff_distance(tm2, tm1, np2, np1)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See the function <computeroutput><ref refid="group__PMP__distance__grp_1ga74376aa81d44d745426acfad5a0ac8de" kindref="member">approximate_Hausdorff_distance()</ref></computeroutput> for a complete description of the parameters and requirements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1204" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1204" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1ga3451246234c24dd4f03d17fc17d50336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TriangleMesh</type>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::approximate_max_distance_to_point_set</definition>
        <argsstring>(const TriangleMesh &amp;tm, const PointRange &amp;points, const double precision, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>approximate_max_distance_to_point_set</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::approximate_max_distance_to_point_set</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns an approximation of the distance between <computeroutput>points</computeroutput> and the point lying on <computeroutput>tm</computeroutput> that is the farthest from <computeroutput>points</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>for each triangle of <computeroutput>tm</computeroutput>, the distance of its farthest point from <computeroutput>points</computeroutput> is bounded. A triangle is subdivided into sub-triangles so that the difference of its distance bounds is smaller than <computeroutput>precision</computeroutput>. <computeroutput>precision</computeroutput> must be strictly positive to avoid infinite loops. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classPMPDistanceTraits" kindref="compound">PMPDistanceTraits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm</computeroutput> is a non-empty triangle mesh and <computeroutput>points</computeroutput> is not empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="1252" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="1252" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1gac251a5e983df7ee6aa61623cdb9ec454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh1</type>
          </param>
          <param>
            <type>class TriangleMesh2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance</definition>
        <argsstring>(const TriangleMesh1 &amp;tm1, const TriangleMesh2 &amp;tm2, const double error_bound=0.0001, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>bounded_error_Hausdorff_distance</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance</qualifiedname>
        <param>
          <type>const TriangleMesh1 &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh2 &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>error_bound</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns an estimate on the Hausdorff distance from <computeroutput>tm1</computeroutput> to <computeroutput>tm2</computeroutput> that is at most <computeroutput>error_bound</computeroutput> away from the actual Hausdorff distance from <computeroutput>tm1</computeroutput> to <computeroutput>tm2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Concurrency_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput> and <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>. Currently, the parallel version is not implemented and the sequential version is always used whatever tag is chosen!</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh1</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh2</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm1</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm2</parametername>
</parameternamelist>
<parameterdescription>
<para>another triangle mesh</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>a maximum bound by which the Hausdorff distance estimate is allowed to deviate from the actual Hausdorff distance.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmX</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMeshX&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmX)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMeshX</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>match_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a boolean tag that turns on the preprocessing step that filters out all faces which belong to both meshes and hence do not contribute to the final distance </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold>true </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Both <computeroutput>np1</computeroutput> and <computeroutput>np2</computeroutput> must have this tag set to <computeroutput>true</computeroutput> in order to activate this preprocessing. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm1</computeroutput> and <computeroutput>tm2</computeroutput> are non-empty triangle meshes.</para>
</simplesect>
<simplesect kind="return"><para>the one-sided Hausdorff distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="2511" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="2511" bodyend="2544"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1gaff7bb1f6909363380f3947f1fabf06a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh1</type>
          </param>
          <param>
            <type>class TriangleMesh2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::Polygon_mesh_processing::bounded_error_symmetric_Hausdorff_distance</definition>
        <argsstring>(const TriangleMesh1 &amp;tm1, const TriangleMesh2 &amp;tm2, const double error_bound, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>bounded_error_symmetric_Hausdorff_distance</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::bounded_error_symmetric_Hausdorff_distance</qualifiedname>
        <param>
          <type>const TriangleMesh1 &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh2 &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>error_bound</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns the the symmetric Hausdorff distance, that is the maximum of <computeroutput>bounded_error_Hausdorff_distance(tm1, tm2, error_bound, np1, np2)</computeroutput> and <computeroutput>bounded_error_Hausdorff_distance(tm2, tm1, error_bound, np2, np1)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function optimizes all internal calls to shared data structures in order to speed up the computation.</para>
<para>See the function <computeroutput><ref refid="group__PMP__distance__grp_1gac251a5e983df7ee6aa61623cdb9ec454" kindref="member">CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance()</ref></computeroutput> for a complete description of the parameters and requirements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="2564" column="8" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="2564" bodyend="2600"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__distance__grp_1gacd7487071c9d409e91c37a731999a239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Concurrency_tag</type>
          </param>
          <param>
            <type>class TriangleMesh1</type>
          </param>
          <param>
            <type>class TriangleMesh2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_Hausdorff_distance_larger</definition>
        <argsstring>(const TriangleMesh1 &amp;tm1, const TriangleMesh2 &amp;tm2, const double distance_bound, const double error_bound, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>is_Hausdorff_distance_larger</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_Hausdorff_distance_larger</qualifiedname>
        <param>
          <type>const TriangleMesh1 &amp;</type>
          <declname>tm1</declname>
        </param>
        <param>
          <type>const TriangleMesh2 &amp;</type>
          <declname>tm2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>distance_bound</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>error_bound</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the Hausdorff distance between two meshes is larger than the user-defined max distance, otherwise it returns <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The distance used to compute the proximity of the meshes is the bounded-error Hausdorff distance. Instead of computing the full distance and checking it against the user-provided value, this function returns early if certain criteria show that the meshes do not satisfy the provided <computeroutput>distance_bound</computeroutput>.</para>
<para>See the function <computeroutput><ref refid="group__PMP__distance__grp_1gac251a5e983df7ee6aa61623cdb9ec454" kindref="member">CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance()</ref></computeroutput> for a complete description of the parameters and requirements. The following extra named parameter is available for <computeroutput>np1</computeroutput>:</para>
<para><variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_one_sided_hausdorff</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a boolean tag indicating if the one-sided Hausdorff distance should be used. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this tag is set to <computeroutput>false</computeroutput>, the symmetric Hausdorff distance is used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/distance.h" line="2631" column="6" bodyfile="CGAL/Polygon_mesh_processing/distance.h" bodystart="2631" bodyend="2686"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions to compute the distance between meshes, between a mesh and a point set and between a point set and a mesh. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
