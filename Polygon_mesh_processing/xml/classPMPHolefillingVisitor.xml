<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classPMPHolefillingVisitor" kind="class" language="C++" prot="public">
    <compoundname>PMPHolefillingVisitor</compoundname>
    <includes local="no">Concepts/PMPHolefillingVisitor.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPMPHolefillingVisitor_1ad76ba26af056009bd312c9fc26b25ff0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::start_planar_phase</definition>
        <argsstring>() const</argsstring>
        <name>start_planar_phase</name>
        <qualifiedname>PMPHolefillingVisitor::start_planar_phase</qualifiedname>
        <briefdescription>
<para>called when the planar hole filling algorithm starts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="20" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1a5ba69027a93b3c8b9b45111d37a7fed0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::end_planar_phase</definition>
        <argsstring>(bool success) const</argsstring>
        <name>end_planar_phase</name>
        <qualifiedname>PMPHolefillingVisitor::end_planar_phase</qualifiedname>
        <param>
          <type>bool</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>called when the planar hole filling algorithm stops. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> when the hole could be filled in this phase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="24" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1ad6ca046de37798640b58cdf3c626313f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::start_quadratic_phase</definition>
        <argsstring>(std::size_t n) const</argsstring>
        <name>start_quadratic_phase</name>
        <qualifiedname>PMPHolefillingVisitor::start_quadratic_phase</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>called when the algorithm with quadratic running time starts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the upperbound on the number of steps </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="28" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1af85b6274f2a0a7a77cc657e8f80bd9c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::quadratic_step</definition>
        <argsstring>() const</argsstring>
        <name>quadratic_step</name>
        <qualifiedname>PMPHolefillingVisitor::quadratic_step</qualifiedname>
        <briefdescription>
<para>called at each step. </para>
        </briefdescription>
        <detaileddescription>
<para>There may be less than <computeroutput>n</computeroutput> calls as this is an upperbound. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="32" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1ab187c68ddb03eb66945d1ad26947fc8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::end_quadratic_phase</definition>
        <argsstring>(bool success) const</argsstring>
        <name>end_quadratic_phase</name>
        <qualifiedname>PMPHolefillingVisitor::end_quadratic_phase</qualifiedname>
        <param>
          <type>bool</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>called when the algorithm with quadratic running time ends. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> when the hole could be filled in this phase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="37" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1a144aaa0f9dc844264acbf72e6d9d85dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::start_cubic_phase</definition>
        <argsstring>(std::size_t n) const</argsstring>
        <name>start_cubic_phase</name>
        <qualifiedname>PMPHolefillingVisitor::start_cubic_phase</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>called when the algorithm with cubic running time starts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the upperbound on the number of steps </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="41" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1ad7d6765bce9c4a81435cd328a15c2ca1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::cubic_step</definition>
        <argsstring>() const</argsstring>
        <name>cubic_step</name>
        <qualifiedname>PMPHolefillingVisitor::cubic_step</qualifiedname>
        <briefdescription>
<para>called at each step. This will be called <computeroutput>n</computeroutput> times. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="44" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1a17eddb4a44998a76125154850a4f0b47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::end_cubic_phase</definition>
        <argsstring>() const</argsstring>
        <name>end_cubic_phase</name>
        <qualifiedname>PMPHolefillingVisitor::end_cubic_phase</qualifiedname>
        <briefdescription>
<para>called when the algorithm with cubic running time ends. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="47" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1af44dc7491edfd311b8fa08afb0d82aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::start_refine_phase</definition>
        <argsstring>()</argsstring>
        <name>start_refine_phase</name>
        <qualifiedname>PMPHolefillingVisitor::start_refine_phase</qualifiedname>
        <briefdescription>
<para>called before refining the triangulation of the hole (<computeroutput>triangulate_and_refine_hole()</computeroutput> and <computeroutput>triangulate_refine_and_fair_hole()</computeroutput> only) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="51" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1ae1034b2fa9bfb7391d2733aecbee95c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::end_refine_phase</definition>
        <argsstring>()</argsstring>
        <name>end_refine_phase</name>
        <qualifiedname>PMPHolefillingVisitor::end_refine_phase</qualifiedname>
        <briefdescription>
<para>called after having refined the triangulation of the hole (<computeroutput>triangulate_and_refine_hole()</computeroutput> and <computeroutput>triangulate_refine_and_fair_hole()</computeroutput> only) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1a183d85e93f3e08405afac9dc7596285f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::start_fair_phase</definition>
        <argsstring>()</argsstring>
        <name>start_fair_phase</name>
        <qualifiedname>PMPHolefillingVisitor::start_fair_phase</qualifiedname>
        <briefdescription>
<para>called before fairing the triangulation of the hole (<computeroutput>triangulate_refine_and_fair_hole()</computeroutput> only) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="59" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPMPHolefillingVisitor_1a1552fad2934c7591f671ed6c8367e95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMPHolefillingVisitor::end_fair_phase</definition>
        <argsstring>()</argsstring>
        <name>end_fair_phase</name>
        <qualifiedname>PMPHolefillingVisitor::end_fair_phase</qualifiedname>
        <briefdescription>
<para>called after having faired the triangulation of the hole (<computeroutput>triangulate_refine_and_fair_hole()</computeroutput> only) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/PMPHolefillingVisitor.h" line="63" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classPMPHolefillingVisitor" kindref="compound">PMPHolefillingVisitor</ref></computeroutput> defines the requirements for the visitor used in <ref refid="group__PMP__hole__filling__grp" kindref="compound">hole-filling-related functions </ref>. The hole filling may use a 2D constrained triangulation for almost planar holes (<emphasis>planar phase</emphasis>). If that is not appropriate or fails it may use an algorithm with a quadratic running time relying on the 3D Delaunay triangulation (<emphasis>quadratic phase</emphasis>). If that fails, it uses an algorithm with cubic running time (<emphasis>cubic phase</emphasis>). </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> </para>
</listitem>
</variablelist>
<variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Hole__filling_1_1Default__visitor" kindref="compound">CGAL::Polygon_mesh_processing::Hole_filling::Default_visitor</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/PMPHolefillingVisitor.h" line="16" column="1" bodyfile="Concepts/PMPHolefillingVisitor.h" bodystart="16" bodyend="65"/>
    <listofallmembers>
      <member refid="classPMPHolefillingVisitor_1ad7d6765bce9c4a81435cd328a15c2ca1" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>cubic_step</name></member>
      <member refid="classPMPHolefillingVisitor_1a17eddb4a44998a76125154850a4f0b47" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>end_cubic_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1a1552fad2934c7591f671ed6c8367e95f" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>end_fair_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1a5ba69027a93b3c8b9b45111d37a7fed0" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>end_planar_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1ab187c68ddb03eb66945d1ad26947fc8b" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>end_quadratic_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1ae1034b2fa9bfb7391d2733aecbee95c5" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>end_refine_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1af85b6274f2a0a7a77cc657e8f80bd9c5" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>quadratic_step</name></member>
      <member refid="classPMPHolefillingVisitor_1a144aaa0f9dc844264acbf72e6d9d85dd" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>start_cubic_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1a183d85e93f3e08405afac9dc7596285f" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>start_fair_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1ad76ba26af056009bd312c9fc26b25ff0" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>start_planar_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1ad6ca046de37798640b58cdf3c626313f" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>start_quadratic_phase</name></member>
      <member refid="classPMPHolefillingVisitor_1af44dc7491edfd311b8fa08afb0d82aa2" prot="public" virt="non-virtual"><scope>PMPHolefillingVisitor</scope><name>start_refine_phase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
