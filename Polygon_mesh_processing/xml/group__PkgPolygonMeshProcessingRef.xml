<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgPolygonMeshProcessingRef" kind="group">
    <compoundname>PkgPolygonMeshProcessingRef</compoundname>
    <title>Polygon Mesh Processing Reference</title>
    <innerfile refid="polygon__mesh__processing_8h">polygon_mesh_processing.h</innerfile>
    <innerclass refid="classCGAL_1_1Polygon__mesh__slicer" prot="public">CGAL::Polygon_mesh_slicer</innerclass>
    <innerclass refid="structCGAL_1_1Polyhedral__envelope" prot="public">CGAL::Polyhedral_envelope</innerclass>
    <innerclass refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection" prot="public">CGAL::Rigid_triangle_mesh_collision_detection</innerclass>
    <innergroup refid="group__PkgPolygonMeshProcessingConcepts">Concepts</innergroup>
    <innergroup refid="group__PMP__keep__connected__components__grp">Connected Components</innergroup>
    <innergroup refid="group__PMP__hole__filling__grp">Hole Filling</innergroup>
    <innergroup refid="group__PMP__meshing__grp">Meshing</innergroup>
    <innergroup refid="group__PMP__corrected__curvatures__grp">Corrected Curvature Computation</innergroup>
    <innergroup refid="group__PMP__normal__grp">Normal Computation</innergroup>
    <innergroup refid="group__PMP__measure__grp">Geometric Measure Functions</innergroup>
    <innergroup refid="group__PMP__orientation__grp">Orientation Functions</innergroup>
    <innergroup refid="group__PMP__intersection__grp">Intersection Functions</innergroup>
    <innergroup refid="group__PMP__combinatorial__repair__grp">Combinatorial Repair</innergroup>
    <innergroup refid="group__PMP__geometric__repair__grp">Geometric Repair</innergroup>
    <innergroup refid="group__PMP__distance__grp">Distance Functions</innergroup>
    <innergroup refid="group__PMP__corefinement__grp">Corefinement and Boolean Operations</innergroup>
    <innergroup refid="group__PMP__detect__features__grp">Feature Detection Functions</innergroup>
    <innergroup refid="group__PMP__locate__grp">Location Functions</innergroup>
    <innergroup refid="group__PMP__predicates__grp">Predicates</innergroup>
    <innergroup refid="group__PMP__IO__grp">I/O Functions</innergroup>
    <innergroup refid="group__PMPDeprecated">Deprecated Functions</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref></type>
        <definition>CGAL::Bbox_3 CGAL::Polygon_mesh_processing::bbox</definition>
        <argsstring>(const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::bbox</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes a bounding box of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class providing the functor <computeroutput>Construct_bbox_3</computeroutput> and the function <computeroutput>Construct_bbox_3 construct_bbox_3_object()</computeroutput>. <computeroutput>Construct_bbox_3</computeroutput> must provide the functor <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> operator()(Point_3)</computeroutput> where <computeroutput>Point_3</computeroutput> is the value type of the vertex point map. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>bbox_scaling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a double used to scale the bounding box. The default value is 1 and the bounding box is the smallest possible axis-aligned bounding box. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1. </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>bbox_scaling &gt; 0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" kindref="member">vertex_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" kindref="member">edge_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" kindref="member">face_bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="74" column="18" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="74" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref></type>
        <definition>CGAL::Bbox_3 CGAL::Polygon_mesh_processing::vertex_bbox</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor vd, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>vertex_bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::vertex_bbox</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes a bounding box of the vertex of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Graph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a descriptor of a vertex in <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class providing the functor <computeroutput>Construct_bbox_3</computeroutput> and the function <computeroutput>Construct_bbox_3 construct_bbox_3_object()</computeroutput>. <computeroutput>Construct_bbox_3</computeroutput> must provide <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> operator()(Point_3)</computeroutput> where <computeroutput>Point_3</computeroutput> is the value type of the vertex point map. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" kindref="member">edge_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" kindref="member">face_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="138" column="18" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="138" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref></type>
        <definition>CGAL::Bbox_3 CGAL::Polygon_mesh_processing::edge_bbox</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor ed, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>edge_bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::edge_bbox</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::edge_descriptor</type>
          <declname>ed</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes a bounding box of an edge of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Graph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ed</parametername>
</parameternamelist>
<parameterdescription>
<para>a descriptor of an edge in <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class providing the functor <computeroutput>Construct_bbox_3</computeroutput> and the function <computeroutput>Construct_bbox_3 construct_bbox_3_object()</computeroutput>. <computeroutput>Construct_bbox_3</computeroutput> must provide <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> operator()(Point_3)</computeroutput> where <computeroutput>Point_3</computeroutput> is the value type of the vertex point map. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" kindref="member">vertex_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" kindref="member">face_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="190" column="18" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="190" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Bbox_3</ref></type>
        <definition>CGAL::Bbox_3 CGAL::Polygon_mesh_processing::face_bbox</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor fd, const PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>face_bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::face_bbox</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes a bounding box of a face of a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>Graph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a descriptor of a face in <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class providing the functor <computeroutput>Construct_bbox_3</computeroutput> and the function <computeroutput>Construct_bbox_3 construct_bbox_3_object()</computeroutput>. <computeroutput>Construct_bbox_3</computeroutput> must provide <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref> operator()(Point_3)</computeroutput> where <computeroutput>Point_3</computeroutput> is the value type of the vertex point map. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" kindref="member">vertex_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" kindref="member">edge_bbox()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="247" column="18" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="247" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gabaf98d2fd9ae599ff1f3a5a6cde79cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::add_bbox</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>add_bbox</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::add_bbox</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>adds an axis-aligned bounding box to a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>bbox_scaling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a double used to scale the bounding box. The default value is 1 and the bounding box is the smallest possible axis-aligned bounding box. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1. </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>bbox_scaling &gt; 0</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_triangulate_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a Boolean used to specify whether the bounding box&apos;s faces should be triangulated or not. The default value is <computeroutput>true</computeroutput>, and faces are not triangulated. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>true </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">bbox()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/bbox.h" line="316" column="10" bodyfile="CGAL/Polygon_mesh_processing/bbox.h" bodystart="316" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga132e91e574d2454eb39f05a4e8e72099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename HalfedgeOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>HalfedgeOutputIterator</type>
        <definition>HalfedgeOutputIterator CGAL::Polygon_mesh_processing::border_halfedges</definition>
        <argsstring>(const FaceRange &amp;face_range, const PolygonMesh &amp;pmesh, HalfedgeOutputIterator out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>border_halfedges</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::border_halfedges</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>HalfedgeOutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>collects the border halfedges of a surface patch defined as a face range. </para>
        </briefdescription>
        <detaileddescription>
<para>For each returned halfedge <computeroutput>h</computeroutput>, <computeroutput>opposite(h, pmesh)</computeroutput> belongs to a face of the patch, but <computeroutput>face(h, pmesh)</computeroutput> does not belong to the patch.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HalfedgeOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> for patch border </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to which the faces in <computeroutput>face_range</computeroutput> belong </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face_range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of faces defining the patch whose border halfedges are collected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator that collects the border halfedges of the patch, seen from outside. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>out</computeroutput></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga42723af60dc8810d938490a8caceb7f0" kindref="member">extract_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/border.h" line="185" column="26" bodyfile="CGAL/Polygon_mesh_processing/border.h" bodystart="185" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga42723af60dc8810d938490a8caceb7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::extract_boundary_cycles</definition>
        <argsstring>(const PolygonMesh &amp;pm, OutputIterator out)</argsstring>
        <name>extract_boundary_cycles</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::extract_boundary_cycles</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>extracts boundary cycles as a list of halfedges, with one halfedge per border. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>a polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator where the border halfedges will be put</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga132e91e574d2454eb39f05a4e8e72099" kindref="member">border_halfedges()</ref></computeroutput></para>
</simplesect>
<xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>It could make sense to also return the length of each cycle. </para>
<para>It should probably go into BGL package (like the rest of this file). </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/border.h" line="255" column="18" bodyfile="CGAL/Polygon_mesh_processing/border.h" bodystart="255" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga396505d5a60b5f6d29792b214fa59352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class ValueMap</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::refine_mesh_at_isolevel</definition>
        <argsstring>(PolygonMesh &amp;pm, ValueMap value_map, typename boost::property_traits&lt; ValueMap &gt;::value_type isovalue, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>refine_mesh_at_isolevel</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::refine_mesh_at_isolevel</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>ValueMap</type>
          <declname>value_map</declname>
        </param>
        <param>
          <type>typename boost::property_traits&lt; ValueMap &gt;::value_type</type>
          <declname>isovalue</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>refines <computeroutput>pm</computeroutput> by adding new vertices on edges having their incident vertices associated with values respectively larger and smaller than <computeroutput>isovalue</computeroutput> in <computeroutput>value_map</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The placement of new vertices on edges will be done by linear interpolation using the aforementioned values. New vertices will be associated <computeroutput>isovalue</computeroutput> in <computeroutput>value_map</computeroutput> when created. Additionally, new edges will be added by connecting new vertices created sharing a common incident face. Note that in case more than two new vertices are added on a face boundary, no edges will be created in that face.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and with its value type being the type of the coordinates of points associated with vertices in the vertex map provided to the <computeroutput>vertex_point_map()</computeroutput> named parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> for <computeroutput>pm</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be refined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map containing a value at each vertex for a given function defined over the mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isovalue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value used to refine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an output property map associating <computeroutput>true</computeroutput> to all edges connecting vertices on the isolevel, and <computeroutput>false</computeroutput> for all other edges. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>No marks on edges will be put </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/refine_mesh_at_isolevel.h" line="71" column="6" bodyfile="CGAL/Polygon_mesh_processing/refine_mesh_at_isolevel.h" bodystart="71" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gaf2cbaecebb112bc4857782728481ccec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Transformation</type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::transform</definition>
        <argsstring>(const Transformation &amp;transformation, PolygonMesh &amp;mesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>transform</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::transform</qualifiedname>
        <param>
          <type>const Transformation &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>applies a transformation to every vertex of a <computeroutput>PolygonMesh</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>a functor that has an <computeroutput>operator()(Point_3)</computeroutput>, with <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> the <computeroutput>value_type</computeroutput> of <computeroutput>vertex_point_map</computeroutput> (see below). Such a functor can be <computeroutput><ref refid="classCGAL_1_1Aff__transformation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Aff_transformation_3</ref></computeroutput> for example. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>the transformation functor to apply to the points of <computeroutput>mesh</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>PolygonMesh</computeroutput> to transform. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>mesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, mesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/transform.h" line="48" column="6" bodyfile="CGAL/Polygon_mesh_processing/transform.h" bodystart="48" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga0542a44d0d081f84e387b1e6bcbca471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>Triangle_3</type>
        <definition>Triangle_3 CGAL::Polygon_mesh_processing::triangle</definition>
        <argsstring>(typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor fd, const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>triangle</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::triangle</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; TriangleMesh &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes a triangle for a face descriptor of a triangle mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the descriptor of the face to construct the triangle from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/triangle.h" line="62" column="1" bodyfile="CGAL/Polygon_mesh_processing/triangle.h" bodystart="62" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1ga50dcd2f6295f584d2e378b57290ae2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename RegionMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces</definition>
        <argsstring>(const PolygonMesh &amp;mesh, RegionMap region_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>region_growing_of_planes_on_faces</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>RegionMap</type>
          <declname>region_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>applies a region growing algorithm to fit planes on faces of a mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>See Section <ref refid="index_1Shape_detection_RegionGrowing" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Shape_detection.tag">Region Growing</ref> for more details on the method.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RegionMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh whose faces are used for region growing </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map storing the region index of each face. Values start at <computeroutput>0</computeroutput> up to the value returned minus <computeroutput>1</computeroutput>. <computeroutput>std::size_t(-1)</computeroutput> is put for faces with no region assigned (it can happen if <computeroutput>minimum_region_size &gt; 1</computeroutput> or for a non-triangular face having a fitting plane not satisfying the maximum distance criterium). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of regions detected</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="8" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum distance from a face to a plane such that it is considered part of the region of the plane </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum angle (in degrees) between the normals of the supporting planes of two adjacent faces such that they are considered part of the same region </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>25 degrees </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>this parameter and <computeroutput>cosine_of_maximum_angle</computeroutput> are exclusive </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>postprocess_regions</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Apply a post-processing step to the output of the region growing algorithm. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>false </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>cosine_of_maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum angle, given as a cosine, between the normals of the supporting planes of adjacent faces such that they are considered part of the same region </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>cos(25 * PI / 180)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>this parameter and <computeroutput>maximum_angle</computeroutput> are exclusive </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>minimum_region_size</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the minimum number of faces such that a new region can be created from a set of faces </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::size_t</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>mesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, mesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>region_primitive_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function and that will contain for each region the plane (or only its orthognonal vector) estimated that approximates it. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with the value type of <computeroutput>RegionMap</computeroutput> as key and <computeroutput>GeomTraits::Plane_3</computeroutput> or <computeroutput>GeomTraits::Vector_3</computeroutput> as value type, <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>None </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/region_growing.h" line="173" column="1" bodyfile="CGAL/Polygon_mesh_processing/region_growing.h" bodystart="173" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolygonMeshProcessingRef_1gac8e445730d718a2fc49604e865017d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename RegionMap</type>
          </param>
          <param>
            <type>typename CornerIdMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::detect_corners_of_regions</definition>
        <argsstring>(const PolygonMesh &amp;mesh, RegionMap region_map, std::size_t nb_regions, CornerIdMap corner_id_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>detect_corners_of_regions</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::detect_corners_of_regions</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>RegionMap</type>
          <declname>region_map</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nb_regions</declname>
        </param>
        <param>
          <type>CornerIdMap</type>
          <declname>corner_id_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>detects the corners on the boundary of almost planar regions by applying the region growing algorithm fitting lines on segment edges of a partition of a mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, a corner on the boundary of a region is a vertex that is either shared by at least three regions (two if it is also a vertex on the boundary of the mesh), or that is incident to two segments edges assigned to different lines. See Section <ref refid="index_1Shape_detection_RegionGrowing" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Shape_detection.tag">Region Growing</ref> for more details on the method.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">EdgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RegionMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CornerIdMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon mesh for region growing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map providing the region index of each face, values must be in <computeroutput>[0, nb_regions-1]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>corner_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>property map storing the corner index of each vertex. Values start at <computeroutput>0</computeroutput> up to the value returned minus 1. <computeroutput>std::size_t(-1)</computeroutput> is put for vertices that are not corners. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_regions</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of patches in the partition of <computeroutput>mesh</computeroutput> defined by <computeroutput>region_map</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of corners detected</para>
</simplesect>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map filled by this function such that an edge is marked as constrained if it is at the interface of two different regions or on the boundary of the mesh </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::edge_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>Unused if not provided </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The value for each edge must be initialized to <computeroutput>false</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum distance from a segment to a line such that it is considered part of the region of the line </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum angle in degrees between two adjacent segments such that they are considered part of the same region </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>25 degrees </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>this parameter and <computeroutput>cosine_of_maximum_angle</computeroutput> are exclusive </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>cosine_of_maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>The maximum angle, given as a cosine, for the smallest angle between the supporting line of a segment and an adjacent segment such that they are considered part of the same region </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> with <computeroutput>GeomTraits</computeroutput> being the type of the parameter <computeroutput>geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>cos(25 * PI / 180)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>this parameter and <computeroutput>maximum_angle</computeroutput> are exclusive </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>mesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, mesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/region_growing.h" line="346" column="1" bodyfile="CGAL/Polygon_mesh_processing/region_growing.h" bodystart="346" bodyend="513"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>  <image type="html" name="hole_filling_ico.png"></image>
 </para>
<para> David Coeurjolly, Jaques-Olivier Lachaud, Konstantinos Katrioplas, Sébastien Loriot, Ivan Pađen, Mael Rouxel-Labbé, Hossam Saeed, Jane Tournois, and Ilker O. Yaz This package provides a collection of methods and classes for polygon mesh processing, ranging from basic operations on simplices, to complex geometry processing algorithms such as Boolean operations, remeshing, repairing, collision and intersection detection, and more.  </para>
<para> <bold>Introduced in:</bold> CGAL 4.7<linebreak/>
 <bold>Depends on:</bold> documented for each function; <ref refid="packages_1PkgSolverInterface" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL and Solvers</ref> <linebreak/>
 <bold>BibTeX:</bold> <ulink url="../Manual/how_to_cite_cgal.html#cgal:lty-pmp-24b">cgal:lty-pmp-24b</ulink><linebreak/>
 <bold>License:</bold> <ref refid="license_1licensesGPL" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">GPL</ref> <linebreak/>
 <bold>Windows Demo:</bold> <ulink url="https://www.cgal.org/demo/6.0.1/CGALlab.zip">CGAL Lab</ulink><linebreak/>
 </para>
<para><htmlonly block="yes"> &lt;h2 class=&quot;groupheader&quot;&gt;Classified Reference Pages&lt;/h2&gt; </htmlonly></para>
<para><heading level="2">Parameters</heading>
</para>
<para>Optional parameters of the functions of this package are implemented as <ref refid="index_1BGLNamedParameters" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>. The page <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> describes their usage.</para>
<para><heading level="2">Corefinement and Boolean Operation Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga95f618914f8d54d840065204b029492f" kindref="member">CGAL::Polygon_mesh_processing::corefine_and_compute_union()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga02fa6ed9116a759ecfb87063392f5455" kindref="member">CGAL::Polygon_mesh_processing::corefine_and_compute_difference()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga3ff96d36cad8f37efcdada916c46fbbe" kindref="member">CGAL::Polygon_mesh_processing::corefine_and_compute_intersection()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1gaafa5e46c35c3fef461a47d73b4566961" kindref="member">CGAL::Polygon_mesh_processing::corefine_and_compute_boolean_operations()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga54baccf4fbd1b1ada67465ec1d4bddc1" kindref="member">CGAL::Polygon_mesh_processing::corefine()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga6e6c4a724ce19e7a207de56f3a7408ab" kindref="member">CGAL::Polygon_mesh_processing::surface_intersection()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga5dc9e7acf8433235adc7b91ac93a7d42" kindref="member">CGAL::Polygon_mesh_processing::clip()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga642520055888a41a3e1a76965a1f9fbb" kindref="member">CGAL::Polygon_mesh_processing::split()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1gaec85370aa0b2acc0919e5f8406cfb74c" kindref="member">CGAL::Polygon_mesh_processing::autorefine_triangle_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__corefinement__grp_1ga3e3a0a82b6c04bdc3a6c070e8da4aed5" kindref="member">CGAL::Polygon_mesh_processing::autorefine()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Meshing Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga7fca6fa2db94560ab6d32e6a77fc35b6" kindref="member">CGAL::Polygon_mesh_processing::remesh_planar_patches()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga0e6da479548199a5d82c3cf0ed36e8a0" kindref="member">CGAL::Polygon_mesh_processing::remesh_almost_planar_patches()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga047c58233b234917fd310e190103e0cd" kindref="member">CGAL::Polygon_mesh_processing::refine()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga9988e9a2eaf92740b3009d06c792f2cd" kindref="member">CGAL::Polygon_mesh_processing::fair()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga54559e61c73ce4481f4a3374a61ca038" kindref="member">CGAL::Polygon_mesh_processing::triangulate_face()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1gaf094a938993d7353589a55010edf63a6" kindref="member">CGAL::Polygon_mesh_processing::triangulate_faces()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga8b7db6aa8c3e79526b594739ba926d82" kindref="member">CGAL::Polygon_mesh_processing::triangulate_polygons()</ref></computeroutput></para>
</listitem><listitem><para><ref refid="group__PMP__meshing__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::isotropic_remeshing()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__meshing__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::surface_Delaunay_remeshing()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__meshing__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::split_long_edges()</computeroutput> </ref></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga300c5eedd7d62bbd10ad2655405562f4" kindref="member">CGAL::Polygon_mesh_processing::extrude_mesh()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMPDeprecated_1ga79c2b4ad31e2dd15b93725e8efd5208a" kindref="member">CGAL::Polygon_mesh_processing::smooth_mesh()</ref></computeroutput> (deprecated)</para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1gad5a9a90355bab0613d94a6b9d73d54ed" kindref="member">CGAL::Polygon_mesh_processing::angle_and_area_smoothing()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga136c659162e5360354db5879db7431b4" kindref="member">CGAL::Polygon_mesh_processing::tangential_relaxation()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1ga57fa999abe8dc557003482444df2a189" kindref="member">CGAL::Polygon_mesh_processing::smooth_shape()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__meshing__grp_1gae6be1cd5e76dcc3d6b63a0c55ae78999" kindref="member">CGAL::Polygon_mesh_processing::random_perturbation()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Sizing Fields</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Polygon__mesh__processing_1_1Uniform__sizing__field" kindref="compound">CGAL::Polygon_mesh_processing::Uniform_sizing_field</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Polygon__mesh__processing_1_1Adaptive__sizing__field" kindref="compound">CGAL::Polygon_mesh_processing::Adaptive_sizing_field</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Orientation Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">CGAL::Polygon_mesh_processing::orient_polygon_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga6e71985647e2705328a6df45b7961994" kindref="member">CGAL::Polygon_mesh_processing::orient()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga2fab7b3c952c86de66de2fef9fe83d74" kindref="member">CGAL::Polygon_mesh_processing::does_bound_a_volume()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1gadf6efc8f4475792ccafe36f3e8734302" kindref="member">CGAL::Polygon_mesh_processing::orient_to_bound_a_volume()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1gab43990ca5541b788c6db2ba509a73ee3" kindref="member">CGAL::Polygon_mesh_processing::volume_connected_components()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1gabdb85ef9ccc1a4da632f1a697c6d5163" kindref="member">CGAL::Polygon_mesh_processing::is_outward_oriented()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad8a3439883e3e76651f96d15ba58b2bc" kindref="member">CGAL::Polygon_mesh_processing::reverse_face_orientations()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga2aa4f7b500dc51d1fc4747705a050946" kindref="member">CGAL::Polygon_mesh_processing::duplicate_non_manifold_edges_in_polygon_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga2f504990a24f599c20cd57161f9755f0" kindref="member">CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_mesh()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga855b1c55c201b91ab04eebd2811a87fd" kindref="member">CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga10325d30c17096eed40938545b53cb14" kindref="member">CGAL::Polygon_mesh_processing::merge_reversible_connected_components()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__orientation__grp_1ga9ac9b9434084b64f3304df636c3178a3" kindref="member">CGAL::Polygon_mesh_processing::compatible_orientations()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Hole Filling Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__hole__filling__grp_1ga3abdf2d0558822e85f060966b69cae98" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__hole__filling__grp_1ga9868fac4d9dca77462ad7828bc99d8a1" kindref="member">CGAL::Polygon_mesh_processing::triangulate_and_refine_hole()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__hole__filling__grp_1ga18eac756a8f8e5d5f73e645fd4e26cad" kindref="member">CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__hole__filling__grp_1gac1054e734715493e32e78d65fc1f0baf" kindref="member">CGAL::Polygon_mesh_processing::triangulate_hole_polyline()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Intersection Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga10428990783d0fc500bb1be8e5d10a42" kindref="member">CGAL::Polygon_mesh_processing::does_self_intersect()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga5c8f1c1aba66b32be12d88f852f87fb0" kindref="member">CGAL::Polygon_mesh_processing::self_intersections()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga4909920dc48b8285e69feb845feb1e53" kindref="member">CGAL::Polygon_mesh_processing::does_triangle_soup_self_intersect()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__intersection__grp_1ga1c5fee17bd0d92d5a2fba77ed94d4b4d" kindref="member">CGAL::Polygon_mesh_processing::triangle_soup_self_intersections()</ref></computeroutput></para>
</listitem><listitem><para><ref refid="group__PMP__intersection__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::do_intersect()</computeroutput> </ref></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__intersection__grp_1gaf0a7348487c7bf93dced127d82afc918" kindref="member">CGAL::Polygon_mesh_processing::intersecting_meshes()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Collision Detection</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection" kindref="compound">CGAL::Rigid_triangle_mesh_collision_detection</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Predicate Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga3f58569399266bf51bc3156f310e6bd0" kindref="member">CGAL::Polygon_mesh_processing::is_degenerate_edge()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga8792f19475d1b066ed9b9bf35d69c695" kindref="member">CGAL::Polygon_mesh_processing::degenerate_edges()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga482e70b514067bb25403009e0a861262" kindref="member">CGAL::Polygon_mesh_processing::is_degenerate_triangle_face()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga349da012e9a09a6085e2607c3e9ea9fb" kindref="member">CGAL::Polygon_mesh_processing::degenerate_faces()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__predicates__grp_1ga4e1b0b968527ce2d0c2f903022b41db4" kindref="member">CGAL::Polygon_mesh_processing::is_needle_triangle_face()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__predicates__grp_1gad901eb3ea93d84417ffcd0da602be78f" kindref="member">CGAL::Polygon_mesh_processing::is_cap_triangle_face()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="structCGAL_1_1Polyhedral__envelope" kindref="compound">CGAL::Polyhedral_envelope</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Side__of__triangle__mesh" kindref="compound">CGAL::Side_of_triangle_mesh</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Combinatorial Repair Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga1f215926ed8794db827e2993d2960870" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga93d14c26c259b5844dbd5a7753278e5f" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1gaef5c13fc9dd4cae14c860351c479a45f" kindref="member">CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" kindref="member">CGAL::Polygon_mesh_processing::repair_polygon_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">CGAL::Polygon_mesh_processing::stitch_boundary_cycle()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">CGAL::Polygon_mesh_processing::stitch_boundary_cycles()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" kindref="member">CGAL::Polygon_mesh_processing::stitch_borders()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" kindref="member">CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga2ba9722ec8472a1455107ffce7145e46" kindref="member">CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3be94f1f7968022a294dd533400ad554" kindref="member">CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__geometric__repair__grp_1ga91c02ef57e638faf2622eae93e7a25e2" kindref="member">CGAL::Polygon_mesh_processing::remove_isolated_vertices()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga121f588ac324938d9a6b6931a08661e1" kindref="member">CGAL::Polygon_mesh_processing::is_non_manifold_vertex()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga36098d2415efd0604b7b996163bc22db" kindref="member">CGAL::Polygon_mesh_processing::non_manifold_vertices()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" kindref="member">CGAL::Polygon_mesh_processing::duplicate_non_manifold_vertices()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga95ff13c1578f509fa8ed58b1884d0e46" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycle()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga2af4c26afc4872bafd0caabe6af23f9a" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycles()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Geometric Repair Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__geometric__repair__grp_1ga48008d2b66de8a68a7068f29db15dad6" kindref="member">CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Connected Components</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gad417b04f530806789515a25530547a36" kindref="member">CGAL::Polygon_mesh_processing::connected_component()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga239704e9a2752ed67d361be55acf3bf9" kindref="member">CGAL::Polygon_mesh_processing::connected_components()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gad08d3489808a6ec8382a9fba3d288f39" kindref="member">CGAL::Polygon_mesh_processing::keep_large_connected_components()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1gae3812da28af74bdf9602a70ae1f9c817" kindref="member">CGAL::Polygon_mesh_processing::keep_largest_connected_components()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga510bdc621fa423d202b22ba82c20ca7b" kindref="member">CGAL::Polygon_mesh_processing::split_connected_components()</ref></computeroutput></para>
</listitem><listitem><para><ref refid="group__PMP__keep__connected__components__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::keep_connected_components()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__keep__connected__components__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::remove_connected_components()</computeroutput> </ref></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__geometric__repair__grp_1ga571b1605486d5cec0f4474aae3fa1905" kindref="member">CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Location Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><ref refid="group__PMP__locate__grp" kindref="compound">Point Location </ref></para>
</listitem><listitem><para><ref refid="group__PMP__locate__grp" kindref="compound">Location Predicates </ref></para>
</listitem><listitem><para><ref refid="group__PMP__locate__grp" kindref="compound">Nearest Face Location Queries </ref></para>
</listitem><listitem><para><ref refid="group__PMP__locate__grp" kindref="compound">Random Location Generation </ref></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Corrected Curvatures</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__corrected__curvatures__grp_1ga22665c9ce92aaedab07df1b05f20bdb2" kindref="member">CGAL::Polygon_mesh_processing::interpolated_corrected_curvatures()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="structCGAL_1_1Polygon__mesh__processing_1_1Principal__curvatures__and__directions" kindref="compound">CGAL::Polygon_mesh_processing::Principal_curvatures_and_directions</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Normal Computation Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__normal__grp_1ga8d98ee0b7fdfe2e3a0fad7ec18e2cb71" kindref="member">CGAL::Polygon_mesh_processing::compute_face_normal()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__normal__grp_1ga99095686a49fe6a45c933dae6217beb5" kindref="member">CGAL::Polygon_mesh_processing::compute_face_normals()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__normal__grp_1ga8346b5625ca097a9938616d10079cec5" kindref="member">CGAL::Polygon_mesh_processing::compute_vertex_normal()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__normal__grp_1ga74e6b247d7e28beb677076aad5614d8c" kindref="member">CGAL::Polygon_mesh_processing::compute_vertex_normals()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__normal__grp_1ga4224769cbbedf39c9e73cb4997744ebf" kindref="member">CGAL::Polygon_mesh_processing::compute_normals()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Distance Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1gac251a5e983df7ee6aa61623cdb9ec454" kindref="member">CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1gaff7bb1f6909363380f3947f1fabf06a0" kindref="member">CGAL::Polygon_mesh_processing::bounded_error_symmetric_Hausdorff_distance()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1gacd7487071c9d409e91c37a731999a239" kindref="member">CGAL::Polygon_mesh_processing::is_Hausdorff_distance_larger()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1ga74376aa81d44d745426acfad5a0ac8de" kindref="member">CGAL::Polygon_mesh_processing::approximate_Hausdorff_distance()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1ga035fdbf660615b036cb3f47f7997b739" kindref="member">CGAL::Polygon_mesh_processing::approximate_symmetric_Hausdorff_distance()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1ga3451246234c24dd4f03d17fc17d50336" kindref="member">CGAL::Polygon_mesh_processing::approximate_max_distance_to_point_set()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1gaed9454c6ed046cd4fb7928cf2b5f7c2c" kindref="member">CGAL::Polygon_mesh_processing::max_distance_to_triangle_mesh()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1ga276e117793ebf6abbb3629423ad700e9" kindref="member">CGAL::Polygon_mesh_processing::sample_triangle_soup()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__distance__grp_1ga6307a4504382c46dc3b0e578ca1f7a3b" kindref="member">CGAL::Polygon_mesh_processing::sample_triangle_mesh()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Geometric Measure Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::edge_length()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::squared_edge_length()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::face_area()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::squared_face_area()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::area()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::volume()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::face_border_length()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::longest_border()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::centroid()</computeroutput> </ref></para>
</listitem><listitem><para><ref refid="group__PMP__measure__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::match_faces()</computeroutput> </ref></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Feature Detection Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__PMP__detect__features__grp_1gad9cf9f1c459540156fb235a487bebd01" kindref="member">CGAL::Polygon_mesh_processing::sharp_edges_segmentation()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__detect__features__grp_1gadd3d18c0a9773463cd57902f85d0b23d" kindref="member">CGAL::Polygon_mesh_processing::detect_sharp_edges()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PMP__detect__features__grp_1ga68042f21c5cafe94d316c4b1fe7c9aed" kindref="member">CGAL::Polygon_mesh_processing::detect_vertex_incident_patches()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga50dcd2f6295f584d2e378b57290ae2af" kindref="member">CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gac8e445730d718a2fc49604e865017d2e" kindref="member">CGAL::Polygon_mesh_processing::detect_corners_of_regions()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Miscellaneous</heading>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Polygon__mesh__slicer" kindref="compound">CGAL::Polygon_mesh_slicer</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf633ec6397f5f065b01462fe42235d56" kindref="member">CGAL::Polygon_mesh_processing::bbox()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga5e3404d49ea27fba8e9594fbaf27662c" kindref="member">CGAL::Polygon_mesh_processing::vertex_bbox()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga8df4cdc887edf1e20b4a13f29886c0e3" kindref="member">CGAL::Polygon_mesh_processing::edge_bbox()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gae466d7641a473368e491a6c30584a5d9" kindref="member">CGAL::Polygon_mesh_processing::face_bbox()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga132e91e574d2454eb39f05a4e8e72099" kindref="member">CGAL::Polygon_mesh_processing::border_halfedges()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga42723af60dc8810d938490a8caceb7f0" kindref="member">CGAL::Polygon_mesh_processing::extract_boundary_cycles()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gaf2cbaecebb112bc4857782728481ccec" kindref="member">CGAL::Polygon_mesh_processing::transform()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga0542a44d0d081f84e387b1e6bcbca471" kindref="member">CGAL::Polygon_mesh_processing::triangle()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga50dcd2f6295f584d2e378b57290ae2af" kindref="member">CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1gac8e445730d718a2fc49604e865017d2e" kindref="member">CGAL::Polygon_mesh_processing::detect_corners_of_regions()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__PkgPolygonMeshProcessingRef_1ga396505d5a60b5f6d29792b214fa59352" kindref="member">CGAL::Polygon_mesh_processing::refine_mesh_at_isolevel()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">I/O Functions</heading>
</para>
<para><itemizedlist>
<listitem><para><ref refid="group__PMP__IO__grp" kindref="compound"><computeroutput>CGAL::Polygon_mesh_processing::IO::read_polygon_mesh()</computeroutput></ref> </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
