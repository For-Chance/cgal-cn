<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="structCGAL_1_1Polyhedral__envelope" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Polyhedral_envelope</compoundname>
    <includes local="no">CGAL/Polyhedral_envelope.h</includes>
    <innerclass refid="structCGAL_1_1Polyhedral__envelope_1_1Datum__map" prot="private">CGAL::Polyhedral_envelope::Datum_map</innerclass>
    <innerclass refid="structCGAL_1_1Polyhedral__envelope_1_1INDEX" prot="private">CGAL::Polyhedral_envelope::INDEX</innerclass>
    <innerclass refid="structCGAL_1_1Polyhedral__envelope_1_1Plane" prot="private">CGAL::Polyhedral_envelope::Plane</innerclass>
    <innerclass refid="structCGAL_1_1Polyhedral__envelope_1_1Point__map" prot="private">CGAL::Polyhedral_envelope::Point_map</innerclass>
    <innerclass refid="structCGAL_1_1Polyhedral__envelope_1_1Prism" prot="private">CGAL::Polyhedral_envelope::Prism</innerclass>
    <innerclass refid="structCGAL_1_1Polyhedral__envelope_1_1Triangle" prot="private">CGAL::Polyhedral_envelope::Triangle</innerclass>
    <templateparamlist>
      <param>
        <type>typename GeomTraits</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Initialization</header>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a891b808e7923aed227837b34f2e2f4dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Polyhedral_envelope</definition>
        <argsstring>()</argsstring>
        <name>Polyhedral_envelope</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Polyhedral_envelope</qualifiedname>
        <briefdescription>
<para><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref> constructor, envelope is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="307" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="307" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1af8fa17dfb5c36b071887b47efb797735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Polyhedral_envelope</definition>
        <argsstring>(const Polyhedral_envelope&lt; GeomTraits &gt; &amp;)=delete</argsstring>
        <name>Polyhedral_envelope</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Polyhedral_envelope</qualifiedname>
        <param>
          <type>const <ref refid="structCGAL_1_1Polyhedral__envelope" kindref="compound">Polyhedral_envelope</ref>&lt; GeomTraits &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="311" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a3ce534cf063030faa4303bc8a9e9760e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Polyhedral__envelope" kindref="compound">Polyhedral_envelope</ref>&lt; GeomTraits &gt; &amp;</type>
        <definition>Polyhedral_envelope&lt; GeomTraits &gt; &amp; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator=</definition>
        <argsstring>(const Polyhedral_envelope&lt; GeomTraits &gt; &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Polyhedral_envelope::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structCGAL_1_1Polyhedral__envelope" kindref="compound">Polyhedral_envelope</ref>&lt; GeomTraits &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="312" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1adc6cf7263dcc6629f365655549e14f15" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Polyhedral__envelope" kindref="compound">Polyhedral_envelope</ref>&lt; GeomTraits &gt; &amp;</type>
        <definition>Polyhedral_envelope&lt; GeomTraits &gt; &amp; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator=</definition>
        <argsstring>(Polyhedral_envelope&lt; GeomTraits &gt; &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Polyhedral_envelope::operator=</qualifiedname>
        <param>
          <type><ref refid="structCGAL_1_1Polyhedral__envelope" kindref="compound">Polyhedral_envelope</ref>&lt; GeomTraits &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="314" column="23" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="314" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a1073e8e60849d138df489913433fea4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Polyhedral_envelope</definition>
        <argsstring>(Polyhedral_envelope&lt; GeomTraits &gt; &amp;&amp;other)</argsstring>
        <name>Polyhedral_envelope</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Polyhedral_envelope</qualifiedname>
        <param>
          <type><ref refid="structCGAL_1_1Polyhedral__envelope" kindref="compound">Polyhedral_envelope</ref>&lt; GeomTraits &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="330" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a1ecff8afd71b42e8757fa2e24d1d4555" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Polyhedral_envelope</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, double epsilon, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>Polyhedral_envelope</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Polyhedral_envelope</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Constructor with a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance of the Minkowski sum hull </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_epsilon_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> an epsilon value </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>double</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>Use <computeroutput>epsilon</computeroutput> for all faces </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="note"><para>The triangle mesh gets copied internally, that is it can be modified after having passed as argument, while the queries are performed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="365" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="365" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a52a89d064aa67024105116416db80a60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Polyhedral_envelope</definition>
        <argsstring>(const FaceRange &amp;face_range, const TriangleMesh &amp;tmesh, double epsilon, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>Polyhedral_envelope</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Polyhedral_envelope</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>face_range</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Constructor using a subset of faces of a triangulated surface mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput><ref refid="classConstRange_1a1ba2b0469f2c4590e6653c99cbb9b0ee" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange::const_iterator</ref></computeroutput> being a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face_range</parametername>
</parameternamelist>
<parameterdescription>
<para>the subset of faces to be considered when computing the polyhedron envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance of the Minkowski sum hull </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_epsilon_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> an epsilon value </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>double</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>Use <computeroutput>epsilon</computeroutput> for all faces </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="note"><para>The triangle mesh gets copied internally, that is it can be modified after having passed as argument, while the queries are performed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="465" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="465" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a4609257ab34fa9b48ce3e35c8f7b5d98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename TriangleRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Polyhedral_envelope</definition>
        <argsstring>(const PointRange &amp;points, const TriangleRange &amp;triangles, double epsilon, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>Polyhedral_envelope</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Polyhedral_envelope</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Constructor with a triangle soup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>PointRange::const_iterator</computeroutput> being a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with a point as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>TriangleRange::const_iterator</computeroutput> being a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> whose value type is model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value_type is convertible to <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of triangles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a triangle as a triple of indices of the points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance of the Minkowski sum hull </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the range <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose value type is <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> and whose key is the value type of <computeroutput>PointRange::const_iterator</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_epsilon_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each triangle an epsilon value </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>std::size_t</computeroutput> as key type and <computeroutput>double</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>Use <computeroutput>epsilon</computeroutput> for all triangles </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="570" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="570" bodyend="622"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Query Operators</header>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1aa8dafcc6b164d83c385f210bc40f6218" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator()</definition>
        <argsstring>(const Point_3 &amp;query) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Polyhedral_envelope::operator()</qualifiedname>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the query point is inside the polyhedral envelope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="2143" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="2143" bodyend="2155"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1ae135094582463f12f6eb1b545f8574b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator()</definition>
        <argsstring>(const Point_3 &amp;source, const Point_3 &amp;target) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Polyhedral_envelope::operator()</qualifiedname>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the query segment defined by the points <computeroutput>source</computeroutput> and <computeroutput>target</computeroutput> is inside the polyhedral envelope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="2162" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="2162" bodyend="2175"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a235323a9a43dbc8a03720c7e7758d649" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator()</definition>
        <argsstring>(const Point_3 &amp;t0, const Point_3 &amp;t1, const Point_3 &amp;t2) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Polyhedral_envelope::operator()</qualifiedname>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the query triangle formed by the points <computeroutput>t0</computeroutput>, <computeroutput>t1</computeroutput>, and <computeroutput>t2</computeroutput> is inside the polyhedral envelope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="2182" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="2182" bodyend="2208"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a81553453f9dbdbd5156c8b462262b29e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator()</definition>
        <argsstring>(const TriangleMesh &amp;tmesh, const NamedParameters &amp;np=parameters::default_values()) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Polyhedral_envelope::operator()</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff all the triangles of <computeroutput>tmesh</computeroutput> are inside the polyhedral envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TriangleMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
<xrefsect id="todo_1_todo000015"><xreftitle>Todo</xreftitle><xrefdescription><para>Add ConcurrencyTag as template parameter + use TBB parallel for </para>
<para>Find a way to test the containment of the vertices first and then the triangles. It requires to have a map vertex-&gt;prism id so that we can test if the 3 vertices of a face are in the same face + have the initial list of prisms. </para>
<para>apply that to the soup versions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="2237" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="2237" bodyend="2264"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a34319c5ca57545a1be3bf765879b0cab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename TriangleRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator()</definition>
        <argsstring>(const PointRange &amp;points, const TriangleRange &amp;triangles, const NamedParameters &amp;np=parameters::default_values()) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Polyhedral_envelope::operator()</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff all the triangles in <computeroutput>triangles</computeroutput> are inside the polyhedral envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>PointRange::const_iterator</computeroutput> being a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with a point as value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>TriangleRange::const_iterator</computeroutput> being a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> whose value type is model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value_type is convertible to <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of triangles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a triangle as a triple of indices of the points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the range <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose value type is <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> and whose key is the value type of <computeroutput>PointRange::const_iterator</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="2291" column="8" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="2291" bodyend="2317"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1adcc17b48082905b5de4a6064e8d3c873" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleRange</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::operator()</definition>
        <argsstring>(const TriangleRange &amp;triangle_range) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Polyhedral_envelope::operator()</qualifiedname>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>triangle_range</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff all the triangles in <computeroutput>triangle_range</computeroutput> are inside the polyhedral envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput><ref refid="classConstRange_1a1ba2b0469f2c4590e6653c99cbb9b0ee" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange::const_iterator</ref></computeroutput> being a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with a value type being itself a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput><ref refid="classConstRange_1a1ba2b0469f2c4590e6653c99cbb9b0ee" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange::const_iterator</ref></computeroutput> being a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> with <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>triangle_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of triangles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="2330" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="2330" bodyend="2350"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a49d2e4062a444ac963b77ea2a188558f" prot="public" static="no">
        <type>GeomTraits::Point_3</type>
        <definition>typedef GeomTraits::Point_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Point_3</definition>
        <argsstring></argsstring>
        <name>Point_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Point_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="108" column="40" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a51cc8d530fbfca22aa4d7a79dcd99b77" prot="private" static="no">
        <type>GeomTraits::Vector_3</type>
        <definition>typedef GeomTraits::Vector_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Vector_3</definition>
        <argsstring></argsstring>
        <name>Vector_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Vector_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="114" column="41" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a57f31347f3b6bf36a3b07ffe054038ed" prot="private" static="no">
        <type>GeomTraits::Segment_3</type>
        <definition>typedef GeomTraits::Segment_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Segment_3</definition>
        <argsstring></argsstring>
        <name>Segment_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Segment_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="115" column="42" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a5b2c703c4e648d9357383236bbe64a52" prot="private" static="no">
        <type>GeomTraits::Triangle_3</type>
        <definition>typedef GeomTraits::Triangle_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Triangle_3</definition>
        <argsstring></argsstring>
        <name>Triangle_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Triangle_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="116" column="43" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1adf436a985a7f3fe5df394983ebc8ed17" prot="private" static="no">
        <type>GeomTraits::Plane_3</type>
        <definition>typedef GeomTraits::Plane_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Plane_3</definition>
        <argsstring></argsstring>
        <name>Plane_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Plane_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="117" column="40" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1aab276e51bdf8235f78b1975a2745bc3d" prot="private" static="no">
        <type>GeomTraits::Iso_cuboid_3</type>
        <definition>typedef GeomTraits::Iso_cuboid_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Iso_cuboid_3</definition>
        <argsstring></argsstring>
        <name>Iso_cuboid_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Iso_cuboid_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="118" column="45" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a172ca6fd3b70ab9747538d64b19ff806" prot="private" static="no">
        <type><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref></type>
        <definition>typedef Bbox_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Bbox</definition>
        <argsstring></argsstring>
        <name>Bbox</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Bbox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="120" column="18" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a15aa29e41489d78cec58ab28c4ec8941" prot="private" static="no">
        <type><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Exact_predicates_exact_constructions_kernel</ref></type>
        <definition>typedef Exact_predicates_exact_constructions_kernel CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::EK</definition>
        <argsstring></argsstring>
        <name>EK</name>
        <qualifiedname>CGAL::Polyhedral_envelope::EK</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="122" column="55" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a539da880f8294e3c49638d632bc0b18c" prot="private" static="no">
        <type>EK::Point_3</type>
        <definition>typedef EK::Point_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::ePoint_3</definition>
        <argsstring></argsstring>
        <name>ePoint_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::ePoint_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="123" column="32" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a9bbda7c44564fe207123e219d24eaf7c" prot="private" static="no">
        <type>EK::Line_3</type>
        <definition>typedef EK::Line_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::eLine_3</definition>
        <argsstring></argsstring>
        <name>eLine_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::eLine_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="124" column="31" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a59ff19b293f3fff469d91cdeeec41dc9" prot="private" static="no">
        <type>EK::Plane_3</type>
        <definition>typedef EK::Plane_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::ePlane_3</definition>
        <argsstring></argsstring>
        <name>ePlane_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::ePlane_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="125" column="32" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a5edea92c9d25e7596ac2388f2b58c140" prot="private" static="no">
        <type>EK::Intersect_3</type>
        <definition>typedef EK::Intersect_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::eIntersect_3</definition>
        <argsstring></argsstring>
        <name>eIntersect_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::eIntersect_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="126" column="36" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a2fe2decbab0d746bbde5b71ba1706346" prot="private" static="no">
        <type>EK::Oriented_side_3</type>
        <definition>typedef EK::Oriented_side_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::eOriented_side_3</definition>
        <argsstring></argsstring>
        <name>eOriented_side_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::eOriented_side_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="127" column="40" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a3ddf7655ba87d508b541923db09ba6ee" prot="private" static="no">
        <type>EK::Are_parallel_3</type>
        <definition>typedef EK::Are_parallel_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::eAre_parallel_3</definition>
        <argsstring></argsstring>
        <name>eAre_parallel_3</name>
        <qualifiedname>CGAL::Polyhedral_envelope::eAre_parallel_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="128" column="39" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a5c878580df96ffde2e6d3f048dc50ea1" prot="private" static="no">
        <type><ref refid="structCGAL_1_1AABB__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_primitive</ref>&lt; unsigned int, Datum_map&lt; GeomTraits &gt;, Point_map&lt; GeomTraits &gt;, <ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Tag_true</ref>, <ref refid="group__PkgSTLExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Tag_false</ref> &gt;</type>
        <definition>typedef AABB_primitive&lt;unsigned int, Datum_map&lt;GeomTraits&gt;, Point_map&lt;GeomTraits&gt;, Tag_true , Tag_false &gt; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Primitive</definition>
        <argsstring></argsstring>
        <name>Primitive</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Primitive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="285" column="26" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a851ae85fd88dc031b0f625e6542ea28d" prot="private" static="no">
        <type><ref refid="classCGAL_1_1AABB__traits__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_traits_3</ref>&lt; GeomTraits, <ref refid="structCGAL_1_1AABB__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">Primitive</ref> &gt;</type>
        <definition>typedef AABB_traits_3&lt;GeomTraits, Primitive&gt; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Tree_traits</definition>
        <argsstring></argsstring>
        <name>Tree_traits</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Tree_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="286" column="25" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Polyhedral__envelope_1a3fccc78ae77401059182ee97cf612b37" prot="private" static="no">
        <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref>&lt; <ref refid="classCGAL_1_1AABB__traits__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">Tree_traits</ref> &gt;</type>
        <definition>typedef AABB_tree&lt;Tree_traits&gt; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Tree</definition>
        <argsstring></argsstring>
        <name>Tree</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="287" column="21" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1a7bb2dc9e2a2b03fabe3eb33f3fd512be" prot="private" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::OUT_PRISM</definition>
        <argsstring></argsstring>
        <name>OUT_PRISM</name>
        <qualifiedname>CGAL::Polyhedral_envelope::OUT_PRISM</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="236" column="21" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1a10c42a3b6a9118e7861e937ce8c94e43" prot="private" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::IN_PRISM</definition>
        <argsstring></argsstring>
        <name>IN_PRISM</name>
        <qualifiedname>CGAL::Polyhedral_envelope::IN_PRISM</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="237" column="21" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1ad6d635704043c351746f8b3070e15ad5" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::CUT_COPLANAR</definition>
        <argsstring></argsstring>
        <name>CUT_COPLANAR</name>
        <qualifiedname>CGAL::Polyhedral_envelope::CUT_COPLANAR</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="238" column="20" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1a7cc9e6ae19da656b2b5bbadb55fd109c" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::CUT_EMPTY</definition>
        <argsstring></argsstring>
        <name>CUT_EMPTY</name>
        <qualifiedname>CGAL::Polyhedral_envelope::CUT_EMPTY</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="239" column="20" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1afe496310175eb0ae04a7480f77e9a206" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::CUT_FACE</definition>
        <argsstring></argsstring>
        <name>CUT_FACE</name>
        <qualifiedname>CGAL::Polyhedral_envelope::CUT_FACE</qualifiedname>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="240" column="20" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1a7dd3eba556be2beaf3d5927d92776cf5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Prism &gt;</type>
        <definition>std::vector&lt;Prism&gt; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::halfspace</definition>
        <argsstring></argsstring>
        <name>halfspace</name>
        <qualifiedname>CGAL::Polyhedral_envelope::halfspace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="290" column="15" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1a4594b402731966b15ad0198cfcdf6a02" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Iso_cuboid_3 &gt;</type>
        <definition>std::vector&lt;Iso_cuboid_3&gt; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::bounding_boxes</definition>
        <argsstring></argsstring>
        <name>bounding_boxes</name>
        <qualifiedname>CGAL::Polyhedral_envelope::bounding_boxes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="291" column="15" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1af14855c9cad47d14e9a48d8b4adc6d59" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Point_3 &gt;</type>
        <definition>std::vector&lt;Point_3&gt; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::env_vertices</definition>
        <argsstring></argsstring>
        <name>env_vertices</name>
        <qualifiedname>CGAL::Polyhedral_envelope::env_vertices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="292" column="15" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1a2921f389453c1797366d42e476edc9bc" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Vector3i &gt;</type>
        <definition>std::vector&lt;Vector3i&gt; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::env_faces</definition>
        <argsstring></argsstring>
        <name>env_faces</name>
        <qualifiedname>CGAL::Polyhedral_envelope::env_faces</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="293" column="15" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1a0ed9d39de3369b2b8b42e6d470f9cbf9" prot="private" static="no" mutable="no">
        <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">Tree</ref></type>
        <definition>Tree CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::tree</definition>
        <argsstring></argsstring>
        <name>tree</name>
        <qualifiedname>CGAL::Polyhedral_envelope::tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="295" column="8" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Polyhedral__envelope_1a508aa0e12412b010a6d3e68fa5a7df94" prot="private" static="no" mutable="no">
        <type>eOriented_side_3</type>
        <definition>eOriented_side_3 CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::oriented_side</definition>
        <argsstring></argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::Polyhedral_envelope::oriented_side</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="297" column="20" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1ac22b190cfaf33f5d0343ab33295828a4" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K2</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>static int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::obtuse_angle</definition>
        <argsstring>(const CGAL::Point_3&lt; K2 &gt; &amp;p, const CGAL::Point_3&lt; K2 &gt; &amp;q, const CGAL::Point_3&lt; K2 &gt; &amp;r)</argsstring>
        <name>obtuse_angle</name>
        <qualifiedname>CGAL::Polyhedral_envelope::obtuse_angle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref>&lt; K2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref>&lt; K2 &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref>&lt; K2 &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="132" column="14" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="132" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a04c15d0f10902f55a645915140a2468b" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Vector_3</ref>&lt; K2 &gt;</type>
        <definition>static CGAL::Vector_3&lt; K2 &gt; CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::normalize</definition>
        <argsstring>(const CGAL::Vector_3&lt; K2 &gt; &amp;v)</argsstring>
        <name>normalize</name>
        <qualifiedname>CGAL::Polyhedral_envelope::normalize</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Vector__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Vector_3</ref>&lt; K2 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="148" column="25" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="148" bodyend="151"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1ac90ee5a594c990bdb6bc92a51d368883" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <qualifiedname>CGAL::Polyhedral_envelope::is_empty</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the polyhedral envelope is empty and <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="2355" column="8" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="2355" bodyend="2358"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1ac0e919d2224ef36cb3c41738cea6443f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Epsilons</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::init</definition>
        <argsstring>(const Epsilons &amp;epsilon_values)</argsstring>
        <name>init</name>
        <qualifiedname>CGAL::Polyhedral_envelope::init</qualifiedname>
        <param>
          <type>const Epsilons &amp;</type>
          <declname>epsilon_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="629" column="8" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="629" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a9fc0b119242733e92c6f11663604c47e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::box_box_intersection</definition>
        <argsstring>(const Iso_cuboid_3 ic1, const Iso_cuboid_3 ic2) const</argsstring>
        <name>box_box_intersection</name>
        <qualifiedname>CGAL::Polyhedral_envelope::box_box_intersection</qualifiedname>
        <param>
          <type>const Iso_cuboid_3</type>
          <declname>ic1</declname>
        </param>
        <param>
          <type>const Iso_cuboid_3</type>
          <declname>ic2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="661" column="8" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="661" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1abdce41253a38a7e9fe63eeff4436f2d5" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::point_out_prism</definition>
        <argsstring>(const ePoint_3 &amp;point, const std::vector&lt; unsigned int &gt; &amp;prismindex, unsigned int jump) const</argsstring>
        <name>point_out_prism</name>
        <qualifiedname>CGAL::Polyhedral_envelope::point_out_prism</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>jump</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="679" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="679" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a6c6971cf1513313528156db58aaf7f00" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::point_out_prism_return_local_id</definition>
        <argsstring>(const Point_3 &amp;point, const ePoint_3 &amp;epoint, const std::vector&lt; unsigned int &gt; &amp;prismindex, const unsigned int jump, int &amp;id) const</argsstring>
        <name>point_out_prism_return_local_id</name>
        <qualifiedname>CGAL::Polyhedral_envelope::point_out_prism_return_local_id</qualifiedname>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>epoint</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>jump</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="713" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="713" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a63f4495ce1b4a2bb502bfd21b0271a06" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::is_seg_cut_polyhedra</definition>
        <argsstring>(const int cindex, const ePoint_3 &amp;source, const ePoint_3 &amp;target, const eLine_3 &amp;line, std::vector&lt; int &gt; &amp;cid) const</argsstring>
        <name>is_seg_cut_polyhedra</name>
        <qualifiedname>CGAL::Polyhedral_envelope::is_seg_cut_polyhedra</qualifiedname>
        <param>
          <type>const int</type>
          <declname>cindex</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const eLine_3 &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>cid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="748" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="748" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a2d67eff377259952b585bf934f54234d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id</definition>
        <argsstring>(const ePoint_3 &amp;ip, const std::vector&lt; unsigned int &gt; &amp;prismindex, const unsigned int &amp;jump, int &amp;id) const</argsstring>
        <name>Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>jump</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="864" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="864" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a06484199e2372cd240d2ad63f0ee7cec" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::segment_out_of_envelope</definition>
        <argsstring>(const Point_3 &amp;source, const Point_3 &amp;target, const std::vector&lt; unsigned int &gt; &amp;prismindex) const</argsstring>
        <name>segment_out_of_envelope</name>
        <qualifiedname>CGAL::Polyhedral_envelope::segment_out_of_envelope</qualifiedname>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="897" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="897" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1ae138177836bf4bb3a08ad223e81137b1" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::is_3_triangle_cut_float_fast</definition>
        <argsstring>(const ePoint_3 &amp;tp, const ePoint_3 &amp;tq, const ePoint_3 &amp;tr, const ePoint_3 &amp;n, const ePoint_3 &amp;ip) const</argsstring>
        <name>is_3_triangle_cut_float_fast</name>
        <qualifiedname>CGAL::Polyhedral_envelope::is_3_triangle_cut_float_fast</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>tp</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>tq</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>tr</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="979" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="979" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a1d013cb9752640bede17376fec987c21" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::is_3_triangle_cut</definition>
        <argsstring>(const ePoint_3 &amp;tp, const ePoint_3 &amp;tq, const ePoint_3 &amp;tr, const ePoint_3 &amp;n, const ePoint_3 &amp;ip) const</argsstring>
        <name>is_3_triangle_cut</name>
        <qualifiedname>CGAL::Polyhedral_envelope::is_3_triangle_cut</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>tp</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>tq</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>tr</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1007" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1007" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1aa74df35f487f41c4dd32afaebc3a977f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::is_two_facets_neighboring</definition>
        <argsstring>(const unsigned int &amp;pid, const unsigned int &amp;i, const unsigned int &amp;j) const</argsstring>
        <name>is_two_facets_neighboring</name>
        <qualifiedname>CGAL::Polyhedral_envelope::is_two_facets_neighboring</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1035" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1035" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1acec6a0be8e9347d37620d04bb1ab7aae" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::is_two_facets_neighbouring</definition>
        <argsstring>(const unsigned int &amp;pid, const unsigned int &amp;i, const unsigned int &amp;j) const</argsstring>
        <name>is_two_facets_neighbouring</name>
        <qualifiedname>CGAL::Polyhedral_envelope::is_two_facets_neighbouring</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1050" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1050" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a0865dcfc9e489b5d6571781b28bd6c2c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::is_triangle_cut_envelope_polyhedra</definition>
        <argsstring>(const int &amp;cindex, const Triangle &amp;query, std::vector&lt; unsigned int &gt; &amp;cid) const</argsstring>
        <name>is_triangle_cut_envelope_polyhedra</name>
        <qualifiedname>CGAL::Polyhedral_envelope::is_triangle_cut_envelope_polyhedra</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>cindex</declname>
        </param>
        <param>
          <type>const Triangle &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>cid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1055" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1055" bodyend="1277"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a8bfeb373fd8fd39a997a8091b9fdf31b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::seg_cut_plane</definition>
        <argsstring>(const ePoint_3 &amp;seg0, const ePoint_3 &amp;seg1, const ePoint_3 &amp;t0, const ePoint_3 &amp;t1, const ePoint_3 &amp;t2) const</argsstring>
        <name>seg_cut_plane</name>
        <qualifiedname>CGAL::Polyhedral_envelope::seg_cut_plane</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>seg0</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>seg1</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1281" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1281" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1aa261f49837fbec902b4d5d2a44372df2" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::is_tpp_on_polyhedra</definition>
        <argsstring>(const ePoint_3 &amp;ip, const int &amp;prismid, const unsigned int &amp;faceid) const</argsstring>
        <name>is_tpp_on_polyhedra</name>
        <qualifiedname>CGAL::Polyhedral_envelope::is_tpp_on_polyhedra</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>prismid</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>faceid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1297" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1297" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a1d189144d57a5d35690730053a9ba000" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id_with_face_order</definition>
        <argsstring>(const ePoint_3 &amp;ip, const std::vector&lt; unsigned int &gt; &amp;prismindex, const std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;intersect_face, const unsigned int &amp;jump, int &amp;id) const</argsstring>
        <name>Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id_with_face_order</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id_with_face_order</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;</type>
          <declname>intersect_face</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>jump</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1314" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1314" bodyend="1376"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a8b518588c8929ec78d1ec020566b24a9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id_with_face_order_jump_over</definition>
        <argsstring>(const ePoint_3 &amp;ip, const std::vector&lt; unsigned int &gt; &amp;prismindex, const std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;intersect_face, const std::vector&lt; int &gt; &amp;coverlist, const unsigned int &amp;jump, int &amp;id) const</argsstring>
        <name>Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id_with_face_order_jump_over</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id_with_face_order_jump_over</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;</type>
          <declname>intersect_face</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>coverlist</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>jump</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1380" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1380" bodyend="1447"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a28712c1859663f2e2664e07ee232ffc8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Implicit_Tri_Facet_Facet_interpoint_Out_Prism_return_local_id_with_face_order</definition>
        <argsstring>(const ePoint_3 &amp;ip, const std::vector&lt; unsigned int &gt; &amp;prismindex, const std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;intersect_face, const unsigned int &amp;jump1, const unsigned int &amp;jump2, int &amp;id) const</argsstring>
        <name>Implicit_Tri_Facet_Facet_interpoint_Out_Prism_return_local_id_with_face_order</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Implicit_Tri_Facet_Facet_interpoint_Out_Prism_return_local_id_with_face_order</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;</type>
          <declname>intersect_face</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>jump1</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>jump2</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1451" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1451" bodyend="1518"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a31a2d34ba5216d8951566d89c45b58b0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::Implicit_Tri_Facet_Facet_interpoint_Out_Prism_return_local_id_with_face_order_jump_over</definition>
        <argsstring>(const ePoint_3 &amp;ip, const std::vector&lt; unsigned int &gt; &amp;prismindex, const std::vector&lt; std::vector&lt; unsigned int &gt; * &gt; &amp;intersect_face, const std::vector&lt; int &gt; &amp;coverlist, const unsigned int &amp;jump1, const unsigned int &amp;jump2, int &amp;id) const</argsstring>
        <name>Implicit_Tri_Facet_Facet_interpoint_Out_Prism_return_local_id_with_face_order_jump_over</name>
        <qualifiedname>CGAL::Polyhedral_envelope::Implicit_Tri_Facet_Facet_interpoint_Out_Prism_return_local_id_with_face_order_jump_over</qualifiedname>
        <param>
          <type>const ePoint_3 &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; unsigned int &gt; * &gt; &amp;</type>
          <declname>intersect_face</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>coverlist</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>jump1</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>jump2</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1523" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1523" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1abafa5080fbd664f852adc4bbf8f8a0a9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::triangle_out_of_envelope</definition>
        <argsstring>(const Point_3 &amp;t0, const Point_3 &amp;t1, const Point_3 &amp;t2, const std::vector&lt; unsigned int &gt; &amp;prismindex) const</argsstring>
        <name>triangle_out_of_envelope</name>
        <qualifiedname>CGAL::Polyhedral_envelope::triangle_out_of_envelope</qualifiedname>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>prismindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1598" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1598" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a0074db30dc893aadfd46fab9f5a56bb5" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Plane</type>
        <definition>Plane CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::get_corner_plane</definition>
        <argsstring>(const Point_3 &amp;p0, const Point_3 &amp;midp, const Vector_3 &amp;normal, const double distance, const bool) const</argsstring>
        <name>get_corner_plane</name>
        <qualifiedname>CGAL::Polyhedral_envelope::get_corner_plane</qualifiedname>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const Point_3 &amp;</type>
          <declname>midp</declname>
        </param>
        <param>
          <type>const Vector_3 &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>const bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1893" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1893" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a8f5c9e82f716dc722de2d32778355eab" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::get_epsilon</definition>
        <argsstring>(double epsilon, std::size_t)</argsstring>
        <name>get_epsilon</name>
        <qualifiedname>CGAL::Polyhedral_envelope::get_epsilon</qualifiedname>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1912" column="10" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1912" bodyend="1915"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a79573b45391bc0e5ea566f305be71ad8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::get_epsilon</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;epsilon_values, std::size_t i)</argsstring>
        <name>get_epsilon</name>
        <qualifiedname>CGAL::Polyhedral_envelope::get_epsilon</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>epsilon_values</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1917" column="10" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1917" bodyend="1920"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Polyhedral__envelope_1a0c0886de253bfa7e6d44eec1515db63d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Epsilons</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polyhedral_envelope&lt; GeomTraits &gt;::halfspace_generation</definition>
        <argsstring>(const std::vector&lt; Point_3 &gt; &amp;ver, const std::vector&lt; Vector3i &gt; &amp;faces, std::vector&lt; Prism &gt; &amp;halfspace, std::vector&lt; Iso_cuboid_3 &gt; &amp;bounding_boxes, const Epsilons &amp;epsilon_values)</argsstring>
        <name>halfspace_generation</name>
        <qualifiedname>CGAL::Polyhedral_envelope::halfspace_generation</qualifiedname>
        <param>
          <type>const std::vector&lt; Point_3 &gt; &amp;</type>
          <declname>ver</declname>
        </param>
        <param>
          <type>const std::vector&lt; Vector3i &gt; &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>std::vector&lt; Prism &gt; &amp;</type>
          <declname>halfspace</declname>
        </param>
        <param>
          <type>std::vector&lt; Iso_cuboid_3 &gt; &amp;</type>
          <declname>bounding_boxes</declname>
        </param>
        <param>
          <type>const Epsilons &amp;</type>
          <declname>epsilon_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_envelope.h" line="1925" column="3" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="1925" bodyend="2104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class can be used to check if a query point, segment, or triangle is inside or outside a polyhedral envelope of a set of triangles, constructed for a given <formula id="2">$ \epsilon $</formula> distance tolerance. </para>
    </briefdescription>
    <detaileddescription>
<para>The polyhedral envelope is the union of <emphasis>prisms</emphasis> obtained. See Section <ref refid="index_1PMPEnvelope" kindref="member">Polyhedral Envelope Containment Check</ref> for more details.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GeomTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>a geometric traits class, model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="CGAL/Polyhedral_envelope.h" line="105" column="1" bodyfile="CGAL/Polyhedral_envelope.h" bodystart="105" bodyend="2360"/>
    <listofallmembers>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a172ca6fd3b70ab9747538d64b19ff806" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Bbox</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a4594b402731966b15ad0198cfcdf6a02" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>bounding_boxes</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a9fc0b119242733e92c6f11663604c47e" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>box_box_intersection</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1ad6d635704043c351746f8b3070e15ad5" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>CUT_COPLANAR</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a7cc9e6ae19da656b2b5bbadb55fd109c" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>CUT_EMPTY</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1afe496310175eb0ae04a7480f77e9a206" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>CUT_FACE</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a3ddf7655ba87d508b541923db09ba6ee" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>eAre_parallel_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a5edea92c9d25e7596ac2388f2b58c140" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>eIntersect_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a15aa29e41489d78cec58ab28c4ec8941" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>EK</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a9bbda7c44564fe207123e219d24eaf7c" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>eLine_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a2921f389453c1797366d42e476edc9bc" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>env_faces</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1af14855c9cad47d14e9a48d8b4adc6d59" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>env_vertices</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a2fe2decbab0d746bbde5b71ba1706346" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>eOriented_side_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a59ff19b293f3fff469d91cdeeec41dc9" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>ePlane_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a539da880f8294e3c49638d632bc0b18c" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>ePoint_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a0074db30dc893aadfd46fab9f5a56bb5" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>get_corner_plane</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a8f5c9e82f716dc722de2d32778355eab" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>get_epsilon</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a79573b45391bc0e5ea566f305be71ad8" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>get_epsilon</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a7dd3eba556be2beaf3d5927d92776cf5" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>halfspace</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a0c0886de253bfa7e6d44eec1515db63d" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>halfspace_generation</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a2d67eff377259952b585bf934f54234d" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a1d189144d57a5d35690730053a9ba000" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id_with_face_order</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a8b518588c8929ec78d1ec020566b24a9" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Implicit_Seg_Facet_interpoint_Out_Prism_return_local_id_with_face_order_jump_over</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a28712c1859663f2e2664e07ee232ffc8" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Implicit_Tri_Facet_Facet_interpoint_Out_Prism_return_local_id_with_face_order</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a31a2d34ba5216d8951566d89c45b58b0" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Implicit_Tri_Facet_Facet_interpoint_Out_Prism_return_local_id_with_face_order_jump_over</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a10c42a3b6a9118e7861e937ce8c94e43" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>IN_PRISM</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1ac0e919d2224ef36cb3c41738cea6443f" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>init</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a1d013cb9752640bede17376fec987c21" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>is_3_triangle_cut</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1ae138177836bf4bb3a08ad223e81137b1" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>is_3_triangle_cut_float_fast</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1ac90ee5a594c990bdb6bc92a51d368883" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>is_empty</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a63f4495ce1b4a2bb502bfd21b0271a06" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>is_seg_cut_polyhedra</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1aa261f49837fbec902b4d5d2a44372df2" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>is_tpp_on_polyhedra</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a0865dcfc9e489b5d6571781b28bd6c2c" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>is_triangle_cut_envelope_polyhedra</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1aa74df35f487f41c4dd32afaebc3a977f" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>is_two_facets_neighboring</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1acec6a0be8e9347d37620d04bb1ab7aae" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>is_two_facets_neighbouring</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1aab276e51bdf8235f78b1975a2745bc3d" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Iso_cuboid_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a04c15d0f10902f55a645915140a2468b" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>normalize</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1ac22b190cfaf33f5d0343ab33295828a4" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>obtuse_angle</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1aa8dafcc6b164d83c385f210bc40f6218" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>operator()</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1ae135094582463f12f6eb1b545f8574b7" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>operator()</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a235323a9a43dbc8a03720c7e7758d649" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>operator()</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a81553453f9dbdbd5156c8b462262b29e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>operator()</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a34319c5ca57545a1be3bf765879b0cab" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>operator()</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1adcc17b48082905b5de4a6064e8d3c873" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>operator()</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a3ce534cf063030faa4303bc8a9e9760e" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>operator=</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1adc6cf7263dcc6629f365655549e14f15" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>operator=</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a508aa0e12412b010a6d3e68fa5a7df94" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>oriented_side</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a7bb2dc9e2a2b03fabe3eb33f3fd512be" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>OUT_PRISM</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1adf436a985a7f3fe5df394983ebc8ed17" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Plane_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a49d2e4062a444ac963b77ea2a188558f" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Point_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1abdce41253a38a7e9fe63eeff4436f2d5" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>point_out_prism</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a6c6971cf1513313528156db58aaf7f00" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>point_out_prism_return_local_id</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a891b808e7923aed227837b34f2e2f4dc" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Polyhedral_envelope</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1af8fa17dfb5c36b071887b47efb797735" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Polyhedral_envelope</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a1073e8e60849d138df489913433fea4a" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Polyhedral_envelope</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a1ecff8afd71b42e8757fa2e24d1d4555" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Polyhedral_envelope</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a52a89d064aa67024105116416db80a60" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Polyhedral_envelope</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a4609257ab34fa9b48ce3e35c8f7b5d98" prot="public" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Polyhedral_envelope</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a5c878580df96ffde2e6d3f048dc50ea1" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Primitive</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a8bfeb373fd8fd39a997a8091b9fdf31b" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>seg_cut_plane</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a57f31347f3b6bf36a3b07ffe054038ed" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Segment_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a06484199e2372cd240d2ad63f0ee7cec" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>segment_out_of_envelope</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a3fccc78ae77401059182ee97cf612b37" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Tree</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a0ed9d39de3369b2b8b42e6d470f9cbf9" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>tree</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a851ae85fd88dc031b0f625e6542ea28d" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Tree_traits</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a5b2c703c4e648d9357383236bbe64a52" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Triangle_3</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1abafa5080fbd664f852adc4bbf8f8a0a9" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>triangle_out_of_envelope</name></member>
      <member refid="structCGAL_1_1Polyhedral__envelope_1a51cc8d530fbfca22aa4d7a79dcd99b77" prot="private" virt="non-virtual"><scope>CGAL::Polyhedral_envelope</scope><name>Vector_3</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
