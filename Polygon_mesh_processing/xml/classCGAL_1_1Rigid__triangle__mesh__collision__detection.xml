<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Rigid__triangle__mesh__collision__detection" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Rigid_triangle_mesh_collision_detection</compoundname>
    <includes local="no">CGAL/Rigid_triangle_mesh_collision_detection.h</includes>
    <templateparamlist>
      <param>
        <type>class TriangleMesh</type>
      </param>
      <param>
        <type>class VertexPointMap</type>
        <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
      </param>
      <param>
        <type>class <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></type>
        <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
      </param>
      <param>
        <type>class AABBTree</type>
        <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
      </param>
      <param>
        <type>class Has_rotation</type>
        <defval><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Memory Management</header>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ae69660a332a5bd1c5274b6ddd9cddff4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::reserve</definition>
        <argsstring>(std::size_t size)</argsstring>
        <name>reserve</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::reserve</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>increases the capacity of data structures used internally, <computeroutput>size</computeroutput> being the number of meshes expected to be added. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="462" column="8" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="462" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a0ddf5e0df0e667ea68dafcf25c66d2a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::remove_mesh</definition>
        <argsstring>(std::size_t mesh_id)</argsstring>
        <name>remove_mesh</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::remove_mesh</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>mesh_id</declname>
        </param>
        <briefdescription>
<para>removes the mesh with id <computeroutput>mesh_id</computeroutput> from the set, the indices of other meshes are kept unchanged. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="477" column="8" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="477" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a893dca62b65646d0b27f480dfab150bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::size</qualifiedname>
        <briefdescription>
<para>returns the number of meshes in the set </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="494" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="494" bodyend="497"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ac6ee98ef5c1741271762de2b2af5e44f" prot="private" static="no">
        <type>property_map_selector&lt; TriangleMesh, boost::vertex_point_t &gt;::const_type</type>
        <definition>typedef property_map_selector&lt;TriangleMesh,boost::vertex_point_t&gt;::const_type CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Default_vpm</definition>
        <argsstring></argsstring>
        <name>Default_vpm</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Default_vpm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="68" column="65" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a2b2fda038537ff32dd12e1950c7ac415" prot="private" static="no">
        <type><ref refid="structCGAL_1_1Default_1_1Get" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default::Get</ref>&lt; VertexPointMap, Default_vpm &gt;::type</type>
        <definition>typedef Default::Get&lt;VertexPointMap,Default_vpm&gt;::type CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Vpm</definition>
        <argsstring></argsstring>
        <name>Vpm</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Vpm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="69" column="49" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ada1b8df7395bf33eee717e606de5e39d" prot="private" static="no">
        <type><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel_traits</ref>&lt; typenameboost::property_traits&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Vpm</ref> &gt;::value_type &gt;<ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">::Kernel</ref></type>
        <definition>typedef Kernel_traits&lt;typenameboost::property_traits&lt;Vpm&gt;::value_type&gt;::Kernel CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Default_kernel</definition>
        <argsstring></argsstring>
        <name>Default_kernel</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Default_kernel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="73" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1aa8e71a31d31d0d50da8a1f5248102931" prot="private" static="no">
        <type><ref refid="classCGAL_1_1AABB__face__graph__triangle__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_face_graph_triangle_primitive</ref>&lt; TriangleMesh, <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Vpm</ref> &gt;</type>
        <definition>typedef AABB_face_graph_triangle_primitive&lt;TriangleMesh, Vpm&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Default_primitive</definition>
        <argsstring></argsstring>
        <name>Default_primitive</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Default_primitive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="78" column="14" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a110ae51359a7466cee5f09834a2592a3" prot="private" static="no">
        <type><ref refid="classCGAL_1_1AABB__traits__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_traits_3</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">K</ref>, <ref refid="classCGAL_1_1AABB__face__graph__triangle__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">Default_primitive</ref> &gt;</type>
        <definition>typedef AABB_traits_3&lt;K, Default_primitive&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Default_tree_traits</definition>
        <argsstring></argsstring>
        <name>Default_tree_traits</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Default_tree_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="79" column="39" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a167e16ff37d85c9740112a1a57f1d425" prot="private" static="no">
        <type><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">CGAL::AABB_tree</ref>&lt; <ref refid="classCGAL_1_1AABB__traits__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">Default_tree_traits</ref> &gt;</type>
        <definition>typedef CGAL::AABB_tree&lt;Default_tree_traits&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Default_tree</definition>
        <argsstring></argsstring>
        <name>Default_tree</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Default_tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="80" column="47" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a2ba3626af185692b876e6727941c8a77" prot="private" static="no">
        <type><ref refid="structCGAL_1_1Default_1_1Get" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default::Get</ref>&lt; AABBTree, <ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">Default_tree</ref> &gt;::type</type>
        <definition>typedef Default::Get&lt;AABBTree,Default_tree&gt;::type CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Tree</definition>
        <argsstring></argsstring>
        <name>Tree</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="81" column="53" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a88bb6be835ad4315155effbd88aebb02" prot="private" static="no">
        <type>Tree::AABB_traits</type>
        <definition>typedef Tree::AABB_traits CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Tree_traits</definition>
        <argsstring></argsstring>
        <name>Tree_traits</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Tree_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="82" column="69" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a9e8146814b4c07b69378287a4a3de3c0" prot="private" static="no">
        <type>Do_intersect_traversal_traits_with_transformation&lt; Tree_traits, <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">K</ref>, Has_rotation &gt;</type>
        <definition>typedef Do_intersect_traversal_traits_with_transformation&lt;Tree_traits, K, Has_rotation&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Traversal_traits</definition>
        <argsstring></argsstring>
        <name>Traversal_traits</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Traversal_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="88" column="64" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ad6a30e1ef60fa9c5b79217b4b4b0ad3c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::AABB_tree</definition>
        <argsstring></argsstring>
        <name>AABB_tree</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::AABB_tree</qualifiedname>
        <briefdescription>
<para>The <ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref> type representing the triangles of each input mesh. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="165" column="28" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ae7cd885c1bf2f9259b6c609b8bb8cb94" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Vertex_point_map</definition>
        <argsstring></argsstring>
        <name>Vertex_point_map</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Vertex_point_map</qualifiedname>
        <briefdescription>
<para>The vertex point map type used with <computeroutput>TriangleMesh</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="167" column="28" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a192e27722ea5cdccb7b28c73165c0396" prot="public" static="no">
        <type>boost::property_traits&lt; <ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ae7cd885c1bf2f9259b6c609b8bb8cb94" kindref="member">Vertex_point_map</ref> &gt;::value_type</type>
        <definition>typedef boost::property_traits&lt;Vertex_point_map&gt;::value_type CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Point_3</definition>
        <argsstring></argsstring>
        <name>Point_3</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Point_3</qualifiedname>
        <briefdescription>
<para>Point type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="173" column="56" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a14091c1dcede9ad08dd0d79d3257d85e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::m_own_aabb_trees</definition>
        <argsstring></argsstring>
        <name>m_own_aabb_trees</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::m_own_aabb_trees</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="91" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a13ce53cbf9e40a62f72dd724d129170b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Tree</ref> * &gt;</type>
        <definition>std::vector&lt;Tree*&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::m_aabb_trees</definition>
        <argsstring></argsstring>
        <name>m_aabb_trees</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::m_aabb_trees</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="92" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a0689c3463d8157419a9ade00a57aeab5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::m_is_closed</definition>
        <argsstring></argsstring>
        <name>m_is_closed</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::m_is_closed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="93" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a72b3256c50d9fa20d468ec160a756d3b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; typename K::Point_3 &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;typename K::Point_3&gt; &gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::m_points_per_cc</definition>
        <argsstring></argsstring>
        <name>m_points_per_cc</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::m_points_per_cc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="94" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a264ac1c16f22fe38a3d76ad79f100165" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Traversal_traits &gt;</type>
        <definition>std::vector&lt;Traversal_traits&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::m_traversal_traits</definition>
        <argsstring></argsstring>
        <name>m_traversal_traits</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::m_traversal_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="95" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a4d6c3e971398c73e6ee717a2b8cf88b1" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::m_free_id</definition>
        <argsstring></argsstring>
        <name>m_free_id</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::m_free_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="96" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a59b89c66f003e529a7a7d105c45e4c1e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::size_t &gt;</type>
        <definition>std::vector&lt;std::size_t&gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::m_id_pool</definition>
        <argsstring></argsstring>
        <name>m_id_pool</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::m_id_pool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="97" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1af0f367c5f08938d0b859a10e3a0141a3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::get_id_for_new_mesh</definition>
        <argsstring>()</argsstring>
        <name>get_id_for_new_mesh</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::get_id_for_new_mesh</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="104" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="104" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a35d2934b56ee96e4003ffd7b4840c45f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NamedParameters</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::add_cc_points</definition>
        <argsstring>(const TriangleMesh &amp;tm, std::size_t id, const NamedParameters &amp;np)</argsstring>
        <name>add_cc_points</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::add_cc_points</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="125" column="8" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a6e28a52bbab1a2869087e45b16fea486" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::does_A_contains_a_CC_of_B</definition>
        <argsstring>(std::size_t id_A, std::size_t id_B) const</argsstring>
        <name>does_A_contains_a_CC_of_B</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::does_A_contains_a_CC_of_B</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>id_A</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>id_B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="131" column="8" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="131" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a12761e52ed789004c372e8c3ed7198c2" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::does_A_intersect_B</definition>
        <argsstring>(std::size_t id_A, std::size_t id_B) const</argsstring>
        <name>does_A_intersect_B</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::does_A_intersect_B</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>id_A</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>id_B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="150" column="8" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="150" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a04fa04998d00bd60effc6a0b54383170" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Rigid_triangle_mesh_collision_detection</definition>
        <argsstring>()</argsstring>
        <name>Rigid_triangle_mesh_collision_detection</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Rigid_triangle_mesh_collision_detection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="175" column="3" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1aba5891bf8049045e32d59542be1049bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Rigid_triangle_mesh_collision_detection</definition>
        <argsstring>(const Rigid_triangle_mesh_collision_detection &amp;)=default</argsstring>
        <name>Rigid_triangle_mesh_collision_detection</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Rigid_triangle_mesh_collision_detection</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection" kindref="compound">Rigid_triangle_mesh_collision_detection</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="179" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1afe5b50df0dd0f0ca85fafec145f7823d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::Rigid_triangle_mesh_collision_detection</definition>
        <argsstring>(Rigid_triangle_mesh_collision_detection &amp;&amp;other)</argsstring>
        <name>Rigid_triangle_mesh_collision_detection</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::Rigid_triangle_mesh_collision_detection</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection" kindref="compound">Rigid_triangle_mesh_collision_detection</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="182" column="3" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a4caa138dbfc06ddc0d35e70de41514ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::~Rigid_triangle_mesh_collision_detection</definition>
        <argsstring>()</argsstring>
        <name>~Rigid_triangle_mesh_collision_detection</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::~Rigid_triangle_mesh_collision_detection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="187" column="3" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="187" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1af8bec6cd4171fa54f06f285588df42c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection" kindref="compound">Rigid_triangle_mesh_collision_detection</ref> &amp;</type>
        <definition>Rigid_triangle_mesh_collision_detection &amp; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::operator=</definition>
        <argsstring>(Rigid_triangle_mesh_collision_detection &amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::operator=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection" kindref="compound">Rigid_triangle_mesh_collision_detection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="196" column="43"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ab2e1ac1b74908d0eb91b3219a2836c56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection" kindref="compound">Rigid_triangle_mesh_collision_detection</ref> &amp;</type>
        <definition>Rigid_triangle_mesh_collision_detection &amp; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::operator=</definition>
        <argsstring>(Rigid_triangle_mesh_collision_detection &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::operator=</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection" kindref="compound">Rigid_triangle_mesh_collision_detection</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move assignment operator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="199" column="43" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="199" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1aa9b6429f923ade825b2328829aab5e45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::add_mesh</definition>
        <argsstring>(const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>add_mesh</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::add_mesh</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>adds mesh <computeroutput>tm</computeroutput> to the set of meshes to be considered for intersection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the id of <computeroutput>tm</computeroutput> used to refer to that mesh.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>triangulated surface mesh to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tm</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>apply_per_connected_component</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>false</computeroutput>, <computeroutput>tm</computeroutput> is assumed to have only one connected component, avoiding the extraction of connected components. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="248" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="248" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ae76e39404aca063218c1a5cc9011e212" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::add_mesh</definition>
        <argsstring>(const AABB_tree &amp;tree, const TriangleMesh &amp;tm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>add_mesh</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::add_mesh</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ad6a30e1ef60fa9c5b79217b4b4b0ad3c" kindref="member">AABB_tree</ref> &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>adds an instance of a triangulated surface mesh using an external tree of its faces. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>The tree is not copied and the lifetime of <computeroutput>tree</computeroutput> must be longer than that of this class.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the id of <computeroutput>tm</computeroutput> used to refer to that mesh.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>an AABB-tree of faces of a mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>triangulated surface mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> should be available for the vertices of <computeroutput>tm</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>tm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(tm) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>apply_per_connected_component</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>false</computeroutput>, <computeroutput>tm</computeroutput> is assumed to have only one connected component, avoiding the extraction of connected components </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="307" column="15" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="307" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a2eda001d87128694ae0d86971929f916" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::set_transformation</definition>
        <argsstring>(std::size_t mesh_id, const Aff_transformation_3&lt; K &gt; &amp;aff_trans)</argsstring>
        <name>set_transformation</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::set_transformation</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>mesh_id</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Aff__transformation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Aff_transformation_3</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">K</ref> &gt; &amp;</type>
          <declname>aff_trans</declname>
        </param>
        <briefdescription>
<para>sets the transformation associated to a mesh identified by its id in the set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="322" column="8" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="322" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a0f935fc3540e3a08721353d22e395b17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MeshIdRange</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::size_t &gt;</type>
        <definition>std::vector&lt; std::size_t &gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::get_all_intersections</definition>
        <argsstring>(std::size_t mesh_id, const MeshIdRange &amp;ids) const</argsstring>
        <name>get_all_intersections</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::get_all_intersections</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>mesh_id</declname>
        </param>
        <param>
          <type>const MeshIdRange &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>returns a vector of the ids of meshes within <computeroutput>ids</computeroutput> that have at least a face intersecting a face of the mesh with id <computeroutput>mesh_id</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>mesh_id</computeroutput> is in <computeroutput>ids</computeroutput> it is not reported. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MeshIdRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of ids convertible to <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="353" column="3" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="353" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a413679432bd44257f1f275059c3876a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::size_t &gt;</type>
        <definition>std::vector&lt; std::size_t &gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::get_all_intersections</definition>
        <argsstring>(std::size_t mesh_id) const</argsstring>
        <name>get_all_intersections</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::get_all_intersections</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>mesh_id</declname>
        </param>
        <briefdescription>
<para>returns a vector of the ids of meshes in the set that have at least a face intersecting a face of the mesh with id <computeroutput>mesh_id</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="379" column="3" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="379" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a09b027b0f7ab35e8f87f8fa793d3372e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MeshIdRange</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::pair&lt; std::size_t, bool &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; std::size_t, bool &gt; &gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::get_all_intersections_and_inclusions</definition>
        <argsstring>(std::size_t mesh_id, const MeshIdRange &amp;ids) const</argsstring>
        <name>get_all_intersections_and_inclusions</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::get_all_intersections_and_inclusions</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>mesh_id</declname>
        </param>
        <param>
          <type>const MeshIdRange &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>returns a vector of the ids of meshes within <computeroutput>ids</computeroutput> that are intersecting with the mesh with id <computeroutput>mesh_id</computeroutput>, considering volume inclusions for closed meshes. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, if at least one face of a mesh with id <computeroutput>i</computeroutput> intersects a face of the mesh with id <computeroutput>mesh_id</computeroutput>, the pair <computeroutput>(i, false)</computeroutput> is put in the output vector. If there is no face intersection, but at least one of the meshes with ids <computeroutput>i</computeroutput> and <computeroutput>mesh_id</computeroutput> is closed, and at least one connected component is included in the bounded volume defined by a closed mesh then the pair <computeroutput>(i, true)</computeroutput> is put in the output vector (independently of mesh <computeroutput>i</computeroutput> or <computeroutput>mesh_id</computeroutput> being the one including the other). The inclusion test is done using <computeroutput><ref refid="classCGAL_1_1Side__of__triangle__mesh" kindref="compound">Side_of_triangle_mesh</ref></computeroutput>, in particular surface orientation is ignored and only the nesting level of connected components defines a bounded volume. If a mesh has some self-intersection the inclusion test may return incorrect results. If <computeroutput>mesh_id</computeroutput> is in <computeroutput>ids</computeroutput> it is not reported.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MeshIdRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of ids convertible to <computeroutput>std::size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If a mesh is made of several connected components and at least one component is not closed, then no inclusion test will be made even if some components are closed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="407" column="3" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="407" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a6ccb79ff847da7862e3e4e982d220234" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; std::size_t, bool &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; std::size_t, bool &gt; &gt; CGAL::Rigid_triangle_mesh_collision_detection&lt; TriangleMesh, VertexPointMap, Kernel, AABBTree, Has_rotation &gt;::get_all_intersections_and_inclusions</definition>
        <argsstring>(std::size_t mesh_id) const</argsstring>
        <name>get_all_intersections_and_inclusions</name>
        <qualifiedname>CGAL::Rigid_triangle_mesh_collision_detection::get_all_intersections_and_inclusions</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>mesh_id</declname>
        </param>
        <briefdescription>
<para>returns a vector of the ids of meshes in the set that are intersecting with the mesh with id <computeroutput>mesh_id</computeroutput>, considering volume inclusions for closed meshes. </para>
        </briefdescription>
        <detaileddescription>
<para>See the previous overload for details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="452" column="3" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="452" bodyend="456"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class provides methods to perform some intersection tests between triangle meshes that undergo affine transformations (rotation, translation, and scaling). </para>
    </briefdescription>
    <detaileddescription>
<para>Meshes are added to an internal set and are referenced using an id assigned when added to the set. Note that the exact predicate framework applies on the meshes after having applied the transformation to the coordinates of the points of the vertices of each mesh.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexPointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with the vertex descriptor of <computeroutput>TriangleMesh</computeroutput> as key type, and a point from a <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> as value type. Default is the internal point property map of <computeroutput>TriangleMesh</computeroutput> if it exists. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>. Default is the kernel of the value type of <computeroutput>VertexPointMap</computeroutput> retrieved using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel_traits</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AABBTree</parametername>
</parameternamelist>
<parameterdescription>
<para>an <computeroutput><ref refid="classCGAL_1_1AABB__tree" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_tree</ref></computeroutput> that can containing faces of <computeroutput>TriangleMesh</computeroutput>. Default is using <computeroutput>AABB_traits</computeroutput> with <computeroutput><ref refid="classCGAL_1_1AABB__face__graph__triangle__primitive" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/AABB_tree.tag">AABB_face_graph_triangle_primitive</ref></computeroutput> as primitive type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Has_rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>tag indicating whether the transformations applied to meshes may contain rotations (<computeroutput>Tag_true</computeroutput>) or if only translations and scalings are applied (<computeroutput>Tag_false</computeroutput>). Some optimizations are switch on in case there are no rotations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="CGAL/Rigid_triangle_mesh_collision_detection.h" line="64" column="1" bodyfile="CGAL/Rigid_triangle_mesh_collision_detection.h" bodystart="65" bodyend="633"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ad6a30e1ef60fa9c5b79217b4b4b0ad3c" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>AABB_tree</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a35d2934b56ee96e4003ffd7b4840c45f" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>add_cc_points</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1aa9b6429f923ade825b2328829aab5e45" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>add_mesh</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ae76e39404aca063218c1a5cc9011e212" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>add_mesh</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ada1b8df7395bf33eee717e606de5e39d" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Default_kernel</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1aa8e71a31d31d0d50da8a1f5248102931" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Default_primitive</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a167e16ff37d85c9740112a1a57f1d425" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Default_tree</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a110ae51359a7466cee5f09834a2592a3" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Default_tree_traits</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ac6ee98ef5c1741271762de2b2af5e44f" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Default_vpm</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a6e28a52bbab1a2869087e45b16fea486" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>does_A_contains_a_CC_of_B</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a12761e52ed789004c372e8c3ed7198c2" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>does_A_intersect_B</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a0f935fc3540e3a08721353d22e395b17" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>get_all_intersections</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a413679432bd44257f1f275059c3876a2" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>get_all_intersections</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a09b027b0f7ab35e8f87f8fa793d3372e" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>get_all_intersections_and_inclusions</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a6ccb79ff847da7862e3e4e982d220234" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>get_all_intersections_and_inclusions</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1af0f367c5f08938d0b859a10e3a0141a3" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>get_id_for_new_mesh</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a13ce53cbf9e40a62f72dd724d129170b" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>m_aabb_trees</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a4d6c3e971398c73e6ee717a2b8cf88b1" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>m_free_id</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a59b89c66f003e529a7a7d105c45e4c1e" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>m_id_pool</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a0689c3463d8157419a9ade00a57aeab5" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>m_is_closed</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a14091c1dcede9ad08dd0d79d3257d85e" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>m_own_aabb_trees</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a72b3256c50d9fa20d468ec160a756d3b" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>m_points_per_cc</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a264ac1c16f22fe38a3d76ad79f100165" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>m_traversal_traits</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1af8bec6cd4171fa54f06f285588df42c2" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ab2e1ac1b74908d0eb91b3219a2836c56" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a192e27722ea5cdccb7b28c73165c0396" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Point_3</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a0ddf5e0df0e667ea68dafcf25c66d2a6" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>remove_mesh</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ae69660a332a5bd1c5274b6ddd9cddff4" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>reserve</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a04fa04998d00bd60effc6a0b54383170" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Rigid_triangle_mesh_collision_detection</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1aba5891bf8049045e32d59542be1049bc" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Rigid_triangle_mesh_collision_detection</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1afe5b50df0dd0f0ca85fafec145f7823d" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Rigid_triangle_mesh_collision_detection</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a2eda001d87128694ae0d86971929f916" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>set_transformation</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a893dca62b65646d0b27f480dfab150bf" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>size</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a9e8146814b4c07b69378287a4a3de3c0" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Traversal_traits</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a2ba3626af185692b876e6727941c8a77" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Tree</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a88bb6be835ad4315155effbd88aebb02" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Tree_traits</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1ae7cd885c1bf2f9259b6c609b8bb8cb94" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Vertex_point_map</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a2b2fda038537ff32dd12e1950c7ac415" prot="private" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>Vpm</name></member>
      <member refid="classCGAL_1_1Rigid__triangle__mesh__collision__detection_1a4caa138dbfc06ddc0d35e70de41514ae" prot="public" virt="non-virtual"><scope>CGAL::Rigid_triangle_mesh_collision_detection</scope><name>~Rigid_triangle_mesh_collision_detection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
