<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PMP__combinatorial__repair__grp" kind="group">
    <compoundname>PMP_combinatorial_repair_grp</compoundname>
    <title>Combinatorial Repair</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga121f588ac324938d9a6b6931a08661e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_non_manifold_vertex</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor v, const PolygonMesh &amp;pm)</argsstring>
        <name>is_non_manifold_vertex</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_non_manifold_vertex</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::vertex_descriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <briefdescription>
<para>returns whether a vertex of a polygon mesh is non-manifold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function has linear runtime with respect to the size of the mesh. The function <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga36098d2415efd0604b7b996163bc22db" kindref="member">non_manifold_vertices()</ref></computeroutput> should be used when gathering all non manifold vertices.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>pm</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh containing <computeroutput>v</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the vertex is non-manifold, <computeroutput>false</computeroutput> otherwise</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" kindref="member">duplicate_non_manifold_vertices()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/manifoldness.h" line="52" column="6" bodyfile="CGAL/Polygon_mesh_processing/manifoldness.h" bodystart="52" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga36098d2415efd0604b7b996163bc22db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Polygon_mesh_processing::non_manifold_vertices</definition>
        <argsstring>(const PolygonMesh &amp;pm, OutputIterator out)</argsstring>
        <name>non_manifold_vertices</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::non_manifold_vertices</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>collects the non-manifold vertices (if any) present in the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>A non-manifold vertex <computeroutput>v</computeroutput> is returned via one incident halfedge <computeroutput>h</computeroutput> such that <computeroutput>target(h, pm) = v</computeroutput> for all the umbrellas that <computeroutput>v</computeroutput> appears in (an <emphasis>umbrella</emphasis> being the set of faces incident to all the halfedges reachable by walking around <computeroutput>v</computeroutput> using <computeroutput>hnext = prev(opposite(h, pm), pm)</computeroutput>, starting from <computeroutput>h</computeroutput>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> holding objects of type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator that collects halfedges incident to <computeroutput>v</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output iterator</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga121f588ac324938d9a6b6931a08661e1" kindref="member">is_non_manifold_vertex()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" kindref="member">duplicate_non_manifold_vertices()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/manifoldness.h" line="306" column="16" bodyfile="CGAL/Polygon_mesh_processing/manifoldness.h" bodystart="306" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga25901cbedcc6123d7760ac5b9dc8d14e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::duplicate_non_manifold_vertices</definition>
        <argsstring>(PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>duplicate_non_manifold_vertices</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::duplicate_non_manifold_vertices</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>duplicates all the non-manifold vertices of the input mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">HalfedgeListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableHalfedgeGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableHalfedgeGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the surface mesh to be repaired </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the constrained-or-not status of each vertex of <computeroutput>pm</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type. It must be default constructible. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a default property map where no vertex is constrained </para>
</listitem>
<listitem>
<para><bold>Extra: </bold><computeroutput>put(vcm, v, true)</computeroutput> will be called for each duplicated vertices, as well as the original non-manifold vertex in the input mesh. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an output iterator to collect the duplicated vertices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput>std::vector&lt;vertex_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The first vertex of each vector is a non-manifold vertex of the input mesh, followed by the new vertices that were created to fix the given non-manifold configuration. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of vertices created</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga36098d2415efd0604b7b996163bc22db" kindref="member">non_manifold_vertices()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/manifoldness.h" line="428" column="13" bodyfile="CGAL/Polygon_mesh_processing/manifoldness.h" bodystart="428" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga95ff13c1578f509fa8ed58b1884d0e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycle</definition>
        <argsstring>(typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor h, PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_duplicated_vertices_in_boundary_cycle</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycle</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>merges identical vertices around a cycle of boundary edges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge that belongs to a boundary cycle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh which contains the boundary cycle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga2af4c26afc4872bafd0caabe6af23f9a" kindref="member">merge_duplicated_vertices_in_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/merge_border_vertices.h" line="285" column="6" bodyfile="CGAL/Polygon_mesh_processing/merge_border_vertices.h" bodystart="285" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga2af4c26afc4872bafd0caabe6af23f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycles</definition>
        <argsstring>(PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_duplicated_vertices_in_boundary_cycles</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycles</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>extracts boundary cycles and merges the duplicated vertices of each cycle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh which contains the cycles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pm)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga95ff13c1578f509fa8ed58b1884d0e46" kindref="member">merge_duplicated_vertices_in_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/merge_border_vertices.h" line="344" column="6" bodyfile="CGAL/Polygon_mesh_processing/merge_border_vertices.h" bodystart="344" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga3be94f1f7968022a294dd533400ad554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup</definition>
        <argsstring>(const PolygonMesh &amp;mesh, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>polygon_mesh_to_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup</qualifiedname>
        <param>
          <type>const PolygonMesh &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>adds the vertices and faces of a mesh into a (possibly non-empty) polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type can be constructed from the point type of the polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type is itself a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type is <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh whose faces are being put in the polygon soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points making the polygons of the soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>mesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, mesh)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para><computeroutput>PolygonRange</computeroutput> can also be a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose value type is an array, but it is the user&apos;s responsibility to ensure that all faces have the same number of vertices, and that this number is equal to the size of the array. <htmlonly block="yes"> &lt;/div&gt; </htmlonly></para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">CGAL::Polygon_mesh_processing::orient_polygon_soup()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" kindref="member">CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga2ba9722ec8472a1455107ffce7145e46" kindref="member">CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/polygon_mesh_to_polygon_soup.h" line="98" column="6" bodyfile="CGAL/Polygon_mesh_processing/polygon_mesh_to_polygon_soup.h" bodystart="98" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonRange</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh</definition>
        <argsstring>(const PolygonRange &amp;polygons)</argsstring>
        <name>is_polygon_soup_a_polygon_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh</qualifiedname>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the soup of polygons defines a valid polygon mesh that can be handled by <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga2ba9722ec8472a1455107ffce7145e46" kindref="member">CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It checks that each edge has at most two incident faces and such an edge is visited in opposite direction along the two face boundaries, no polygon has twice the same vertex, and the polygon soup describes a manifold surface. This function does not require a range of points as an argument since the check is purely topological. To each vertex of the mesh is associated an index that is used in the description of the boundaries of the polygons provided in <computeroutput>polygons</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a polygon using the indices of the vertices.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">CGAL::Polygon_mesh_processing::orient_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h" line="195" column="6" bodyfile="CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h" bodystart="195" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga2ba9722ec8472a1455107ffce7145e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters_PS</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename NamedParameters_PM</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh</definition>
        <argsstring>(const PointRange &amp;points, const PolygonRange &amp;polygons, PolygonMesh &amp;out, const NamedParameters_PS &amp;np_ps=parameters::default_values(), const NamedParameters_PM &amp;np_pm=parameters::default_values())</argsstring>
        <name>polygon_soup_to_polygon_mesh</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters_PS &amp;</type>
          <declname>np_ps</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <param>
          <type>const NamedParameters_PM &amp;</type>
          <declname>np_pm</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>builds a polygon mesh from a soup of polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>the input polygon soup describes a consistently oriented polygon mesh. This can be checked using the function <ref refid="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" kindref="member"><computeroutput>CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh(polygons)</computeroutput> </ref>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters_PS</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters_PM</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a polygon using the indices of the points in <computeroutput>points</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be built </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np_ps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the range <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose value type is a point type convertible to the point type of the vertex point map associated to the polygon mesh </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_to_vertex_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs source-vertex-index from <computeroutput>points</computeroutput>, target-vertex. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> accepting <computeroutput>std::pair&lt;int, boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>polygon_to_face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs polygon-index from <computeroutput>polygons</computeroutput>, target-face. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> accepting <computeroutput>std::pair&lt;int, boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_to_vertex_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating each soup point of <computeroutput>points</computeroutput> to a vertex of <computeroutput>out</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with an integer type as key type and <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>polygon_to_face_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating each soup polygon of <computeroutput>polygons</computeroutput> to a face of <computeroutput>out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with an integer type as key type and <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np_pm</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, out)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PMP__orientation__grp_1gad380465ee62d858d27fab4cfda6c1764" kindref="member">CGAL::Polygon_mesh_processing::orient_polygon_soup()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga8b9d12d817b5cc76f5a42d74eac75bf3" kindref="member">CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3be94f1f7968022a294dd533400ad554" kindref="member">CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h" line="330" column="6" bodyfile="CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h" bodystart="330" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1gaef5c13fc9dd4cae14c860351c479a45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup</definition>
        <argsstring>(PointRange &amp;points, PolygonRange &amp;polygons)</argsstring>
        <name>remove_isolated_points_in_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>removes the isolated points from a polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para>A point is considered <emphasis>isolated</emphasis> if it does not appear in any polygon of the soup.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of polygons. Each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of removed isolated points</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" kindref="member">repair_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" line="418" column="13" bodyfile="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" bodystart="418" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga1f215926ed8794db827e2993d2960870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup</definition>
        <argsstring>(PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_duplicate_points_in_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>merges the duplicate points in a polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the index of a point that is merged with another point will thus change in all the polygons that the point appears in.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> and <computeroutput><ref refid="classSwappable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Swappable</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of polygons. Each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested functor <computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points a function <computeroutput>Less_xyz_3 less_xyz_3_object()</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of removed points</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" kindref="member">repair_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" line="536" column="13" bodyfile="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" bodystart="536" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga93d14c26c259b5844dbd5a7753278e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup</definition>
        <argsstring>(const PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>merge_duplicate_polygons_in_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>merges the duplicate polygons in a polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para>Two polygons are duplicate if they share the same vertices in the same order. Note that the first vertex of the polygon does not matter, that is the triangle <computeroutput>0,1,2</computeroutput> is a duplicate of the triangle <computeroutput>2,0,1</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classReversibleContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReversibleContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of polygons. Each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested functor <computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points a function <computeroutput>Less_xyz_3 less_xyz_3_object()</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>erase_all_duplicates</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Parameter to indicate, when multiple polygons are duplicates, whether all the duplicate polygons should be removed or if one (arbitrarily chosen) face should be kept. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>require_same_orientation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Parameter to indicate if polygon orientation should be taken into account when determining whether two polygons are duplicates, that is, whether e.g. the triangles <computeroutput>0,1,2</computeroutput> and <computeroutput>0,2,1</computeroutput> are duplicates. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of removed polygons</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" kindref="member">repair_polygon_soup()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" line="947" column="13" bodyfile="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" bodystart="947" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga3b35133783759402828325b91ab559cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Polygon_mesh_processing::repair_polygon_soup</definition>
        <argsstring>(PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>repair_polygon_soup</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::repair_polygon_soup</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>cleans a given polygon soup through various repairing operations. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, this function carries out the following tasks, in the same order as they are listed:<itemizedlist>
<listitem><para>merging of duplicate points, using the function <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga1f215926ed8794db827e2993d2960870" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup()</ref></computeroutput>;</para>
</listitem><listitem><para>simplification of polygons to remove geometrically identical consecutive vertices;</para>
</listitem><listitem><para>splitting of &quot;pinched&quot; polygons, that is polygons in which a geometric position appears more than once. The splitting process results in multiple non-pinched polygons;</para>
</listitem><listitem><para>removal of invalid polygons, that is polygons with fewer than 2 vertices;</para>
</listitem><listitem><para>removal of duplicate polygons, using the function <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga93d14c26c259b5844dbd5a7753278e5f" kindref="member">CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup()</ref></computeroutput>;</para>
</listitem><listitem><para>removal of isolated points, using the function <computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1gaef5c13fc9dd4cae14c860351c479a45f" kindref="member">CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup()</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>Note that the point and polygon containers will be modified by the repairing operations, and thus the indexing of the polygons will also be changed.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> and <computeroutput><ref refid="classSwappable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Swappable</ref></computeroutput> and whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput><ref refid="classSequenceContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">SequenceContainer</ref></computeroutput>, <computeroutput><ref refid="classSwappable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Swappable</ref></computeroutput>, and <computeroutput><ref refid="classReversibleContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReversibleContainer</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of polygons. Each element in the vector describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested functors <computeroutput>Less_xyz_3</computeroutput> and <computeroutput>Equal_3</computeroutput> to respectivelycompare lexicographically two points and to check if two points are identical. For each functor <computeroutput>Foo</computeroutput>, a function <computeroutput>Foo foo_object()</computeroutput> must be provided. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>erase_all_duplicates</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Parameter to indicate, when multiple polygons are duplicates, whether all the duplicate polygons should be removed or if one (arbitrarily chosen) face should be kept. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>require_same_orientation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Parameter to indicate if polygon orientation should be taken into account when determining whether two polygons are duplicates, that is, whether e.g. the triangles <computeroutput>0,1,2</computeroutput> and <computeroutput>0,2,1</computeroutput> are duplicates. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" line="1166" column="6" bodyfile="CGAL/Polygon_mesh_processing/repair_polygon_soup.h" bodystart="1166" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_boundary_cycle</definition>
        <argsstring>(const typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor h, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>stitch_boundary_cycle</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_boundary_cycle</qualifiedname>
        <param>
          <type>const typename boost::graph_traits&lt; PolygonMesh &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>stitches together, whenever possible, two halfedges belonging to the boundary cycle described by the halfedge <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Two border halfedges <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> can be stitched if the points associated to the source and target vertices of <computeroutput>h1</computeroutput> are the same as those of the target and source vertices of <computeroutput>h2</computeroutput>, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>a border halfedge of the polygon mesh <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be stitched </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functors:<itemizedlist>
<listitem><para><computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points</para>
</listitem><listitem><para><computeroutput>Equal_3</computeroutput> to check whether two points are identical. For each functor <computeroutput>Foo</computeroutput>, a function <computeroutput>Foo foo_object()</computeroutput> must be provided. </para>
</listitem></itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">stitch_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" kindref="member">stitch_borders()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1166" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1166" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BorderHalfedgeRange</type>
          </param>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_boundary_cycles</definition>
        <argsstring>(const BorderHalfedgeRange &amp;boundary_cycle_representatives, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>stitch_boundary_cycles</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_boundary_cycles</qualifiedname>
        <param>
          <type>const BorderHalfedgeRange &amp;</type>
          <declname>boundary_cycle_representatives</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>stitches together, whenever possible, two halfedges belonging to the same boundary cycle. </para>
        </briefdescription>
        <detaileddescription>
<para>Two border halfedges <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> can be stitched if the points associated to the source and target vertices of <computeroutput>h1</computeroutput> are the same as those of the target and source vertices of <computeroutput>h2</computeroutput>, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BorderHalfedgeRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boundary_cycle_representatives</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of border halfedges, each describing a boundary cycle of the mesh <computeroutput>pmesh</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be modified by stitching </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functors:<itemizedlist>
<listitem><para><computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points</para>
</listitem><listitem><para><computeroutput>Equal_3</computeroutput> to check whether two points are identical. For each functor <computeroutput>Foo</computeroutput>, a function <computeroutput>Foo foo_object()</computeroutput> must be provided. </para>
</listitem></itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">stitch_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" kindref="member">stitch_borders()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1238" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1238" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga152989d1d1edabb9f68296d9395eb2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename HalfedgePairsRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_borders</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const HalfedgePairsRange &amp;hedge_pairs_to_stitch, const NamedParameters &amp;np=parameters::default_values(), std::enable_if_t&lt; boost::has_range_iterator&lt; HalfedgePairsRange &gt;::value &gt; *=0)</argsstring>
        <name>stitch_borders</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_borders</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const HalfedgePairsRange &amp;</type>
          <declname>hedge_pairs_to_stitch</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <param>
          <type>std::enable_if_t&lt; boost::has_range_iterator&lt; HalfedgePairsRange &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>stitches together border halfedges in a polygon mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The halfedges to be stitched are provided in <computeroutput>hedge_pairs_to_stitch</computeroutput>. For each pair <computeroutput>p</computeroutput> in this vector, <computeroutput>p.second</computeroutput> and its opposite will be removed from <computeroutput>pmesh</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HalfedgePairsRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>std::pair&lt;boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor, boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor&gt;</computeroutput>, model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be modified by stitching </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hedge_pairs_to_stitch</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>std::pair</computeroutput> of halfedges to be stitched together </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">stitch_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">stitch_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1306" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1306" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga740c417af0ef24a16faebb23727d089c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_borders</definition>
        <argsstring>(PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>stitch_borders</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_borders</qualifiedname>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Same as the other overload, but the pairs of halfedges to be stitched are automatically found amongst all border halfedges. </para>
        </briefdescription>
        <detaileddescription>
<para>Two border halfedges <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are set to be stitched if the points associated to the source and target vertices of <computeroutput>h1</computeroutput> are the same as those of the target and source vertices of <computeroutput>h2</computeroutput>, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BorderHalfedgeRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be modified by the stitching procedure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>apply_per_connected_component</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>specifies if the borders should only be stitched only within their own connected component. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">stitch_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">stitch_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1438" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1438" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="group__PMP__combinatorial__repair__grp_1ga562d3f935e55a6378d407183f9533dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BorderHalfedgeRange</type>
          </param>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Polygon_mesh_processing::stitch_borders</definition>
        <argsstring>(const BorderHalfedgeRange &amp;boundary_cycle_representatives, PolygonMesh &amp;pmesh, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>stitch_borders</name>
        <qualifiedname>CGAL::Polygon_mesh_processing::stitch_borders</qualifiedname>
        <param>
          <type>const BorderHalfedgeRange &amp;</type>
          <declname>boundary_cycle_representatives</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pmesh</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Same as the other overload, but the pairs of halfedges to be stitched are automatically found amongst halfedges in cycles described by <computeroutput>boundary_cycle_representatives</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Two border halfedges <computeroutput>h1</computeroutput> and <computeroutput>h2</computeroutput> are set to be stitched if the points associated to the source and target vertices of <computeroutput>h1</computeroutput> are the same as those of the target and source vertices of <computeroutput>h2</computeroutput>, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BorderHalfedgeRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> with value type <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::halfedge_descriptor</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boundary_cycle_representatives</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of border halfedges, each describing a boundary cycle whose halfedges will be considered for stitching </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmesh</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh to be modified by the stitching procedure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>apply_per_connected_component</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>specifies if the borders should only be stitched only within their own connected component. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>pmesh</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(pmesh) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>pmesh</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, pmesh)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>PolygonMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>The traits class must provide the nested type <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>, and the nested functors:<itemizedlist>
<listitem><para><computeroutput>Less_xyz_3</computeroutput> to compare lexicographically two points</para>
</listitem><listitem><para><computeroutput>Equal_3</computeroutput> to check whether two points are identical. For each functor <computeroutput>Foo</computeroutput>, a function <computeroutput>Foo foo_object()</computeroutput> must be provided. </para>
</listitem></itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The geometric traits class must be compatible with the vertex point type. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of pairs of halfedges that were stitched.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga31bf16dbfb6e46202ca4277df8e69908" kindref="member">stitch_boundary_cycle()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PMP__combinatorial__repair__grp_1ga621eebea618dc7d2356fa7fddb026905" kindref="member">stitch_boundary_cycles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polygon_mesh_processing/stitch_borders.h" line="1510" column="13" bodyfile="CGAL/Polygon_mesh_processing/stitch_borders.h" bodystart="1510" bodyend="1523"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions to repair polygon soups and polygon meshes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
