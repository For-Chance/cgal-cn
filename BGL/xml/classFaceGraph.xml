<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classFaceGraph" kind="class" language="C++" prot="public">
    <compoundname>FaceGraph</compoundname>
    <includes local="no">Concepts/FaceGraph.h</includes>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classFaceGraph_1acd5b93cff28a48c1b8a6ca867b9afba1" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
        <definition>static boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor FaceGraph::null_face</definition>
        <argsstring>()</argsstring>
        <name>null_face</name>
        <qualifiedname>FaceGraph::null_face</qualifiedname>
        <briefdescription>
<para>Returns a special <computeroutput>boost::graph_traits&lt;<ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref>&gt;::face_descriptor</computeroutput> object which does not refer to any face of graph object which type is <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/FaceGraph.h" line="32" column="52"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classFaceGraph_1aef532671abe11c841efe0ad3c66b4880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::face_descriptor</type>
        <definition>boost::graph_traits&lt; FaceGraph &gt;::face_descriptor face</definition>
        <argsstring>(boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor h, const FaceGraph &amp;g)</argsstring>
        <name>face</name>
        <qualifiedname>FaceGraph::face</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the face incident to halfedge <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/FaceGraph.h" line="40" column="1" declfile="Concepts/FaceGraph.h" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classFaceGraph_1af4503bc2e64405ec4595035463d77bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor halfedge</definition>
        <argsstring>(boost::graph_traits&lt; FaceGraph &gt;::face_descriptor f, const FaceGraph &amp;g)</argsstring>
        <name>halfedge</name>
        <qualifiedname>FaceGraph::halfedge</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the halfedge incident to face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/FaceGraph.h" line="47" column="1" declfile="Concepts/FaceGraph.h" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classFaceGraph_1ab766b65dc782eddcf59fffe16acda5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::degree_size_type</type>
        <definition>boost::graph_traits&lt; FaceGraph &gt;::degree_size_type degree</definition>
        <argsstring>(boost::graph_traits&lt; FaceGraph &gt;::face_descriptor f, const FaceGraph &amp;g)</argsstring>
        <name>degree</name>
        <qualifiedname>FaceGraph::degree</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::face_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the number of halfedges incident to face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/FaceGraph.h" line="54" column="1" declfile="Concepts/FaceGraph.h" declline="54" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput> refines the concept <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput>. It adds the requirements for a graph to explicitly maintain faces described by halfedges, to provide access from a face to an incident halfedge, and to provide access from a halfedge to its incident face. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para>A partial specialization must be provided for <computeroutput><ref refid="structCGAL_1_1graph__has__property" kindref="compound">CGAL::graph_has_property</ref></computeroutput> for each internal property map available. <variablelist>
<varlistentry><term>Associated Types</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no" class="paramname"><para>boost::graph_traits&lt;FaceGraph&gt;::face_descriptor</para>
</entry><entry thead="no"><para>A face descriptor corresponds to a unique face in an abstract graph instance. A face descriptor must be <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput>, and <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para>See <ref refid="group__PkgBGLTraits" kindref="compound">Boost Graph Traits Specializations </ref> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><ref refid="group__PkgBGLConcepts" kindref="compound">Graph Concepts </ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/FaceGraph.h" line="29" column="1" bodyfile="Concepts/FaceGraph.h" bodystart="29" bodyend="33"/>
    <listofallmembers>
      <member refid="classFaceGraph_1ab766b65dc782eddcf59fffe16acda5c0" prot="public" virt="non-virtual"><scope>FaceGraph</scope><name>degree</name></member>
      <member refid="classFaceGraph_1aef532671abe11c841efe0ad3c66b4880" prot="public" virt="non-virtual"><scope>FaceGraph</scope><name>face</name></member>
      <member refid="classFaceGraph_1af4503bc2e64405ec4595035463d77bf2" prot="public" virt="non-virtual"><scope>FaceGraph</scope><name>halfedge</name></member>
      <member refid="classFaceGraph_1acd5b93cff28a48c1b8a6ca867b9afba1" prot="private" virt="non-virtual"><scope>FaceGraph</scope><name>null_face</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
