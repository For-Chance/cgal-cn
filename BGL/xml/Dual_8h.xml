<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="Dual_8h" kind="file" language="C++">
    <compoundname>Dual.h</compoundname>
    <includes local="no">CGAL/disable_warnings.h</includes>
    <includes refid="properties_8h" local="no">CGAL/boost/graph/properties.h</includes>
    <includes local="no">boost/range/distance.hpp</includes>
    <includes refid="iterator_8h" local="no">CGAL/boost/graph/iterator.h</includes>
    <includes local="no">CGAL/enable_warnings.h</includes>
    <includedby refid="selection_8h" local="no">CGAL/boost/graph/selection.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>CGAL/boost/graph/Dual.h</label>
        <link refid="Dual_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>CGAL/disable_warnings.h</label>
      </node>
      <node id="4">
        <label>CGAL/enable_warnings.h</label>
      </node>
      <node id="3">
        <label>boost/range/distance.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classCGAL_1_1Dual" prot="public">CGAL::Dual</innerclass>
    <innerclass refid="classboost_1_1graph__traits_3_01CGAL_1_1Dual_3_01Primal_01_4_01_4" prot="public">boost::graph_traits&lt; CGAL::Dual&lt; Primal &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1graph__traits_3_01const_01CGAL_1_1Dual_3_01P_01_4_01_4" prot="public">boost::graph_traits&lt; const CGAL::Dual&lt; P &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1property__map_3_01CGAL_1_1Dual_3_01P_01_4_00_01halfedge__index__t_01_4" prot="public">boost::property_map&lt; CGAL::Dual&lt; P &gt;, halfedge_index_t &gt;</innerclass>
    <innerclass refid="structboost_1_1property__map_3_01CGAL_1_1Dual_3_01P_01_4_00_01edge__index__t_01_4" prot="public">boost::property_map&lt; CGAL::Dual&lt; P &gt;, edge_index_t &gt;</innerclass>
    <innerclass refid="structboost_1_1property__map_3_01CGAL_1_1Dual_3_01P_01_4_00_01boost_1_1vertex__index__t_01_4" prot="public">boost::property_map&lt; CGAL::Dual&lt; P &gt;, boost::vertex_index_t &gt;</innerclass>
    <innerclass refid="structboost_1_1property__map_3_01CGAL_1_1Dual_3_01P_01_4_00_01boost_1_1face__index__t_01_4" prot="public">boost::property_map&lt; CGAL::Dual&lt; P &gt;, boost::face_index_t &gt;</innerclass>
    <innernamespace refid="namespaceCGAL">CGAL</innernamespace>
    <innernamespace refid="namespaceboost">boost</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="Dual_8h_1abffb57cec144053cc37ac8a263c21cf1" prot="public" static="no">
        <name>CGAL_GET_OVERLOADS</name>
        <param><defname>Property</defname></param>
        <initializer>\
template &lt;typename P&gt; \
typename boost::property_map&lt;P, Property&gt;::type \
get(Property p, Dual&lt;P&gt;&amp; dual) \
{ \
  return get(p, dual.primal()); \
} \
\
template &lt;typename P&gt; \
typename boost::property_map&lt;P, Property&gt;::const_type \
get(Property p, const Dual&lt;P&gt;&amp; dual) \
{ \
  return get(p, dual.primal()); \
} \
\
template &lt;typename P, typename Key &gt; \
typename boost::property_map_value&lt;P, Property&gt;::type \
get(Property p, const Dual&lt;P&gt;&amp; dual, const Key&amp; k) \
{ \
  return get(p, dual.primal(), k); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Dual.h" line="189" column="9" bodyfile="CGAL/boost/graph/Dual.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/boost/graph/Dual.h"/>
  </compounddef>
</doxygen>
