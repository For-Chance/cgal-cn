<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="structCGAL_1_1Face__filtered__graph" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Face_filtered_graph</compoundname>
    <includes local="no">CGAL/boost/graph/Face_filtered_graph.h</includes>
    <innerclass refid="structCGAL_1_1Face__filtered__graph_1_1Is__simplex__valid" prot="public">CGAL::Face_filtered_graph::Is_simplex_valid</innerclass>
    <templateparamlist>
      <param>
        <type>typename Graph</type>
      </param>
      <param>
        <type>typename FIMap</type>
        <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
      </param>
      <param>
        <type>typename VIMap</type>
        <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
      </param>
      <param>
        <type>typename HIMap</type>
        <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a89a7b7790dd900f6438d551a6ae3c978" prot="public" static="no">
        <type>boost::graph_traits&lt; Graph &gt;</type>
        <definition>typedef boost::graph_traits&lt;Graph&gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::gt</definition>
        <argsstring></argsstring>
        <name>gt</name>
        <qualifiedname>CGAL::Face_filtered_graph::gt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="79" column="48" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a137cc0e8f6c8f4d7a916280085ea9947" prot="public" static="no">
        <type>boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
        <definition>typedef boost::graph_traits&lt;Graph&gt;::vertex_descriptor CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::vertex_descriptor</definition>
        <argsstring></argsstring>
        <name>vertex_descriptor</name>
        <qualifiedname>CGAL::Face_filtered_graph::vertex_descriptor</qualifiedname>
        <briefdescription>
<para>Vertex descriptor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="81" column="73" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a7bbe5ebea8b1792c366fdbea6efbd1b0" prot="public" static="no">
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>typedef boost::graph_traits&lt;Graph&gt;::halfedge_descriptor CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::halfedge_descriptor</definition>
        <argsstring></argsstring>
        <name>halfedge_descriptor</name>
        <qualifiedname>CGAL::Face_filtered_graph::halfedge_descriptor</qualifiedname>
        <briefdescription>
<para>Halfedge descriptor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="83" column="73" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a39d585ed86d262a090636cdd22ca1217" prot="public" static="no">
        <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
        <definition>typedef boost::graph_traits&lt;Graph&gt;::edge_descriptor CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::edge_descriptor</definition>
        <argsstring></argsstring>
        <name>edge_descriptor</name>
        <qualifiedname>CGAL::Face_filtered_graph::edge_descriptor</qualifiedname>
        <briefdescription>
<para>Edge descriptor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="85" column="73" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a205b4716fba186d69d6527df34110939" prot="public" static="no">
        <type>boost::graph_traits&lt; Graph &gt;::face_descriptor</type>
        <definition>typedef boost::graph_traits&lt;Graph&gt;::face_descriptor CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::face_descriptor</definition>
        <argsstring></argsstring>
        <name>face_descriptor</name>
        <qualifiedname>CGAL::Face_filtered_graph::face_descriptor</qualifiedname>
        <briefdescription>
<para>Face descriptor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="87" column="73" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a9f6a738f2a87c25f5c5606071a5fb1d0" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>CGAL::Face_filtered_graph::size_type</qualifiedname>
        <briefdescription>
<para>Size type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="92" column="28" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a2352ab0287b55e4d7dd301d3d0fe7cd3" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Default_1_1Get" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default::Get</ref>&lt; FIMap, typenameCGAL::GetInitializedFaceIndexMap&lt; Graph &gt;::const_type &gt;::type</type>
        <definition>typedef Default::Get&lt;FIMap,typenameCGAL::GetInitializedFaceIndexMap&lt;Graph&gt;::const_type&gt;::type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::FIM</definition>
        <argsstring></argsstring>
        <name>FIM</name>
        <qualifiedname>CGAL::Face_filtered_graph::FIM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="96" column="41" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1aea72c1346ce3de6f26ff3098b209aa75" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Default_1_1Get" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default::Get</ref>&lt; VIMap, typenameCGAL::GetInitializedVertexIndexMap&lt; Graph &gt;::const_type &gt;::type</type>
        <definition>typedef Default::Get&lt;VIMap,typenameCGAL::GetInitializedVertexIndexMap&lt;Graph&gt;::const_type&gt;::type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::VIM</definition>
        <argsstring></argsstring>
        <name>VIM</name>
        <qualifiedname>CGAL::Face_filtered_graph::VIM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="97" column="41" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a6ba8101a1d08ef46bfbc3f29caa111d0" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Default_1_1Get" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default::Get</ref>&lt; HIMap, typenameCGAL::GetInitializedHalfedgeIndexMap&lt; Graph &gt;::const_type &gt;::type</type>
        <definition>typedef Default::Get&lt;HIMap,typenameCGAL::GetInitializedHalfedgeIndexMap&lt;Graph&gt;::const_type&gt;::type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::HIM</definition>
        <argsstring></argsstring>
        <name>HIM</name>
        <qualifiedname>CGAL::Face_filtered_graph::HIM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="98" column="41" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a9a46538beb6358065fceea5f44498296" prot="public" static="no">
        <type>boost::property_traits&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">FIM</ref> &gt;::value_type</type>
        <definition>typedef boost::property_traits&lt;FIM&gt;::value_type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::face_index_type</definition>
        <argsstring></argsstring>
        <name>face_index_type</name>
        <qualifiedname>CGAL::Face_filtered_graph::face_index_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="100" column="56" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1ad027db68c044b53116df7caa5d190eae" prot="public" static="no">
        <type>boost::property_traits&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">VIM</ref> &gt;::value_type</type>
        <definition>typedef boost::property_traits&lt;VIM&gt;::value_type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::vertex_index_type</definition>
        <argsstring></argsstring>
        <name>vertex_index_type</name>
        <qualifiedname>CGAL::Face_filtered_graph::vertex_index_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="101" column="56" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a0dfd263d8bf6b07201d10e3d9c9f30cf" prot="public" static="no">
        <type>boost::property_traits&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">HIM</ref> &gt;::value_type</type>
        <definition>typedef boost::property_traits&lt;HIM&gt;::value_type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::halfedge_index_type</definition>
        <argsstring></argsstring>
        <name>halfedge_index_type</name>
        <qualifiedname>CGAL::Face_filtered_graph::halfedge_index_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="102" column="56" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structCGAL_1_1Face__filtered__graph_1a2237a4f4d9a5bf87cf3d69cfeabaf5dd" prot="public" static="no">
        <type><ref refid="structCGAL_1_1Face__filtered__graph" kindref="compound">Face_filtered_graph</ref>&lt; Graph, FIMap, VIMap, HIMap &gt;</type>
        <definition>typedef Face_filtered_graph&lt;Graph, FIMap, VIMap, HIMap&gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::Self</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <qualifiedname>CGAL::Face_filtered_graph::Self</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="104" column="31" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1afd229f9f93f2029566b1258e02cdb0fd" prot="private" static="no" mutable="no">
        <type>Graph &amp;</type>
        <definition>Graph&amp; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::_graph</definition>
        <argsstring></argsstring>
        <name>_graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::_graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="684" column="9" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1a7984a7bfc9d79c3f2c2b8bbe5ca7544f" prot="private" static="no" mutable="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">FIM</ref></type>
        <definition>FIM CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::fimap</definition>
        <argsstring></argsstring>
        <name>fimap</name>
        <qualifiedname>CGAL::Face_filtered_graph::fimap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="685" column="7" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1affa16566a3e82e01355458e1675e91b1" prot="private" static="no" mutable="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">VIM</ref></type>
        <definition>VIM CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::vimap</definition>
        <argsstring></argsstring>
        <name>vimap</name>
        <qualifiedname>CGAL::Face_filtered_graph::vimap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="686" column="7" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1a1b05c3a03e3a3a51ac4f4c2b17104317" prot="private" static="no" mutable="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">HIM</ref></type>
        <definition>HIM CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::himap</definition>
        <argsstring></argsstring>
        <name>himap</name>
        <qualifiedname>CGAL::Face_filtered_graph::himap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="687" column="7" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1a988db05a25c7ab7d3bae458ba3bb3dee" prot="private" static="no" mutable="no">
        <type>boost::dynamic_bitset</type>
        <definition>boost::dynamic_bitset CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::selected_faces</definition>
        <argsstring></argsstring>
        <name>selected_faces</name>
        <qualifiedname>CGAL::Face_filtered_graph::selected_faces</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="688" column="4" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1aa4106c90b563cab80d73b3a3cbb3d58d" prot="private" static="no" mutable="no">
        <type>boost::dynamic_bitset</type>
        <definition>boost::dynamic_bitset CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::selected_vertices</definition>
        <argsstring></argsstring>
        <name>selected_vertices</name>
        <qualifiedname>CGAL::Face_filtered_graph::selected_vertices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="689" column="4" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1a726b86fc35a0187c0b1a007bc8a81d9c" prot="private" static="no" mutable="no">
        <type>boost::dynamic_bitset</type>
        <definition>boost::dynamic_bitset CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::selected_halfedges</definition>
        <argsstring></argsstring>
        <name>selected_halfedges</name>
        <qualifiedname>CGAL::Face_filtered_graph::selected_halfedges</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="690" column="4" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1ab7cb1d5182ab43294a27abc1066ac7c4" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; face_index_type &gt;</type>
        <definition>std::vector&lt;face_index_type&gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::face_indices</definition>
        <argsstring></argsstring>
        <name>face_indices</name>
        <qualifiedname>CGAL::Face_filtered_graph::face_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="692" column="23" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1a2f101a4eb59def1c716689803cddac28" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; vertex_index_type &gt;</type>
        <definition>std::vector&lt;vertex_index_type&gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::vertex_indices</definition>
        <argsstring></argsstring>
        <name>vertex_indices</name>
        <qualifiedname>CGAL::Face_filtered_graph::vertex_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="693" column="23" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1a294f4367c6e3d49ed9b2deb970531914" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; halfedge_index_type &gt;</type>
        <definition>std::vector&lt;halfedge_index_type&gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::halfedge_indices</definition>
        <argsstring></argsstring>
        <name>halfedge_indices</name>
        <qualifiedname>CGAL::Face_filtered_graph::halfedge_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="694" column="23" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structCGAL_1_1Face__filtered__graph_1a82e0aa7c9cd0950a27f73e980184791b" prot="private" static="no" mutable="yes">
        <type>std::bitset&lt; 3 &gt;</type>
        <definition>std::bitset&lt;3&gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::is_imap_in_use</definition>
        <argsstring></argsstring>
        <name>is_imap_in_use</name>
        <qualifiedname>CGAL::Face_filtered_graph::is_imap_in_use</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="695" column="23" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a17421e034850157f1c586d25dc436ab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::Face_filtered_graph</definition>
        <argsstring>(const Graph &amp;graph, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>Face_filtered_graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::Face_filtered_graph</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>constructs an empty face filtered graph (no face is selected) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of named parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying graph.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of named parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>halfedge_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each halfedge of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_halfedges(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="151" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="151" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1af4251ab8021448778e03aa344c15f5e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FacePatchIDMap</type>
          </param>
          <param>
            <type>class FacePatchIDRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::Face_filtered_graph</definition>
        <argsstring>(const Graph &amp;graph, const FacePatchIDRange &amp;selected_face_patch_ids, FacePatchIDMap face_patch_id_map, const NamedParameters &amp;np)</argsstring>
        <name>Face_filtered_graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::Face_filtered_graph</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const FacePatchIDRange &amp;</type>
          <declname>selected_face_patch_ids</declname>
        </param>
        <param>
          <type>FacePatchIDMap</type>
          <declname>face_patch_id_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
<para>Constructor where the set of selected faces is specified as a range of patch ids. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FacePatchIDMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>face_descriptor</computeroutput> as key type and whose value type is a model of <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FacePatchIDRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>boost::property_traits&lt;FacePatchIDMap&gt;::value_type</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of named parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face_patch_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map that assigns a patch ID to each face </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selected_face_patch_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of the face patch identifiers to select </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>halfedge_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each halfedge of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_halfedges(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="211" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="211" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1ae0698f946620de10a02216ba32d07562" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FacePatchIDMap</type>
          </param>
          <param>
            <type>class FacePatchIDRange</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::Face_filtered_graph</definition>
        <argsstring>(const Graph &amp;graph, const FacePatchIDRange &amp;selected_face_patch_ids, FacePatchIDMap face_patch_id_map, std::enable_if_t&lt; boost::has_range_const_iterator&lt; FacePatchIDRange &gt;::value &gt; *=0)</argsstring>
        <name>Face_filtered_graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::Face_filtered_graph</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const FacePatchIDRange &amp;</type>
          <declname>selected_face_patch_ids</declname>
        </param>
        <param>
          <type>FacePatchIDMap</type>
          <declname>face_patch_id_map</declname>
        </param>
        <param>
          <type>std::enable_if_t&lt; boost::has_range_const_iterator&lt; FacePatchIDRange &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="230" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="230" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a2205d4aab1986b515e93515e3f5f7575" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FacePatchIDMap</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::Face_filtered_graph</definition>
        <argsstring>(const Graph &amp;graph, typename boost::property_traits&lt; FacePatchIDMap &gt;::value_type selected_face_patch_id, FacePatchIDMap face_patch_id_map, const NamedParameters &amp;np)</argsstring>
        <name>Face_filtered_graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::Face_filtered_graph</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename boost::property_traits&lt; FacePatchIDMap &gt;::value_type</type>
          <declname>selected_face_patch_id</declname>
        </param>
        <param>
          <type>FacePatchIDMap</type>
          <declname>face_patch_id_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
<para>Constructor where the set of selected faces is specified as a patch id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FacePatchIDMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>face_descriptor</computeroutput> as key type and whose value type is a model of <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of named parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face_patch_id_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map that assigns a patch ID to each face </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selected_face_patch_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the identifier of the face patch selected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>halfedge_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each halfedge of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_halfedges(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="292" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="292" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1aec19300c9010ef170fc629fb102e86a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FacePatchIDMap</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::Face_filtered_graph</definition>
        <argsstring>(const Graph &amp;graph, typename boost::property_traits&lt; FacePatchIDMap &gt;::value_type pid, FacePatchIDMap face_patch_id_map)</argsstring>
        <name>Face_filtered_graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::Face_filtered_graph</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename boost::property_traits&lt; FacePatchIDMap &gt;::value_type</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>FacePatchIDMap</type>
          <declname>face_patch_id_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="305" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="305" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1ad4059cafe683c7b8e829957c6d22f231" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FaceRange</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::Face_filtered_graph</definition>
        <argsstring>(const Graph &amp;graph, const FaceRange &amp;selected_faces, const NamedParameters &amp;np)</argsstring>
        <name>Face_filtered_graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::Face_filtered_graph</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>selected_faces</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
<para>Constructor where the set of selected faces is specified as a range of face descriptors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FaceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>face_descriptor</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of named parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph containing the wanted patch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selected_faces</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of selected faces </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>halfedge_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each halfedge of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_halfedges(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each face of <computeroutput>graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_faces(graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;Graph&gt;::face_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="362" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="362" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a45d844d27684269adea132ce2083e738" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FaceRange</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::Face_filtered_graph</definition>
        <argsstring>(const Graph &amp;graph, const FaceRange &amp;selected_faces)</argsstring>
        <name>Face_filtered_graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::Face_filtered_graph</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>selected_faces</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="374" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="374" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1aeef8ac3160210bd61937981c8dbe1f52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Graph &amp;</type>
        <definition>const Graph &amp; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::graph</definition>
        <argsstring>() const</argsstring>
        <name>graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::graph</qualifiedname>
        <briefdescription>
<para>returns a const reference to the underlying graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="385" column="15" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a0fabeb364eb0544ef90aa3c67be7c91f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Graph &amp;</type>
        <definition>Graph &amp; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::graph</definition>
        <argsstring>()</argsstring>
        <name>graph</name>
        <qualifiedname>CGAL::Face_filtered_graph::graph</qualifiedname>
        <briefdescription>
<para>returns a reference to the underlying graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="387" column="9" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="387" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1af323f4cef86aab4df169816c3e8ea698" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::initialize_face_indices</definition>
        <argsstring>() const</argsstring>
        <name>initialize_face_indices</name>
        <qualifiedname>CGAL::Face_filtered_graph::initialize_face_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="391" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="391" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a67face77dcd0273f88493b16194be832" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::initialize_vertex_indices</definition>
        <argsstring>() const</argsstring>
        <name>initialize_vertex_indices</name>
        <qualifiedname>CGAL::Face_filtered_graph::initialize_vertex_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="402" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="402" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a5cfad52bf5ffbd279f5a7d41cac2a72f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::initialize_halfedge_indices</definition>
        <argsstring>() const</argsstring>
        <name>initialize_halfedge_indices</name>
        <qualifiedname>CGAL::Face_filtered_graph::initialize_halfedge_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="413" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="413" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1ad5dbeac65cb79ba13fcf2646b3aabf8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::reset_indices</definition>
        <argsstring>()</argsstring>
        <name>reset_indices</name>
        <qualifiedname>CGAL::Face_filtered_graph::reset_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="424" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="424" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a79f5692c21434777fa2c55bba476b509" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FacePatchIDMap</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::set_selected_faces</definition>
        <argsstring>(typename boost::property_traits&lt; FacePatchIDMap &gt;::value_type face_patch_id, FacePatchIDMap face_patch_id_map)</argsstring>
        <name>set_selected_faces</name>
        <qualifiedname>CGAL::Face_filtered_graph::set_selected_faces</qualifiedname>
        <param>
          <type>typename boost::property_traits&lt; FacePatchIDMap &gt;::value_type</type>
          <declname>face_patch_id</declname>
        </param>
        <param>
          <type>FacePatchIDMap</type>
          <declname>face_patch_id_map</declname>
        </param>
        <briefdescription>
<para>changes the set of selected faces using a patch id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="440" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="440" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a5dfc3c8ea8857d83579e92184c63ac80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FacePatchIDRange</type>
          </param>
          <param>
            <type>class FacePatchIDMap</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::set_selected_faces</definition>
        <argsstring>(const FacePatchIDRange &amp;selected_face_patch_ids, FacePatchIDMap face_patch_id_map)</argsstring>
        <name>set_selected_faces</name>
        <qualifiedname>CGAL::Face_filtered_graph::set_selected_faces</qualifiedname>
        <param>
          <type>const FacePatchIDRange &amp;</type>
          <declname>selected_face_patch_ids</declname>
        </param>
        <param>
          <type>FacePatchIDMap</type>
          <declname>face_patch_id_map</declname>
        </param>
        <briefdescription>
<para>changes the set of selected faces using a range of patch ids </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="469" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="469" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a3a17351778505a646a75e150e5df47fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FaceRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::set_selected_faces</definition>
        <argsstring>(const FaceRange &amp;selection)</argsstring>
        <name>set_selected_faces</name>
        <qualifiedname>CGAL::Face_filtered_graph::set_selected_faces</qualifiedname>
        <param>
          <type>const FaceRange &amp;</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
<para>changes the set of selected faces using a range of face descriptors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="509" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="509" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a9d125ec4175a84ef8b9765799f66ff37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::is_in_cc</definition>
        <argsstring>(face_descriptor f) const</argsstring>
        <name>is_in_cc</name>
        <qualifiedname>CGAL::Face_filtered_graph::is_in_cc</qualifiedname>
        <param>
          <type><ref refid="structCGAL_1_1Face__filtered__graph_1a205b4716fba186d69d6527df34110939" kindref="member">face_descriptor</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="551" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="551" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1abf16d26aa85ddf32180784888aee412a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::is_in_cc</definition>
        <argsstring>(vertex_descriptor v) const</argsstring>
        <name>is_in_cc</name>
        <qualifiedname>CGAL::Face_filtered_graph::is_in_cc</qualifiedname>
        <param>
          <type><ref refid="structCGAL_1_1Face__filtered__graph_1a137cc0e8f6c8f4d7a916280085ea9947" kindref="member">vertex_descriptor</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="556" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="556" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a96071ae948976e8feb360da71decb6e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::is_in_cc</definition>
        <argsstring>(halfedge_descriptor h) const</argsstring>
        <name>is_in_cc</name>
        <qualifiedname>CGAL::Face_filtered_graph::is_in_cc</qualifiedname>
        <param>
          <type><ref refid="structCGAL_1_1Face__filtered__graph_1a7bbe5ebea8b1792c366fdbea6efbd1b0" kindref="member">halfedge_descriptor</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="561" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="561" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1aa558558d8d47e5de37c2b9c37b49563b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::is_in_cc</definition>
        <argsstring>(edge_descriptor e) const</argsstring>
        <name>is_in_cc</name>
        <qualifiedname>CGAL::Face_filtered_graph::is_in_cc</qualifiedname>
        <param>
          <type><ref refid="structCGAL_1_1Face__filtered__graph_1a39d585ed86d262a090636cdd22ca1217" kindref="member">edge_descriptor</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="566" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="566" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1ac82d8efddf90cb302e16f3dfa6ace359" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Face__filtered__graph_1a9f6a738f2a87c25f5c5606071a5fb1d0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::number_of_faces</definition>
        <argsstring>() const</argsstring>
        <name>number_of_faces</name>
        <qualifiedname>CGAL::Face_filtered_graph::number_of_faces</qualifiedname>
        <briefdescription>
<para>returns the number of selected faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="572" column="13" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a170f192e48bcdebdffeda0513f2410b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Face__filtered__graph_1a9f6a738f2a87c25f5c5606071a5fb1d0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <qualifiedname>CGAL::Face_filtered_graph::number_of_vertices</qualifiedname>
        <briefdescription>
<para>returns the number of selected vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="578" column="13" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="578" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a8adaca786ab8cb5bbdbe59c2e645d792" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Face__filtered__graph_1a9f6a738f2a87c25f5c5606071a5fb1d0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::number_of_halfedges</definition>
        <argsstring>() const</argsstring>
        <name>number_of_halfedges</name>
        <qualifiedname>CGAL::Face_filtered_graph::number_of_halfedges</qualifiedname>
        <briefdescription>
<para>returns the number of selected halfedges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="584" column="13" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a32ae6baa23be34aa4a1ecb1caf239918" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Compose__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">Compose_property_map</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">FIM</ref>, typename <ref refid="structCGAL_1_1Pointer__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">Pointer_property_map</ref>&lt; typename boost::property_traits&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">FIM</ref> &gt;::value_type &gt;::type &gt;</type>
        <definition>Compose_property_map&lt; FIM, typename Pointer_property_map&lt; typename boost::property_traits&lt; FIM &gt;::value_type &gt;::type &gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::get_face_index_map</definition>
        <argsstring>() const</argsstring>
        <name>get_face_index_map</name>
        <qualifiedname>CGAL::Face_filtered_graph::get_face_index_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="590" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="590" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1acfc75e9e830cfcc29d586211f63794db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Compose__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">Compose_property_map</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">VIM</ref>, typename <ref refid="structCGAL_1_1Pointer__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">Pointer_property_map</ref>&lt; typename boost::property_traits&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">VIM</ref> &gt;::value_type &gt;::type &gt;</type>
        <definition>Compose_property_map&lt; VIM, typename Pointer_property_map&lt; typename boost::property_traits&lt; VIM &gt;::value_type &gt;::type &gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::get_vertex_index_map</definition>
        <argsstring>() const</argsstring>
        <name>get_vertex_index_map</name>
        <qualifiedname>CGAL::Face_filtered_graph::get_vertex_index_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="599" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="599" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1a3fe385ee7fa2e29032aa77571fdf1f77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structCGAL_1_1Compose__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">Compose_property_map</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">HIM</ref>, typename <ref refid="structCGAL_1_1Pointer__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">Pointer_property_map</ref>&lt; typename boost::property_traits&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">HIM</ref> &gt;::value_type &gt;::type &gt;</type>
        <definition>Compose_property_map&lt; HIM, typename Pointer_property_map&lt; typename boost::property_traits&lt; HIM &gt;::value_type &gt;::type &gt; CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::get_halfedge_index_map</definition>
        <argsstring>() const</argsstring>
        <name>get_halfedge_index_map</name>
        <qualifiedname>CGAL::Face_filtered_graph::get_halfedge_index_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="608" column="3" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="608" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1ae11ebf8f8253a1ccfe3783fd45cd7380" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::is_selection_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_selection_valid</name>
        <qualifiedname>CGAL::Face_filtered_graph::is_selection_valid</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if around any vertex of a selected face there is at most a single umbrella </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="617" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="617" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Face__filtered__graph_1aa428541ebbdd35f9a6e9a3ffd60178df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Face_filtered_graph&lt; Graph, FIMap, VIMap, HIMap &gt;::invert_selection</definition>
        <argsstring>()</argsstring>
        <name>invert_selection</name>
        <qualifiedname>CGAL::Face_filtered_graph::invert_selection</qualifiedname>
        <briefdescription>
<para>inverts the selected status of faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/Face_filtered_graph.h" line="663" column="8" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="663" bodyend="681"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="structCGAL_1_1Face__filtered__graph" kindref="compound">Face_filtered_graph</ref></computeroutput> is an adaptor that creates a filtered view of a graph by restricting it to a subset of faces. </para>
    </briefdescription>
    <detaileddescription>
<para>Contrary to <ulink url="https://www.boost.org/doc/libs/release/libs/graph/doc/filtered_graph.html"><computeroutput>boost::filtered_graph</computeroutput></ulink>, this class only requires a way to access the selected faces and will automatically select the edges/halfedges and vertices present in the adapted graph. A vertex is selected if it is incident to at least one selected face. An edge is selected if it is incident to at least a selected face. A halfedge is selected if its edge is selected.</para>
<para>Since this class is a model of the <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput> concept, there is a restriction on the set of selected faces: the adapted graph must define a manifold mesh. In order to check that this condition is verified, you can use the function <computeroutput><ref refid="structCGAL_1_1Face__filtered__graph_1ae11ebf8f8253a1ccfe3783fd45cd7380" kindref="member">is_selection_valid()</ref></computeroutput>.</para>
<para>There are two different ways to initialize this class: you can directly provide a set of selected faces, or provide a set of patch identifiers as well as a map between faces and patch identifiers. The latter option is convenient if you want to access some connected components of a graph after having called <computeroutput><ref refid="group__PMP__keep__connected__components__grp_1ga239704e9a2752ed67d361be55acf3bf9" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag">CGAL::Polygon_mesh_processing::connected_components()</ref></computeroutput>, or if you want to select only faces of a given color, for example.</para>
<para>The documented interface of this class is limited on purpose and free functions of the concept this class is a model of must be used to manipulate it.</para>
<para>A BGL-like named parameter mechanism is used in the constructors of this class. Default values are available but if you need to set them, you can pass for <computeroutput>np</computeroutput> <computeroutput>CGAL::parameters::face_index_map(fim).halfedge_index_map(him).vertex_index_map(vim)</computeroutput> where <computeroutput>fim</computeroutput>, <computeroutput>him</computeroutput>, and <computeroutput>vim</computeroutput> are the respective index maps. The order of the arguments is not important and any of them can be missing if the default is fine.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of a <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput>, <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput>, and <ulink url="http://www.boost.org/libs/graph/doc/VertexListGraph.html"><computeroutput>VertexListGraph</computeroutput></ulink>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FIMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>graph_traits&lt;Graph&gt;::face_descriptor</computeroutput> as key and <computeroutput>graph_traits&lt;Graph&gt;::faces_size_type</computeroutput> as value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VIMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>graph_traits&lt;Graph&gt;::vertex_descriptor</computeroutput> as key and <computeroutput>graph_traits&lt;Graph&gt;::vertices_size_type</computeroutput> as value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HIMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>graph_traits&lt;Graph&gt;::halfedge_descriptor</computeroutput> as key and <computeroutput>graph_traits&lt;Graph&gt;::halfedges_size_type</computeroutput> as value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput></computeroutput> <ulink url="http://www.boost.org/libs/graph/doc/VertexListGraph.html"><computeroutput>VertexListGraph</computeroutput></ulink></para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="CGAL/boost/graph/Face_filtered_graph.h" line="77" column="1" bodyfile="CGAL/boost/graph/Face_filtered_graph.h" bodystart="78" bodyend="696"/>
    <listofallmembers>
      <member refid="structCGAL_1_1Face__filtered__graph_1afd229f9f93f2029566b1258e02cdb0fd" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>_graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a39d585ed86d262a090636cdd22ca1217" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>edge_descriptor</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a205b4716fba186d69d6527df34110939" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>face_descriptor</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a17421e034850157f1c586d25dc436ab8" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>Face_filtered_graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1af4251ab8021448778e03aa344c15f5e3" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>Face_filtered_graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1ae0698f946620de10a02216ba32d07562" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>Face_filtered_graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a2205d4aab1986b515e93515e3f5f7575" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>Face_filtered_graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1aec19300c9010ef170fc629fb102e86a7" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>Face_filtered_graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1ad4059cafe683c7b8e829957c6d22f231" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>Face_filtered_graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a45d844d27684269adea132ce2083e738" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>Face_filtered_graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a9a46538beb6358065fceea5f44498296" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>face_index_type</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1ab7cb1d5182ab43294a27abc1066ac7c4" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>face_indices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a2352ab0287b55e4d7dd301d3d0fe7cd3" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>FIM</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a7984a7bfc9d79c3f2c2b8bbe5ca7544f" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>fimap</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a32ae6baa23be34aa4a1ecb1caf239918" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>get_face_index_map</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a3fe385ee7fa2e29032aa77571fdf1f77" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>get_halfedge_index_map</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1acfc75e9e830cfcc29d586211f63794db" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>get_vertex_index_map</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1aeef8ac3160210bd61937981c8dbe1f52" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a0fabeb364eb0544ef90aa3c67be7c91f" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>graph</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a89a7b7790dd900f6438d551a6ae3c978" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>gt</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a7bbe5ebea8b1792c366fdbea6efbd1b0" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>halfedge_descriptor</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a0dfd263d8bf6b07201d10e3d9c9f30cf" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>halfedge_index_type</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a294f4367c6e3d49ed9b2deb970531914" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>halfedge_indices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a6ba8101a1d08ef46bfbc3f29caa111d0" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>HIM</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a1b05c3a03e3a3a51ac4f4c2b17104317" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>himap</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1af323f4cef86aab4df169816c3e8ea698" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>initialize_face_indices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a5cfad52bf5ffbd279f5a7d41cac2a72f" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>initialize_halfedge_indices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a67face77dcd0273f88493b16194be832" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>initialize_vertex_indices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1aa428541ebbdd35f9a6e9a3ffd60178df" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>invert_selection</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a82e0aa7c9cd0950a27f73e980184791b" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>is_imap_in_use</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a9d125ec4175a84ef8b9765799f66ff37" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>is_in_cc</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1abf16d26aa85ddf32180784888aee412a" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>is_in_cc</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a96071ae948976e8feb360da71decb6e3" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>is_in_cc</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1aa558558d8d47e5de37c2b9c37b49563b" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>is_in_cc</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1ae11ebf8f8253a1ccfe3783fd45cd7380" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>is_selection_valid</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1ac82d8efddf90cb302e16f3dfa6ace359" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>number_of_faces</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a8adaca786ab8cb5bbdbe59c2e645d792" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>number_of_halfedges</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a170f192e48bcdebdffeda0513f2410b1" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>number_of_vertices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1ad5dbeac65cb79ba13fcf2646b3aabf8a" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>reset_indices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a988db05a25c7ab7d3bae458ba3bb3dee" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>selected_faces</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a726b86fc35a0187c0b1a007bc8a81d9c" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>selected_halfedges</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1aa4106c90b563cab80d73b3a3cbb3d58d" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>selected_vertices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a2237a4f4d9a5bf87cf3d69cfeabaf5dd" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>Self</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a79f5692c21434777fa2c55bba476b509" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>set_selected_faces</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a5dfc3c8ea8857d83579e92184c63ac80" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>set_selected_faces</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a3a17351778505a646a75e150e5df47fb" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>set_selected_faces</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a9f6a738f2a87c25f5c5606071a5fb1d0" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>size_type</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a137cc0e8f6c8f4d7a916280085ea9947" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>vertex_descriptor</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1ad027db68c044b53116df7caa5d190eae" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>vertex_index_type</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1a2f101a4eb59def1c716689803cddac28" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>vertex_indices</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1aea72c1346ce3de6f26ff3098b209aa75" prot="public" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>VIM</name></member>
      <member refid="structCGAL_1_1Face__filtered__graph_1affa16566a3e82e01355458e1675e91b1" prot="private" virt="non-virtual"><scope>CGAL::Face_filtered_graph</scope><name>vimap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
