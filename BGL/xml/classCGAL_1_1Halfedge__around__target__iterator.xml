<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Halfedge__around__target__iterator" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Halfedge_around_target_iterator</compoundname>
    <includes local="no">CGAL/boost/graph/iterator.h</includes>
    <templateparamlist>
      <param>
        <type>typename Graph</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1Halfedge__around__target__iterator_1a6cf914495a084bea1a773f1e2feea00b" prot="private" static="no">
        <type><ref refid="classCGAL_1_1Halfedge__around__target__iterator" kindref="compound">Halfedge_around_target_iterator</ref></type>
        <definition>typedef Halfedge_around_target_iterator CGAL::Halfedge_around_target_iterator&lt; Graph &gt;::Self</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <qualifiedname>CGAL::Halfedge_around_target_iterator::Self</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="277" column="43" bodyfile="CGAL/boost/graph/iterator.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Halfedge__around__target__iterator_1a93663fe3bcd9c0ae8c0f64f60760b477" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Halfedge_around_target_iterator&lt; Graph &gt;::Halfedge_around_target_iterator</definition>
        <argsstring>()</argsstring>
        <name>Halfedge_around_target_iterator</name>
        <qualifiedname>CGAL::Halfedge_around_target_iterator::Halfedge_around_target_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="296" column="3" bodyfile="CGAL/boost/graph/iterator.h" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Halfedge__around__target__iterator_1a6b5acc7146bed84e84cdc97822b84cec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Halfedge_around_target_iterator&lt; Graph &gt;::Halfedge_around_target_iterator</definition>
        <argsstring>(halfedge_descriptor hd, const Graph &amp;g, int n=0)</argsstring>
        <name>Halfedge_around_target_iterator</name>
        <qualifiedname>CGAL::Halfedge_around_target_iterator::Halfedge_around_target_iterator</qualifiedname>
        <param>
          <type>halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/iterator.h" line="300" column="3" bodyfile="CGAL/boost/graph/iterator.h" bodystart="300" bodyend="302"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A bidirectional iterator with value type <computeroutput>boost::graph_traits&lt;Graph&gt;::halfedge_descriptor</computeroutput> over all halfedges having the same vertex as target. </para>
    </briefdescription>
    <detaileddescription>
<para>Let <computeroutput>h</computeroutput> be a halfedge of graph <computeroutput>g</computeroutput>. For a <computeroutput><ref refid="classCGAL_1_1Halfedge__around__target__iterator" kindref="compound">Halfedge_around_target_iterator</ref></computeroutput> <computeroutput>havi</computeroutput> with <computeroutput>h = *havi;</computeroutput> the following holds: Either <computeroutput>++havi</computeroutput> is the past the end iterator, or <computeroutput>opposite(next(h,g),g) == *++havi</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> <variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classBidirectionalIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BidirectionalIterator</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="CGAL/boost/graph/iterator.h" line="276" column="1" bodyfile="CGAL/boost/graph/iterator.h" bodystart="276" bodyend="353"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Halfedge__around__target__iterator_1a93663fe3bcd9c0ae8c0f64f60760b477" prot="public" virt="non-virtual"><scope>CGAL::Halfedge_around_target_iterator</scope><name>Halfedge_around_target_iterator</name></member>
      <member refid="classCGAL_1_1Halfedge__around__target__iterator_1a6b5acc7146bed84e84cdc97822b84cec" prot="public" virt="non-virtual"><scope>CGAL::Halfedge_around_target_iterator</scope><name>Halfedge_around_target_iterator</name></member>
      <member refid="classCGAL_1_1Halfedge__around__target__iterator_1a6cf914495a084bea1a773f1e2feea00b" prot="private" virt="non-virtual"><scope>CGAL::Halfedge_around_target_iterator</scope><name>Self</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
