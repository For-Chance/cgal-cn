<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgBGLHelperFct" kind="group">
    <compoundname>PkgBGLHelperFct</compoundname>
    <title>Helper Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gad93e429ad24efeaddeb836c437e719ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_border</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_border</name>
        <qualifiedname>CGAL::is_border</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the halfedge <computeroutput>hd</computeroutput> is on a border. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="33" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga63695419c5ce7f68949ff2fb4f42d733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_border_edge</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_border_edge</name>
        <qualifiedname>CGAL::is_border_edge</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the halfedge <computeroutput>hd</computeroutput> or the opposite halfedge is on a border. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="43" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga2888ba1a3d27fda8f16d03e9ab4738df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_border</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::edge_descriptor ed, const FaceGraph &amp;g)</argsstring>
        <name>is_border</name>
        <qualifiedname>CGAL::is_border</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::edge_descriptor</type>
          <declname>ed</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the edge <computeroutput>e</computeroutput> is on a border. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="53" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga66ab82934ac7d8286bbe7e532a03e734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor &gt;</type>
        <definition>std::optional&lt; typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor &gt; CGAL::is_border</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::vertex_descriptor vd, const FaceGraph &amp;g)</argsstring>
        <name>is_border</name>
        <qualifiedname>CGAL::is_border</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns a halfedge which is on a border and whose target vertex is <computeroutput>vd</computeroutput>, if such a halfedge exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="64" column="1" bodyfile="CGAL/boost/graph/helpers.h" bodystart="64" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga23e1d67dfacb0c3b659da32854f9026b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_valid_halfedge_graph</definition>
        <argsstring>(const Graph &amp;g, bool verb=false)</argsstring>
        <name>is_valid_halfedge_graph</name>
        <qualifiedname>CGAL::is_valid_halfedge_graph</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verb</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>checks the integrity of the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The graph <computeroutput>g</computeroutput> is valid if it follows the rules of the <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput> concept and all of its associations are reciprocal (for example, <computeroutput>prev(next(h, g), g)</computeroutput> must be <computeroutput>h</computeroutput>, and <computeroutput>next(prev(h, g), g)</computeroutput> must be <computeroutput>h</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, the details of the check will be written in the standard output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>g</computeroutput> is valid, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="324" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="324" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gacac247cab38c34fc569ca8679b5939e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_valid_face_graph</definition>
        <argsstring>(const FaceGraph &amp;g, bool verb=false)</argsstring>
        <name>is_valid_face_graph</name>
        <qualifiedname>CGAL::is_valid_face_graph</qualifiedname>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verb</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>checks the integrity of the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The graph <computeroutput>g</computeroutput> is a valid face graph if it is a valid halfedge graph, and if it follows the rules of the <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> concept and all of its associations are reciprocal (for example, <computeroutput>face(halfedge(f,g),g)</computeroutput> must be <computeroutput>f</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, the details of the check will be written in the standard output</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>g</computeroutput> is valid, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgBGLHelperFct_1ga23e1d67dfacb0c3b659da32854f9026b" kindref="member">is_valid_halfedge_graph()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="438" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="438" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gafa3bc673513c8750321bf062afd5e6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Mesh</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_valid_polygon_mesh</definition>
        <argsstring>(const Mesh &amp;g, bool verb=false)</argsstring>
        <name>is_valid_polygon_mesh</name>
        <qualifiedname>CGAL::is_valid_polygon_mesh</qualifiedname>
        <param>
          <type>const Mesh &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verb</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>checks the integrity of the mesh <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The mesh <computeroutput>g</computeroutput> is a valid polygon mesh if it is a valid face graph and if it follows the rules defined in <ref refid="index_1PMPDef" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag">PolygonMesh</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>Mesh</computeroutput> to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, the details of the check will be written in the standard output</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> and <computeroutput><ref refid="classHalfedgeListGraph" kindref="compound">HalfedgeListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>g</computeroutput> is valid, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgBGLHelperFct_1gacac247cab38c34fc569ca8679b5939e9" kindref="member">is_valid_face_graph()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgBGLHelperFct_1ga23e1d67dfacb0c3b659da32854f9026b" kindref="member">is_valid_halfedge_graph()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="530" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="530" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gae04c8044cf1eee6a84baa5b79ab99fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_closed</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_closed</name>
        <qualifiedname>CGAL::is_closed</qualifiedname>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if there are no border edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="571" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="571" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gadcd0f7717f833115030b951974837b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_bivalent</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_bivalent</name>
        <qualifiedname>CGAL::is_bivalent</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the target of <computeroutput>hd</computeroutput> has exactly two incident edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="587" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="587" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga7216689879e9ee4d0143054f2bbaf09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_bivalent_mesh</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_bivalent_mesh</name>
        <qualifiedname>CGAL::is_bivalent_mesh</qualifiedname>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all vertices have exactly two incident edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="599" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="599" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga6c1acedeffc27f41b2959b517f843ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_trivalent</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_trivalent</name>
        <qualifiedname>CGAL::is_trivalent</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if the target of <computeroutput>hd</computeroutput> has exactly three incident edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="618" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="618" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga1472e0db19a5232f6ce14287c30eb521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_trivalent_mesh</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_trivalent_mesh</name>
        <qualifiedname>CGAL::is_trivalent_mesh</qualifiedname>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all vertices have exactly three incident edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="631" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="631" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga0aeb3a6e6504032a485af3390dcec998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_isolated_triangle</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_isolated_triangle</name>
        <qualifiedname>CGAL::is_isolated_triangle</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>hd</computeroutput> is a triangle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>g</computeroutput> must be valid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="651" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="651" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gaa552f609541c09f6d38ce92c19cd60c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_triangle</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_triangle</name>
        <qualifiedname>CGAL::is_triangle</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the face denoted by <computeroutput>hd</computeroutput> is a triangle, that is it has three incident halfedges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="672" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="672" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga11883d231eec1b58f37efe4acedd9588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_triangle_mesh</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_triangle_mesh</name>
        <qualifiedname>CGAL::is_triangle_mesh</qualifiedname>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all faces are triangles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="685" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="685" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga36ed1d044899aaeb9dc0e745b5a3d2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_isolated_quad</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_isolated_quad</name>
        <qualifiedname>CGAL::is_isolated_quad</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>hd</computeroutput> is a quadrilateral. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="701" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="701" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gaefeddba3015a9723bfcacb904709bad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_quad</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_quad</name>
        <qualifiedname>CGAL::is_quad</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the face denoted by <computeroutput>hd</computeroutput> is a quad, that is it has four incident halfedges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="723" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="723" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga092f99b04e99633136d6534e7bb76b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_quad_mesh</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_quad_mesh</name>
        <qualifiedname>CGAL::is_quad_mesh</qualifiedname>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if all faces are quadrilaterals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="736" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="736" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gab737aaa204a6bdb8d18b00403f9d35d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_tetrahedron</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_tetrahedron</name>
        <qualifiedname>CGAL::is_tetrahedron</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>hd</computeroutput> is a tetrahedron. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="753" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="753" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga6c6e5a51ae08d56082eb4b0667d673d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_hexahedron</definition>
        <argsstring>(typename boost::graph_traits&lt; FaceGraph &gt;::halfedge_descriptor hd, const FaceGraph &amp;g)</argsstring>
        <name>is_hexahedron</name>
        <qualifiedname>CGAL::is_hexahedron</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>hd</declname>
        </param>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> iff the connected component denoted by <computeroutput>hd</computeroutput> is a hexahedron. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="799" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="799" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gac7e199820c95ed1fc6ab536750749358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::remove_all_elements</definition>
        <argsstring>(FaceGraph &amp;g)</argsstring>
        <name>remove_all_elements</name>
        <qualifiedname>CGAL::remove_all_elements</qualifiedname>
        <param>
          <type><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>removes all vertices, faces and halfedges from a graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="classMutableHalfedgeGraph" kindref="compound"><computeroutput>remove_vertex()</computeroutput></ref>, <ref refid="classMutableHalfedgeGraph" kindref="compound"><computeroutput>remove_edge()</computeroutput></ref>, and <ref refid="classMutableFaceGraph" kindref="compound"><computeroutput>remove_face()</computeroutput></ref>, for each vertex, edge, and face.</para>
<para>Note that some graphs have a specialized version of this function to improve complexity.</para>
<para><simplesect kind="warning"><para>This function does not perform anything more than what is advertised above. It is up to the user to e.g. clean garbage or remove internal property maps (if relevant, and desired).</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classMutableHalfedgeGraph" kindref="compound">MutableHalfedgeGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph whose elements will be removed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgBGLHelperFct_1ga4d3b9bb446f55fd37206eeba9d582296" kindref="member">CGAL::clear()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="966" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="966" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga4d3b9bb446f55fd37206eeba9d582296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::clear</definition>
        <argsstring>(FaceGraph &amp;g)</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::clear</qualifiedname>
        <param>
          <type><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>removes all vertices, faces and halfedges from a graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="classMutableHalfedgeGraph" kindref="compound"><computeroutput>remove_vertex()</computeroutput></ref>, <ref refid="classMutableHalfedgeGraph" kindref="compound"><computeroutput>remove_edge()</computeroutput></ref>, and <ref refid="classMutableFaceGraph" kindref="compound"><computeroutput>remove_face()</computeroutput></ref>, for each vertex, edge, and face.</para>
<para>If the graph has a member function <computeroutput><ref refid="group__PkgBGLHelperFct_1ga4d3b9bb446f55fd37206eeba9d582296" kindref="member">clear()</ref></computeroutput>, it will be called instead.</para>
<para><simplesect kind="warning"><para>If it exists, the <computeroutput><ref refid="group__PkgBGLHelperFct_1ga4d3b9bb446f55fd37206eeba9d582296" kindref="member">clear()</ref></computeroutput> function of a graph might do more than simply remove elements. For example, <computeroutput><ref refid="classCGAL_1_1Surface__mesh_1a247d4ad3e6b106ae22e5306203812642" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh::clear()</ref></computeroutput> collects garbage and removes <emphasis>all</emphasis> property maps added by a call to <computeroutput><ref refid="classCGAL_1_1Surface__mesh_1aaff08db9680674e0a16803b77721a356" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh::add_property_map()</ref></computeroutput> for all simplex types.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classMutableHalfedgeGraph" kindref="compound">MutableHalfedgeGraph</ref></computeroutput> and <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph to clear</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgBGLHelperFct_1gac7e199820c95ed1fc6ab536750749358" kindref="member">CGAL::remove_all_elements()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1022" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1022" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gab6e6f18e6de73b9f85e38d0b56145172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_empty</definition>
        <argsstring>(const FaceGraph &amp;g)</argsstring>
        <name>is_empty</name>
        <qualifiedname>CGAL::is_empty</qualifiedname>
        <param>
          <type>const <ref refid="classFaceGraph" kindref="compound">FaceGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>checks whether the graph is empty, by checking that it does not contain any vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model of <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph to test </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1042" column="6" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1042" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1gab5c1a0409ff3646eafff7876c22a5063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::vertex_index_in_face</definition>
        <argsstring>(const typename boost::graph_traits&lt; Graph &gt;::vertex_descriptor vd, const typename boost::graph_traits&lt; Graph &gt;::face_descriptor fd, const Graph &amp;g)</argsstring>
        <name>vertex_index_in_face</name>
        <qualifiedname>CGAL::vertex_index_in_face</qualifiedname>
        <param>
          <type>const typename boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
          <declname>vd</declname>
        </param>
        <param>
          <type>const typename boost::graph_traits&lt; Graph &gt;::face_descriptor</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the number of calls to <computeroutput>next()</computeroutput> one has to apply to the halfedge <computeroutput>hd</computeroutput> for <computeroutput>source(hd, mesh) == vd</computeroutput> to be true, starting from <computeroutput>hd = halfedge(fd, tm)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vd</parametername>
</parameternamelist>
<parameterdescription>
<para>a vertex of <computeroutput>g</computeroutput> whose index is sought </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>a face of <computeroutput>g</computeroutput> in which the index of <computeroutput>vd</computeroutput> is sought </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>a mesh of type <computeroutput>Graph</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>vd</computeroutput> is a vertex of <computeroutput>fd</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1060" column="5" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1060" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga65e7cd124577e1c470043a117fb397b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::halfedge_index_in_face</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor he, const Graph &amp;g)</argsstring>
        <name>halfedge_index_in_face</name>
        <qualifiedname>CGAL::halfedge_index_in_face</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
          <declname>he</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the number of calls to <computeroutput>next(hd, tm)</computeroutput> one has to apply to <computeroutput>hd</computeroutput> for <computeroutput>hd == he</computeroutput> to be true, starting from <computeroutput>hd = halfedge(face(he, tm), tm)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>he</parametername>
</parameternamelist>
<parameterdescription>
<para>a halfedge of <computeroutput>g</computeroutput> whose index in <computeroutput>face(he, tm)</computeroutput> is sought </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>an object of type <computeroutput>Graph</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/helpers.h" line="1102" column="5" bodyfile="CGAL/boost/graph/helpers.h" bodystart="1102" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLHelperFct_1ga2682fb7d5f4ff4eb65607ae4118e31bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SourceMesh</type>
          </param>
          <param>
            <type>typename TargetMesh</type>
          </param>
          <param>
            <type>typename NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>typename NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::copy_face_graph</definition>
        <argsstring>(const SourceMesh &amp;sm, TargetMesh &amp;tm, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>copy_face_graph</name>
        <qualifiedname>CGAL::copy_face_graph</qualifiedname>
        <param>
          <type>const SourceMesh &amp;</type>
          <declname>sm</declname>
        </param>
        <param>
          <type>TargetMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>copies a source model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> into a target model of a <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>OutputIterators</computeroutput> can be provided to produce a mapping between source and target elements. The target graph is not cleared.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SourceMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput>. The descriptor types <computeroutput>boost::graph_traits&lt;SourceMesh&gt;::vertex_descriptor</computeroutput> and <computeroutput>boost::graph_traits&lt;SourceMesh&gt;::face_descriptor</computeroutput> must be models of <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TargetMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters1</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters2</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
The types <computeroutput>sm_vertex_descriptor</computeroutput> and <computeroutput>sm_face_descriptor</computeroutput> must be models of the concept <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sm</parametername>
</parameternamelist>
<parameterdescription>
<para>the source mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>the target mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="7" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>sm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;SourceMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, sm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>SourceMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_to_vertex_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs source-vertex, target-vertex. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> accepting <computeroutput>std::pair&lt;</computeroutput>boost::graph_traits&lt;SourceMesh&gt;::vertex_descriptor, <computeroutput>boost::graph_traits&lt;TargetMesh&gt;::vertex_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is given, then <computeroutput>vertex_to_vertex_map</computeroutput> cannot be used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>halfedge_to_halfedge_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs source-halfedge, target-halfedge. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> accepting <computeroutput>std::pair&lt;</computeroutput>boost::graph_traits&lt;SourceMesh&gt;::halfedge_descriptor, <computeroutput>boost::graph_traits&lt;TargetMesh&gt;::halfedge_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is given, then <computeroutput>halfedge_to_halfedge_map</computeroutput> cannot be used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_to_face_output_iterator</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> containing the pairs source-face, target-face. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> accepting <computeroutput>std::pair&lt;</computeroutput>boost::graph_traits&lt;SourceMesh&gt;::face_descriptor, <computeroutput>boost::graph_traits&lt;TargetMesh&gt;::face_descriptor&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is given, then <computeroutput>face_to_face_map</computeroutput> cannot be used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_to_vertex_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map storing for each vertex of a source mesh the corresponding vertex of another mesh </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;SourceMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>boost::graph_traits&lt;TargetMesh&gt;::vertex_descriptor</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A typical use case is mapping the vertices from a source mesh to its copy&apos;s after a <computeroutput><ref refid="group__PkgBGLHelperFct_1ga2682fb7d5f4ff4eb65607ae4118e31bc" kindref="member">copy_face_graph()</ref></computeroutput> operation. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>halfedge_to_halfedge_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map storing for each halfedge of a source mesh the corresponding halfedge of another mesh </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;SourceMesh&gt;::halfedge_descriptor</computeroutput> as key type and <computeroutput>boost::graph_traits&lt;TargetMesh&gt;::halfedge_descriptor</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A typical use case is mapping the halfedges from a source mesh to its copy&apos;s after a <computeroutput><ref refid="group__PkgBGLHelperFct_1ga2682fb7d5f4ff4eb65607ae4118e31bc" kindref="member">copy_face_graph()</ref></computeroutput>operation. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_to_face_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map storing for each face of a source mesh the corresponding face of another mesh </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;SourceMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>boost::graph_traits&lt;TargetMesh&gt;::face_descriptor</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A typical use case is mapping the faces from a source mesh to its copy&apos;s after a <computeroutput><ref refid="group__PkgBGLHelperFct_1ga2682fb7d5f4ff4eb65607ae4118e31bc" kindref="member">copy_face_graph()</ref></computeroutput> operation </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TargetMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, tm)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>TargetMesh</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>The points from <computeroutput>sm</computeroutput> to <computeroutput>tm</computeroutput> are converted using <computeroutput><ref refid="classCGAL_1_1Cartesian__converter" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Cartesian_converter</ref>&lt;SourceKernel, TargetKernel&gt;</computeroutput>. <computeroutput>SourceKernel</computeroutput> and <computeroutput>TargetKernel</computeroutput> are deduced using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> from the value types of the vertex point maps.</para>
<para>Other properties are not copied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/copy_face_graph.h" line="328" column="6" bodyfile="CGAL/boost/graph/copy_face_graph.h" bodystart="328" bodyend="347"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic convenience functions for testing if an edge is a border edge, if a mesh is triangular, for conversion between models of different <computeroutput><ref refid="classFaceGraph" kindref="compound">FaceGraph</ref></computeroutput> concepts, etc. </para>
    </briefdescription>
    <detaileddescription>
<para>All functions are in the header file <computeroutput>&lt;CGAL/boost/graph/helpers.h&gt;</computeroutput> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
