<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgBGLPartition" kind="group">
    <compoundname>PkgBGLPartition</compoundname>
    <title>Partitioning Operations</title>
    <innerfile refid="partition_8h">partition.h</innerfile>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgBGLPartition_1ga99ea6bf193f1194db5e523e713c82fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename Visitor</type>
          </param>
          <param>
            <type>typename IsTerminal</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::split_graph_into_polylines</definition>
        <argsstring>(const Graph &amp;graph, Visitor &amp;polyline_visitor, IsTerminal is_terminal)</argsstring>
        <name>split_graph_into_polylines</name>
        <qualifiedname>CGAL::split_graph_into_polylines</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Visitor &amp;</type>
          <declname>polyline_visitor</declname>
        </param>
        <param>
          <type>IsTerminal</type>
          <declname>is_terminal</declname>
        </param>
        <briefdescription>
<para>splits into polylines the graph <computeroutput>g</computeroutput> at vertices of degree greater than 2 and at vertices for which <computeroutput>is_terminal(v,graph)==true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The polylines are reported using a visitor. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the <computeroutput>boost</computeroutput> concepts <computeroutput><ref refid="classVertexListGraph" kindref="compound">VertexListGraph</ref></computeroutput> and <computeroutput><ref refid="classEdgeListGraph" kindref="compound">EdgeListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>a class that provides:<itemizedlist>
<listitem><para><computeroutput>void start_new_polyline()</computeroutput> called when starting the description of a polyline.</para>
</listitem><listitem><para><computeroutput>void add_node(typename boost::graph_traits&lt;Graph&gt;::vertex_descriptor v)</computeroutput> called for each vertex <computeroutput>v</computeroutput> of the polyline currently described. If the polyline is closed this function will be called twice for the first vertex of the cycle picked (once after calling <computeroutput>start_new_polyline()</computeroutput> and once before the call to <computeroutput>end_polyline()</computeroutput>.</para>
</listitem><listitem><para><computeroutput>void end_polyline()</computeroutput> called when the description of a polyline is finished. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IsTerminal</parametername>
</parameternamelist>
<parameterdescription>
<para>A functor providing <computeroutput>bool operator()(boost::graph_traits&lt;Graph&gt;::vertex_descriptor v, const Graph&amp; g) const</computeroutput> returning true if the vertex <computeroutput>v</computeroutput> of degree 2 is a polyline endpoint and false otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
An overload without <computeroutput>is_terminal</computeroutput> is provided if no vertices but those of degree different from 2 are polyline endpoints.</para>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Document the version with four parameters </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/split_graph_into_polylines.h" line="233" column="1" bodyfile="CGAL/boost/graph/split_graph_into_polylines.h" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLPartition_1gaedf2c722ed8baf7d9b4df4cf0e9b86b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::METIS::partition_graph</definition>
        <argsstring>(const TriangleMesh &amp;tm, int nparts, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>partition_graph</name>
        <qualifiedname>CGAL::METIS::partition_graph</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nparts</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes a partition of the input triangular mesh into <computeroutput>nparts</computeroutput> parts, based on the mesh&apos;s nodal graph. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting partition is stored in the vertex and/or face property maps that are passed as parameters using <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nparts</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of parts in the final partition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> concept. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>tm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(tm) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>METIS_options</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used in to pass options to the METIS mesh partitioner </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an array of size <computeroutput>METIS_NOPTIONS</computeroutput> with value type <computeroutput>idx_t</computeroutput> (an integer type defined by METIS) </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an array of size <computeroutput>METIS_NOPTIONS</computeroutput> with value type <computeroutput>idx_t</computeroutput>, initialized using the function <computeroutput>METIS_SetDefaultOptions()</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The many options of METIS are not described here. Instead, users should refer to the <ulink url="http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/manual.pdf">documentation</ulink> of METIS directly. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_partition_id_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that contains (after the function has been run) the ID of the subpart for each vertex of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_partition_id_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that contains (after the function has been run) the ID of the subpart for each face of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm</computeroutput> is a pure triangular surface mesh: there are no edges without at least one incident face </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/METIS/partition_graph.h" line="228" column="6" bodyfile="CGAL/boost/graph/METIS/partition_graph.h" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLPartition_1gad72efc6b61c92ee8704858dc0b7062e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TriangleMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::METIS::partition_dual_graph</definition>
        <argsstring>(const TriangleMesh &amp;tm, int nparts, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>partition_dual_graph</name>
        <qualifiedname>CGAL::METIS::partition_dual_graph</qualifiedname>
        <param>
          <type>const TriangleMesh &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nparts</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes a partition of the input triangular mesh into <computeroutput>nparts</computeroutput> parts, based on the mesh&apos;s dual graph. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting partition is stored in the vertex and/or face property maps that are passed as parameters using <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangle mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nparts</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of parts in the final partition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TriangleMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of the <computeroutput><ref refid="classFaceListGraph" kindref="compound">FaceListGraph</ref></computeroutput> concept </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>tm</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(tm) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>METIS_options</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used in to pass options to the METIS mesh partitioner </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an array of size <computeroutput>METIS_NOPTIONS</computeroutput> with value type <computeroutput>idx_t</computeroutput> (an integer type defined by METIS) </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an array of size <computeroutput>METIS_NOPTIONS</computeroutput> with value type <computeroutput>idx_t</computeroutput>, initialized using the function <computeroutput>METIS_SetDefaultOptions()</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The many options of METIS are not described here. Instead, users should refer to the <ulink url="http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/manual.pdf">documentation</ulink> of METIS directly. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_partition_id_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that contains (after the function has been run) the ID of the subpart for each vertex of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>face_partition_id_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that contains (after the function has been run) the ID of the subpart for each face of <computeroutput>tm</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;TriangleMesh&gt;::face_descriptor</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para><computeroutput>tm</computeroutput> is a pure triangular surface mesh: there are no edges without at least one incident face </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/METIS/partition_dual_graph.h" line="192" column="6" bodyfile="CGAL/boost/graph/METIS/partition_dual_graph.h" bodystart="192" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLPartition_1gac0ae8f45718c0eb9b70ebddd5008515b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputGraph</type>
          </param>
          <param>
            <type>typename EdgeCostMap</type>
          </param>
          <param>
            <type>typename VertexLabelCostMap</type>
          </param>
          <param>
            <type>typename VertexLabelMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::alpha_expansion_graphcut</definition>
        <argsstring>(const InputGraph &amp;input_graph, EdgeCostMap edge_cost_map, VertexLabelCostMap vertex_label_cost_map, VertexLabelMap vertex_label_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>alpha_expansion_graphcut</name>
        <qualifiedname>CGAL::alpha_expansion_graphcut</qualifiedname>
        <param>
          <type>const InputGraph &amp;</type>
          <declname>input_graph</declname>
        </param>
        <param>
          <type>EdgeCostMap</type>
          <declname>edge_cost_map</declname>
        </param>
        <param>
          <type>VertexLabelCostMap</type>
          <declname>vertex_label_cost_map</declname>
        </param>
        <param>
          <type>VertexLabelMap</type>
          <declname>vertex_label_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>regularizes a partition of a graph into <computeroutput>n</computeroutput> labels using the alpha expansion algorithm <ref refid="citelist_1CITEREF_Boykov2001FastApproximate" kindref="member">[1]</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>For a graph <formula id="9">$(V,E)$</formula>, this function computes a partition <computeroutput>f</computeroutput> that minimizes the following cost function:</para>
<para><formula id="17">\[
\mathrm{C}(f) = \sum_{\{v0,v1\} \in E} C_E(v0,v1) + \sum_{v \in V} C_V(f_v)
\]</formula></para>
<para>where <formula id="11">$C_E(v0,v1)$</formula> is the edge cost of assigning a different label to <formula id="12">$v0$</formula> and <formula id="13">$v1$</formula>, and <formula id="14">$C_V(f_v)$</formula> is the vertex cost of assigning the label <formula id="15">$f$</formula> to the vertex <formula id="16">$v$</formula>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classVertexAndEdgeListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">VertexAndEdgeListGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeCostMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;InputGraph&gt;::edge_descriptor</computeroutput> as key and <computeroutput>double</computeroutput> as value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexLabelCostMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;InputGraph&gt;::vertex_descriptor</computeroutput> as key and <computeroutput>std::vector&lt;double&gt;</computeroutput> as value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexLabelMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;InputGraph&gt;::vertex_descriptor</computeroutput> as key and <computeroutput>std::size_t</computeroutput> as value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of named parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_cost_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map providing the weight of each edge.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_label_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map providing the label of each vertex. This map will be updated by the algorithm with the regularized version of the partition.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_label_cost_map</parametername>
</parameternamelist>
<parameterdescription>
<para>a property map providing, for each vertex, an <computeroutput>std::vector</computeroutput> containing the cost of this vertex to belong to each label. Each <computeroutput>std::vector</computeroutput> should have the same size <computeroutput>n</computeroutput> (which is the number of labels), each label being indexed from <computeroutput>0</computeroutput> to <computeroutput>n-1</computeroutput>. For example, <computeroutput>get(vertex_label_cost_map,
vd)[label_idx]</computeroutput> returns the cost of vertex <computeroutput>vd</computeroutput> to belong to the label <computeroutput>label_idx</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating to each vertex of <computeroutput>input_graph</computeroutput> a unique index between <computeroutput>0</computeroutput> and <computeroutput>num_vertices(input_graph) - 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;InputGraph&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>std::size_t</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an automatically indexed internal map </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not passed, internal machinery will create and initialize a face index property map, either using the internal property map if it exists or using an external map. The latter might result in - slightly - worsened performance in case of non-constant complexity for index access. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>implementation_tag</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a tag used to select which implementation of the alpha expansion should be used. Available implementation tags are:<itemizedlist>
<listitem><para><computeroutput>CGAL::Alpha_expansion_boost_adjacency_list</computeroutput></para>
</listitem><listitem><para><computeroutput>CGAL::Alpha_expansion_boost_compressed_sparse_row_tag</computeroutput></para>
</listitem><listitem><para><computeroutput>CGAL::Alpha_expansion_MaxFlow_tag</computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Alpha_expansion_boost_adjacency_list</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="note"><para>The <computeroutput>MaxFlow</computeroutput> implementation is provided by the <ref refid="group__PkgSurfaceMeshSegmentationRef" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh_segmentation.tag">Triangulated Surface Mesh Segmentation Reference</ref> under GPL license. The header <computeroutput>&lt;CGAL/boost/graph/Alpha_expansion_MaxFlow_tag.h&gt;</computeroutput> must be included if users want to use this implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/alpha_expansion_graphcut.h" line="521" column="8" bodyfile="CGAL/boost/graph/alpha_expansion_graphcut.h" bodystart="521" bodyend="674"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Methods to split a mesh into subdomains, using the library <ulink url="http://glaros.dtc.umn.edu/gkhome/metis/metis/overview">METIS</ulink> or a graphcut implementation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
