<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgBGLGeneratorFct" kind="group">
    <compoundname>PkgBGLGeneratorFct</compoundname>
    <title>Generator Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1ga6dcbca9acf39adeb33c108a72e6ec8f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_triangle</definition>
        <argsstring>(const P &amp;p0, const P &amp;p1, const P &amp;p2, Graph &amp;g)</argsstring>
        <name>make_triangle</name>
        <qualifiedname>CGAL::make_triangle</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>creates an isolated triangle with its vertices initialized to <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the non-border halfedge that has the target vertex associated with <computeroutput>p0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="130" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="130" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1gaede06151e15cc96f95dd8ef1f226bea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_quad</definition>
        <argsstring>(const P &amp;p0, const P &amp;p1, const P &amp;p2, const P &amp;p3, Graph &amp;g)</argsstring>
        <name>make_quad</name>
        <qualifiedname>CGAL::make_quad</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>creates an isolated quad with its vertices initialized to <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the non-border halfedge that has the target vertex associated with <computeroutput>p0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="260" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="260" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1ga12fa3e202c24740dade5764e3ea80c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_hexahedron</definition>
        <argsstring>(const P &amp;p0, const P &amp;p1, const P &amp;p2, const P &amp;p3, const P &amp;p4, const P &amp;p5, const P &amp;p6, const P &amp;p7, Graph &amp;g, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>make_hexahedron</name>
        <qualifiedname>CGAL::make_hexahedron</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p5</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p6</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p7</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>creates an isolated hexahedron with its vertices initialized to <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, ... , and <computeroutput>p7</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><image type="html" name="hexahedron.png"></image>
 <image type="latex" name="hexahedron.png"></image>
 <simplesect kind="return"><para>the halfedge that has the target vertex associated with <computeroutput>p0</computeroutput>, in the face with the vertices with the points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput> (or <computeroutput>p0</computeroutput>, <computeroutput>p2</computeroutput> and <computeroutput>p3</computeroutput> when <computeroutput>do_not_triangulate</computeroutput> is set to <computeroutput>false</computeroutput>).</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below <variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_triangulate_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a Boolean used to specify whether the hexadron&apos;s faces should be triangulated or not. The default value is <computeroutput>true</computeroutput>, and faces are not triangulated. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>true </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="307" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="307" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1ga92872c1eb0251f9c4d6d7019b0586797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IsoCuboid</type>
          </param>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_hexahedron</definition>
        <argsstring>(const IsoCuboid &amp;c, Graph &amp;g, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>make_hexahedron</name>
        <qualifiedname>CGAL::make_hexahedron</qualifiedname>
        <param>
          <type>const IsoCuboid &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>creates an isolated hexahedron equivalent to <computeroutput>c</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the halfedge that has the target vertex associated with <computeroutput>c.min()</computeroutput>, aligned with x-axis, in the bottom face of the cuboid.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IsoCuboid</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>IsoCuboid_3</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound">MutableFaceGraph</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the iso-cuboid describing the geometry of the hexahedron </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph to which the hexahedron will be appended </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound">Named Parameters</ref> among the ones listed below <variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_not_triangulate_faces</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a Boolean used to specify whether the hexadron&apos;s faces should be triangulated or not. The default value is <computeroutput>true</computeroutput>, and faces are not triangulated. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>true </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="415" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="415" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1ga92116dc89384a0b8d565e2411f1c173a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_tetrahedron</definition>
        <argsstring>(const P &amp;p0, const P &amp;p1, const P &amp;p2, const P &amp;p3, Graph &amp;g)</argsstring>
        <name>make_tetrahedron</name>
        <qualifiedname>CGAL::make_tetrahedron</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>creates an isolated tetrahedron with its vertices initialized to <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput>, and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><image type="html" name="tetrahedron.png"></image>
 <image type="latex" name="tetrahedron.png"></image>
 <simplesect kind="return"><para>the halfedge that has the target vertex associated with <computeroutput>p0</computeroutput>, in the face with the vertices with the points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, and <computeroutput>p2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="440" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="440" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1gad2ffc4e4967671c9ebe31b7810788ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_regular_prism</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::vertices_size_type nb_vertices, Graph &amp;g, const P &amp;base_center=P(0, 0, 0), typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT height=1.0, typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT radius=1.0, bool is_closed=true)</argsstring>
        <name>make_regular_prism</name>
        <qualifiedname>CGAL::make_regular_prism</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertices_size_type</type>
          <declname>nb_vertices</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>base_center</declname>
          <defval>P(0, 0, 0)</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::Kernel::FT</type>
          <declname>height</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::Kernel::FT</type>
          <declname>radius</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_closed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>creates a triangulated regular prism, outward oriented, having <computeroutput>nb_vertices</computeroutput> vertices in each of its bases and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>center</computeroutput> is (0, 0, 0), then the first point of the prism is (<computeroutput>radius</computeroutput>, <computeroutput>height</computeroutput>, 0)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of vertices per base. It must be greater than or equal to 3. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph in which the regular prism will be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_center</parametername>
</parameternamelist>
<parameterdescription>
<para>the center of the circle in which the lower base is inscribed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance between the two bases. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the circles in which the bases are inscribed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_closed</parametername>
</parameternamelist>
<parameterdescription>
<para>determines if the bases must be created or not. If <computeroutput>is_closed</computeroutput> is <computeroutput>true</computeroutput>, <computeroutput>center</computeroutput> is a vertex.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the halfedge that has the target vertex associated with the first point in the first face. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="546" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="546" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1ga29d336aae02fb8e7b33b30e3e50f8856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_pyramid</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::vertices_size_type nb_vertices, Graph &amp;g, const P &amp;base_center=P(0, 0, 0), typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT height=1.0, typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT radius=1.0, bool is_closed=true)</argsstring>
        <name>make_pyramid</name>
        <qualifiedname>CGAL::make_pyramid</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertices_size_type</type>
          <declname>nb_vertices</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>base_center</declname>
          <defval>P(0, 0, 0)</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::Kernel::FT</type>
          <declname>height</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::Kernel::FT</type>
          <declname>radius</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_closed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>creates a pyramid, outward oriented, having <computeroutput>nb_vertices</computeroutput> vertices in its base and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>center</computeroutput> is <computeroutput>(0, 0, 0)</computeroutput>, then the first point of the base is <computeroutput>(radius, 0, 0)</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of vertices in the base. It must be greater than or equal to 3. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph in which the pyramid will be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_center</parametername>
</parameternamelist>
<parameterdescription>
<para>the center of the circle in which the base is inscribed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance between the base and the apex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the circle in which the base is inscribed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_closed</parametername>
</parameternamelist>
<parameterdescription>
<para>determines if the base must be created or not. If <computeroutput>is_closed</computeroutput> is <computeroutput>true</computeroutput>, <computeroutput>center</computeroutput> is a vertex.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the halfedge that has the target vertex associated with the apex point in the first face. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="645" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="645" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1ga03d4d6b1b7cb4ef6c460487240e6bb10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_icosahedron</definition>
        <argsstring>(Graph &amp;g, const P &amp;center=P(0, 0, 0), typename CGAL::Kernel_traits&lt; P &gt;::Kernel::FT radius=1)</argsstring>
        <name>make_icosahedron</name>
        <qualifiedname>CGAL::make_icosahedron</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>center</declname>
          <defval>P(0, 0, 0)</defval>
        </param>
        <param>
          <type>typename <ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref>&lt; P &gt;::Kernel::FT</type>
          <declname>radius</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>creates an icosahedron, outward oriented, centered in <computeroutput>center</computeroutput> and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph in which the icosahedron will be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>the center of the sphere in which the icosahedron is inscribed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the sphere in which the icosahedron is inscribed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the halfedge that has the target vertex associated with the first point in the first face. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="729" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="729" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgBGLGeneratorFct_1ga021bca7693efee1d05492ee52583793a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>class CoordinateFunctor</type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; Graph &gt;::halfedge_descriptor CGAL::make_grid</definition>
        <argsstring>(typename boost::graph_traits&lt; Graph &gt;::vertices_size_type i, typename boost::graph_traits&lt; Graph &gt;::vertices_size_type j, Graph &amp;g, const CoordinateFunctor &amp;calculator, bool triangulated=false)</argsstring>
        <name>make_grid</name>
        <qualifiedname>CGAL::make_grid</qualifiedname>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertices_size_type</type>
          <declname>i</declname>
        </param>
        <param>
          <type>typename boost::graph_traits&lt; Graph &gt;::vertices_size_type</type>
          <declname>j</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const CoordinateFunctor &amp;</type>
          <declname>calculator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>triangulated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>creates a row major ordered grid with <computeroutput>i</computeroutput> cells along the width and <computeroutput>j</computeroutput> cells along the height and adds it to the graph <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>An internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput>Graph</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of cells along the width. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of cells along the height. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph in which the grid will be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calculator</parametername>
</parameternamelist>
<parameterdescription>
<para>the functor that will assign coordinates to the grid vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangulated</parametername>
</parameternamelist>
<parameterdescription>
<para>decides if a cell is composed of one quad or two triangles. If <computeroutput>triangulated</computeroutput> is <computeroutput>true</computeroutput>, the diagonal of each cell is oriented from (0,0) to (1,1) in the cell coordinates.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CoordinateFunctor</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object providing: <computeroutput>Point_3 operator()(size_type I, size_type J)</computeroutput>, with <computeroutput>Point_3</computeroutput> being the value_type of the internal property_map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member">CGAL::vertex_point_t</ref></computeroutput> and outputs an object of type <computeroutput>boost::property_traits&lt;boost::property_map&lt;Graph,<ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member">CGAL::vertex_point_t</ref>&gt;::type&gt;::value_type</computeroutput>. It will be called with arguments (<computeroutput>w</computeroutput>, <computeroutput>h</computeroutput>), with <computeroutput>w</computeroutput> in [0..<computeroutput>i</computeroutput>] and <computeroutput>h</computeroutput> in [0..<computeroutput>j</computeroutput>].<linebreak/>
 Default: a point with positive integer coordinates (<computeroutput>w</computeroutput>, <computeroutput>h</computeroutput>, 0), with <computeroutput>w</computeroutput> in [0..<computeroutput>i</computeroutput>] and <computeroutput>h</computeroutput> in [0..<computeroutput>j</computeroutput>]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the non-border non-diagonal halfedge that has the target vertex associated with the first point of the grid (default is (0,0,0) ). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/generators.h" line="837" column="1" bodyfile="CGAL/boost/graph/generators.h" bodystart="837" bodyend="890"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
