<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classHalfedgeGraph" kind="class" language="C++" prot="public">
    <compoundname>HalfedgeGraph</compoundname>
    <includes local="no">Concepts/HalfedgeGraph.h</includes>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classHalfedgeGraph_1a024438c044b24b4d6463a019abb66cdd" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
        <definition>static boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor HalfedgeGraph::null_halfedge</definition>
        <argsstring>()</argsstring>
        <name>null_halfedge</name>
        <qualifiedname>HalfedgeGraph::null_halfedge</qualifiedname>
        <briefdescription>
<para>Returns a special <computeroutput>boost::graph_traits&lt;<ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref>&gt;::halfedge_descriptor</computeroutput> object which does not refer to any halfedge of graph object which type is <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="50" column="52"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classHalfedgeGraph_1af91c1492c51f0f3d2589c68b67f646fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::edge_descriptor</type>
        <definition>boost::graph_traits&lt; HalfedgeGraph &gt;::edge_descriptor edge</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor h, const HalfedgeGraph &amp;g)</argsstring>
        <name>edge</name>
        <qualifiedname>HalfedgeGraph::edge</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the edge corresponding to halfedges <computeroutput>h</computeroutput> and <computeroutput>opposite(h,g)</computeroutput>, with the following invariant <computeroutput>halfedge(edge(h,g),g)==h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="58" column="1" declfile="Concepts/HalfedgeGraph.h" declline="58" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classHalfedgeGraph_1aa6d5e0b5380b5b80bbc2ed90e3e707f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor halfedge</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::edge_descriptor f, const HalfedgeGraph &amp;g)</argsstring>
        <name>halfedge</name>
        <qualifiedname>HalfedgeGraph::halfedge</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::edge_descriptor</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns one of the halfedges corresponding to <computeroutput>e</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="65" column="1" declfile="Concepts/HalfedgeGraph.h" declline="65" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classHalfedgeGraph_1a71d2d886a4fb2c56efefe5d912c3daaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor halfedge</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::vertex_descriptor v, const HalfedgeGraph &amp;g)</argsstring>
        <name>halfedge</name>
        <qualifiedname>HalfedgeGraph::halfedge</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::vertex_descriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns a halfedge with target <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="72" column="1" declfile="Concepts/HalfedgeGraph.h" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classHalfedgeGraph_1a965f1ed3f109080edd516222b273426c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor, bool &gt;</type>
        <definition>std::pair&lt; boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor, bool &gt; halfedge</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::vertex_descriptor u, boost::graph_traits&lt; HalfedgeGraph &gt;::vertex_descriptor v, const HalfedgeGraph &amp;g)</argsstring>
        <name>halfedge</name>
        <qualifiedname>HalfedgeGraph::halfedge</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::vertex_descriptor</type>
          <declname>u</declname>
        </param>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::vertex_descriptor</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the halfedge with source <computeroutput>u</computeroutput> and target <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The Boolean is <computeroutput>true</computeroutput>, iff this halfedge exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="80" column="1" declfile="Concepts/HalfedgeGraph.h" declline="80" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classHalfedgeGraph_1afe2f53c3740e4f4f701fc7989403bcdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor opposite</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor h, const HalfedgeGraph &amp;g)</argsstring>
        <name>opposite</name>
        <qualifiedname>HalfedgeGraph::opposite</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the halfedge with source and target swapped. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="89" column="1" declfile="Concepts/HalfedgeGraph.h" declline="89" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classHalfedgeGraph_1a982e9fb54ebba64fa58ce5ceb0c7e7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::vertex_descriptor</type>
        <definition>boost::graph_traits&lt; HalfedgeGraph &gt;::vertex_descriptor source</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor h, const HalfedgeGraph &amp;g)</argsstring>
        <name>source</name>
        <qualifiedname>HalfedgeGraph::source</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the source vertex of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="96" column="1" declfile="Concepts/HalfedgeGraph.h" declline="96" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classHalfedgeGraph_1a5c3056616f23757579426e9f50abab07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::vertex_descriptor</type>
        <definition>boost::graph_traits&lt; HalfedgeGraph &gt;::vertex_descriptor target</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor h, const HalfedgeGraph &amp;g)</argsstring>
        <name>target</name>
        <qualifiedname>HalfedgeGraph::target</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the target vertex of <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="103" column="1" declfile="Concepts/HalfedgeGraph.h" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classHalfedgeGraph_1a4a6f4b80283296be4c1040288fa663db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor next</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor h, const HalfedgeGraph &amp;g)</argsstring>
        <name>next</name>
        <qualifiedname>HalfedgeGraph::next</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the next halfedge around its face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="110" column="1" declfile="Concepts/HalfedgeGraph.h" declline="110" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classHalfedgeGraph_1a0b869316f2ef7333ce826249d627a967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></type>
          </param>
        </templateparamlist>
        <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
        <definition>boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor prev</definition>
        <argsstring>(boost::graph_traits&lt; HalfedgeGraph &gt;::halfedge_descriptor h, const HalfedgeGraph &amp;g)</argsstring>
        <name>prev</name>
        <qualifiedname>HalfedgeGraph::prev</qualifiedname>
        <param>
          <type>boost::graph_traits&lt; <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &gt;::halfedge_descriptor</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>returns the previous halfedge around its face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/HalfedgeGraph.h" line="117" column="1" declfile="Concepts/HalfedgeGraph.h" declline="117" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The concept <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> is a refinement of the BGL concept <computeroutput><ref refid="classIncidenceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">IncidenceGraph</ref></computeroutput> and adds the notion of a <emphasis>halfedge</emphasis>: Each edge is associated with two <emphasis>opposite</emphasis> halfedges with source and target vertices swapped. Furthermore, halfedges have a <emphasis>successor</emphasis> and <emphasis>predecessor</emphasis>, and form cycles we call <emphasis>faces</emphasis>. However, this concept does not introduce a face type. A <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> is undirected and does not allow parallel edges. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para>Using the composition of the <emphasis>successor</emphasis> and <emphasis>opposite</emphasis> functions results in another cycle, namely the cycle of halfedges which are incident to the same vertex. We refer to <ref refid="group__PkgBGLIterators" kindref="compound">Iterators and Circulators</ref> for a description of iterators and circulators for these halfedge cycles.</para>
<para>A partial specialization must be provided for <computeroutput><ref refid="structCGAL_1_1graph__has__property" kindref="compound">CGAL::graph_has_property</ref></computeroutput> for each internal property map available.</para>
<para><variablelist>
<varlistentry><term>Associated Types</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no" class="paramname"><para>boost::graph_traits&lt;HalfedgeGraph&gt;::vertex_descriptor</para>
</entry><entry thead="no"><para>A vertex descriptor corresponds to a unique vertex in an abstract graph instance. A vertex descriptor must be <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput>, and <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
<para></para>
</entry></row>
<row>
<entry thead="no" class="paramname"><para>boost::graph_traits&lt;HalfedgeGraph&gt;::halfedge_descriptor</para>
</entry><entry thead="no"><para>A halfedge descriptor corresponds to a unique halfedge in an abstract graph instance. A halfedge descriptor must be <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput>, and <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
<para></para>
</entry></row>
<row>
<entry thead="no" class="paramname"><para>boost::graph_traits&lt;HalfedgeGraph&gt;::edge_descriptor</para>
</entry><entry thead="no"><para>An edge descriptor corresponds to a unique edge in an abstract graph instance. An edge descriptor must be <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput>, <computeroutput><ref refid="classAssignable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput>, <computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput>, and <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>. </para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classIncidenceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">IncidenceGraph</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classPropertyGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PropertyGraph</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para>A model of <computeroutput><ref refid="classHalfedgeGraph" kindref="compound">HalfedgeGraph</ref></computeroutput> must have the interior property <computeroutput>vertex_point</computeroutput> attached to its vertices.</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para>See <ref refid="group__PkgBGLTraits" kindref="compound">Boost Graph Traits Specializations </ref> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><ref refid="group__PkgBGLConcepts" kindref="compound">Graph Concepts </ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/HalfedgeGraph.h" line="47" column="1" bodyfile="Concepts/HalfedgeGraph.h" bodystart="47" bodyend="51"/>
    <listofallmembers>
      <member refid="classHalfedgeGraph_1af91c1492c51f0f3d2589c68b67f646fe" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>edge</name></member>
      <member refid="classHalfedgeGraph_1aa6d5e0b5380b5b80bbc2ed90e3e707f7" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>halfedge</name></member>
      <member refid="classHalfedgeGraph_1a71d2d886a4fb2c56efefe5d912c3daaa" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>halfedge</name></member>
      <member refid="classHalfedgeGraph_1a965f1ed3f109080edd516222b273426c" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>halfedge</name></member>
      <member refid="classHalfedgeGraph_1a4a6f4b80283296be4c1040288fa663db" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>next</name></member>
      <member refid="classHalfedgeGraph_1a024438c044b24b4d6463a019abb66cdd" prot="private" virt="non-virtual"><scope>HalfedgeGraph</scope><name>null_halfedge</name></member>
      <member refid="classHalfedgeGraph_1afe2f53c3740e4f4f701fc7989403bcdc" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>opposite</name></member>
      <member refid="classHalfedgeGraph_1a0b869316f2ef7333ce826249d627a967" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>prev</name></member>
      <member refid="classHalfedgeGraph_1a982e9fb54ebba64fa58ce5ceb0c7e7ad" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>source</name></member>
      <member refid="classHalfedgeGraph_1a5c3056616f23757579426e9f50abab07" prot="public" virt="non-virtual"><scope>HalfedgeGraph</scope><name>target</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
