<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Sqrt__extension" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Sqrt_extension</compoundname>
    <includes local="no">CGAL/Sqrt_extension.h</includes>
    <templateparamlist>
      <param>
        <type>typename NT</type>
      </param>
      <param>
        <type>typename Root</type>
      </param>
      <param>
        <type>typename DifferentExtensionComparable</type>
        <defval><ref refid="group__PkgSTLExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Tag_false</ref></defval>
      </param>
      <param>
        <type>typename FilterPredicates</type>
        <defval><ref refid="group__PkgSTLExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Tag_false</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a356ba68361cb85f6e4c9c25117e3019f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>()</argsstring>
        <name>Sqrt_extension</name>
        <qualifiedname>CGAL::Sqrt_extension::Sqrt_extension</qualifiedname>
        <briefdescription>
<para>Introduces a variable <computeroutput>ext</computeroutput> initialized with 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a57ba5beee8034be467f073523a561438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(const Sqrt_extension &amp;x)</argsstring>
        <name>Sqrt_extension</name>
        <qualifiedname>CGAL::Sqrt_extension::Sqrt_extension</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1abd0a022f0837d476fe8548fbb8626108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(const int &amp;i)</argsstring>
        <name>Sqrt_extension</name>
        <qualifiedname>CGAL::Sqrt_extension::Sqrt_extension</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Introduces a variable <computeroutput>ext</computeroutput> initialized with <formula id="76">$ i$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a9bbcf9da55edac2f7a559fcf6ee7fd74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(const NT &amp;x)</argsstring>
        <name>Sqrt_extension</name>
        <qualifiedname>CGAL::Sqrt_extension::Sqrt_extension</qualifiedname>
        <param>
          <type>const NT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Introduces a variable <computeroutput>ext</computeroutput> initialized with <formula id="30">$ x$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1aee88761007f6f19340b93ad77554ed20" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NTX</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(const NTX &amp;x)</argsstring>
        <name>Sqrt_extension</name>
        <qualifiedname>CGAL::Sqrt_extension::Sqrt_extension</qualifiedname>
        <param>
          <type>const NTX &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Introduces a variable <computeroutput>ext</computeroutput> initialized with <formula id="30">$ x$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>NT must constructible from NTX </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="143" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a2679732b1ccfe999885b933641d30d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(int a0, int a1, int r)</argsstring>
        <name>Sqrt_extension</name>
        <qualifiedname>CGAL::Sqrt_extension::Sqrt_extension</qualifiedname>
        <param>
          <type>int</type>
          <declname>a0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Constructor from int: <computeroutput>ext</computeroutput> <formula id="77">$ = a0 +a1 \cdot sqrt(r)$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="78">$ r \neq0$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a38ebdeabb9315efc21c3e2462ca6a6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::Sqrt_extension</definition>
        <argsstring>(NT a0, NT a1, Root r)</argsstring>
        <name>Sqrt_extension</name>
        <qualifiedname>CGAL::Sqrt_extension::Sqrt_extension</qualifiedname>
        <param>
          <type>NT</type>
          <declname>a0</declname>
        </param>
        <param>
          <type>NT</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Root</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>General constructor: <computeroutput>ext</computeroutput> <formula id="79">$ = a0 + a1 \cdot sqrt(r)$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="78">$ r \neq0$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="153" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <description><para>An object of type <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> represent an expression of the form: <formula id="80">$ a0 + a1 \sqrt(\mathrm{root}) $</formula>. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a26b63d6c3f4287a936315de279fb6706" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const NT &amp;</type>
        <definition>const NT &amp; CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::a0</definition>
        <argsstring>() const</argsstring>
        <name>a0</name>
        <qualifiedname>CGAL::Sqrt_extension::a0</qualifiedname>
        <briefdescription>
<para>Const access operator for a0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="167" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ab89428cde3e3b88faf3a8f49ed7f61d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const NT &amp;</type>
        <definition>const NT &amp; CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::a1</definition>
        <argsstring>() const</argsstring>
        <name>a1</name>
        <qualifiedname>CGAL::Sqrt_extension::a1</qualifiedname>
        <briefdescription>
<para>Const access operator for a1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="172" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Root &amp;</type>
        <definition>const Root &amp; CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::root</definition>
        <argsstring>() const</argsstring>
        <name>root</name>
        <qualifiedname>CGAL::Sqrt_extension::root</qualifiedname>
        <briefdescription>
<para>Const access operator for root. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="177" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a8bd27e2ec22b9ceb73caaa653e17f4bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::is_extended</definition>
        <argsstring>() const</argsstring>
        <name>is_extended</name>
        <qualifiedname>CGAL::Sqrt_extension::is_extended</qualifiedname>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> in case root of <computeroutput>ext</computeroutput> is not zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that <formula id="81">$ a1 == 0 $</formula> does not imply <formula id="82">$ \mathrm{root} == 0$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="184" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1aa29e0e0992a6e7f084740b32824d9574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::simplify</definition>
        <argsstring>()</argsstring>
        <name>simplify</name>
        <qualifiedname>CGAL::Sqrt_extension::simplify</qualifiedname>
        <briefdescription>
<para>Simplifies the representation, in particular <formula id="65">$\mathrm{root}$</formula> is set to zero if <formula id="83">$ a1$</formula> is zero, that is, <computeroutput>ext</computeroutput> becomes not extended. </para>
        </briefdescription>
        <detaileddescription>
<para>Moreover, it propagates the simplify command to members of <computeroutput>ext</computeroutput>. see also: <computeroutput><ref refid="classAlgebraicStructureTraits_1a52a18ef960fa296ff071bf3031dec9d9" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">AlgebraicStructureTraits::Simplify</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="194" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a3157526bfb6e16be6cbd713baab96507" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::is_zero</definition>
        <argsstring>() const</argsstring>
        <name>is_zero</name>
        <qualifiedname>CGAL::Sqrt_extension::is_zero</qualifiedname>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput> if <computeroutput>ext</computeroutput> represents the value zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="199" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ab60fb1ca520387fa4152b2b76d20dec2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga59bee58a806ccde81562ea315ff75525" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Sign</ref></type>
        <definition>CGAL::Sign CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::sign</definition>
        <argsstring>() const</argsstring>
        <name>sign</name>
        <qualifiedname>CGAL::Sqrt_extension::sign</qualifiedname>
        <briefdescription>
<para>Determines the sign of <computeroutput>ext</computeroutput> by (repeated) squaring. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="205" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ab78e337c2a4546de9847728c1bb7d09c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <qualifiedname>CGAL::Sqrt_extension::abs</qualifiedname>
        <briefdescription>
<para>returns the absolute value of <computeroutput>ext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="211" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a7ac59cd21d21bbf7af630c0c8436ecaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga84351c7e66be00efccd4ab1a61070469" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Comparison_result</ref></type>
        <definition>CGAL::Comparison_result CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::compare</definition>
        <argsstring>(const Sqrt_extension &amp;y, bool in_same_extension=!DifferentExtensionComparable::value) const</argsstring>
        <name>compare</name>
        <qualifiedname>CGAL::Sqrt_extension::compare</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>in_same_extension</declname>
          <defval>!DifferentExtensionComparable::value</defval>
        </param>
        <briefdescription>
<para>Compares <computeroutput>ext</computeroutput> with y. </para>
        </briefdescription>
        <detaileddescription>
<para>The optional bool <computeroutput>in_same_extension</computeroutput> indicates whether <computeroutput>ext</computeroutput> and <formula id="31">$ y$</formula> are in the same extension of NT. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="221" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1aa8fab706d9e2817167f435e6dcca34be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
        <definition>Sqrt_extension &amp; CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::operator+=</definition>
        <argsstring>(const Sqrt_extension &amp;a)</argsstring>
        <name>operator+=</name>
        <qualifiedname>CGAL::Sqrt_extension::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" kindref="member">root()</ref>==0 or a.root()==0 or this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" kindref="member">root()</ref> == a.root())</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="227" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a850a52ca1fad3a5c9494cf9f0349b35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
        <definition>Sqrt_extension &amp; CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::operator-=</definition>
        <argsstring>(const Sqrt_extension &amp;a)</argsstring>
        <name>operator-=</name>
        <qualifiedname>CGAL::Sqrt_extension::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" kindref="member">root()</ref>==0 or a.root()==0 or this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" kindref="member">root()</ref> == a.root())</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="232" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a002c752b26809bf0bfe56528dbb34e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
        <definition>Sqrt_extension &amp; CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::operator*=</definition>
        <argsstring>(const Sqrt_extension &amp;a)</argsstring>
        <name>operator*=</name>
        <qualifiedname>CGAL::Sqrt_extension::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" kindref="member">root()</ref>==0 or a.root()==0 or this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" kindref="member">root()</ref> == a.root())</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="237" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a937f45145a0fb681648c0be344892b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
        <definition>Sqrt_extension &amp; CGAL::Sqrt_extension&lt; NT, Root, DifferentExtensionComparable, FilterPredicates &gt;::operator/=</definition>
        <argsstring>(const Sqrt_extension &amp;a)</argsstring>
        <name>operator/=</name>
        <qualifiedname>CGAL::Sqrt_extension::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" kindref="member">root()</ref>==0 or a.root()==0 or this-&gt;<ref refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" kindref="member">root()</ref> == a.root())</computeroutput></para>
</simplesect>
In case <computeroutput>NT</computeroutput> is only an <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> operator/ implements integral division. In case <computeroutput>NT</computeroutput> is a <computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> operator/ implements the field division. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="247" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a805685ed109406fad3f319a8d7bbcc70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension operator+</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>CGAL::Sqrt_extension::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="257" column="16" declfile="CGAL/Sqrt_extension.h" declline="257" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a4ffea715e09bde4f38cbc6516dee9a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension operator-</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator-</name>
        <qualifiedname>CGAL::Sqrt_extension::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="263" column="16" declfile="CGAL/Sqrt_extension.h" declline="263" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a5b89bab9a03f64665697cfae28e3266e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension operator*</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator*</name>
        <qualifiedname>CGAL::Sqrt_extension::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="269" column="16" declfile="CGAL/Sqrt_extension.h" declline="269" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ad4632037e42f4286d12adb2663bc582d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></type>
        <definition>Sqrt_extension operator/</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator/</name>
        <qualifiedname>CGAL::Sqrt_extension::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para>
</simplesect>
In case <computeroutput>NT</computeroutput> is only an <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> operator/ implements integral division. In case <computeroutput>NT</computeroutput> is a <computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> operator/ implements the field division. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="279" column="16" declfile="CGAL/Sqrt_extension.h" declline="279" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1af3fd77224816f9d4d2622b86404886ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Sqrt_extension::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="285" column="6" declfile="CGAL/Sqrt_extension.h" declline="285" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a61e3774267aa785f1a709d5c1e8dc24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Sqrt_extension::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="293" column="6" declfile="CGAL/Sqrt_extension.h" declline="293" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a64a621ca05d48de932155a7b8e83db95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>CGAL::Sqrt_extension::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para>
</simplesect>
<simplesect kind="attention"><para>Only exists when <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="301" column="1" declfile="CGAL/Sqrt_extension.h" declline="301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1acdd8e662bfa4b52df0c8f0d12657c540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>CGAL::Sqrt_extension::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para>
</simplesect>
<simplesect kind="attention"><para>Only exists when <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="308" column="1" declfile="CGAL/Sqrt_extension.h" declline="308" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a2a200c3087b2f4375912c0ea3d9b79f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>CGAL::Sqrt_extension::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para>
</simplesect>
<simplesect kind="attention"><para>Only exists when <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="315" column="6" declfile="CGAL/Sqrt_extension.h" declline="315" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1a87f6f72f49fcb8d3cde19516c6bc916c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Sqrt_extension &amp;a, const Sqrt_extension &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>CGAL::Sqrt_extension::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>(a.root()==0 or b.root()==0 or a.root() == b.root())</computeroutput></para>
</simplesect>
<simplesect kind="attention"><para>Only exists when <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="322" column="6" declfile="CGAL/Sqrt_extension.h" declline="322" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ab68c2b038cb5f1fbf2e4253b08cd4a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Sqrt_extension&lt; NT, Root &gt; &amp;ext)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::Sqrt_extension::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&lt; NT, Root &gt; &amp;</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
<para>writes <computeroutput>ext</computeroutput> to ostream <computeroutput>os</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The format depends on the <computeroutput>CGAL::IO::MODE</computeroutput> of <computeroutput>os</computeroutput>.</para>
<para>In case the mode is <computeroutput>CGAL::IO::ASCII</computeroutput> the format is <computeroutput>EXT[a0,a1,root]</computeroutput>.</para>
<para>In case the mode is <computeroutput>CGAL::IO::PRETTY</computeroutput> the format is human readable.</para>
<para><simplesect kind="attention"><para><computeroutput>operator&gt;&gt;</computeroutput> must be defined for <computeroutput>Root</computeroutput> and <computeroutput>NT</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="335" column="1" declfile="CGAL/Sqrt_extension.h" declline="335" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Sqrt__extension_1ab30d9011737cb6cd9d52a77a6e923d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, const Sqrt_extension&lt; NT, Root &gt; &amp;ext)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::Sqrt_extension::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&lt; NT, Root &gt; &amp;</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
<para>reads <computeroutput>ext</computeroutput> from istream <computeroutput>is</computeroutput> in format <computeroutput>EXT[a0,a1,root]</computeroutput>, the output format in mode <computeroutput>CGAL::IO::ASCII</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para><computeroutput>operator&lt;&lt;</computeroutput> must be defined exist for <computeroutput>Root</computeroutput> and <computeroutput>NT</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Sqrt_extension.h" line="344" column="14" declfile="CGAL/Sqrt_extension.h" declline="344" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An instance of this class represents an extension of the type <computeroutput>NT</computeroutput> by <emphasis>one</emphasis> square root of the type <computeroutput>Root</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para><computeroutput>NT</computeroutput> is required to be constructible from <computeroutput>Root</computeroutput>.</para>
<para><computeroutput>NT</computeroutput> is required to be an <computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput>.</para>
<para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> if NT is <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>.</para>
<para>For example, let <computeroutput>Integer</computeroutput> be some type representing <formula id="0">$ \mathbb{Z}$</formula>, then <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&lt;Integer,Integer&gt;</computeroutput> is able to represent <formula id="64">$ \mathbb{Z}[\sqrt{\mathrm{root}}]$</formula> for some arbitrary Integer <formula id="65">$\mathrm{root}$</formula>.  <formula id="66">$ R[a]$</formula> denotes the extension of a ring <formula id="67">$ R$</formula> by an element <formula id="68">$ a$</formula>. See also: <ulink url="https://mathworld.wolfram.com/ExtensionRing.html"><computeroutput>https://mathworld.wolfram.com/ExtensionRing.html</computeroutput></ulink> The value of <formula id="65">$\mathrm{root}$</formula> is set at construction time, or set to zero if it is not specified.</para>
<para>Arithmetic operations among different extensions, say <formula id="69">$ \mathbb{Z}[\sqrt{a}]$</formula> and <formula id="70">$ \mathbb{Z}[\sqrt{b}]$</formula>, are not supported. The result would be in <formula id="71">$ \mathbb{Z}[\sqrt{a},\sqrt{b}]$</formula>, which is not representable by <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&lt;Integer,Integer&gt;</computeroutput>.</para>
<para><simplesect kind="attention"><para>The user is responsible to check that arithmetic operations are carried out for elements from the same extensions only. This is not tested by <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> for efficiency reasons. A violation of the precondition leads to undefined behavior.</para>
</simplesect>
Be aware that for efficiency reasons the given <formula id="65">$\mathrm{root}$</formula> is stored as it is given to the constructor. In particular, an extension by a square root of a square is considered as an extension.</para>
<para>Since elements of <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> that lie in different extensions are not interoperable with respect to any arithmetic operations, the full value range of <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> does not represent an algebraic structure. However, each subset of the value range that represents the extension of NT by a particular square root is a valid algebraic structure, since this subset is closed under all provided arithmetic operations. From there, <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> can be used as if it were a model of an algebraic structure concept, with the following correspondence:</para>
<para><table rows="9" cols="2"><row>
<entry thead="no" align="left"><para>NT </para>
</entry><entry thead="no" align="left"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> </para>
</entry></row>
<row>
<entry thead="no" align="left" colspan="2"><para><hruler/>
 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no" align="left"><para><computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput> </para>
</entry><entry thead="no" align="left"><para><computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput> </para>
</entry></row>
<row>
<entry thead="no" align="left"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para>
</entry><entry thead="no" align="left"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para>
</entry></row>
<row>
<entry thead="no" align="left"><para><computeroutput><ref refid="classUniqueFactorizationDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">UniqueFactorizationDomain</ref></computeroutput> </para>
</entry><entry thead="no" align="left"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para>
</entry></row>
<row>
<entry thead="no" align="left"><para><computeroutput><ref refid="classEuclideanRing" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">EuclideanRing</ref></computeroutput> </para>
</entry><entry thead="no" align="left"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para>
</entry></row>
<row>
<entry thead="no" align="left"><para><computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> </para>
</entry><entry thead="no" align="left"><para><computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> </para>
</entry></row>
<row>
<entry thead="no" align="left" colspan="2"><para><hruler/>
 </para>
</entry></row>
</table>
</para>
<para>The extension of a <computeroutput><ref refid="classUniqueFactorizationDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">UniqueFactorizationDomain</ref></computeroutput> or <computeroutput><ref refid="classEuclideanRing" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">EuclideanRing</ref></computeroutput> is just an <computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput>, since the extension in general destroys the unique factorization property. For instance consider <formula id="72">$ \mathbb{Z}[\sqrt{10}]$</formula>, the extension of <formula id="0">$ \mathbb{Z}$</formula> by <formula id="73">$ \sqrt{10}$</formula>: in <formula id="72">$ \mathbb{Z}[\sqrt{10}]$</formula> the element 10 has two different factorizations <formula id="74">$ \sqrt{10} \cdot \sqrt{10}$</formula> and <formula id="75">$ 2 \cdot 5$</formula>. In particular, the factorization is not unique.</para>
<para>If <computeroutput>NT</computeroutput> is a model of <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> the type <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> is also considered as <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>. However, by default it is not allowed to compare values from different extensions for efficiency reasons. In case such a comparison becomes necessary, use the member function compare with the according Boolean flag. If such a comparison is a very frequent case, override the default of <computeroutput>DifferentExtensionComparable</computeroutput> by giving <ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_true</computeroutput></ref> as third template parameter. This effects the behavior of compare functions as well as the compare operators.</para>
<para>The fourth template argument, <computeroutput>FilterPredicates</computeroutput>, triggers an internal filter that may speed up comparisons and sign computations. In case <computeroutput>FilterPredicates</computeroutput> is set to <ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_true</computeroutput></ref> the type first computes a double interval containing the represented number and tries to perform the comparison or sign computation using this interval. Once computed, this interval is stored by the corresponding <computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref></computeroutput> object for further usage. Note that this internal filter is switched off by default, since it may conflict with other filtering methods, such as <computeroutput><ref refid="classCGAL_1_1Lazy__exact__nt" kindref="compound">Lazy_exact_nt</ref>&lt;<ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">Sqrt_extension</ref>&gt;</computeroutput>.</para>
<para>In case <computeroutput>NT</computeroutput> is not <computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput>, <computeroutput>DifferentExtensionComparable</computeroutput> as well as <computeroutput>FilterPredicates</computeroutput> have no effect.</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classAssignable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Assignable</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classEqualityComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">EqualityComparable</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classImplicitInteroperable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">ImplicitInteroperable</ref></computeroutput> with <computeroutput>int</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classImplicitInteroperable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">ImplicitInteroperable</ref></computeroutput> with <computeroutput>NT</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classFraction" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Fraction</ref></computeroutput> if NT is a <computeroutput><ref refid="classFraction" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Fraction</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classRootOf__2" kindref="compound">RootOf_2</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classIntegralDomainWithoutDivision" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomainWithoutDivision</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classIntegralDomain" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">IntegralDomain</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classField" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">Field</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRealEmbeddable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">RealEmbeddable</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_true</computeroutput></ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__PkgSTLExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag"><computeroutput>CGAL::Tag_false</computeroutput></ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="CGAL/Sqrt_extension.h" line="112" column="1" bodyfile="CGAL/Sqrt_extension.h" bodystart="112" bodyend="251"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Sqrt__extension_1a26b63d6c3f4287a936315de279fb6706" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>a0</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ab89428cde3e3b88faf3a8f49ed7f61d1" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>a1</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ab78e337c2a4546de9847728c1bb7d09c" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>abs</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a7ac59cd21d21bbf7af630c0c8436ecaa" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>compare</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a8bd27e2ec22b9ceb73caaa653e17f4bf" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>is_extended</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a3157526bfb6e16be6cbd713baab96507" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>is_zero</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a61e3774267aa785f1a709d5c1e8dc24c" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator!=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a5b89bab9a03f64665697cfae28e3266e" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator*</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a002c752b26809bf0bfe56528dbb34e3d" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator*=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a805685ed109406fad3f319a8d7bbcc70" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator+</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1aa8fab706d9e2817167f435e6dcca34be" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator+=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a4ffea715e09bde4f38cbc6516dee9a8f" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator-</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a850a52ca1fad3a5c9494cf9f0349b35b" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator-=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ad4632037e42f4286d12adb2663bc582d" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator/</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a937f45145a0fb681648c0be344892b97" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator/=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a64a621ca05d48de932155a7b8e83db95" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&lt;</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ab68c2b038cb5f1fbf2e4253b08cd4a2c" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1acdd8e662bfa4b52df0c8f0d12657c540" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&lt;=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1af3fd77224816f9d4d2622b86404886ba" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a2a200c3087b2f4375912c0ea3d9b79f1" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&gt;</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a87f6f72f49fcb8d3cde19516c6bc916c" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&gt;=</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ab30d9011737cb6cd9d52a77a6e923d00" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a427e71915fbc997718f2b8445e92cbef" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>root</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1ab60fb1ca520387fa4152b2b76d20dec2" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>sign</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1aa29e0e0992a6e7f084740b32824d9574" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>simplify</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a356ba68361cb85f6e4c9c25117e3019f" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a57ba5beee8034be467f073523a561438" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1abd0a022f0837d476fe8548fbb8626108" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a9bbcf9da55edac2f7a559fcf6ee7fd74" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1aee88761007f6f19340b93ad77554ed20" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a2679732b1ccfe999885b933641d30d15" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
      <member refid="classCGAL_1_1Sqrt__extension_1a38ebdeabb9315efc21c3e2462ca6a6ad" prot="public" virt="non-virtual"><scope>CGAL::Sqrt_extension</scope><name>Sqrt_extension</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
