<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Gmpfi" prot="public">CGAL::Gmpfi</innerclass>
    <innerclass refid="classCGAL_1_1Gmpfr" prot="public">CGAL::Gmpfr</innerclass>
    <innerclass refid="classCGAL_1_1Gmpq" prot="public">CGAL::Gmpq</innerclass>
    <innerclass refid="classCGAL_1_1Gmpz" prot="public">CGAL::Gmpz</innerclass>
    <innerclass refid="classCGAL_1_1Gmpzf" prot="public">CGAL::Gmpzf</innerclass>
    <innerclass refid="classCGAL_1_1Interval__nt" prot="public">CGAL::Interval_nt</innerclass>
    <innerclass refid="classCGAL_1_1Is__valid" prot="public">CGAL::Is_valid</innerclass>
    <innerclass refid="classCGAL_1_1Lazy__exact__nt" prot="public">CGAL::Lazy_exact_nt</innerclass>
    <innerclass refid="structCGAL_1_1Max" prot="public">CGAL::Max</innerclass>
    <innerclass refid="structCGAL_1_1Min" prot="public">CGAL::Min</innerclass>
    <innerclass refid="classCGAL_1_1MP__Float" prot="public">CGAL::MP_Float</innerclass>
    <innerclass refid="structCGAL_1_1Mpzf" prot="public">CGAL::Mpzf</innerclass>
    <innerclass refid="structCGAL_1_1NT__converter" prot="public">CGAL::NT_converter</innerclass>
    <innerclass refid="classCGAL_1_1Number__type__checker" prot="public">CGAL::Number_type_checker</innerclass>
    <innerclass refid="structCGAL_1_1Protect__FPU__rounding" prot="public">CGAL::Protect_FPU_rounding</innerclass>
    <innerclass refid="classCGAL_1_1Quotient" prot="public">CGAL::Quotient</innerclass>
    <innerclass refid="classCGAL_1_1Rational__traits" prot="public">CGAL::Rational_traits</innerclass>
    <innerclass refid="structCGAL_1_1Root__of__traits" prot="public">CGAL::Root_of_traits</innerclass>
    <innerclass refid="classCGAL_1_1Set__ieee__double__precision" prot="public">CGAL::Set_ieee_double_precision</innerclass>
    <innerclass refid="classCGAL_1_1Sqrt__extension" prot="public">CGAL::Sqrt_extension</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nt__cgal_1ga2e3fce8233225177f57d66e7ed00880f" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Interval__nt" kindref="compound">Interval_nt</ref>&lt; false &gt;</type>
        <definition>typedef Interval_nt&lt;false&gt; CGAL::Interval_nt_advanced</definition>
        <argsstring></argsstring>
        <name>Interval_nt_advanced</name>
        <qualifiedname>CGAL::Interval_nt_advanced</qualifiedname>
        <briefdescription>
<para>This typedef (at namespace CGAL scope) exists for backward compatibility, as well as removing the need to remember the Boolean value for the template parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Interval_nt.h" line="334" column="21" bodyfile="CGAL/Interval_nt.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nt__cgal_1gae96d924c796bfc4e781d28f81df43c52" prot="public" static="no">
        <type>unspecified_type</type>
        <definition>typedef unspecified_type CGAL::Exact_integer</definition>
        <argsstring></argsstring>
        <name>Exact_integer</name>
        <qualifiedname>CGAL::Exact_integer</qualifiedname>
        <briefdescription>
<para><computeroutput>Exact_integer</computeroutput> is an exact integer number type. </para>
        </briefdescription>
        <detaileddescription>
<para>It is a typedef of another number type. Its exact definition depends on the availability the third-party libraries GMP, Core, and LEDA. CGAL must be configured with at least one of those libraries.</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput>EuclideanRing</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput>RealEmbeddable</computeroutput> </para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Exact_integer.h" line="38" column="26" bodyfile="CGAL/Exact_integer.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nt__cgal_1ga0849ff44771b19582218ebdfa5614f64" prot="public" static="no">
        <type>unspecified_type</type>
        <definition>typedef unspecified_type CGAL::Exact_rational</definition>
        <argsstring></argsstring>
        <name>Exact_rational</name>
        <qualifiedname>CGAL::Exact_rational</qualifiedname>
        <briefdescription>
<para><computeroutput>Exact_rational</computeroutput> is an exact rational number type, constructible from <computeroutput>double</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is a typedef of another number type. Its exact definition depends on the availability the third-party libraries GMP, Core, and LEDA. CGAL must be configured with at least one of those libraries.</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput>Field</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput>RealEmbeddable</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput>Fraction</computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput>FromDoubleConstructible</computeroutput> </para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Exact_rational.h" line="38" column="26" bodyfile="CGAL/Exact_rational.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceCGAL_1a47f0ae53dc4a6e546cf85257048a5512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_finite</definition>
        <argsstring>(double x)</argsstring>
        <name>is_finite</name>
        <qualifiedname>CGAL::is_finite</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Determines whether the argument represents a value in <formula id="4">$ \mathbb{R}$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/double.h" line="18" column="6" declfile="CGAL/double.h" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a565f1b98f0d166db4a117ebf3bec0ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_finite</definition>
        <argsstring>(float x)</argsstring>
        <name>is_finite</name>
        <qualifiedname>CGAL::is_finite</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Determines whether the argument represents a value in <formula id="4">$ \mathbb{R}$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/float.h" line="21" column="6" declfile="CGAL/float.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a4b32f8f9b95fc15d00f5bee8f5c83e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::is_finite</definition>
        <argsstring>(long double x)</argsstring>
        <name>is_finite</name>
        <qualifiedname>CGAL::is_finite</qualifiedname>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Determines whether the argument represents a value in <formula id="4">$ \mathbb{R}$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/long_double.h" line="17" column="6" declfile="CGAL/long_double.h" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__ralgebraic_1ga7b3b3eb35124b0c46373c88e324a7a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::compute_roots_of_2</definition>
        <argsstring>(const RT &amp;a, const RT &amp;b, const RT &amp;c, OutputIterator oit)</argsstring>
        <name>compute_roots_of_2</name>
        <qualifiedname>CGAL::compute_roots_of_2</qualifiedname>
        <param>
          <type>const RT &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const RT &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const RT &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oit</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__nt__ralgebraic_1ga7b3b3eb35124b0c46373c88e324a7a95" kindref="member">compute_roots_of_2()</ref></computeroutput> solves a univariate polynomial as it is defined by the coefficients given to the function. </para>
        </briefdescription>
        <detaileddescription>
<para>The solutions are written into the given <computeroutput>OutputIterator</computeroutput>. Writes the real roots of the polynomial <formula id="55">$ aX^2+bX+c$</formula> into <computeroutput>oit</computeroutput> in ascending order.</para>
<para><computeroutput>OutputIterator</computeroutput> is required to accept <ref refid="structCGAL_1_1Root__of__traits_1ac41cc1d3e58a72703c085d759065cf0f" kindref="member"><computeroutput>Root_of_traits&lt;RT&gt;::Root_of_2</computeroutput></ref>.</para>
<para>Multiplicities are not reported.</para>
<para><simplesect kind="pre"><para><computeroutput>RT</computeroutput> is an <computeroutput>IntegralDomainWithoutDivision</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><formula id="56">$ a\neq0$</formula> or <formula id="57">$ b\neq0$</formula>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRootOf__2" kindref="compound">RootOf_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Root__of__traits" kindref="compound">CGAL::Root_of_traits</ref>&lt;RT&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__nt__ralgebraic_1gacfb5bb32ca37f38d2d69d5d24bcebc26" kindref="member">CGAL::make_root_of_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__nt__ralgebraic_1ga8c3dcfe273cd40cb49c537ac7274b267" kindref="member">CGAL::make_sqrt()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">CGAL::Sqrt_extension</ref>&lt;NT,ROOT&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Root_of_traits.h" line="27" column="1" declfile="CGAL/Root_of_traits.h" declline="27" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__ralgebraic_1gacfb5bb32ca37f38d2d69d5d24bcebc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1Root__of__traits" kindref="compound">Root_of_traits</ref>&lt; RT &gt;::Root_of_2</type>
        <definition>Root_of_traits&lt; RT &gt;::Root_of_2 CGAL::make_root_of_2</definition>
        <argsstring>(const RT &amp;a, const RT &amp;b, const RT &amp;c, bool s)</argsstring>
        <name>make_root_of_2</name>
        <qualifiedname>CGAL::make_root_of_2</qualifiedname>
        <param>
          <type>const RT &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const RT &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const RT &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__nt__ralgebraic_1gacfb5bb32ca37f38d2d69d5d24bcebc26" kindref="member">make_root_of_2()</ref></computeroutput> constructs an algebraic number of degree 2 over a ring number type. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the smallest real root of the polynomial <formula id="55">$ aX^2+bX+c$</formula> if <formula id="58">$ s$</formula> is <computeroutput>true</computeroutput>, and the largest root is <formula id="58">$ s$</formula> is <computeroutput>false</computeroutput>.</para>
<para><simplesect kind="pre"><para><computeroutput>RT</computeroutput> is an <computeroutput>IntegralDomainWithoutDivision</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>The polynomial has at least one real root.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRootOf__2" kindref="compound">RootOf_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Root__of__traits" kindref="compound">CGAL::Root_of_traits</ref>&lt;RT&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__nt__ralgebraic_1ga8c3dcfe273cd40cb49c537ac7274b267" kindref="member">CGAL::make_sqrt()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__nt__ralgebraic_1ga7b3b3eb35124b0c46373c88e324a7a95" kindref="member">CGAL::compute_roots_of_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">CGAL::Sqrt_extension</ref>&lt;NT,ROOT&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Root_of_traits.h" line="53" column="1" declfile="CGAL/Root_of_traits.h" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__ralgebraic_1gab453bf44021c57980a0208196d6e8ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1Root__of__traits" kindref="compound">Root_of_traits</ref>&lt; RT &gt;::Root_of_2</type>
        <definition>Root_of_traits&lt; RT &gt;::Root_of_2 CGAL::make_root_of_2</definition>
        <argsstring>(RT alpha, RT beta, RT gamma)</argsstring>
        <name>make_root_of_2</name>
        <qualifiedname>CGAL::make_root_of_2</qualifiedname>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__nt__ralgebraic_1gacfb5bb32ca37f38d2d69d5d24bcebc26" kindref="member">make_root_of_2()</ref></computeroutput> constructs an algebraic number of degree 2 over a ring number type. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs the number <formula id="59">$ \alpha+ \beta\sqrt{\gamma}$</formula>.</para>
<para><simplesect kind="pre"><para><computeroutput>RT</computeroutput> is an <computeroutput>IntegralDomainWithoutDivision</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><formula id="60">$ \gamma\geq0$</formula></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRootOf__2" kindref="compound">RootOf_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Root__of__traits" kindref="compound">CGAL::Root_of_traits</ref>&lt;RT&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__nt__ralgebraic_1ga8c3dcfe273cd40cb49c537ac7274b267" kindref="member">CGAL::make_sqrt()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__nt__ralgebraic_1ga7b3b3eb35124b0c46373c88e324a7a95" kindref="member">CGAL::compute_roots_of_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Sqrt__extension" kindref="compound">CGAL::Sqrt_extension</ref>&lt;NT,ROOT&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Root_of_traits.h" line="75" column="1" declfile="CGAL/Root_of_traits.h" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__ralgebraic_1ga8c3dcfe273cd40cb49c537ac7274b267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structCGAL_1_1Root__of__traits" kindref="compound">Root_of_traits</ref>&lt; RT &gt;::Root_of_2</type>
        <definition>Root_of_traits&lt; RT &gt;::Root_of_2 CGAL::make_sqrt</definition>
        <argsstring>(const RT &amp;x)</argsstring>
        <name>make_sqrt</name>
        <qualifiedname>CGAL::make_sqrt</qualifiedname>
        <param>
          <type>const RT &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__nt__ralgebraic_1ga8c3dcfe273cd40cb49c537ac7274b267" kindref="member">make_sqrt()</ref></computeroutput> constructs a square root of a given value of type <computeroutput>RT</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on the type <computeroutput>RT</computeroutput> the square root may be returned in a new type that can represent algebraic extensions of degree <formula id="61">$ 2$</formula>.</para>
<para><simplesect kind="return"><para><formula id="62">$ \sqrt{x}.$</formula> </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>RT</computeroutput> is a <computeroutput>RealEmbeddable</computeroutput> <computeroutput>IntegralDomain</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><formula id="63">$ x \leq0 $</formula></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classRootOf__2" kindref="compound">RootOf_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__nt__ralgebraic_1gacfb5bb32ca37f38d2d69d5d24bcebc26" kindref="member">CGAL::make_root_of_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Root__of__traits" kindref="compound">CGAL::Root_of_traits</ref>&lt;RT&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Root_of_traits.h" line="96" column="40" declfile="CGAL/Root_of_traits.h" declline="96" declcolumn="40"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__rrational_1ga17858fbeefd20878349736beb169df97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rational</type>
          </param>
        </templateparamlist>
        <type>Rational</type>
        <definition>Rational CGAL::simplest_rational_in_interval</definition>
        <argsstring>(double d1, double d2)</argsstring>
        <name>simplest_rational_in_interval</name>
        <qualifiedname>CGAL::simplest_rational_in_interval</qualifiedname>
        <param>
          <type>double</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>computes the rational number with the smallest denominator in the interval <computeroutput>[d1,d2]</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the simplest rational number in an interval of two <computeroutput>double</computeroutput> values.</para>
<para><bold>Implementation</bold><linebreak/>
</para>
<para>See Knuth, &quot;Seminumerical algorithms&quot;, page 654, answer to exercise 4.53-39.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__nt__rrational_1gaac65e38f22218d07ff294d8bf72790a1" kindref="member">CGAL::to_rational()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/simplest_rational_in_interval.h" line="21" column="10" declfile="CGAL/simplest_rational_in_interval.h" declline="21" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__rrational_1gaac65e38f22218d07ff294d8bf72790a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rational</type>
          </param>
        </templateparamlist>
        <type>Rational</type>
        <definition>Rational CGAL::to_rational</definition>
        <argsstring>(double d)</argsstring>
        <name>to_rational</name>
        <qualifiedname>CGAL::to_rational</qualifiedname>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>computes the rational number that equals <computeroutput>d</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the rational number representing a given double precision floating point number.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__nt__rrational_1ga17858fbeefd20878349736beb169df97" kindref="member">CGAL::simplest_rational_in_interval()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/to_rational.h" line="14" column="10" declfile="CGAL/to_rational.h" declline="14" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__util_1ga06ee6c8472c94e9f14d6fc94b6b7079b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::is_valid</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>is_valid</name>
        <qualifiedname>CGAL::is_valid</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Not all values of a type need to be valid. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the argument is valid.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Is__valid" kindref="compound">CGAL::Is_valid</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utils.h" line="13" column="6" declfile="CGAL/utils.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__util_1gad7dbfa919e255b52f36ea1512a92cb78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::max</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>max</name>
        <qualifiedname>CGAL::max</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns the larger of two values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Max" kindref="compound">CGAL::Max</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utils.h" line="28" column="3" declfile="CGAL/utils.h" declline="28" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__nt__util_1gab0ad1dbf97e8a81da183514138f583e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T CGAL::min</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>min</name>
        <qualifiedname>CGAL::min</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns the smaller of two values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Min" kindref="compound">CGAL::Min</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/utils.h" line="43" column="3" declfile="CGAL/utils.h" declline="43" declcolumn="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/double.h" line="14" column="1"/>
  </compounddef>
</doxygen>
