<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL_1_1pointmatcher" kind="namespace" language="C++">
    <compoundname>CGAL::pointmatcher</compoundname>
    <innerclass refid="structCGAL_1_1pointmatcher_1_1ICP__config" prot="public">CGAL::pointmatcher::ICP_config</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceCGAL_1_1pointmatcher_1a933cc61a4ae98fc2efcd831be7266d4d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>typename PointMatcher&lt; Scalar &gt;::ICP</type>
        <definition>using CGAL::pointmatcher::ICP = typedef typename PointMatcher&lt;Scalar&gt;::ICP</definition>
        <argsstring></argsstring>
        <name>ICP</name>
        <qualifiedname>CGAL::pointmatcher::ICP</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/pointmatcher/compute_registration_transformation.h" line="38" column="1" bodyfile="CGAL/pointmatcher/compute_registration_transformation.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga771cd5e756daee1deab68c8bf65d8058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointRange1</type>
          </param>
          <param>
            <type>class PointRange2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; geom_traits::Aff_transformation_3, bool &gt;</type>
        <definition>std::pair&lt; geom_traits::Aff_transformation_3, bool &gt; CGAL::pointmatcher::compute_registration_transformation</definition>
        <argsstring>(const PointRange1 &amp;point_set_1, const PointRange2 &amp;point_set_2, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>compute_registration_transformation</name>
        <qualifiedname>CGAL::pointmatcher::compute_registration_transformation</qualifiedname>
        <param>
          <type>const PointRange1 &amp;</type>
          <declname>point_set_1</declname>
        </param>
        <param>
          <type>const PointRange2 &amp;</type>
          <declname>point_set_2</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Computes the registration of <computeroutput>point_set_2</computeroutput> with respect to <computeroutput>point_set_1</computeroutput> and returns the corresponding affine transformation. </para>
        </briefdescription>
        <detaileddescription>
<para>Registration is computed using the Iterative Closest Point (ICP) algorithm.</para>
<para><simplesect kind="note"><para>This function requires the <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange1</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput> in <computeroutput>NamedParameters1</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange2</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput> in <computeroutput>NamedParameters2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point_set_1</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range used as reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point_set_2</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range whose registration w.r.t. <computeroutput>point_set_1</computeroutput> will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="11" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>point_set_1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange1</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>point_set_1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange1</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>scalar_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating 1D values - scalars to the elements of the point set <computeroutput>point_set_1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange1</computeroutput> and whose value type is <computeroutput>geom_traits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Constant__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Constant_property_map</ref></computeroutput> with the value = 1 for all scalars </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>These scalars, sometimes called weights, can be provided through the <computeroutput>GenericDescriptorOutlierFilter</computeroutput> of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library, where the <computeroutput>descName = weights</computeroutput>. See <computeroutput>outlier_filters</computeroutput> below and <computeroutput>registration_with_pointmatcher.cpp</computeroutput> for more details. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_set_filters</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a chain of filters to be applied to the point set </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator must be <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>RandomSamplingDataPointsFilter</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The chain of filters to be applied to the reference point cloud. The reference point cloud is processed into an intermediate point cloud with the given chain of filters to be used in the alignment procedure. The chain is organized with the forward traversal order of the point set filters range.</para>
<para>The chain of point set filters are applied only once at the beginning of the ICP procedure, i.e., before the first iteration of the ICP algorithm.</para>
<para>The filters can have several purposes, including but are not limited to i) removal of noisy points which render alignment of point clouds difficult, ii) removal of redundant points so as to speed up alignment, iii) addition of descriptive information to the points such as a surface normal vector, or the direction from the point to the sensor. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to <computeroutput>referenceDataPointsFilters</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The filters should be chosen and set from possible components of the <computeroutput>referenceDataPointsFilters</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>matcher</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a method used for matching (linking) the points from <computeroutput>point_set_2</computeroutput>, to the points in the reference cloud, <computeroutput>point_set_1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>KDTreeMatcher</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>matcher</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The matcher should be chosen and set from possible components of the <computeroutput>matcher</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>outlier_filters</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a chain of filters to be applied to the matched (linked) point clouds after each processing iteration of the ICP algorithm to remove the links which do not correspond to true point correspondences </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator must be <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>TrimmedDistOutlierFilter</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The outliers are rejected. Points with no link are ignored in the subsequent error minimization step. The chain is organized with the forward traversal order of the outlier filters range. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>outlierFilters</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The filters should be chosen and set from possible components of the <computeroutput>outlierFilters</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>error_minimizer</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an error minimizer that computes a transformation matrix such as to minimize the error between the point sets </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>PointToPlaneErrorMinimizer</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>errorMinimizer</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The error minimizer should be chosen and set from possible components of the <computeroutput>errorMinimizer</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>transformation_checkers</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a chain of transformation checkers </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator must be <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CounterTransformationChecker</computeroutput> and <computeroutput>DifferentialTransformationChecker</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The chain is organized with the forward traversal order of the transformation checkers range. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A transformation checker can stop the iteration depending on the conditions it defines. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>transformationCheckers</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The transformation checkers should be chosen and set from possible components of the <computeroutput>transformationCheckers</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>inspector</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an inspector that enables logging data at different steps for analysis. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>NullInspector</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Inspectors typically provide deeper scrutiny than the logger. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>inspector</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The inspector should be chosen and set from possible components of the <computeroutput>inspector</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>logger</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a method for logging information regarding the registration process outputted by <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>NullLogger</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The logs generated by <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> library does not get effected by this configuration. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>logger</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The logger should be chosen and set from possible components of the <computeroutput>logger</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>point_set_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange2</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>point_set_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange2</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>scalar_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating 1D values - scalars to the elements of the point set <computeroutput>point_set_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange2</computeroutput> and whose value type is <computeroutput>geom_traits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Constant__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Constant_property_map</ref></computeroutput> with the value = 1 for all scalars </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>These scalars, sometimes called weights, can be provided through the <computeroutput>GenericDescriptorOutlierFilter</computeroutput> of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library, where the <computeroutput>descName = weights</computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_set_filters</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a chain of filters to be applied to the point set </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator must be <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>SamplingSurfaceNormalDataPointsFilter</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The chain of filters to be applied to the point cloud <computeroutput>point_set_2</computeroutput>. The point cloud is processed into an intermediate point cloud with the given chain of filters to be used in the alignment procedure. The chain is organized with the forward traversal order of the point set filters range.</para>
<para>The chain of point set filters are applied only once at the beginning of the ICP procedure, i.e., before the first iteration of the ICP algorithm.</para>
<para>The filters can have several purposes, including but are not limited to i) removal of noisy points which render alignment of point clouds difficult, ii) removal of redundant points so as to speed up alignment, iii) addition of descriptive information to the points such as a surface normal vector, or the direction from the point to the sensor. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>readingDataPointsFilters</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The filters should be chosen and set from possible components of the <computeroutput>readingDataPointsFilters</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>transformation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an affine transformation that is used as the initial transformation for <computeroutput>point_set_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput><ref refid="classCGAL_1_1Aff__transformation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Aff_transformation_3</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the identity transformation </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>a pair containing the affine transformation that should be applied to <computeroutput>point_set_2</computeroutput> to make it registered w.r.t. <computeroutput>point_set_1</computeroutput> and the boolean value indicating if the registration converged. The second of the pair is <computeroutput>true</computeroutput> if converged, <computeroutput>false</computeroutput> otherwise. A log why it failed to converge is written to <computeroutput>std::cerr</computeroutput> if the registration cannot converge. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/pointmatcher/compute_registration_transformation.h" line="593" column="1" bodyfile="CGAL/pointmatcher/compute_registration_transformation.h" bodystart="593" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1gaa849870cbc74cee3f2f536c70aadf976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointRange1</type>
          </param>
          <param>
            <type>class PointRange2</type>
          </param>
          <param>
            <type>class NamedParameters1</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
          <param>
            <type>class NamedParameters2</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::pointmatcher::register_point_sets</definition>
        <argsstring>(const PointRange1 &amp;point_set_1, PointRange2 &amp;point_set_2, const NamedParameters1 &amp;np1=parameters::default_values(), const NamedParameters2 &amp;np2=parameters::default_values())</argsstring>
        <name>register_point_sets</name>
        <qualifiedname>CGAL::pointmatcher::register_point_sets</qualifiedname>
        <param>
          <type>const PointRange1 &amp;</type>
          <declname>point_set_1</declname>
        </param>
        <param>
          <type>PointRange2 &amp;</type>
          <declname>point_set_2</declname>
        </param>
        <param>
          <type>const NamedParameters1 &amp;</type>
          <declname>np1</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <param>
          <type>const NamedParameters2 &amp;</type>
          <declname>np2</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Computes the registration of <computeroutput>point_set_2</computeroutput> with respect to <computeroutput>point_set_1</computeroutput> and applies it. </para>
        </briefdescription>
        <detaileddescription>
<para>Registration is computed using the Iterative Closest Point (ICP) algorithm.</para>
<para><simplesect kind="note"><para>This function requires the <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange1</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput> in <computeroutput>NamedParameters1</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange2</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput> in <computeroutput>NamedParameters2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point_set_1</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range used as reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point_set_2</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range whose registration w.r.t. <computeroutput>point_set_1</computeroutput> will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np1</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="10" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>point_set_1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange1</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>point_set_1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange1</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_set_filters</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a chain of filters to be applied to the point set </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator must be <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>RandomSamplingDataPointsFilter</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The chain of filters to be applied to the reference point cloud. The reference point cloud is processed into an intermediate point cloud with the given chain of filters to be used in the alignment procedure. The chain is organized with the forward traversal order of the point set filters range.</para>
<para>The chain of point set filters are applied only once at the beginning of the ICP procedure, i.e., before the first iteration of the ICP algorithm.</para>
<para>The filters can have several purposes, including but are not limited to i) removal of noisy points which render alignment of point clouds difficult, ii) removal of redundant points so as to speed up alignment, iii) addition of descriptive information to the points such as a surface normal vector, or the direction from the point to the sensor. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to <computeroutput>referenceDataPointsFilters</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The filters should be chosen and set from possible components of the <computeroutput>referenceDataPointsFilters</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>matcher</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a method used for matching (linking) the points from <computeroutput>point_set_2</computeroutput>, to the points in the reference cloud, <computeroutput>point_set_1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>KDTreeMatcher</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>matcher</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The matcher should be chosen and set from possible components of the <computeroutput>matcher</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>outlier_filters</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a chain of filters to be applied to the matched (linked) point clouds after each processing iteration of the ICP algorithm to remove the links which do not correspond to true point correspondences </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator must be <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>TrimmedDistOutlierFilter</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The outliers are rejected. Points with no link are ignored in the subsequent error minimization step. The chain is organized with the forward traversal order of the outlier filters range. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>outlierFilters</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The filters should be chosen and set from possible components of the <computeroutput>outlierFilters</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>error_minimizer</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an error minimizer that computes a transformation matrix such as to minimize the error between the point sets </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>PointToPlaneErrorMinimizer</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>errorMinimizer</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The error minimizer should be chosen and set from possible components of the <computeroutput>errorMinimizer</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>transformation_checkers</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a chain of transformation checkers </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator must be <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CounterTransformationChecker</computeroutput> and <computeroutput>DifferentialTransformationChecker</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The chain is organized with the forward traversal order of the transformation checkers range. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>A transformation checker can stop the iteration depending on the conditions it defines. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>transformationCheckers</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The transformation checkers should be chosen and set from possible components of the <computeroutput>transformationCheckers</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>inspector</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an inspector that enables logging data at different steps for analysis. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>NullInspector</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Inspectors typically provide deeper scrutiny than the logger. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>inspector</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The inspector should be chosen and set from possible components of the <computeroutput>inspector</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>logger</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a method for logging information regarding the registration process outputted by <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>NullLogger</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The logs generated by <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> library does not get effected by this configuration. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>logger</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The logger should be chosen and set from possible components of the <computeroutput>logger</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np2</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>point_set_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange2</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>point_set_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange2</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_set_filters</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a chain of filters to be applied to the point set </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>. The value type of its iterator must be <computeroutput><ref refid="structCGAL_1_1pointmatcher_1_1ICP__config" kindref="compound">ICP_config</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>SamplingSurfaceNormalDataPointsFilter</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The chain of filters to be applied to the point cloud <computeroutput>point_set_2</computeroutput>. The point cloud is processed into an intermediate point cloud with the given chain of filters to be used in the alignment procedure. The chain is organized with the forward traversal order of the point set filters range.</para>
<para>The chain of point set filters are applied only once at the beginning of the ICP procedure, i.e., before the first iteration of the ICP algorithm.</para>
<para>The filters can have several purposes, including but are not limited to i) removal of noisy points which render alignment of point clouds difficult, ii) removal of redundant points so as to speed up alignment, iii) addition of descriptive information to the points such as a surface normal vector, or the direction from the point to the sensor. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Corresponds to the <computeroutput>readingDataPointsFilters</computeroutput> configuration module of <ref refid="thirdparty_1thirdpartylibpointmatcher" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">PointMatcher</ref> library. The filters should be chosen and set from possible components of the <computeroutput>readingDataPointsFilters</computeroutput> configuration module. See <ulink url="https://libpointmatcher.readthedocs.io/en/latest/Configuration/#configuration-of-an-icp-chain">libpointmatcher documentation</ulink> for possible configurations. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>transformation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an affine transformation that is used as the initial transformation for <computeroutput>point_set_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput><ref refid="classCGAL_1_1Aff__transformation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Aff_transformation_3</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the identity transformation </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if registration is converged, <computeroutput>false</computeroutput> otherwise. A log why it failed to converge is written to <computeroutput>std::cerr</computeroutput> if the registration cannot converge. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/pointmatcher/register_point_sets.h" line="231" column="1" bodyfile="CGAL/pointmatcher/register_point_sets.h" bodystart="231" bodyend="254"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/pointmatcher/compute_registration_transformation.h" line="35" column="1"/>
  </compounddef>
</doxygen>
