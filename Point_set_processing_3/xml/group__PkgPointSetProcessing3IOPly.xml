<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgPointSetProcessing3IOPly" kind="group">
    <compoundname>PkgPointSetProcessing3IOPly</compoundname>
    <title>I/O (PLY Format)</title>
    <innerclass refid="structCGAL_1_1IO_1_1PLY__property" prot="public">CGAL::IO::PLY_property</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga818eed34a10f3bde53ac5a23d5bbddd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::Kernel::Construct_point_3, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::Kernel::Construct_point_3, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt; CGAL::IO::make_ply_point_reader</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_ply_point_reader</name>
        <qualifiedname>CGAL::IO::make_ply_point_reader</qualifiedname>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to read 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para>Points are constructed from the input using 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput> and <computeroutput>z</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" kindref="member">read_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="74" column="1" declfile="CGAL/IO/read_ply_points.h" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga4375e15f5ec01c7aca1006e216efe4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; VectorMap, typename Kernel_traits&lt; typename VectorMap::value_type &gt;::Kernel::Construct_vector_3, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt; VectorMap, typename Kernel_traits&lt; typename VectorMap::value_type &gt;::Kernel::Construct_vector_3, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt; CGAL::IO::make_ply_normal_reader</definition>
        <argsstring>(VectorMap normal_map)</argsstring>
        <name>make_ply_normal_reader</name>
        <qualifiedname>CGAL::IO::make_ply_normal_reader</qualifiedname>
        <param>
          <type>VectorMap</type>
          <declname>normal_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to read 3D normal vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Vectors are constructed from the input using 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>nx</computeroutput>, <computeroutput>ny</computeroutput> and <computeroutput>nz</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VectorMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store vectors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" kindref="member">read_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="94" column="1" declfile="CGAL/IO/read_ply_points.h" declline="94" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_PLY_with_properties</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>read_PLY_with_properties</name>
        <qualifiedname>CGAL::IO::read_PLY_with_properties</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>reads user-selected points properties from a .ply stream (ASCII or binary). </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional point properties and faces are ignored.</para>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandler</computeroutput> can either be:</para>
<para><itemizedlist>
<listitem><para>A <computeroutput>std::pair&lt;PropertyMap, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt; &gt;</computeroutput> if the user wants to read a PLY property as a scalar value T (for example, storing an <computeroutput>int</computeroutput> PLY property into an <computeroutput>int</computeroutput> variable).</para>
</listitem><listitem><para>A <computeroutput>std::tuple&lt;PropertyMap, Constructor, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt;...&gt;</computeroutput> if the user wants to use one or several PLY properties to construct a complex object (for example, storing 3 <computeroutput>uchar</computeroutput> PLY properties into a Color object that can for example be a <computeroutput>std::array&lt;unsigned char, 3&gt;</computeroutput>). In that case, the second element of the tuple should be a functor that constructs the value type of <computeroutput>PropertyMap</computeroutput> from N objects of types <computeroutput>T</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> and defaults to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1ga818eed34a10f3bde53ac5a23d5bbddd6" kindref="member">make_ply_point_reader()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1ga4375e15f5ec01c7aca1006e216efe4c6" kindref="member">make_ply_normal_reader()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="137" column="6" bodyfile="CGAL/IO/read_ply_points.h" bodystart="137" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1gaf5c12b5bab6f88a9d22d425b1ab2586a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_PLY</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_PLY</name>
        <qualifiedname>CGAL::IO::read_PLY</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (positions + normals, if available), using the <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional point properties and faces are ignored.</para>
<para><simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> and defaults to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" kindref="member">read_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="240" column="6" bodyfile="CGAL/IO/read_ply_points.h" bodystart="240" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga6433f03251832d3904ec19ddd5b84880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_PLY</definition>
        <argsstring>(const std::string &amp;fname, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_PLY</name>
        <qualifiedname>CGAL::IO::read_PLY</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (positions + normals, if available), using the <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional point properties and faces are ignored.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> and defaults to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>input file name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be read in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" kindref="member">read_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="317" column="6" bodyfile="CGAL/IO/read_ply_points.h" bodystart="317" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga01ab7639f85c8dd1d5e9f66065038c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt; PointMap, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt; CGAL::IO::make_ply_point_writer</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_ply_point_writer</name>
        <qualifiedname>CGAL::IO::make_ply_point_writer</qualifiedname>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to write 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para>Points are written as 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput> and <computeroutput>z</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" kindref="member">write_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="55" column="3" declfile="CGAL/IO/write_ply_points.h" declline="55" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga39edb018d7641c169ff00154eac4a6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; VectorMap, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt; VectorMap, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt; CGAL::IO::make_ply_normal_writer</definition>
        <argsstring>(VectorMap normal_map)</argsstring>
        <name>make_ply_normal_writer</name>
        <qualifiedname>CGAL::IO::make_ply_normal_writer</qualifiedname>
        <param>
          <type>VectorMap</type>
          <declname>normal_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to write 3D normal vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Vectors are written as 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>nx</computeroutput>, <computeroutput>ny</computeroutput> and <computeroutput>nz</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the vectors use <computeroutput><ref refid="structCGAL_1_1Simple__cartesian" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Simple_cartesian</ref>&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VectorMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store vectors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" kindref="member">write_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="72" column="3" declfile="CGAL/IO/write_ply_points.h" declline="72" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_PLY_with_properties</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>write_PLY_with_properties</name>
        <qualifiedname>CGAL::IO::write_PLY_with_properties</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>output stream. </para>
</briefdescription>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
          <briefdescription><para>input point range. </para>
</briefdescription>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
          <briefdescription><para>parameter pack of property handlers </para>
</briefdescription>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> with properties using <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandler</computeroutput> can either be:</para>
<para><itemizedlist>
<listitem><para>A <computeroutput>std::pair&lt;PropertyMap, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt; &gt;</computeroutput> if the user wants to write a scalar value T as a PLY property (for example, writing an <computeroutput>int</computeroutput> variable as an <computeroutput>int</computeroutput> PLY property).</para>
</listitem><listitem><para>A <computeroutput>std::tuple&lt;PropertyMap, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt;...&gt;</computeroutput> if the user wants to write a complex object as several PLY properties. In that case, a specialization of <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Output_rep</ref></computeroutput> must be provided for <computeroutput>PropertyMap::value_type</computeroutput> that handles both ASCII and binary output (see <computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">CGAL::IO::get_mode()</ref></computeroutput>).</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>, and the <ref refid="group__PkgStreamSupportEnumRef" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag"><computeroutput>IO::Mode</computeroutput> </ref> of the stream must be set to <computeroutput>BINARY</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the <computeroutput>PropertyMap</computeroutput> objects provided within the <computeroutput>PropertyHandler</computeroutput> parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1ga01ab7639f85c8dd1d5e9f66065038c58" kindref="member">make_ply_point_writer()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1ga39edb018d7641c169ff00154eac4a6d5" kindref="member">make_ply_normal_writer()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="110" column="8" bodyfile="CGAL/IO/write_ply_points.h" bodystart="110" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga615f4420ce82b5ceb1b584b506d714ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_PLY</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_PLY</name>
        <qualifiedname>CGAL::IO::write_PLY</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions + normals, if available) using <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>, and the <ref refid="group__PkgStreamSupportEnumRef" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag"><computeroutput>IO::Mode</computeroutput> </ref> of the stream must be set to <computeroutput>BINARY</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output stream. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" kindref="member">write_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="188" column="6" bodyfile="CGAL/IO/write_ply_points.h" bodystart="188" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga80830a581fb424153bf1d0476112f375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_PLY</definition>
        <argsstring>(const std::string &amp;filename, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_PLY</name>
        <qualifiedname>CGAL::IO::write_PLY</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions + normals, if available) using <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be written in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output file. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" kindref="member">write_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="276" column="6" bodyfile="CGAL/IO/write_ply_points.h" bodystart="276" bodyend="297"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Read and write points (with or without additional properties) in PLY format. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
