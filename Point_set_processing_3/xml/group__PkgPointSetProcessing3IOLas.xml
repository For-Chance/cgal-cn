<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgPointSetProcessing3IOLas" kind="group">
    <compoundname>PkgPointSetProcessing3IOLas</compoundname>
    <title>I/O (LAS Format)</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga912d110b39abc211a85240def2ca2317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::Kernel::Construct_point_3, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
        <definition>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::Kernel::Construct_point_3, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; CGAL::IO::make_las_point_reader</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_las_point_reader</name>
        <qualifiedname>CGAL::IO::make_las_point_reader</qualifiedname>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>generates a LAS property handler to read 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para>Points are constructed from the input the using 3 LAS properties <computeroutput>LAS_property::X</computeroutput>, <computeroutput>LAS_property::Y</computeroutput> and <computeroutput>LAS_property::Z</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" kindref="member">read_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="139" column="1" bodyfile="CGAL/IO/read_las_points.h" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_LAS_with_properties</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>read_LAS_with_properties</name>
        <qualifiedname>CGAL::IO::read_LAS_with_properties</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>reads user-selected points properties from a .las or .laz stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional properties are ignored.</para>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandler</computeroutput> can either be:</para>
<para><itemizedlist>
<listitem><para>A <computeroutput>std::pair&lt;PropertyMap, LAS_property::Tag &gt;</computeroutput> if the user wants to read a LAS property as a scalar value <computeroutput>LAS_property::Tag::type</computeroutput> (for example, storing an <computeroutput>int</computeroutput> LAS property into an <computeroutput>int</computeroutput> variable).</para>
</listitem><listitem><para>A <computeroutput>std::tuple&lt;PropertyMap, Constructor, LAS_property::Tag...&gt;</computeroutput> if the user wants to use one or several LAS properties to construct a complex object (for example, storing 4 <computeroutput>unsigned short</computeroutput> LAS properties into a Color object that can for example be a <computeroutput>std::array&lt;unsigned short, 4&gt;</computeroutput>). In that case, the second element of the tuple should be a functor that constructs the value type of <computeroutput>PropertyMap</computeroutput> from N objects of of type <computeroutput>LAS_property::Tag::type</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>The LAS standard defines a fixed set of properties accessible through the following tag classes:</para>
<para><itemizedlist>
<listitem><para><computeroutput>LAS_property::X</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Y</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Z</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Intensity</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Return_number</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Number_of_returns</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Scan_direction_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Edge_of_flight_line</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Classification</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Synthetic_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Keypoint_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Withheld_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Scan_angle</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::User_data</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Point_source_ID</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Deleted_flag</computeroutput> with type <computeroutput>unsigned int</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::GPS_time</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::R</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::G</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::B</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::I</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> and defaults to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted if the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga912d110b39abc211a85240def2ca2317" kindref="member">make_las_point_reader()</ref></computeroutput></para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="378" column="6" bodyfile="CGAL/IO/read_las_points.h" bodystart="378" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga39f95610b08508016f88790086e5c008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_LAS</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_LAS</name>
        <qualifiedname>CGAL::IO::read_LAS</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (position only) using the <ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional properties are ignored.</para>
<para><simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> and defaults to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" kindref="member">read_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="463" column="6" bodyfile="CGAL/IO/read_las_points.h" bodystart="463" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga3689f3b5e3c58d217b56915af9fddfb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_LAS</definition>
        <argsstring>(const std::string &amp;filename, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_LAS</name>
        <qualifiedname>CGAL::IO::read_LAS</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (position only) using the <ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional properties are ignored.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput><ref refid="classDefaultConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">DefaultConstructible</ref></computeroutput> and defaults to <computeroutput><ref refid="structCGAL_1_1value__type__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">value_type_traits</ref>&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classWritablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">WritablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" kindref="member">read_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="527" column="6" bodyfile="CGAL/IO/read_las_points.h" bodystart="527" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1gae7018ffb846e16d416a9bf90f7ca6e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
        <definition>std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; CGAL::IO::make_las_point_writer</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_las_point_writer</name>
        <qualifiedname>CGAL::IO::make_las_point_writer</qualifiedname>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>generates a LAS property handler to write 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSet3IOLAS_1ga0c12c2bb8a472ab6e4b31930ef124c09" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">write_LAS()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="77" column="1" bodyfile="CGAL/IO/write_las_points.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1gafaeb3b48279532412ec422c90a7f05fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PointMap</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_LAS_with_properties</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; point_property, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>write_LAS_with_properties</name>
        <qualifiedname>CGAL::IO::write_LAS_with_properties</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>output stream. </para>
</briefdescription>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
          <briefdescription><para>input point range. </para>
</briefdescription>
        </param>
        <param>
          <type>std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
          <declname>point_property</declname>
          <briefdescription><para>property handler for points </para>
</briefdescription>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
          <briefdescription><para>parameter pack of property handlers </para>
</briefdescription>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> with properties to a .las stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandle</computeroutput> is a <computeroutput>std::pair&lt;PropertyMap, LAS_property::Tag &gt;</computeroutput> used to write a scalar value <computeroutput>LAS_property::Tag::type</computeroutput> as a LAS property (for example, writing an <computeroutput>int</computeroutput> variable as an <computeroutput>int</computeroutput> LAS property). An exception is used for points that are written using a <computeroutput>std::tuple</computeroutput> object.</para>
<para>See documentation of <computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" kindref="member">read_LAS_with_properties()</ref></computeroutput> for the list of available <computeroutput>LAS_property::Tag</computeroutput> classes.</para>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with a value_type = <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Point_3</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>make_las_point_writer()</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="219" column="6" bodyfile="CGAL/IO/write_las_points.h" bodystart="219" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga9b581aa551033a9ec7a44ff6d8d9e3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_LAS</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_LAS</name>
        <qualifiedname>CGAL::IO::write_LAS</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions only), using the <ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1gafaeb3b48279532412ec422c90a7f05fc" kindref="member">write_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="312" column="6" bodyfile="CGAL/IO/write_las_points.h" bodystart="312" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga199f672f2decde903ca1ae1af0a02ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_LAS</definition>
        <argsstring>(const std::string &amp;filename, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_LAS</name>
        <qualifiedname>CGAL::IO::write_LAS</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions only), using the <ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">LAS (Lidar) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref>&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1gafaeb3b48279532412ec422c90a7f05fc" kindref="member">write_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="367" column="6" bodyfile="CGAL/IO/write_las_points.h" bodystart="367" bodyend="378"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Read and write points (with or without additional properties) in LAS format. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
