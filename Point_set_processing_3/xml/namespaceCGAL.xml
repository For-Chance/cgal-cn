<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Point__set__with__structure" prot="public">CGAL::Point_set_with_structure</innerclass>
    <innernamespace refid="namespaceCGAL_1_1IO">CGAL::IO</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1OpenGR">CGAL::OpenGR</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1Point__set__processing__3">CGAL::Point_set_processing_3</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1pointmatcher">CGAL::pointmatcher</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga01192a227578fee0c5676ba6a5e88931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double CGAL::bilateral_smooth_point_set</definition>
        <argsstring>(PointRange &amp;points, unsigned int k, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>bilateral_smooth_point_set</name>
        <qualifiedname>CGAL::bilateral_smooth_point_set</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>This function smooths an input point set by iteratively projecting each point onto the implicit surface patch fitted over its nearest neighbors. </para>
        </briefdescription>
        <detaileddescription>
<para>Bilateral projection preserves sharp features according to the normal (gradient) information. Both point positions and normals will be modified. For more details, please see section 4 in <ref refid="citelist_1CITEREF_ear-2013" kindref="member">[5]</ref>.</para>
<para>A parallel version of this function is provided and requires the executable to be linked against the <ulink url="https://github.com/oneapi-src/oneTBB">Intel TBB library</ulink>. To control the number of threads used, the user may use the tbb::task_scheduler_init class. See the <ulink url="https://software.intel.com/content/www/us/en/develop/documentation/onetbb-documentation/top.html">TBB documentation</ulink> for more details.</para>
<para><simplesect kind="pre"><para>Normals must be unit vectors </para>
</simplesect>
<simplesect kind="pre"><para>k &gt;= 2</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput>Sequential_tag</computeroutput>, <computeroutput>Parallel_tag</computeroutput>, and <computeroutput>Parallel_if_available_tag</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the neighborhood for the implicit surface patch fitting. The larger the value is, the smoother the result will be. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>Normals are computed and stored internally. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> (no limit) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If provided, the neighborhood of a query point is computed with a fixed spherical radius instead of a fixed number of neighbors. In that case, the parameter <computeroutput>k</computeroutput> is used as a limit on the number of points returned by each spherical query (to avoid overly large number of points in high density areas). </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sharpness_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>controls the sharpness of the result </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>30</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The larger the value is, the smoother the result will be. The range of possible value is <computeroutput>[0, 90]</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped, all points are left unchanged and the function return <computeroutput>NaN</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>When <computeroutput>CGAL::Parallel_tag</computeroutput> is used, the <computeroutput>callback</computeroutput> mechanism is called asynchronously on a separate thread and shouldn&apos;t access or modify the variables that are parameters of the algorithm. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>Average point movement error. It&apos;s a convergence criterium for the algorithm. This value can help the user to decide how many iterations are sufficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/bilateral_smooth_point_set.h" line="263" column="1" bodyfile="CGAL/bilateral_smooth_point_set.h" bodystart="263" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga2531a1366bea67edef99e87d6b8819ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename ClusterMap</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::cluster_point_set</definition>
        <argsstring>(PointRange &amp;points, ClusterMap cluster_map, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>cluster_point_set</name>
        <qualifiedname>CGAL::cluster_point_set</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>ClusterMap</type>
          <declname>cluster_map</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Identifies connected components on a nearest neighbor graph built using a query sphere of fixed radius centered on each point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ClusterMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ReadWritePropertyMap</computeroutput> with value type <computeroutput>std::size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cluster_map</parametername>
</parameternamelist>
<parameterdescription>
<para>maps each point to the index of the cluster it belongs to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped and the number of already computed clusters is returned. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> percent of the bounding box diagonal </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>attraction_factor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>used to compute adjacencies between clusters. Adjacencies are computed using a nearest neighbor graph built similarly to the one used for clustering, using <computeroutput>attraction_factor * neighbor_radius</computeroutput> as parameter. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>2</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>adjacencies</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an output iterator used to output pairs containing the indices of two adjacent clusters. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>OutputIterator</computeroutput> that accepts objects of type <computeroutput>std::pair&lt;std::size_t, std::size_t&gt;</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Emptyset_iterator</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is not used, adjacencies are not computed at all. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>the number of clusters identified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/cluster_point_set.h" line="132" column="13" bodyfile="CGAL/cluster_point_set.h" bodystart="132" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga8b330397a3fb68176c851fd7d214b513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::compute_average_spacing</definition>
        <argsstring>(const PointRange &amp;points, unsigned int k, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>compute_average_spacing</name>
        <qualifiedname>CGAL::compute_average_spacing</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Computes average spacing from k nearest neighbors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>k &gt;= 2.</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput>Sequential_tag</computeroutput>, <computeroutput>Parallel_tag</computeroutput>, and <computeroutput>Parallel_if_available_tag</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped, the average spacing value estimated on the processed subset is returned. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>When <computeroutput>CGAL::Parallel_tag</computeroutput> is used, the <computeroutput>callback</computeroutput> mechanism is called asynchronously on a separate thread and shouldn&apos;t access or modify the variables that are parameters of the algorithm. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>average spacing (scalar). The return type <computeroutput>FT</computeroutput> is a number type. It is either deduced from the <computeroutput>geom_traits</computeroutput> Named Parameters if provided, or the geometric traits class deduced from the point property map of <computeroutput>points</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/compute_average_spacing.h" line="154" column="1" bodyfile="CGAL/compute_average_spacing.h" bodystart="154" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga8712cbc64f1cfd4dd2f61049a24b90f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::edge_aware_upsample_point_set</definition>
        <argsstring>(const PointRange &amp;points, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>edge_aware_upsample_point_set</name>
        <qualifiedname>CGAL::edge_aware_upsample_point_set</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>This method progressively upsamples the point set while approaching the edge singularities (detected by normal variation), which generates a denser point set from an input point set. </para>
        </briefdescription>
        <detaileddescription>
<para>This has applications in point-based rendering, hole filling, and sparse surface reconstruction. Normals of points are required as input. For more details, please refer to <ref refid="citelist_1CITEREF_ear-2013" kindref="member">[5]</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel versions of <computeroutput><ref refid="group__PkgPointSetProcessing3Algorithms_1ga8b330397a3fb68176c851fd7d214b513" kindref="member">compute_average_spacing()</ref></computeroutput> (called internally). Possible values are <computeroutput>Sequential_tag</computeroutput>, <computeroutput>Parallel_tag</computeroutput>, and <computeroutput>Parallel_if_available_tag</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the output iterator. The type of the objects put in it is <computeroutput>std::pair&lt;geom_traits::Point_3, geom_traits::Vector_3&gt;</computeroutput>. Note that the user may use a <ulink url="https://www.boost.org/libs/iterator/doc/function_output_iterator.html">function_output_iterator</ulink> to match specific needs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator where output points and normals are put. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="7" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sharpness_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>controls the sharpness of the result </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>30.00</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The larger the value is, the smoother the result will be. The range of possible value is <computeroutput>[0, 90]</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>edge_sensitivity</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>controls the priority of points inserted along sharp features </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Larger values of edge-sensitivity give higher priority to inserting points along sharp features. The range of possible values is <computeroutput>[0, 1]</computeroutput>. See section <ref refid="index_1Point_set_processing_3Upsample_Parameter1" kindref="member">Parameter: edge_sensitivity</ref> for an example </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_output_points</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the number of output points to generate </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1000</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> (no limit) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If provided, the neighborhood of a query point is computed with a fixed spherical radius instead of a fixed number of neighbors. In that case, the parameter <computeroutput>k</computeroutput> is used as a limit on the number of points returned by each spherical query (to avoid overly large number of points in high density areas). </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/edge_aware_upsample_point_set.h" line="355" column="1" bodyfile="CGAL/edge_aware_upsample_point_set.h" bodystart="355" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga6e2493a424482f07d766f12fedefedd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename QueryPointRange</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::estimate_local_k_neighbor_scales</definition>
        <argsstring>(const PointRange &amp;points, const QueryPointRange &amp;queries, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>estimate_local_k_neighbor_scales</name>
        <qualifiedname>CGAL::estimate_local_k_neighbor_scales</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const QueryPointRange &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Estimates the local scale in a K nearest neighbors sense on a set of user-defined query points. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed scales correspond to the smallest scales such that the K subsets of points have the appearance of a surface in 3D or the appearance of a curve in 2D (see <ref refid="index_1Point_set_processing_3Scale" kindref="member">Automatic Scale Estimation</ref>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>QueryPointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>query_point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>is used to store the computed scales. It accepts values of type <computeroutput>std::size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queries</parametername>
</parameternamelist>
<parameterdescription>
<para>range of locations where scale must be estimated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to store the computed scales </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> (or <computeroutput>geom_traits::Point_2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> (or <computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_2&gt;</computeroutput>) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>query_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the property map containing the points associated to the elements of the point range <computeroutput>queries</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> (or <computeroutput>geom_traits::Point_2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> (or <computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_2&gt;</computeroutput>) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="note"><para>This function accepts both 2D and 3D points, but sample points and query must have the same dimension. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/estimate_scale.h" line="487" column="1" bodyfile="CGAL/estimate_scale.h" bodystart="487" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga8c6af1df54e336bd0b9a2de6b909bccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::estimate_global_k_neighbor_scale</definition>
        <argsstring>(const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>estimate_global_k_neighbor_scale</name>
        <qualifiedname>CGAL::estimate_global_k_neighbor_scale</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Estimates the global scale in a K nearest neighbors sense. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed scale corresponds to the smallest scale such that the K subsets of points have the appearance of a surface in 3D or the appearance of a curve in 2D (see <ref refid="index_1Point_set_processing_3Scale" kindref="member">Automatic Scale Estimation</ref>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> (or <computeroutput>geom_traits::Point_2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> (or <computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_2&gt;</computeroutput>) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="note"><para>This function accepts both 2D and 3D points.</para>
</simplesect>
<simplesect kind="return"><para>The estimated scale in the K nearest neighbors sense. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/estimate_scale.h" line="558" column="1" bodyfile="CGAL/estimate_scale.h" bodystart="558" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1gaf45220685eff6649d29f600eb66fb6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename QueryPointRange</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::estimate_local_range_scales</definition>
        <argsstring>(const PointRange &amp;points, const QueryPointRange &amp;queries, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>estimate_local_range_scales</name>
        <qualifiedname>CGAL::estimate_local_range_scales</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const QueryPointRange &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Estimates the local scale in a range sense on a set of user-defined query points. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed scales correspond to the smallest scales such that the subsets of points included in the sphere range have the appearance of a surface in 3D or the appearance of a curve in 2D (see <ref refid="index_1Point_set_processing_3Scale" kindref="member">Automatic Scale Estimation</ref>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>QueryPointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>query_point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>is used to store the computed scales. It accepts values of type <computeroutput>geom_traits::FT</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queries</parametername>
</parameternamelist>
<parameterdescription>
<para>range of locations where scale must be estimated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to store the computed scales </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> (or <computeroutput>geom_traits::Point_2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> (or <computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_2&gt;</computeroutput>) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>query_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the property map containing the points associated to the elements of the point range <computeroutput>queries</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> (or <computeroutput>geom_traits::Point_2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> (or <computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_2&gt;</computeroutput>) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="note"><para>This function accepts both 2D and 3D points, but sample points and query must have the same dimension. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/estimate_scale.h" line="629" column="1" bodyfile="CGAL/estimate_scale.h" bodystart="629" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga28fe6443638647be0874b283085eb2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>FT</type>
        <definition>FT CGAL::estimate_global_range_scale</definition>
        <argsstring>(const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>estimate_global_range_scale</name>
        <qualifiedname>CGAL::estimate_global_range_scale</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Estimates the global scale in a range sense. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed scale corresponds to the smallest scale such that the subsets of points inside the sphere range have the appearance of a surface in 3D or the appearance of a curve in 2D (see <ref refid="index_1Point_set_processing_3Scale" kindref="member">Automatic Scale Estimation</ref>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> (or <computeroutput>geom_traits::Point_2</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> (or <computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_2&gt;</computeroutput>) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="note"><para>This function accepts both 2D and 3D points.</para>
</simplesect>
<simplesect kind="return"><para>The estimated scale in the range sense. The return type <computeroutput>FT</computeroutput> is a number type. It is either deduced from the <computeroutput>geom_traits</computeroutput> Named Parameters if provided, or the geometric traits class deduced from the point property map of <computeroutput>points</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/estimate_scale.h" line="707" column="1" bodyfile="CGAL/estimate_scale.h" bodystart="707" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga7757ef9b3900e42fde26f5a0ac56e20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>PointRange::iterator</type>
        <definition>PointRange::iterator CGAL::grid_simplify_point_set</definition>
        <argsstring>(PointRange &amp;points, double epsilon, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>grid_simplify_point_set</name>
        <qualifiedname>CGAL::grid_simplify_point_set</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Merges points which belong to the same cell of a grid of cell size = <computeroutput>epsilon</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method modifies the order of input points so as to pack all remaining points first, and returns an iterator over the first point to remove (see erase-remove idiom). For this reason it should not be called on sorted containers.</para>
<para><simplesect kind="pre"><para><computeroutput>epsilon &gt; 0</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>tolerance value when merging 3D points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>min_points_per_cell</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>minimum number of points in a cell such that a point in this cell is kept after simplification </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>1 </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If a value greater than 1 is used, the algorithm also acts as an outlier filtering algorithm, by removing low-density areas. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>iterator over the first point to remove. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/grid_simplify_point_set.h" line="235" column="1" bodyfile="CGAL/grid_simplify_point_set.h" bodystart="235" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga3420351b6d3fad079d13f894f42e9d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>PointRange::iterator</type>
        <definition>PointRange::iterator CGAL::hierarchy_simplify_point_set</definition>
        <argsstring>(PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>hierarchy_simplify_point_set</name>
        <qualifiedname>CGAL::hierarchy_simplify_point_set</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Recursively split the point set in smaller clusters until the clusters have fewer than <computeroutput>size</computeroutput> elements and until their variation factor is below <computeroutput>var_max</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method modifies the order of input points so as to pack all remaining points first, and returns an iterator over the first point to remove (see erase-remove idiom). For this reason it should not be called on sorted containers.</para>
<para><simplesect kind="pre"><para><computeroutput>0 &lt; maximum_variation &lt;= 1/3</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>size &gt; 0</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped and simplification stops with no guarantee on the output. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>size</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value for cluster size </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>10</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_variation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a value for maximum cluster variation </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>1/3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>diagonalize_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the solver used for diagonalizing covariance matrices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>DiagonalizeTraits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined then an overload using <computeroutput>Eigen_diagonalize_traits</computeroutput> is provided. Otherwise, the internal implementation <computeroutput>CGAL::Diagonalize_traits</computeroutput> is used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>iterator over the first point to remove. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/hierarchy_simplify_point_set.h" line="181" column="3" bodyfile="CGAL/hierarchy_simplify_point_set.h" bodystart="181" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1af8028bd44a7809e7329d2f923c3267aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_las_points_with_properties</definition>
        <argsstring>(std::istream &amp;is, OutputIterator output, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>read_las_points_with_properties</name>
        <qualifiedname>CGAL::read_las_points_with_properties</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="585" column="7" bodyfile="CGAL/IO/read_las_points.h" bodystart="585" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a679cc492d7c822269f972f14a6e0b5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_las_points</definition>
        <argsstring>(std::istream &amp;is, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_las_points</name>
        <qualifiedname>CGAL::read_las_points</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="608" column="7" bodyfile="CGAL/IO/read_las_points.h" bodystart="608" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a7fafab3756049fc934b00867f5ba66b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_off_points</definition>
        <argsstring>(std::istream &amp;is, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_off_points</name>
        <qualifiedname>CGAL::read_off_points</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_off_points.h" line="416" column="7" bodyfile="CGAL/IO/read_off_points.h" bodystart="416" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a0efc7039008ad05f4bd8a626125d9a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_ply_points_with_properties</definition>
        <argsstring>(std::istream &amp;is, OutputIterator output, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>read_ply_points_with_properties</name>
        <qualifiedname>CGAL::read_ply_points_with_properties</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="436" column="7" bodyfile="CGAL/IO/read_ply_points.h" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a48c6dda19111afc9237b831b18898b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_ply_points</definition>
        <argsstring>(std::istream &amp;is, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_ply_points</name>
        <qualifiedname>CGAL::read_ply_points</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="443" column="7" bodyfile="CGAL/IO/read_ply_points.h" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1aa0c571c5b59363b09d5a1acb60042320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::read_xyz_points</definition>
        <argsstring>(std::istream &amp;is, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_xyz_points</name>
        <qualifiedname>CGAL::read_xyz_points</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_xyz_points.h" line="401" column="7" bodyfile="CGAL/IO/read_xyz_points.h" bodystart="401" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a87bea1ffafb57908fe3a79d8e87f6f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PointMap</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_las_points_with_properties</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, std::tuple&lt; PointMap, IO::LAS_property::X, IO::LAS_property::Y, IO::LAS_property::Z &gt; point_property, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>write_las_points_with_properties</name>
        <qualifiedname>CGAL::write_las_points_with_properties</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>std::tuple&lt; PointMap, IO::LAS_property::X, IO::LAS_property::Y, IO::LAS_property::Z &gt;</type>
          <declname>point_property</declname>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="415" column="7" bodyfile="CGAL/IO/write_las_points.h" bodystart="415" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1aa384a6df713085287fa468148d2813ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_las_points</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_las_points</name>
        <qualifiedname>CGAL::write_las_points</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="428" column="6" bodyfile="CGAL/IO/write_las_points.h" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a57cfb251d7d34749024368574655943e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_off_points</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_off_points</name>
        <qualifiedname>CGAL::write_off_points</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_off_points.h" line="295" column="7" bodyfile="CGAL/IO/write_off_points.h" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1adfff4acd955cf5b5b0210a57a60e90b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_ply_points_with_properties</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>write_ply_points_with_properties</name>
        <qualifiedname>CGAL::write_ply_points_with_properties</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>output stream. </para>
</briefdescription>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
          <briefdescription><para>input point range. </para>
</briefdescription>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
          <briefdescription><para>parameter pack of property handlers </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="359" column="7" bodyfile="CGAL/IO/write_ply_points.h" bodystart="359" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1ae346c95e937b0b249e4362b223fb5aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_ply_points</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_ply_points</name>
        <qualifiedname>CGAL::write_ply_points</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="368" column="7" bodyfile="CGAL/IO/write_ply_points.h" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1a5cb62eafc3d4776258ab116b6af34611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::write_xyz_points</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_xyz_points</name>
        <qualifiedname>CGAL::write_xyz_points</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_xyz_points.h" line="285" column="7" bodyfile="CGAL/IO/write_xyz_points.h" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga078e25209373cab0e1f3524202489771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::jet_estimate_normals</definition>
        <argsstring>(PointRange &amp;points, unsigned int k, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>jet_estimate_normals</name>
        <qualifiedname>CGAL::jet_estimate_normals</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Estimates normal directions of the range of <computeroutput>points</computeroutput> using jet fitting on the nearest neighbors. </para>
        </briefdescription>
        <detaileddescription>
<para>The output normals are randomly oriented.</para>
<para><simplesect kind="pre"><para><computeroutput>k &gt;= 2</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput>Sequential_tag</computeroutput>, <computeroutput>Parallel_tag</computeroutput>, and <computeroutput>Parallel_if_available_tag</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="7" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> (no limit) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If provided, the neighborhood of a query point is computed with a fixed spherical radius instead of a fixed number of neighbors. In that case, the parameter <computeroutput>k</computeroutput> is used as a limit on the number of points returned by each spherical query (to avoid overly large number of points in high density areas). </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>degree_fitting</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the degree of fitting </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>see <computeroutput>CGAL::Monge_via_jet_fitting</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>svd_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the linear algebra algorithm used in the class <computeroutput>CGAL::Monge_via_jet_fitting</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class fitting the requirements of <computeroutput>CGAL::Monge_via_jet_fitting</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If Eigen 3.2 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined, then <computeroutput>CGAL::Eigen_svd</computeroutput> is used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped and the remaining normals are left unchanged. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>When <computeroutput>CGAL::Parallel_tag</computeroutput> is used, the <computeroutput>callback</computeroutput> mechanism is called asynchronously on a separate thread and shouldn&apos;t access or modify the variables that are parameters of the algorithm. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/jet_estimate_normals.h" line="179" column="1" bodyfile="CGAL/jet_estimate_normals.h" bodystart="179" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga96a3738be3b2b9bd1587af78ae10e67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::jet_smooth_point_set</definition>
        <argsstring>(PointRange &amp;points, unsigned int k, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>jet_smooth_point_set</name>
        <qualifiedname>CGAL::jet_smooth_point_set</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Smoothes the range of <computeroutput>points</computeroutput> using jet fitting on the nearest neighbors and reprojection onto the jet. </para>
        </briefdescription>
        <detaileddescription>
<para>As this method relocates the points, it should not be called on containers sorted w.r.t. point locations.</para>
<para><simplesect kind="pre"><para><computeroutput>k &gt;= 2</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput>Sequential_tag</computeroutput>, <computeroutput>Parallel_tag</computeroutput>, and <computeroutput>Parallel_if_available_tag</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="7" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> (no limit) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If provided, the neighborhood of a query point is computed with a fixed spherical radius instead of a fixed number of neighbors. In that case, the parameter <computeroutput>k</computeroutput> is used as a limit on the number of points returned by each spherical query (to avoid overly large number of points in high density areas). </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>degree_fitting</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the degree of fitting </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>see <computeroutput>CGAL::Monge_via_jet_fitting</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>degree_monge</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the Monge degree </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>see <computeroutput>CGAL::Monge_via_jet_fitting</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>svd_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the linear algebra algorithm used in the class <computeroutput>CGAL::Monge_via_jet_fitting</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class fitting the requirements of <computeroutput>CGAL::Monge_via_jet_fitting</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If Eigen 3.2 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined, then <computeroutput>CGAL::Eigen_svd</computeroutput> is used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped and the remaining points are left unchanged. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>When <computeroutput>CGAL::Parallel_tag</computeroutput> is used, the <computeroutput>callback</computeroutput> mechanism is called asynchronously on a separate thread and shouldn&apos;t access or modify the variables that are parameters of the algorithm. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/jet_smooth_point_set.h" line="188" column="1" bodyfile="CGAL/jet_smooth_point_set.h" bodystart="188" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga17c3c558c3799b65bd23fba971a82a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>PointRange::iterator</type>
        <definition>PointRange::iterator CGAL::mst_orient_normals</definition>
        <argsstring>(PointRange &amp;points, unsigned int k, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>mst_orient_normals</name>
        <qualifiedname>CGAL::mst_orient_normals</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Orients the normals of the range of <computeroutput>points</computeroutput> using the propagation of a seed orientation through a minimum spanning tree of the Riemannian graph. </para>
        </briefdescription>
        <detaileddescription>
<para>This method modifies the order of input points so as to pack all successfully oriented points first, and returns an iterator over the first point with an unoriented normal (see erase-remove idiom). For this reason it should not be called on sorted containers. It is based on <ref refid="citelist_1CITEREF_cgal:hddms-srup-92" kindref="member">[3]</ref>.</para>
<para><simplesect kind="pre"><para>Normals must be unit vectors </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>k &gt;= 2</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> (no limit) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If provided, the neighborhood of a query point is computed with a fixed spherical radius instead of a fixed number of neighbors. In that case, the parameter <computeroutput>k</computeroutput> is used as a limit on the number of points returned by each spherical query (to avoid overly large number of points in high density areas). </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_is_constrained_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing information about points being constrained or not </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>PointRange::iterator::value_type</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, the highest point (highest Z coordinate) will be used as the unique seed with an upward oriented. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Points with a <computeroutput>true</computeroutput> value will be used as seed points: their normal will be considered as already oriented, it won&apos;t be altered and it will be propagated to its neighbors. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>iterator over the first point with an unoriented normal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/mst_orient_normals.h" line="610" column="1" bodyfile="CGAL/mst_orient_normals.h" bodystart="610" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga721aeb7af4b2d31e08e75bc5d53303cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::pca_estimate_normals</definition>
        <argsstring>(PointRange &amp;points, unsigned int k, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>pca_estimate_normals</name>
        <qualifiedname>CGAL::pca_estimate_normals</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Estimates normal directions of the range of <computeroutput>points</computeroutput> by linear least squares fitting of a plane over the nearest neighbors. </para>
        </briefdescription>
        <detaileddescription>
<para>The output normals are randomly oriented.</para>
<para><simplesect kind="pre"><para><computeroutput>k &gt;= 2</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput>Sequential_tag</computeroutput>, <computeroutput>Parallel_tag</computeroutput>, and <computeroutput>Parallel_if_available_tag</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> (no limit) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If provided, the neighborhood of a query point is computed with a fixed spherical radius instead of a fixed number of neighbors. In that case, the parameter <computeroutput>k</computeroutput> is used as a limit on the number of points returned by each spherical query (to avoid overly large number of points in high density areas). </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped and the remaining normals are left unchanged. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>When <computeroutput>CGAL::Parallel_tag</computeroutput> is used, the <computeroutput>callback</computeroutput> mechanism is called asynchronously on a separate thread and shouldn&apos;t access or modify the variables that are parameters of the algorithm. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/pca_estimate_normals.h" line="154" column="1" bodyfile="CGAL/pca_estimate_normals.h" bodystart="154" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga4be2d94f1791d24b8ba0107bc33ad6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
        </templateparamlist>
        <type>PointRange::iterator</type>
        <definition>PointRange::iterator CGAL::random_simplify_point_set</definition>
        <argsstring>(PointRange &amp;points, double removed_percentage)</argsstring>
        <name>random_simplify_point_set</name>
        <qualifiedname>CGAL::random_simplify_point_set</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>double</type>
          <declname>removed_percentage</declname>
        </param>
        <briefdescription>
<para>Randomly deletes a user-specified fraction of the input points. </para>
        </briefdescription>
        <detaileddescription>
<para>This method modifies the order of input points so as to pack all remaining points first, and returns an iterator over the first point to remove (see erase-remove idiom). For this reason it should not be called on sorted containers.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>removed_percentage</parametername>
</parameternamelist>
<parameterdescription>
<para>percentage of points to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator over the first point to remove. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/random_simplify_point_set.h" line="52" column="1" bodyfile="CGAL/random_simplify_point_set.h" bodystart="52" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga50c708584a8219847ce04f636dcad4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>PointRange::iterator</type>
        <definition>PointRange::iterator CGAL::remove_outliers</definition>
        <argsstring>(PointRange &amp;points, unsigned int k, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>remove_outliers</name>
        <qualifiedname>CGAL::remove_outliers</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Removes outliers: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>computes average squared distance to the nearest neighbors,</para>
</listitem><listitem><para>and partitions the points either using a threshold on the of average distance or selecting a fixed percentage of points with the highest average distances</para>
</listitem></itemizedlist>
</para>
<para>This method modifies the order of input points so as to pack all remaining points first, and returns an iterator over the first point to remove (see erase-remove idiom). For this reason it should not be called on sorted containers.</para>
<para><simplesect kind="pre"><para><computeroutput>k &gt;= 2</computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput>Sequential_tag</computeroutput>, <computeroutput>Parallel_tag</computeroutput>, and <computeroutput>Parallel_if_available_tag</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> (no limit) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If provided, the neighborhood of a query point is computed with a fixed spherical radius instead of a fixed number of neighbors. In that case, the parameter <computeroutput>k</computeroutput> is used as a limit on the number of points returned by each spherical query (to avoid overly large number of points in high density areas). </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_percent</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum percentage of points to remove </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>10</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>threshold_distance</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the minimum distance for a point to be considered as outlier </para>
</listitem>
<listitem>
<para><bold>Type: </bold>double </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Distance here is the square root of the average squared distance to K-nearest neighbors </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped, all points are left unchanged and the function return <computeroutput>points.size()</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>iterator over the first point to remove.</para>
</simplesect>
<simplesect kind="note"><para>There are two thresholds that can be used: <computeroutput>threshold_percent</computeroutput> and <computeroutput>threshold_distance</computeroutput>. This function returns the smallest number of outliers such that at least one of these threshold is fulfilled. This means that if <computeroutput>threshold_percent=100</computeroutput>, only <computeroutput>threshold_distance</computeroutput> is taken into account; if <computeroutput>threshold_distance=0</computeroutput> only <computeroutput>threshold_percent</computeroutput> is taken into account. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/remove_outliers.h" line="176" column="1" bodyfile="CGAL/remove_outliers.h" bodystart="176" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1gafc3627234666e1fb458e9387e9d5f3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::scanline_orient_normals</definition>
        <argsstring>(PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>scanline_orient_normals</name>
        <qualifiedname>CGAL::scanline_orient_normals</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>orients the normals of the range of <computeroutput>points</computeroutput> by estimating a line of sight and checking its consistency with the current normal orientation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function requires the input <computeroutput>points</computeroutput> to be ordered along scanlines aligned on the XY-plane. It is typically designed for 2.5D urban datasets acquired through, for example, airborne LIDAR devices.</para>
</simplesect>
First, scanlines are estimated as subranges of <computeroutput>points</computeroutput> by iterating on <computeroutput>points</computeroutput>:</para>
<para><itemizedlist>
<listitem><para>if the named parameter <computeroutput>scanline_id_map</computeroutput> is provided, the range is cut every time the id changes.</para>
</listitem><listitem><para>if no scanline ID map is provided, a fallback method simply cuts the range every time 3 consecutive points form an acute angle on the projected XY-plane. This fallback method gives suboptimal results.</para>
</listitem></itemizedlist>
</para>
<para>Then, the line of sight (estimated vector between a point and the position of the scanner at its time of acquisition) is estimated:</para>
<para><itemizedlist>
<listitem><para>if <computeroutput>scan_angle</computeroutput> is provided, the line of sight can be directly computed as a combination of the estimated scanline and of the scan angle.</para>
</listitem><listitem><para>if no scan angle map is provided, then for each scanline, the position of the scanner is estimated as being above of the barycenter of the points of the scanline projected on the XY-plane. This fallback method gives suboptimal results.</para>
</listitem></itemizedlist>
</para>
<para>Once the line of sight is estimated for each point, the normals are oriented by checking, for each of them, if the line of sight and the normal vector give a positive scalar product. If they don&apos;t, then the normal vector is inverted.</para>
<para><simplesect kind="note"><para>This method gives optimal results when <computeroutput>scanline_id_map</computeroutput> and <computeroutput>scan_angle</computeroutput> are provided. Correct results may still be produced in the absence of either one or both of these properties, as long as the point set is ordered in 2.5D scanlines.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>scan_angle_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating the angle of acquisition (in degrees) to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is convertible to <computeroutput>double</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>scanline_id_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating a scanline ID to the elements of the point set <computeroutput>points</computeroutput>. A scanline is detected as a consecutive subrange of items in the input range <computeroutput>point</computeroutput> whose ID are identical. IDs do not need to be unique, they just need to be different for two consecutive scanlines. The LAS property <computeroutput>scan_direction_flag</computeroutput> (whose values are either 0 or 1 depending on the direction of the scanner) can be used. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is a model of <computeroutput>EqualityComparable</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/scanline_orient_normals.h" line="461" column="6" bodyfile="CGAL/scanline_orient_normals.h" bodystart="461" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1gaebbc04909dfd575a94f932c8d3bacdce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PlaneRange</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::structure_point_set</definition>
        <argsstring>(const PointRange &amp;points, const PlaneRange &amp;planes, OutputIterator output, double epsilon, const NamedParameters &amp;np)</argsstring>
        <name>structure_point_set</name>
        <qualifiedname>CGAL::structure_point_set</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PlaneRange &amp;</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
<para>This is an implementation of the Point Set Structuring algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>This algorithm takes advantage of a set of detected planes: it detects adjacency relationships between planes and resamples the detected planes, edges and corners to produce a structured point set.</para>
<para>The size parameter <computeroutput>epsilon</computeroutput> is used both for detecting adjacencies and for setting the sampling density of the structured point set.</para>
<para>For more details, please refer to <ref refid="citelist_1CITEREF_cgal:la-srpss-13" kindref="member">[6]</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PlaneRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>plane_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the output iterator. The type of the objects put in it is <computeroutput>std::pair&lt;Kernel::Point_3, Kernel::Vector_3&gt;</computeroutput>. Note that the user may use a <ulink url="https://www.boost.org/libs/iterator/doc/function_output_iterator.html">function_output_iterator</ulink> to match specific needs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>planes</parametername>
</parameternamelist>
<parameterdescription>
<para>input plane range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator where output points are written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>size parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>plane_index_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating the index of a point in the input range to the index of plane (<computeroutput>-1</computeroutput> if the point is not assigned to a plane) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>std::size_t</computeroutput> as key type and <computeroutput>int</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold>There is no default, this parameters is mandatory. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>plane_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map containing the planes associated to the elements of the plane range <computeroutput>planes</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>PlaneRange::iterator::value_type</computeroutput> as key type and <computeroutput>geom_traits::Plane_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;Kernel::Plane_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>attraction_factor</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>multiple of a tolerance <computeroutput>epsilon</computeroutput> used to connect simplices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/structure_point_set.h" line="1556" column="1" bodyfile="CGAL/structure_point_set.h" bodystart="1556" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1gac57ce53e3249a66e4c19e85f439ff01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FT</type>
          </param>
          <param>
            <type>class VCMTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::vcm_is_on_feature_edge</definition>
        <argsstring>(std::array&lt; FT, 6 &gt; &amp;cov, double threshold, VCMTraits)</argsstring>
        <name>vcm_is_on_feature_edge</name>
        <qualifiedname>CGAL::vcm_is_on_feature_edge</qualifiedname>
        <param>
          <type>std::array&lt; FT, 6 &gt; &amp;</type>
          <declname>cov</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>VCMTraits</type>
        </param>
        <briefdescription>
<para>determines if a point is on a sharp feature edge from a point set for which the Voronoi covariance Measures have been computed. </para>
        </briefdescription>
        <detaileddescription>
<para>The sharpness of the edge, specified by parameter <computeroutput>threshold</computeroutput>, is used to filtered points according to the external angle around a sharp feature.</para>
<para>A point is considered to be on a sharp feature if the external angle <computeroutput>alpha</computeroutput> at the edge is such that <computeroutput>alpha &gt;= 2 / sqrt(3) * sqrt(threshold)</computeroutput>. In particular this means that if the input contains sharp features with different external angles, the one with the smallest external angle should be considered, which however would result in selecting more points on sharper regions. More details are provided in <ref refid="citelist_1CITEREF_cgal:mog-vbcfe-11" kindref="member">[9]</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VCMTraits</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>DiagonalizeTraits</computeroutput>. It can be omitted: if Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined then an overload using <computeroutput>Eigen_diagonalize_traits</computeroutput> is provided. Otherwise, the internal implementation <computeroutput>Diagonalize_traits</computeroutput> is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3Algorithms_1ga258a9b3a40d10533f8f01d64b4e91eca" kindref="member">CGAL::compute_vcm()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/vcm_estimate_edges.h" line="47" column="1" bodyfile="CGAL/vcm_estimate_edges.h" bodystart="47" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceCGAL_1ade39fe0f1dbf7782f6620ab879333efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::vcm_is_on_feature_edge</definition>
        <argsstring>(std::array&lt; FT, 6 &gt; &amp;cov, double threshold)</argsstring>
        <name>vcm_is_on_feature_edge</name>
        <qualifiedname>CGAL::vcm_is_on_feature_edge</qualifiedname>
        <param>
          <type>std::array&lt; FT, 6 &gt; &amp;</type>
          <declname>cov</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/vcm_estimate_edges.h" line="70" column="1" bodyfile="CGAL/vcm_estimate_edges.h" bodystart="70" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga258a9b3a40d10533f8f01d64b4e91eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::compute_vcm</definition>
        <argsstring>(const PointRange &amp;points, std::vector&lt; std::array&lt; double, 6 &gt; &gt; &amp;ccov, double offset_radius, double convolution_radius, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>compute_vcm</name>
        <qualifiedname>CGAL::compute_vcm</qualifiedname>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>std::vector&lt; std::array&lt; double, 6 &gt; &gt; &amp;</type>
          <declname>ccov</declname>
        </param>
        <param>
          <type>double</type>
          <declname>offset_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>convolution_radius</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes the Voronoi Covariance Measure (VCM) of a point cloud, a construction that can be used for normal estimation and sharp feature detection. </para>
        </briefdescription>
        <detaileddescription>
<para>The VCM associates to each point the covariance matrix of its Voronoi cell intersected with the ball of radius <computeroutput>offset_radius</computeroutput>. In addition, if the second radius <computeroutput>convolution_radius</computeroutput> is positive, the covariance matrices are smoothed via a convolution process. More specifically, each covariance matrix is replaced by the average of the matrices of the points located at a distance at most <computeroutput>convolution_radius</computeroutput>. The choice for parameter <computeroutput>offset_radius</computeroutput> should refer to the geometry of the underlying surface while the choice for parameter <computeroutput>convolution_radius</computeroutput> should refer to the noise level in the point cloud. For example, if the point cloud is a uniform and noise-free sampling of a smooth surface, <computeroutput>offset_radius</computeroutput> should be set to the minimum local feature size of the surface, while <computeroutput>convolution_radius</computeroutput> can be set to zero.</para>
<para>The Voronoi covariance matrix of each vertex is stored in an array <computeroutput>a</computeroutput> of length 6 and is as follow:</para>
<para><center>  <formula id="13">$ \begin{bmatrix}
a[0] &amp; a[1] &amp; a[2] \\
a[1] &amp; a[3] &amp; a[4] \\
a[2] &amp; a[4] &amp; a[5] \\
\end{bmatrix}$</formula> </center></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ccov</parametername>
</parameternamelist>
<parameterdescription>
<para>output range of covariance matrices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>offset_radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convolution_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>convolution_radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3Algorithms_1gac57ce53e3249a66e4c19e85f439ff01e" kindref="member">CGAL::vcm_is_on_feature_edge()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3Algorithms_1gaab0fd78ef3e46c4256e9a1145a9d118e" kindref="member">CGAL::vcm_estimate_normals()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/vcm_estimate_normals.h" line="262" column="1" bodyfile="CGAL/vcm_estimate_normals.h" bodystart="262" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1gaab0fd78ef3e46c4256e9a1145a9d118e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::vcm_estimate_normals</definition>
        <argsstring>(PointRange &amp;points, double offset_radius, double convolution_radius, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>vcm_estimate_normals</name>
        <qualifiedname>CGAL::vcm_estimate_normals</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>double</type>
          <declname>offset_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>convolution_radius</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Estimates normal directions of the range of <computeroutput>points</computeroutput> using the Voronoi Covariance Measure with a radius for the convolution. </para>
        </briefdescription>
        <detaileddescription>
<para>The output normals are randomly oriented.</para>
<para>See <computeroutput><ref refid="group__PkgPointSetProcessing3Algorithms_1ga258a9b3a40d10533f8f01d64b4e91eca" kindref="member">compute_vcm()</ref></computeroutput> for a detailed description of the parameters <computeroutput>offset_radius</computeroutput> and <computeroutput>convolution_radius</computeroutput> and of the Voronoi Covariance Measure.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>offset_radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convolution_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>convolution_radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>diagonalize_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the solver used for diagonalizing covariance matrices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>DiagonalizeTraits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined then an overload using <computeroutput>Eigen_diagonalize_traits</computeroutput> is provided. Otherwise, the internal implementation <computeroutput>CGAL::Diagonalize_traits</computeroutput> is used </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/vcm_estimate_normals.h" line="430" column="1" bodyfile="CGAL/vcm_estimate_normals.h" bodystart="430" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1gaf1e415a68652535215c60bc52ebacca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::vcm_estimate_normals</definition>
        <argsstring>(PointRange &amp;points, double offset_radius, unsigned int k, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>vcm_estimate_normals</name>
        <qualifiedname>CGAL::vcm_estimate_normals</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>double</type>
          <declname>offset_radius</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>Estimates normal directions of the range of <computeroutput>points</computeroutput> using the Voronoi Covariance Measure with a number of neighbors for the convolution. </para>
        </briefdescription>
        <detaileddescription>
<para>The output normals are randomly oriented.</para>
<para>See <computeroutput><ref refid="group__PkgPointSetProcessing3Algorithms_1ga258a9b3a40d10533f8f01d64b4e91eca" kindref="member">compute_vcm()</ref></computeroutput> for a detailed description of the parameter <computeroutput>offset_radius</computeroutput> and of the Voronoi Covariance Measure.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>offset_radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbor points used for convolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>diagonalize_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the solver used for diagonalizing covariance matrices </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>DiagonalizeTraits</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined then an overload using <computeroutput>Eigen_diagonalize_traits</computeroutput> is provided. Otherwise, the internal implementation <computeroutput>CGAL::Diagonalize_traits</computeroutput> is used </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/vcm_estimate_normals.h" line="489" column="1" bodyfile="CGAL/vcm_estimate_normals.h" bodystart="489" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3Algorithms_1ga79ee6fb524ec53b9b85eb32e7ae56ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcurrencyTag</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::wlop_simplify_and_regularize_point_set</definition>
        <argsstring>(PointRange &amp;points, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>wlop_simplify_and_regularize_point_set</name>
        <qualifiedname>CGAL::wlop_simplify_and_regularize_point_set</qualifiedname>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>This is an implementation of the Weighted Locally Optimal Projection (WLOP) simplification algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>The WLOP simplification algorithm can produce a set of denoised, outlier-free and evenly distributed particles over the original dense point cloud. The core of the algorithm is a Weighted Locally Optimal Projection operator with a density uniformization term. For more details, please refer to <ref refid="citelist_1CITEREF_wlop-2009" kindref="member">[4]</ref>.</para>
<para>A parallel version of WLOP is provided and requires the executable to be linked against the <ulink url="https://github.com/oneapi-src/oneTBB">Intel TBB library</ulink>. To control the number of threads used, the user may use the tbb::task_scheduler_init class. See the <ulink url="https://software.intel.com/content/www/us/en/develop/documentation/onetbb-documentation/top.html">TBB documentation</ulink> for more details.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput>Sequential_tag</computeroutput>, <computeroutput>Parallel_tag</computeroutput>, and <computeroutput>Parallel_if_available_tag</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>Range</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the output iterator. It must accept objects of type <computeroutput>geom_traits::Point_3</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator where output points are put. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="8" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point set <computeroutput>points</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadWritePropertyMap</computeroutput> whose key type is the value type of the iterator of <computeroutput>PointRange</computeroutput> and whose value type is <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>select_percentage</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>percentage of points to retain </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>5</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>neighbor_radius</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the spherical neighborhood radius </para>
</listitem>
<listitem>
<para><bold>Type: </bold>floating scalar value </para>
</listitem>
<listitem>
<para><bold>Default: </bold>8 times the average spacing of the point set </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This is a key parameter that needs to be finely tuned. The result will be irregular if too small, but a larger value will impact the runtime. In practice, choosing a radius such that the neighborhood of each sample point includes at least two rings of neighboring sample points gives satisfactory result. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>number_of_iterations</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>number of iterations to solve the optimsation problem </para>
</listitem>
<listitem>
<para><bold>Type: </bold>unsigned int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>35</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>More iterations give a more regular result but increase the runtime </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>require_uniform_sampling</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If <computeroutput>true</computeroutput>, an optional preprocessing is applied, which will give better results if the distribution of the input points is highly non-uniform. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>callback</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a mechanism to get feedback on the advancement of the algorithm while it&apos;s running and to interrupt it if needed </para>
</listitem>
<listitem>
<para><bold>Type: </bold>an instance of <computeroutput>std::function&lt;bool(double)&gt;</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is called regularly when the algorithm is running: the current advancement (between 0. and 1.) is passed as parameter. If it returns <computeroutput>true</computeroutput>, then the algorithm continues its execution normally; if it returns <computeroutput>false</computeroutput>, the algorithm is stopped, no output points are generated. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The callback will be copied and therefore needs to be lightweight. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>When <computeroutput>CGAL::Parallel_tag</computeroutput> is used, the <computeroutput>callback</computeroutput> mechanism is called asynchronously on a separate thread and shouldn&apos;t access or modify the variables that are parameters of the algorithm. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/wlop_simplify_and_regularize_point_set.h" line="433" column="1" bodyfile="CGAL/wlop_simplify_and_regularize_point_set.h" bodystart="433" bodyend="613"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Point_set_processing_3.txt" line="1" column="1"/>
  </compounddef>
</doxygen>
