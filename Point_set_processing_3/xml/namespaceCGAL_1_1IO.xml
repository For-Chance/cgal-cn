<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL_1_1IO" kind="namespace" language="C++">
    <compoundname>CGAL::IO</compoundname>
    <innerclass refid="structCGAL_1_1IO_1_1PLY__property" prot="public">CGAL::IO::PLY_property</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga912d110b39abc211a85240def2ca2317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::Kernel::Construct_point_3, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
        <definition>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::Kernel::Construct_point_3, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; CGAL::IO::make_las_point_reader</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_las_point_reader</name>
        <qualifiedname>CGAL::IO::make_las_point_reader</qualifiedname>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>generates a LAS property handler to read 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para>Points are constructed from the input the using 3 LAS properties <computeroutput>LAS_property::X</computeroutput>, <computeroutput>LAS_property::Y</computeroutput> and <computeroutput>LAS_property::Z</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" kindref="member">read_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para>IOStreamLAS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="139" column="1" bodyfile="CGAL/IO/read_las_points.h" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_LAS_with_properties</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>read_LAS_with_properties</name>
        <qualifiedname>CGAL::IO::read_LAS_with_properties</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>reads user-selected points properties from a .las or .laz stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional properties are ignored.</para>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandler</computeroutput> can either be:</para>
<para><itemizedlist>
<listitem><para>A <computeroutput>std::pair&lt;PropertyMap, LAS_property::Tag &gt;</computeroutput> if the user wants to read a LAS property as a scalar value <computeroutput>LAS_property::Tag::type</computeroutput> (for example, storing an <computeroutput>int</computeroutput> LAS property into an <computeroutput>int</computeroutput> variable).</para>
</listitem><listitem><para>A <computeroutput>std::tuple&lt;PropertyMap, Constructor, LAS_property::Tag...&gt;</computeroutput> if the user wants to use one or several LAS properties to construct a complex object (for example, storing 4 <computeroutput>unsigned short</computeroutput> LAS properties into a Color object that can for example be a <computeroutput>std::array&lt;unsigned short, 4&gt;</computeroutput>). In that case, the second element of the tuple should be a functor that constructs the value type of <computeroutput>PropertyMap</computeroutput> from N objects of of type <computeroutput>LAS_property::Tag::type</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>The LAS standard defines a fixed set of properties accessible through the following tag classes:</para>
<para><itemizedlist>
<listitem><para><computeroutput>LAS_property::X</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Y</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Z</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Intensity</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Return_number</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Number_of_returns</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Scan_direction_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Edge_of_flight_line</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Classification</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Synthetic_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Keypoint_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Withheld_flag</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Scan_angle</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::User_data</computeroutput> with type <computeroutput>unsigned char</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Point_source_ID</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::Deleted_flag</computeroutput> with type <computeroutput>unsigned int</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::GPS_time</computeroutput> with type <computeroutput>double</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::R</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::G</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::B</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem><listitem><para><computeroutput>LAS_property::I</computeroutput> with type <computeroutput>unsigned short</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted if the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga912d110b39abc211a85240def2ca2317" kindref="member">make_las_point_reader()</ref></computeroutput></para>
</simplesect>
<simplesect kind="see"><para>IOStreamLAS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="378" column="6" bodyfile="CGAL/IO/read_las_points.h" bodystart="378" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga39f95610b08508016f88790086e5c008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_LAS</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_LAS</name>
        <qualifiedname>CGAL::IO::read_LAS</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (position only) using the IOStreamLAS. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional properties are ignored.</para>
<para><simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" kindref="member">read_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="463" column="6" bodyfile="CGAL/IO/read_las_points.h" bodystart="463" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga3689f3b5e3c58d217b56915af9fddfb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_LAS</definition>
        <argsstring>(const std::string &amp;filename, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_LAS</name>
        <qualifiedname>CGAL::IO::read_LAS</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (position only) using the IOStreamLAS. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional properties are ignored.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" kindref="member">read_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_las_points.h" line="527" column="6" bodyfile="CGAL/IO/read_las_points.h" bodystart="527" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOOff_1gab25342566e9141657969a01cdcf3545f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_OFF</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_OFF</name>
        <qualifiedname>CGAL::IO::read_OFF</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (positions + normals, if available), using the IOStreamOFF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamOFF </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_off_points.h" line="80" column="6" bodyfile="CGAL/IO/read_off_points.h" bodystart="80" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOOff_1gae672e21348cad0a7ce819298f99444e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_OFF</definition>
        <argsstring>(const std::string &amp;fname, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_OFF</name>
        <qualifiedname>CGAL::IO::read_OFF</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (positions + normals, if available), using the IOStreamOFF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>input file name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamOFF </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_off_points.h" line="239" column="6" bodyfile="CGAL/IO/read_off_points.h" bodystart="239" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga818eed34a10f3bde53ac5a23d5bbddd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::Kernel::Construct_point_3, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt;, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt;, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt; PointMap, typename Kernel_traits&lt; typename PointMap::value_type &gt;::Kernel::Construct_point_3, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt; CGAL::IO::make_ply_point_reader</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_ply_point_reader</name>
        <qualifiedname>CGAL::IO::make_ply_point_reader</qualifiedname>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to read 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para>Points are constructed from the input using 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput> and <computeroutput>z</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput>CGAL::Simple_cartesian&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" kindref="member">read_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para>IOStreamPLY </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="74" column="1" declfile="CGAL/IO/read_ply_points.h" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga4375e15f5ec01c7aca1006e216efe4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; VectorMap, typename Kernel_traits&lt; typename VectorMap::value_type &gt;::Kernel::Construct_vector_3, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt;, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt;, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt; VectorMap, typename Kernel_traits&lt; typename VectorMap::value_type &gt;::Kernel::Construct_vector_3, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt; CGAL::IO::make_ply_normal_reader</definition>
        <argsstring>(VectorMap normal_map)</argsstring>
        <name>make_ply_normal_reader</name>
        <qualifiedname>CGAL::IO::make_ply_normal_reader</qualifiedname>
        <param>
          <type>VectorMap</type>
          <declname>normal_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to read 3D normal vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Vectors are constructed from the input using 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>nx</computeroutput>, <computeroutput>ny</computeroutput> and <computeroutput>nz</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput>CGAL::Simple_cartesian&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VectorMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store vectors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" kindref="member">read_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para>IOStreamPLY </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="94" column="1" declfile="CGAL/IO/read_ply_points.h" declline="94" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_PLY_with_properties</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>read_PLY_with_properties</name>
        <qualifiedname>CGAL::IO::read_PLY_with_properties</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>reads user-selected points properties from a .ply stream (ASCII or binary). </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional point properties and faces are ignored.</para>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandler</computeroutput> can either be:</para>
<para><itemizedlist>
<listitem><para>A <computeroutput>std::pair&lt;PropertyMap, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt; &gt;</computeroutput> if the user wants to read a PLY property as a scalar value T (for example, storing an <computeroutput>int</computeroutput> PLY property into an <computeroutput>int</computeroutput> variable).</para>
</listitem><listitem><para>A <computeroutput>std::tuple&lt;PropertyMap, Constructor, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt;...&gt;</computeroutput> if the user wants to use one or several PLY properties to construct a complex object (for example, storing 3 <computeroutput>uchar</computeroutput> PLY properties into a Color object that can for example be a <computeroutput>std::array&lt;unsigned char, 3&gt;</computeroutput>). In that case, the second element of the tuple should be a functor that constructs the value type of <computeroutput>PropertyMap</computeroutput> from N objects of types <computeroutput>T</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamPLY </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1ga818eed34a10f3bde53ac5a23d5bbddd6" kindref="member">make_ply_point_reader()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1ga4375e15f5ec01c7aca1006e216efe4c6" kindref="member">make_ply_normal_reader()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="137" column="6" bodyfile="CGAL/IO/read_ply_points.h" bodystart="137" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1gaf5c12b5bab6f88a9d22d425b1ab2586a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_PLY</definition>
        <argsstring>(std::istream &amp;is, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_PLY</name>
        <qualifiedname>CGAL::IO::read_PLY</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (positions + normals, if available), using the IOStreamPLY. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional point properties and faces are ignored.</para>
<para><simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" kindref="member">read_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="240" column="6" bodyfile="CGAL/IO/read_ply_points.h" bodystart="240" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga6433f03251832d3904ec19ddd5b84880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_PLY</definition>
        <argsstring>(const std::string &amp;fname, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_PLY</name>
        <qualifiedname>CGAL::IO::read_PLY</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (positions + normals, if available), using the IOStreamPLY. </para>
        </briefdescription>
        <detaileddescription>
<para>Potential additional point properties and faces are ignored.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>input file name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be read in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamPLY </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gad9785e7191ba94d81fac841798aa1ddb" kindref="member">read_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_ply_points.h" line="317" column="6" bodyfile="CGAL/IO/read_ply_points.h" bodystart="317" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IO_1ga8fac388459c5cf96bf11ce3b4e0459c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename PointOutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_points</definition>
        <argsstring>(const std::string &amp;fname, PointOutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_points</name>
        <qualifiedname>CGAL::IO::read_points</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the point set from an input file. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported file formats are the following:<itemizedlist>
<listitem><para>IOStreamOFF (<computeroutput>.off</computeroutput>)</para>
</listitem><listitem><para>IOStreamPLY (<computeroutput>.ply</computeroutput>)</para>
</listitem><listitem><para>IOStreamLAS (<computeroutput>.las</computeroutput>)</para>
</listitem><listitem><para>IOStreamXYZ (<computeroutput>.xyz</computeroutput>)</para>
</listitem></itemizedlist>
</para>
<para>The format is detected from the filename extension (letter case is not important).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>PointOutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;PointOutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the input file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be read in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only relevant for <computeroutput>PLY</computeroutput> reading: the <computeroutput>OFF</computeroutput> and <computeroutput>XYZ</computeroutput> formats are always ASCII, and the <computeroutput>LAS</computeroutput> format is always binary. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_points.h" line="89" column="6" bodyfile="CGAL/IO/read_points.h" bodystart="89" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOXyz_1ga7d8cfbc64a9f01efcca7490caf11f763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_XYZ</definition>
        <argsstring>(std::istream &amp;is, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_XYZ</name>
        <qualifiedname>CGAL::IO::read_XYZ</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (positions + normals, if available), using the IOStreamXYZ. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>OutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;OutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamXYZ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_xyz_points.h" line="77" column="6" bodyfile="CGAL/IO/read_xyz_points.h" bodystart="77" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOXyz_1ga45c8d8303cf00701660c946395499588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIteratorValueType</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_XYZ</definition>
        <argsstring>(const std::string &amp;fname, OutputIterator output, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_XYZ</name>
        <qualifiedname>CGAL::IO::read_XYZ</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads points (positions + normals, if available), using the IOStreamXYZ. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputIteratorValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of objects that can be put in <computeroutput>OutputIterator</computeroutput>. It must be a model of <computeroutput>DefaultConstructible</computeroutput> and defaults to <computeroutput>value_type_traits&lt;OutputIterator&gt;::type</computeroutput>. It can be omitted when the default is fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator over output points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>input file name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output iterator over points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="3" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>WritablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals in the input stream are ignored. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamXYZ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/read_xyz_points.h" line="223" column="6" bodyfile="CGAL/IO/read_xyz_points.h" bodystart="223" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1gae7018ffb846e16d416a9bf90f7ca6e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
        <definition>std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; CGAL::IO::make_las_point_writer</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_las_point_writer</name>
        <qualifiedname>CGAL::IO::make_las_point_writer</qualifiedname>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>generates a LAS property handler to write 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga9b581aa551033a9ec7a44ff6d8d9e3b7" kindref="member">write_LAS()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para>IOStreamLAS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="77" column="1" bodyfile="CGAL/IO/write_las_points.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1gafaeb3b48279532412ec422c90a7f05fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PointMap</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_LAS_with_properties</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt; point_property, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>write_LAS_with_properties</name>
        <qualifiedname>CGAL::IO::write_LAS_with_properties</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>output stream. </para>
</briefdescription>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
          <briefdescription><para>input point range. </para>
</briefdescription>
        </param>
        <param>
          <type>std::tuple&lt; PointMap, LAS_property::X, LAS_property::Y, LAS_property::Z &gt;</type>
          <declname>point_property</declname>
          <briefdescription><para>property handler for points </para>
</briefdescription>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
          <briefdescription><para>parameter pack of property handlers </para>
</briefdescription>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> with properties to a .las stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandle</computeroutput> is a <computeroutput>std::pair&lt;PropertyMap, LAS_property::Tag &gt;</computeroutput> used to write a scalar value <computeroutput>LAS_property::Tag::type</computeroutput> as a LAS property (for example, writing an <computeroutput>int</computeroutput> variable as an <computeroutput>int</computeroutput> LAS property). An exception is used for points that are written using a <computeroutput>std::tuple</computeroutput> object.</para>
<para>See documentation of <computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1ga5187fc18430a5e3c811f75da57a057ad" kindref="member">read_LAS_with_properties()</ref></computeroutput> for the list of available <computeroutput>LAS_property::Tag</computeroutput> classes.</para>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ReadablePropertyMap</computeroutput> with a value_type = <computeroutput>CGAL::Point_3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>make_las_point_writer()</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para>IOStreamLAS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="219" column="6" bodyfile="CGAL/IO/write_las_points.h" bodystart="219" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga9b581aa551033a9ec7a44ff6d8d9e3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_LAS</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_LAS</name>
        <qualifiedname>CGAL::IO::write_LAS</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions only), using the IOStreamLAS. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamLAS </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1gafaeb3b48279532412ec422c90a7f05fc" kindref="member">write_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="312" column="6" bodyfile="CGAL/IO/write_las_points.h" bodystart="312" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOLas_1ga199f672f2decde903ca1ae1af0a02ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_LAS</definition>
        <argsstring>(const std::string &amp;filename, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_LAS</name>
        <qualifiedname>CGAL::IO::write_LAS</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions only), using the IOStreamLAS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOLas_1gafaeb3b48279532412ec422c90a7f05fc" kindref="member">write_LAS_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_las_points.h" line="367" column="6" bodyfile="CGAL/IO/write_las_points.h" bodystart="367" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOOff_1gaf3b2a435f815f37f914fe9effbf6de73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_OFF</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_OFF</name>
        <qualifiedname>CGAL::IO::write_OFF</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions + normals, if available), using the IOStreamOFF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output stream. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_off_points.h" line="130" column="6" bodyfile="CGAL/IO/write_off_points.h" bodystart="130" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOOff_1ga54724feeef37245ee2ff86f32726fc74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_OFF</definition>
        <argsstring>(const std::string &amp;filename, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_OFF</name>
        <qualifiedname>CGAL::IO::write_OFF</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions + normals, if available), using the IOStreamOFF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output file. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamOFF </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_off_points.h" line="186" column="6" bodyfile="CGAL/IO/write_off_points.h" bodystart="186" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga01ab7639f85c8dd1d5e9f66065038c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; PointMap, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt;, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt;, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt; PointMap, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt; CGAL::IO::make_ply_point_writer</definition>
        <argsstring>(PointMap point_map)</argsstring>
        <name>make_ply_point_writer</name>
        <qualifiedname>CGAL::IO::make_ply_point_writer</qualifiedname>
        <param>
          <type>PointMap</type>
          <declname>point_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to write 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para>Points are written as 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput> and <computeroutput>z</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the points use <computeroutput>CGAL::Simple_cartesian&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" kindref="member">write_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para>IOStreamPLY </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="55" column="3" declfile="CGAL/IO/write_ply_points.h" declline="55" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga39edb018d7641c169ff00154eac4a6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorMap</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; VectorMap, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt;, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt;, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt; FT &gt; &gt;</type>
        <definition>std::tuple&lt; VectorMap, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt;, PLY_property&lt; FT &gt; &gt; CGAL::IO::make_ply_normal_writer</definition>
        <argsstring>(VectorMap normal_map)</argsstring>
        <name>make_ply_normal_writer</name>
        <qualifiedname>CGAL::IO::make_ply_normal_writer</qualifiedname>
        <param>
          <type>VectorMap</type>
          <declname>normal_map</declname>
        </param>
        <briefdescription>
<para>Generates a PLY property handler to write 3D normal vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Vectors are written as 3 PLY properties of type <computeroutput>FT</computeroutput> and named <computeroutput>nx</computeroutput>, <computeroutput>ny</computeroutput> and <computeroutput>nz</computeroutput>. <computeroutput>FT</computeroutput> is <computeroutput>float</computeroutput> if the vectors use <computeroutput>CGAL::Simple_cartesian&lt;float&gt;</computeroutput> and <computeroutput>double</computeroutput> otherwise.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VectorMap</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map used to store vectors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" kindref="member">write_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para>IOStreamPLY </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="72" column="3" declfile="CGAL/IO/write_ply_points.h" declline="72" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>PropertyHandler</declname>
            <defname>PropertyHandler</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_PLY_with_properties</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, PropertyHandler &amp;&amp;... properties)</argsstring>
        <name>write_PLY_with_properties</name>
        <qualifiedname>CGAL::IO::write_PLY_with_properties</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>output stream. </para>
</briefdescription>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
          <briefdescription><para>input point range. </para>
</briefdescription>
        </param>
        <param>
          <type>PropertyHandler &amp;&amp;...</type>
          <declname>properties</declname>
          <briefdescription><para>parameter pack of property handlers </para>
</briefdescription>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> with properties using IOStreamPLY. </para>
        </briefdescription>
        <detaileddescription>
<para>Properties are handled through a variadic list of property handlers. A <computeroutput>PropertyHandler</computeroutput> can either be:</para>
<para><itemizedlist>
<listitem><para>A <computeroutput>std::pair&lt;PropertyMap, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt; &gt;</computeroutput> if the user wants to write a scalar value T as a PLY property (for example, writing an <computeroutput>int</computeroutput> variable as an <computeroutput>int</computeroutput> PLY property).</para>
</listitem><listitem><para>A <computeroutput>std::tuple&lt;PropertyMap, <ref refid="structCGAL_1_1IO_1_1PLY__property" kindref="compound">PLY_property</ref>&lt;T&gt;...&gt;</computeroutput> if the user wants to write a complex object as several PLY properties. In that case, a specialization of <computeroutput>Output_rep</computeroutput> must be provided for <computeroutput>PropertyMap::value_type</computeroutput> that handles both ASCII and binary output (see <computeroutput>CGAL::IO::get_mode()</computeroutput>).</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>, and the <ref refid="" kindref="compound"><computeroutput>IO::Mode</computeroutput> </ref> of the stream must be set to <computeroutput>BINARY</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the <computeroutput>PropertyMap</computeroutput> objects provided within the <computeroutput>PropertyHandler</computeroutput> parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PropertyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>handlers to recover properties.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>IOStreamPLY </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1ga01ab7639f85c8dd1d5e9f66065038c58" kindref="member">make_ply_point_writer()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1ga39edb018d7641c169ff00154eac4a6d5" kindref="member">make_ply_normal_writer()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="110" column="8" bodyfile="CGAL/IO/write_ply_points.h" bodystart="110" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga615f4420ce82b5ceb1b584b506d714ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_PLY</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_PLY</name>
        <qualifiedname>CGAL::IO::write_PLY</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions + normals, if available) using IOStreamPLY. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>, and the <ref refid="" kindref="compound"><computeroutput>IO::Mode</computeroutput> </ref> of the stream must be set to <computeroutput>BINARY</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output stream. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" kindref="member">write_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="188" column="6" bodyfile="CGAL/IO/write_ply_points.h" bodystart="188" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOPly_1ga80830a581fb424153bf1d0476112f375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_PLY</definition>
        <argsstring>(const std::string &amp;filename, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_PLY</name>
        <qualifiedname>CGAL::IO::write_PLY</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions + normals, if available) using IOStreamPLY. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be written in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output file. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgPointSetProcessing3IOPly_1gac1fd90a9d5266e631c68cb31bfe31516" kindref="member">write_PLY_with_properties()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_ply_points.h" line="276" column="6" bodyfile="CGAL/IO/write_ply_points.h" bodystart="276" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IO_1ga5822feba4449f0492363611620b877c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_points</definition>
        <argsstring>(const std::string &amp;fname, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values(),)</argsstring>
        <name>write_points</name>
        <qualifiedname>CGAL::IO::write_points</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> with properties to a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported file formats are the following:<itemizedlist>
<listitem><para>IOStreamOFF (<computeroutput>.off</computeroutput>)</para>
</listitem><listitem><para>IOStreamPLY (<computeroutput>.ply</computeroutput>)</para>
</listitem><listitem><para>IOStreamLAS (<computeroutput>.las</computeroutput>)</para>
</listitem><listitem><para>IOStreamXYZ (<computeroutput>.xyz</computeroutput>)</para>
</listitem></itemizedlist>
</para>
<para>The format is detected from the filename extension (letter case is not important).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the output file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of points that will be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output file. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be written in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only relevant for <computeroutput>PLY</computeroutput> writing: the <computeroutput>OFF</computeroutput> and <computeroutput>XYZ</computeroutput> formats are always ASCII, and the <computeroutput>LAS</computeroutput> format is always binary. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_points.h" line="92" column="6" bodyfile="CGAL/IO/write_points.h" bodystart="92" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOXyz_1ga1991ab8d312de62ddd907f81890ed039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_XYZ</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_XYZ</name>
        <qualifiedname>CGAL::IO::write_XYZ</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions + normals, if available), using the IOStreamXYZ. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output stream. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_xyz_points.h" line="125" column="6" bodyfile="CGAL/IO/write_xyz_points.h" bodystart="125" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSetProcessing3IOXyz_1ga14eed6b863a42b99c7dc68ad8e1a35f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_XYZ</definition>
        <argsstring>(const std::string &amp;filename, const PointRange &amp;points, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_XYZ</name>
        <qualifiedname>CGAL::IO::write_XYZ</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the range of <computeroutput>points</computeroutput> (positions + normals, if available), using the IOStreamXYZ. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>is a model of <computeroutput>ConstRange</computeroutput>. The value type of its iterator is the key type of the named parameter <computeroutput>point_map</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>input point range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Point_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>CGAL::Identity_property_map&lt;geom_traits::Point_3&gt;</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>normal_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating normals to the elements of the point range </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>ReadablePropertyMap</computeroutput> with value type <computeroutput>geom_traits::Vector_3</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>If this parameter is omitted, normals are not written in the output file. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/write_xyz_points.h" line="178" column="6" bodyfile="CGAL/IO/write_xyz_points.h" bodystart="178" bodyend="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/IO/read_las_points.h" line="60" column="1"/>
  </compounddef>
</doxygen>
