<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Compute__cone__boundaries__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Compute_cone_boundaries_2</compoundname>
    <includes local="no">CGAL/Compute_cone_boundaries_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits_</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCGAL_1_1Compute__cone__boundaries__2_1aa33ddc2530f954628ab37d4bd223cf6d" prot="public" static="no">
        <type>Traits::Direction_2</type>
        <definition>typedef Traits::Direction_2 CGAL::Compute_cone_boundaries_2&lt; Traits_ &gt;::Direction_2</definition>
        <argsstring></argsstring>
        <name>Direction_2</name>
        <qualifiedname>CGAL::Compute_cone_boundaries_2::Direction_2</qualifiedname>
        <briefdescription>
<para>the direction type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Compute_cone_boundaries_2.h" line="67" column="49" bodyfile="CGAL/Compute_cone_boundaries_2.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1Compute__cone__boundaries__2_1a3f20696e35d6d2731b69860b073400b5" prot="private" static="no">
        <type>Traits::Aff_transformation_2</type>
        <definition>typedef Traits::Aff_transformation_2 CGAL::Compute_cone_boundaries_2&lt; Traits_ &gt;::Transformation</definition>
        <argsstring></argsstring>
        <name>Transformation</name>
        <qualifiedname>CGAL::Compute_cone_boundaries_2::Transformation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Compute_cone_boundaries_2.h" line="71" column="55" bodyfile="CGAL/Compute_cone_boundaries_2.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Compute__cone__boundaries__2_1a85f403d54f6e66426e7349643c2a66f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DirectionOutputIterator</type>
          </param>
        </templateparamlist>
        <type>DirectionOutputIterator</type>
        <definition>DirectionOutputIterator CGAL::Compute_cone_boundaries_2&lt; Traits_ &gt;::operator()</definition>
        <argsstring>(const unsigned int cone_number, const Direction_2 &amp;initial_direction, DirectionOutputIterator result)</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Compute_cone_boundaries_2::operator()</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>cone_number</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Compute__cone__boundaries__2_1aa33ddc2530f954628ab37d4bd223cf6d" kindref="member">Direction_2</ref> &amp;</type>
          <declname>initial_direction</declname>
        </param>
        <param>
          <type>DirectionOutputIterator</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>The operator(). </para>
        </briefdescription>
        <detaileddescription>
<para>The direction of the first ray can be specified by the parameter <computeroutput>initial_direction</computeroutput>, which allows the first ray to start at any direction. This operator first places the <computeroutput>initial_direction</computeroutput> at the position pointed by <computeroutput>result</computeroutput>. Then, it calculates the remaining directions (cone boundaries) and output them to <computeroutput>result</computeroutput> in the counterclockwise order. Finally, the past-the-end iterator for the resulting directions is returned.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DirectionOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>an <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> with value type <computeroutput><ref refid="classCGAL_1_1Direction__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Direction_2</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cone_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of cones </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>The direction of the first ray </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Compute_cone_boundaries_2.h" line="91" column="29" bodyfile="CGAL/Compute_cone_boundaries_2.h" bodystart="91" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The functor for computing the directions of cone boundaries with a given cone number and a given initial direction. </para>
    </briefdescription>
    <detaileddescription>
<para>This computation can be either inexact by simply dividing an approximate <formula id="0">$ \pi $</formula> by the cone number (which is quick), or exact by using roots of polynomials (requiring number types such as <computeroutput><ref refid="classCORE_1_1Expr" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Number_types.tag">CORE::Expr</ref></computeroutput> or <computeroutput><ref refid="classleda__real" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Number_types.tag">leda_real</ref></computeroutput>, which are slow). The inexact computation is done by the general functor definition, while the exact computation is done by a specialization of this functor.</para>
<para>In the construction of cone-based spanners such as Yao graph and Theta graph implemented by this package, this functor is called first to compute the cone boundaries. Of course, this functor can also be used in other applications where the plane needs to be divided into equally-angled cones.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits_</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be either <computeroutput><ref refid="classCGAL_1_1Exact__predicates__exact__constructions__kernel__with__root__of" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_exact_constructions_kernel_with_root_of</ref></computeroutput> or <computeroutput><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="CGAL/Compute_cone_boundaries_2.h" line="60" column="1" bodyfile="CGAL/Compute_cone_boundaries_2.h" bodystart="60" bodyend="114"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Compute__cone__boundaries__2_1aa33ddc2530f954628ab37d4bd223cf6d" prot="public" virt="non-virtual"><scope>CGAL::Compute_cone_boundaries_2</scope><name>Direction_2</name></member>
      <member refid="classCGAL_1_1Compute__cone__boundaries__2_1a85f403d54f6e66426e7349643c2a66f7" prot="public" virt="non-virtual"><scope>CGAL::Compute_cone_boundaries_2</scope><name>operator()</name></member>
      <member refid="classCGAL_1_1Compute__cone__boundaries__2_1a3f20696e35d6d2731b69860b073400b5" prot="private" virt="non-virtual"><scope>CGAL::Compute_cone_boundaries_2</scope><name>Transformation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
