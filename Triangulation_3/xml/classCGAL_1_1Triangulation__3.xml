<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Triangulation__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Triangulation_3</compoundname>
    <basecompoundref refid="structCGAL_1_1Triangulation__utils__3" prot="public" virt="non-virtual">CGAL::Triangulation_utils_3</basecompoundref>
    <derivedcompoundref refid="classCGAL_1_1Regular__triangulation__3" prot="public" virt="non-virtual">CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;</derivedcompoundref>
    <includes local="no">CGAL/Triangulation_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits</type>
      </param>
      <param>
        <type>typename TDS</type>
      </param>
      <param>
        <type>typename SLDS</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <description><para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref></computeroutput> defines the following types: </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" prot="public" static="no">
        <type>Traits</type>
        <definition>typedef Traits CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Geom_traits</definition>
        <argsstring></argsstring>
        <name>Geom_traits</name>
        <qualifiedname>CGAL::Triangulation_3::Geom_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="58" column="16" bodyfile="CGAL/Triangulation_3.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a142364d710a44fb68daf6cbd185861ce" prot="public" static="no">
        <type>TDS</type>
        <definition>typedef TDS CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Triangulation_data_structure</definition>
        <argsstring></argsstring>
        <name>Triangulation_data_structure</name>
        <qualifiedname>CGAL::Triangulation_3::Triangulation_data_structure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="63" column="13" bodyfile="CGAL/Triangulation_3.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a1f96730cb3b4cfd6c2893ecb7300ec90" prot="public" static="no">
        <type>SLDS</type>
        <definition>typedef SLDS CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Lock_data_structure</definition>
        <argsstring></argsstring>
        <name>Lock_data_structure</name>
        <qualifiedname>CGAL::Triangulation_3::Lock_data_structure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="68" column="14" bodyfile="CGAL/Triangulation_3.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" prot="public" static="no">
        <type>Triangulation_data_structure::Vertex::Point</type>
        <definition>typedef Triangulation_data_structure::Vertex::Point CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <qualifiedname>CGAL::Triangulation_3::Point</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="73" column="53" bodyfile="CGAL/Triangulation_3.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a2ee20454a8adb0ff5d6db5acabd10e05" prot="public" static="no">
        <type>Geom_traits::Segment_3</type>
        <definition>typedef Geom_traits::Segment_3 CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Segment</definition>
        <argsstring></argsstring>
        <name>Segment</name>
        <qualifiedname>CGAL::Triangulation_3::Segment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="78" column="32" bodyfile="CGAL/Triangulation_3.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1adc409424d433ef56a79d5e71c02b8e15" prot="public" static="no">
        <type>Geom_traits::Triangle_3</type>
        <definition>typedef Geom_traits::Triangle_3 CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Triangle</definition>
        <argsstring></argsstring>
        <name>Triangle</name>
        <qualifiedname>CGAL::Triangulation_3::Triangle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="83" column="33" bodyfile="CGAL/Triangulation_3.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1aa88be907873b0469824cc3b2212f2eee" prot="public" static="no">
        <type>Geom_traits::Tetrahedron_3</type>
        <definition>typedef Geom_traits::Tetrahedron_3 CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Tetrahedron</definition>
        <argsstring></argsstring>
        <name>Tetrahedron</name>
        <qualifiedname>CGAL::Triangulation_3::Tetrahedron</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="88" column="36" bodyfile="CGAL/Triangulation_3.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>Only vertices (0-faces) and cells (3-faces) are stored.</para>
<para>Edges (1-faces) and facets (2-faces) are not explicitly represented and thus there are no corresponding classes (see Section <ref refid="index_1Triangulation3secintro" kindref="member">Representation</ref>). </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a689822c56fb0d30a538df471fe076fc1" prot="public" static="no">
        <type>Triangulation_data_structure::Vertex</type>
        <definition>typedef Triangulation_data_structure::Vertex CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Vertex</definition>
        <argsstring></argsstring>
        <name>Vertex</name>
        <qualifiedname>CGAL::Triangulation_3::Vertex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="101" column="46" bodyfile="CGAL/Triangulation_3.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a6ccf0bf0c3ca54b4a2e8f2f1b09a103f" prot="public" static="no">
        <type>Triangulation_data_structure::Cell</type>
        <definition>typedef Triangulation_data_structure::Cell CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Cell</definition>
        <argsstring></argsstring>
        <name>Cell</name>
        <qualifiedname>CGAL::Triangulation_3::Cell</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="106" column="44" bodyfile="CGAL/Triangulation_3.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" prot="public" static="no">
        <type>Triangulation_data_structure::Facet</type>
        <definition>typedef Triangulation_data_structure::Facet CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Facet</definition>
        <argsstring></argsstring>
        <name>Facet</name>
        <qualifiedname>CGAL::Triangulation_3::Facet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="111" column="45" bodyfile="CGAL/Triangulation_3.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" prot="public" static="no">
        <type>Triangulation_data_structure::Edge</type>
        <definition>typedef Triangulation_data_structure::Edge CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Edge</definition>
        <argsstring></argsstring>
        <name>Edge</name>
        <qualifiedname>CGAL::Triangulation_3::Edge</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="116" column="44" bodyfile="CGAL/Triangulation_3.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a029910b5cfe5d470afdd8f79ea49e24e" prot="public" static="no">
        <type>Triangulation_data_structure::Concurrency_tag</type>
        <definition>typedef Triangulation_data_structure::Concurrency_tag CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Concurrency_tag</definition>
        <argsstring></argsstring>
        <name>Concurrency_tag</name>
        <qualifiedname>CGAL::Triangulation_3::Concurrency_tag</qualifiedname>
        <briefdescription>
<para>Concurrency tag (from the TDS). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="121" column="55" bodyfile="CGAL/Triangulation_3.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>The vertices and faces of the triangulations are accessed through <computeroutput>handles</computeroutput>, <computeroutput>iterators</computeroutput> and <computeroutput>circulators</computeroutput>.</para>
<para>A handle is a model of the <computeroutput><ref refid="classHandle" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Handle</ref></computeroutput> concept, and supports the two dereference operators and <computeroutput>operator-&gt;</computeroutput>. A circulator is a model of the concept <computeroutput><ref refid="classCirculator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Circulator</ref></computeroutput>. Iterators and circulators are bidirectional and non-mutable. The edges and facets of the triangulation can also be visited through iterators and circulators which are bidirectional and non-mutable. Iterators and circulators are convertible to the corresponding handles, thus the user can pass them directly as arguments to the functions. The handles are also model of the concepts <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> and <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>, that is they can be used as keys in containers such as <computeroutput>std::map</computeroutput> and <computeroutput>boost::unordered_map</computeroutput>. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" prot="public" static="no">
        <type>Triangulation_data_structure::Vertex_handle</type>
        <definition>typedef Triangulation_data_structure::Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <qualifiedname>CGAL::Triangulation_3::Vertex_handle</qualifiedname>
        <briefdescription>
<para>handle to a vertex </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="145" column="53" bodyfile="CGAL/Triangulation_3.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" prot="public" static="no">
        <type>Triangulation_data_structure::Cell_handle</type>
        <definition>typedef Triangulation_data_structure::Cell_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Cell_handle</definition>
        <argsstring></argsstring>
        <name>Cell_handle</name>
        <qualifiedname>CGAL::Triangulation_3::Cell_handle</qualifiedname>
        <briefdescription>
<para>handle to a cell </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="150" column="51" bodyfile="CGAL/Triangulation_3.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a431de9481031045367856fa156fc643f" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Triangulation__simplex__3" kindref="compound">Triangulation_simplex_3</ref>&lt; Self &gt;</type>
        <definition>typedef Triangulation_simplex_3&lt;Self&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Simplex</definition>
        <argsstring></argsstring>
        <name>Simplex</name>
        <qualifiedname>CGAL::Triangulation_3::Simplex</qualifiedname>
        <briefdescription>
<para>Reference to a simplex (vertex, edge, facet or cell) of the triangulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="155" column="33" bodyfile="CGAL/Triangulation_3.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" prot="public" static="no">
        <type>Triangulation_data_structure::size_type</type>
        <definition>typedef Triangulation_data_structure::size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>CGAL::Triangulation_3::size_type</qualifiedname>
        <briefdescription>
<para>Size type (an unsigned integral type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="160" column="49" bodyfile="CGAL/Triangulation_3.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a4f5b67204a2a310e48525abd3cdd3660" prot="public" static="no">
        <type>Triangulation_data_structure::difference_type</type>
        <definition>typedef Triangulation_data_structure::difference_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>CGAL::Triangulation_3::difference_type</qualifiedname>
        <briefdescription>
<para>Difference type (a signed integral type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="165" column="55" bodyfile="CGAL/Triangulation_3.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1aff2c019af34403770e6e922d616eaf0f" prot="public" static="no">
        <type>Triangulation_data_structure::Cell_iterator</type>
        <definition>typedef Triangulation_data_structure::Cell_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::All_cells_iterator</definition>
        <argsstring></argsstring>
        <name>All_cells_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::All_cells_iterator</qualifiedname>
        <briefdescription>
<para>iterator over cells </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="170" column="53" bodyfile="CGAL/Triangulation_3.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a086ed61d6d43a10f77f6a4d695a256fc" prot="public" static="no">
        <type>Triangulation_data_structure::Facet_iterator</type>
        <definition>typedef Triangulation_data_structure::Facet_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::All_facets_iterator</definition>
        <argsstring></argsstring>
        <name>All_facets_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::All_facets_iterator</qualifiedname>
        <briefdescription>
<para>iterator over facets </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="175" column="54" bodyfile="CGAL/Triangulation_3.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a67ff0ee4eca14392f1fcb55acd5a6edc" prot="public" static="no">
        <type>Triangulation_data_structure::Edge_iterator</type>
        <definition>typedef Triangulation_data_structure::Edge_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::All_edges_iterator</definition>
        <argsstring></argsstring>
        <name>All_edges_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::All_edges_iterator</qualifiedname>
        <briefdescription>
<para>iterator over edges </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="180" column="53" bodyfile="CGAL/Triangulation_3.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1ab930d6f34c8346b5191e93ab79475c70" prot="public" static="no">
        <type>Triangulation_data_structure::Vertex_iterator</type>
        <definition>typedef Triangulation_data_structure::Vertex_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::All_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>All_vertices_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::All_vertices_iterator</qualifiedname>
        <briefdescription>
<para>iterator over vertices </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="185" column="55" bodyfile="CGAL/Triangulation_3.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a6d1b83cb6fba001622452aa0f6592e02" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Finite_cells_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_cells_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::Finite_cells_iterator</qualifiedname>
        <briefdescription>
<para>iterator over finite cells </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="190" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a6bc54bfb8362670059a4c1a416269994" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Finite_facets_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_facets_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::Finite_facets_iterator</qualifiedname>
        <briefdescription>
<para>iterator over finite facets </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="195" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a1c91aeb6128d5bf33995dca02398d330" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Finite_edges_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_edges_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::Finite_edges_iterator</qualifiedname>
        <briefdescription>
<para>iterator over finite edges </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="200" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1af8d044953011cb5ff6a5ecf87e6f308e" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Finite_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_vertices_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::Finite_vertices_iterator</qualifiedname>
        <briefdescription>
<para>iterator over finite vertices </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="205" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a3ec38d2d1afffea88a760f5a50c4f9f0" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Point_iterator</definition>
        <argsstring></argsstring>
        <name>Point_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::Point_iterator</qualifiedname>
        <briefdescription>
<para>iterator over the points corresponding to the finite vertices of the triangulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="211" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a064fb43553690504ee55c4b9a74188e5" prot="public" static="no">
        <type>Triangulation_data_structure::Cell_circulator</type>
        <definition>typedef Triangulation_data_structure::Cell_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Cell_circulator</definition>
        <argsstring></argsstring>
        <name>Cell_circulator</name>
        <qualifiedname>CGAL::Triangulation_3::Cell_circulator</qualifiedname>
        <briefdescription>
<para>circulator over all cells incident to a given edge </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="216" column="55" bodyfile="CGAL/Triangulation_3.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" prot="public" static="no">
        <type>Triangulation_data_structure::Facet_circulator</type>
        <definition>typedef Triangulation_data_structure::Facet_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Facet_circulator</definition>
        <argsstring></argsstring>
        <name>Facet_circulator</name>
        <qualifiedname>CGAL::Triangulation_3::Facet_circulator</qualifiedname>
        <briefdescription>
<para>circulator over all facets incident to a given edge </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="221" column="56" bodyfile="CGAL/Triangulation_3.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a39088e35d874ae7361d96a19acd572c7" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Segment_cell_iterator</definition>
        <argsstring></argsstring>
        <name>Segment_cell_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::Segment_cell_iterator</qualifiedname>
        <briefdescription>
<para>iterator over cells intersected by a line segment. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>Segment_cell_iterator</computeroutput> implements the concept <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> and is non-mutable. Its value type is <computeroutput>Cell_handle</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="228" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a822c7264ac03f629735cb85be4871e1f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Segment_simplex_iterator</definition>
        <argsstring></argsstring>
        <name>Segment_simplex_iterator</name>
        <qualifiedname>CGAL::Triangulation_3::Segment_simplex_iterator</qualifiedname>
        <briefdescription>
<para>iterator over simplices intersected by a line segment. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>Segment_simplex_iterator</computeroutput> implements the concept <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> and is non-mutable. Its value type is <computeroutput><ref refid="classCGAL_1_1Triangulation__simplex__3" kindref="compound">Triangulation_simplex_3</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="235" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>In order to write C++ 11 <computeroutput>for</computeroutput>-loops we provide the following range types. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a0ffff120af16e255cee2ccc20be34775" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::All_cell_handles</definition>
        <argsstring></argsstring>
        <name>All_cell_handles</name>
        <qualifiedname>CGAL::Triangulation_3::All_cell_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over all cell handles (including infinite cells), with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Cell_handle</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="250" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1abe601aa6506352a8df0877449bcf0dd3" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Triangulation__3_1a086ed61d6d43a10f77f6a4d695a256fc" kindref="member">All_facets_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;All_facets_iterator&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::All_facets</definition>
        <argsstring></argsstring>
        <name>All_facets</name>
        <qualifiedname>CGAL::Triangulation_3::All_facets</qualifiedname>
        <briefdescription>
<para>range type for iterating over facets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="256" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a60c2dacc98d57951b9209f94dfcad921" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Triangulation__3_1a67ff0ee4eca14392f1fcb55acd5a6edc" kindref="member">All_edges_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;All_edges_iterator&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::All_edges</definition>
        <argsstring></argsstring>
        <name>All_edges</name>
        <qualifiedname>CGAL::Triangulation_3::All_edges</qualifiedname>
        <briefdescription>
<para>range type for iterating over edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="261" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1ae53e08aa6f86bee125ef6ba075b0e973" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::All_vertex_handles</definition>
        <argsstring></argsstring>
        <name>All_vertex_handles</name>
        <qualifiedname>CGAL::Triangulation_3::All_vertex_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over all vertex handles, with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Vertex_handle</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="267" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a4c94face5ab29897bcb291f157f1635d" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Finite_cell_handles</definition>
        <argsstring></argsstring>
        <name>Finite_cell_handles</name>
        <qualifiedname>CGAL::Triangulation_3::Finite_cell_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over finite cell handles, with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Cell_handle</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="273" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1aa35974d42ec9564687ffbe5f664cb906" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Triangulation__3_1a6bc54bfb8362670059a4c1a416269994" kindref="member">Finite_facets_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;Finite_facets_iterator&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Finite_facets</definition>
        <argsstring></argsstring>
        <name>Finite_facets</name>
        <qualifiedname>CGAL::Triangulation_3::Finite_facets</qualifiedname>
        <briefdescription>
<para>range type for iterating over finite facets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="279" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a514f885323d414200cd13e8fa6e79e34" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Triangulation__3_1a1c91aeb6128d5bf33995dca02398d330" kindref="member">Finite_edges_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;Finite_edges_iterator&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Finite_edges</definition>
        <argsstring></argsstring>
        <name>Finite_edges</name>
        <qualifiedname>CGAL::Triangulation_3::Finite_edges</qualifiedname>
        <briefdescription>
<para>range type for iterating over finite edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="284" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1ac59a8c8f173db4a1e72b537bb59e16a5" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Finite_vertex_handles</definition>
        <argsstring></argsstring>
        <name>Finite_vertex_handles</name>
        <qualifiedname>CGAL::Triangulation_3::Finite_vertex_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over finite vertex handles, with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Vertex_handle</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="290" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a5c8812f38413b29cdd7aae517c457d52" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Points</definition>
        <argsstring></argsstring>
        <name>Points</name>
        <qualifiedname>CGAL::Triangulation_3::Points</qualifiedname>
        <briefdescription>
<para>range type for iterating over the points of the finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="295" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1a0356538c3ef7d62280a7846c35a8abbb" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Segment_traverser_cell_handles</definition>
        <argsstring></argsstring>
        <name>Segment_traverser_cell_handles</name>
        <qualifiedname>CGAL::Triangulation_3::Segment_traverser_cell_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over the cells intersected by a line segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="300" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__3_1ae4a0565708ab5c23639c90c47bbec7cc" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Triangulation__3_1a822c7264ac03f629735cb85be4871e1f" kindref="member">Segment_simplex_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;Segment_simplex_iterator&gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Segment_traverser_simplices</definition>
        <argsstring></argsstring>
        <name>Segment_traverser_simplices</name>
        <qualifiedname>CGAL::Triangulation_3::Segment_traverser_simplices</qualifiedname>
        <briefdescription>
<para>range type for iterating over the simplices intersected by a line segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="305" column="26" bodyfile="CGAL/Triangulation_3.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2378218ec06f4a4daec0102760da4d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Triangulation_3</definition>
        <argsstring>(const Geom_traits &amp;traits=Geom_traits(), Lock_data_structure *lock_ds=nullptr)</argsstring>
        <name>Triangulation_3</name>
        <qualifiedname>CGAL::Triangulation_3::Triangulation_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" kindref="member">Geom_traits</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" kindref="member">Geom_traits</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1f96730cb3b4cfd6c2893ecb7300ec90" kindref="member">Lock_data_structure</ref> *</type>
          <declname>lock_ds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Introduces a triangulation <computeroutput>t</computeroutput> having only one vertex which is the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>lock_ds</computeroutput> is an optional pointer to the lock data structure for parallel operations. It must be provided if concurrency is enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a43624064822f4553a51dbd159ecd1bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Triangulation_3</definition>
        <argsstring>(Lock_data_structure *lock_ds=nullptr, const Geom_traits &amp;traits=Geom_traits())</argsstring>
        <name>Triangulation_3</name>
        <qualifiedname>CGAL::Triangulation_3::Triangulation_3</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1f96730cb3b4cfd6c2893ecb7300ec90" kindref="member">Lock_data_structure</ref> *</type>
          <declname>lock_ds</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" kindref="member">Geom_traits</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" kindref="member">Geom_traits</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as the previous one, but with parameters in reverse order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a7018c73a59388a6d005e8fea1b5c1c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Triangulation_3</definition>
        <argsstring>(const Triangulation_3 &amp;tr)</argsstring>
        <name>Triangulation_3</name>
        <qualifiedname>CGAL::Triangulation_3::Triangulation_3</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref> &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>All vertices and faces are duplicated. The pointer to the lock data structure is not copied. Thus, the copy won&apos;t be concurrency-safe as long as the user has not call <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1afba384e440c57f3bb0a71e4b4f7f9944" kindref="member">Triangulation_3::set_lock_data_structure</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a63f67cf6aaadcee14318cf56a36d247a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::Triangulation_3</definition>
        <argsstring>(InputIterator first, InputIterator last, const Geom_traits &amp;traits=Geom_traits(), Lock_data_structure *lock_ds=nullptr)</argsstring>
        <name>Triangulation_3</name>
        <qualifiedname>CGAL::Triangulation_3::Triangulation_3</qualifiedname>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" kindref="member">Geom_traits</ref> &amp;</type>
          <declname>traits</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" kindref="member">Geom_traits</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1f96730cb3b4cfd6c2893ecb7300ec90" kindref="member">Lock_data_structure</ref> *</type>
          <declname>lock_ds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Equivalent to constructing an empty triangulation with the optional traits class argument and calling <computeroutput>insert(first,last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="339" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assignment</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1abc8aafe82c32f53203d8d97069ef838d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref> &amp;</type>
        <definition>Triangulation_3 &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::operator=</definition>
        <argsstring>(const Triangulation_3 &amp;tr)</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Triangulation_3::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref> &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>The triangulation <computeroutput>tr</computeroutput> is duplicated, and modifying the copy after the duplication does not modify the original. </para>
        </briefdescription>
        <detaileddescription>
<para>The previous triangulation held by <computeroutput>t</computeroutput> is deleted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="353" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a767066a964b4d7b14376e5f5d1a04b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::swap</definition>
        <argsstring>(Triangulation_3 &amp;tr)</argsstring>
        <name>swap</name>
        <qualifiedname>CGAL::Triangulation_3::swap</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref> &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>The triangulations <computeroutput>tr</computeroutput> and <computeroutput>t</computeroutput> are swapped. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>t.swap(tr)</computeroutput> should be preferred to <computeroutput>t = tr</computeroutput> or to <computeroutput>t(tr)</computeroutput> if <computeroutput>tr</computeroutput> is deleted after that. Indeed, there is no copy of cells and vertices, thus this method runs in constant time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="361" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a0713863e5ff5ceb0a0eb290c4f6767c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::Triangulation_3::clear</qualifiedname>
        <briefdescription>
<para>Deletes all finite vertices and all cells of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="366" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a20b6e473c9ba697893aed432ba3d9754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GT</type>
          </param>
          <param>
            <type>class Tds1</type>
          </param>
          <param>
            <type>class Tds2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::operator==</definition>
        <argsstring>(const Triangulation_3&lt; GT, Tds1 &gt; &amp;t1, const Triangulation_3&lt; GT, Tds2 &gt; &amp;t2)</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Triangulation_3::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref>&lt; GT, Tds1 &gt; &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref>&lt; GT, Tds2 &gt; &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> iff there exist a bijection between the vertices of <computeroutput>t1</computeroutput> and those of <computeroutput>t2</computeroutput> and a bijection between the cells of <computeroutput>t1</computeroutput> and those of <computeroutput>t2</computeroutput>, which preserve the geometry of the triangulation, that is, the points of each corresponding pair of vertices are equal, and the tetrahedra corresponding to each pair of cells are equal (up to a permutation of their vertices). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="377" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1afe3483443d5cc96aec2f0603095b95f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GT</type>
          </param>
          <param>
            <type>class Tds1</type>
          </param>
          <param>
            <type>class Tds2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::operator!=</definition>
        <argsstring>(const Triangulation_3&lt; GT, Tds1 &gt; &amp;t1, const Triangulation_3&lt; GT, Tds2 &gt; &amp;t2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>CGAL::Triangulation_3::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref>&lt; GT, Tds1 &gt; &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref>&lt; GT, Tds2 &gt; &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>The opposite of <computeroutput>operator==</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="383" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a230ff1dd66791a699820d9865b5a8f4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" kindref="member">Geom_traits</ref> &amp;</type>
        <definition>const Geom_traits &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::geom_traits</definition>
        <argsstring>() const</argsstring>
        <name>geom_traits</name>
        <qualifiedname>CGAL::Triangulation_3::geom_traits</qualifiedname>
        <briefdescription>
<para>Returns a const reference to the geometric traits object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="393" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2caf4005a4dc8a221bfee2e4aeec569e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Triangulation__3_1a142364d710a44fb68daf6cbd185861ce" kindref="member">Triangulation_data_structure</ref> &amp;</type>
        <definition>const Triangulation_data_structure &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::tds</definition>
        <argsstring>() const</argsstring>
        <name>tds</name>
        <qualifiedname>CGAL::Triangulation_3::tds</qualifiedname>
        <briefdescription>
<para>Returns a const reference to the triangulation data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="398" column="37"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a951781437d62955aaae730b87c833498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a142364d710a44fb68daf6cbd185861ce" kindref="member">Triangulation_data_structure</ref> &amp;</type>
        <definition>Triangulation_data_structure &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::tds</definition>
        <argsstring>()</argsstring>
        <name>tds</name>
        <qualifiedname>CGAL::Triangulation_3::tds</qualifiedname>
        <briefdescription>
<para>Returns a reference to the triangulation data structure. </para>
        </briefdescription>
        <detaileddescription>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>This method is mainly a help for users implementing their own triangulation algorithms. The responsibility of keeping a valid triangulation belongs to the user when using advanced operations allowing a direct manipulation of the <computeroutput>tds</computeroutput>. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="408" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <qualifiedname>CGAL::Triangulation_3::dimension</qualifiedname>
        <briefdescription>
<para>Returns the dimension of the affine hull. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="413" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a065228f3255a5d41d096fe782b61669f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <qualifiedname>CGAL::Triangulation_3::number_of_vertices</qualifiedname>
        <briefdescription>
<para>Returns the number of finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="418" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2040b9c297817fb934d3d48908234d13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::number_of_cells</definition>
        <argsstring>() const</argsstring>
        <name>number_of_cells</name>
        <qualifiedname>CGAL::Triangulation_3::number_of_cells</qualifiedname>
        <briefdescription>
<para>Returns the number of cells or 0 if <computeroutput>t.dimension() &lt; 3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="423" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a0dde82d53bcd9f705f3a676329c1df2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::infinite_vertex</definition>
        <argsstring>()</argsstring>
        <name>infinite_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::infinite_vertex</qualifiedname>
        <briefdescription>
<para>Returns the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="428" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af50326c40f34f13a01bb0fd0935301f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::set_infinite_vertex</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>set_infinite_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::set_infinite_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>
        </briefdescription>
        <detaileddescription>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>This method is meant to be used only if you have done a low-level operation on the underlying tds that invalidated the infinite vertex. Sets the infinite vertex. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="437" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a4ef94a8a137601e4cb1905dcdad16c6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::infinite_cell</definition>
        <argsstring>() const</argsstring>
        <name>infinite_cell</name>
        <qualifiedname>CGAL::Triangulation_3::infinite_cell</qualifiedname>
        <briefdescription>
<para>Returns a cell incident to the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="442" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Non-Constant-Time Access Functions</header>
      <description><para>As previously said, the triangulation is a collection of cells that are either infinite or represent a finite tetrahedra, where an infinite cell is a cell incident to the infinite vertex.</para>
<para>Similarly we call an edge (resp. facet) <computeroutput>infinite</computeroutput> if it is incident to the infinite vertex. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a014b6d2caf1747a3bf2865adb158cbb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::number_of_facets</definition>
        <argsstring>() const</argsstring>
        <name>number_of_facets</name>
        <qualifiedname>CGAL::Triangulation_3::number_of_facets</qualifiedname>
        <briefdescription>
<para>The number of facets. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns 0 if <computeroutput>t.dimension() &lt; 2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="453" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a05f820202e1348187eb69693b6ce3d44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::number_of_edges</definition>
        <argsstring>() const</argsstring>
        <name>number_of_edges</name>
        <qualifiedname>CGAL::Triangulation_3::number_of_edges</qualifiedname>
        <briefdescription>
<para>The number of edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns 0 if <computeroutput>t.dimension() &lt; 1</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="458" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a584b3359337efc7f687513b7ef958b94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::number_of_finite_cells</definition>
        <argsstring>() const</argsstring>
        <name>number_of_finite_cells</name>
        <qualifiedname>CGAL::Triangulation_3::number_of_finite_cells</qualifiedname>
        <briefdescription>
<para>The number of finite cells. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns 0 if <computeroutput>t.dimension() &lt; 3</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="463" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af332a576da991acf508cbd4473249e0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::number_of_finite_facets</definition>
        <argsstring>() const</argsstring>
        <name>number_of_finite_facets</name>
        <qualifiedname>CGAL::Triangulation_3::number_of_finite_facets</qualifiedname>
        <briefdescription>
<para>The number of finite facets. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns 0 if <computeroutput>t.dimension() &lt; 2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="468" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a37efcac10647c16b7ea331e30493cb24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::number_of_finite_edges</definition>
        <argsstring>() const</argsstring>
        <name>number_of_finite_edges</name>
        <qualifiedname>CGAL::Triangulation_3::number_of_finite_edges</qualifiedname>
        <briefdescription>
<para>The number of finite edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns 0 if <computeroutput>t.dimension() &lt; 1</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="473" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Geometric Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a83d347f8d914b78f17f6817fdb0b7a14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1aa88be907873b0469824cc3b2212f2eee" kindref="member">Tetrahedron</ref></type>
        <definition>Tetrahedron CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::tetrahedron</definition>
        <argsstring>(Cell_handle c) const</argsstring>
        <name>tetrahedron</name>
        <qualifiedname>CGAL::Triangulation_3::tetrahedron</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Returns the tetrahedron formed by the four vertices of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput> and the cell is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="484" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ac2efcfbc0dcef89c512f65e4d13d4563" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1adc409424d433ef56a79d5e71c02b8e15" kindref="member">Triangle</ref></type>
        <definition>Triangle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::triangle</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>triangle</name>
        <qualifiedname>CGAL::Triangulation_3::triangle</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the triangle formed by the three vertices of facet <computeroutput>(c,i)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The triangle is oriented so that its normal points to the inside of cell <computeroutput>c</computeroutput>. <simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="3">$ \geq2$</formula> and <formula id="30">$ i \in\{0,1,2,3\}$</formula> in dimension 3, <formula id="31">$ i = 3$</formula> in dimension 2, and the facet is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="492" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a6f9a07c130cde8a27869944396ab09e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1adc409424d433ef56a79d5e71c02b8e15" kindref="member">Triangle</ref></type>
        <definition>Triangle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::triangle</definition>
        <argsstring>(const Facet &amp;f) const</argsstring>
        <name>triangle</name>
        <qualifiedname>CGAL::Triangulation_3::triangle</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Same as the previous method for facet <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="3">$ \geq2$</formula> and the facet is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="498" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a22bb4874ea8dc28c07584f1f55628707" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a2ee20454a8adb0ff5d6db5acabd10e05" kindref="member">Segment</ref></type>
        <definition>Segment CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment</definition>
        <argsstring>(const Edge &amp;e) const</argsstring>
        <name>segment</name>
        <qualifiedname>CGAL::Triangulation_3::segment</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Returns the line segment formed by the vertices of <computeroutput>e</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="32">$ \geq1$</formula> and <computeroutput>e</computeroutput> is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="504" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ae28b76ae0e1f364fc55d1b67f5b57249" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a2ee20454a8adb0ff5d6db5acabd10e05" kindref="member">Segment</ref></type>
        <definition>Segment CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment</definition>
        <argsstring>(Cell_handle c, int i, int j) const</argsstring>
        <name>segment</name>
        <qualifiedname>CGAL::Triangulation_3::segment</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Same as the previous method for edge <computeroutput>(c,i,j)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>As above and <formula id="33">$ i\neq j$</formula>. Moreover <formula id="34">$ i,j \in\{0,1,2,3\}$</formula> in dimension 3, <formula id="35">$ i,j \in\{0,1,2\}$</formula> in dimension 2, <formula id="36">$ i,j \in\{0,1\}$</formula> in dimension 1, and the edge is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="510" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ad19deb77eb94761e9bf0934f39cb3fa5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
        <definition>const Point &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::point</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>point</name>
        <qualifiedname>CGAL::Triangulation_3::point</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the point given by vertex <computeroutput>i</computeroutput> of cell <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="37">$ \geq0$</formula> and <formula id="30">$ i \in\{0,1,2,3\}$</formula> in dimension 3, <formula id="38">$ i \in\{0,1,2\}$</formula> in dimension 2, <formula id="39">$ i \in\{0,1\}$</formula> in dimension 1, <formula id="40">$ i = 0$</formula> in dimension 0, and the vertex is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="516" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a914f44aa77c5096630f94af46f98cab5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
        <definition>const Point &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::point</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>point</name>
        <qualifiedname>CGAL::Triangulation_3::point</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Same as the previous method for vertex <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="37">$ \geq0$</formula> and the vertex is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="522" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tests for Finite and Infinite Vertices and Faces</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a0a5aa10a1bb88f33b3f07d33f89dd5cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_infinite</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_3::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff vertex <computeroutput>v</computeroutput> is the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="532" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a8bc2a0fa204265bf32f1e6dc103988b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_infinite</definition>
        <argsstring>(Cell_handle c) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_3::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff <computeroutput>c</computeroutput> is incident to the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="538" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ad66e030d66fdf1ee66e4c280e8894c71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_infinite</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_3::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff the facet <computeroutput>i</computeroutput> of cell <computeroutput>c</computeroutput> is incident to the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="3">$ \geq2$</formula> and <formula id="41">$ i\in\{0,1,2,3\}$</formula> in dimension 3, <formula id="42">$ i=3$</formula> in dimension 2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="545" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a0ece46e036b7dabfd34fd4662973e221" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_infinite</definition>
        <argsstring>(const Facet &amp;f) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_3::is_infinite</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff facet <computeroutput>f</computeroutput> is incident to the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="3">$ \geq2$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="551" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ab84793de9c9899d8ecc33cdac411d324" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_infinite</definition>
        <argsstring>(Cell_handle c, int i, int j) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_3::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff the edge <computeroutput>(i,j)</computeroutput> of cell <computeroutput>c</computeroutput> is incident to the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="32">$ \geq1$</formula> and <formula id="33">$ i\neq j$</formula>. Moreover <formula id="34">$ i,j \in\{0,1,2,3\}$</formula> in dimension 3, <formula id="35">$ i,j \in\{0,1,2\}$</formula> in dimension 2, <formula id="36">$ i,j \in\{0,1\}$</formula> in dimension 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="558" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a6ca23f6bdd390ac23e7829e7f326efd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_infinite</definition>
        <argsstring>(const Edge &amp;e) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_3::is_infinite</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff edge <computeroutput>e</computeroutput> is incident to the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="32">$ \geq1$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="564" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a5b45572c663e5d2c10f26e7be421e140" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_vertex</definition>
        <argsstring>(const Point &amp;p, Vertex_handle &amp;v) const</argsstring>
        <name>is_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::is_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>p</computeroutput> is a vertex of <computeroutput>t</computeroutput> by locating <computeroutput>p</computeroutput> in the triangulation. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> is found, the associated vertex <computeroutput>v</computeroutput> is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="577" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a1d1c9daa1c2031a66c9acc0a958bdb8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_vertex</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>is_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::is_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>v</computeroutput> is a vertex of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="582" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a55b3dd5c4161a2612bd8aa60d64fb4f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_edge</definition>
        <argsstring>(Vertex_handle u, Vertex_handle v, Cell_handle &amp;c, int &amp;i, int &amp;j) const</argsstring>
        <name>is_edge</name>
        <qualifiedname>CGAL::Triangulation_3::is_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(u,v)</computeroutput> is an edge of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the edge is found, it gives a cell <computeroutput>c</computeroutput> having this edge and the indices <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput> of the vertices <computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> in <computeroutput>c</computeroutput>, in this order. <simplesect kind="pre"><para><computeroutput>u</computeroutput> and <computeroutput>v</computeroutput> are vertices of <computeroutput>t</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="590" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1aef7c688eb2a28c0aec936c41df46a172" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_facet</definition>
        <argsstring>(Vertex_handle u, Vertex_handle v, Vertex_handle w, Cell_handle &amp;c, int &amp;i, int &amp;j, int &amp;k) const</argsstring>
        <name>is_facet</name>
        <qualifiedname>CGAL::Triangulation_3::is_facet</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(u,v,w)</computeroutput> is a facet of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the facet is found, it computes a cell <computeroutput>c</computeroutput> having this facet and the indices <computeroutput>i</computeroutput>, <computeroutput>j</computeroutput> and <computeroutput>k</computeroutput> of the vertices <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput> in <computeroutput>c</computeroutput>, in this order. <simplesect kind="pre"><para><computeroutput>u</computeroutput>, <computeroutput>v</computeroutput> and <computeroutput>w</computeroutput> are vertices of <computeroutput>t</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="600" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a0b9e348637a4c392f71fed0ef3ff2ad8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_cell</definition>
        <argsstring>(Cell_handle c) const</argsstring>
        <name>is_cell</name>
        <qualifiedname>CGAL::Triangulation_3::is_cell</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>c</computeroutput> is a cell of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="606" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a24095561c8bd3390a58f7b7c9e45d4eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_cell</definition>
        <argsstring>(Vertex_handle u, Vertex_handle v, Vertex_handle w, Vertex_handle x, Cell_handle &amp;c, int &amp;i, int &amp;j, int &amp;k, int &amp;l) const</argsstring>
        <name>is_cell</name>
        <qualifiedname>CGAL::Triangulation_3::is_cell</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(u,v,w,x)</computeroutput> is a cell of <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the cell <computeroutput>c</computeroutput> is found, the method computes the indices <computeroutput>i</computeroutput>, <computeroutput>j</computeroutput>, <computeroutput>k</computeroutput> and <computeroutput>l</computeroutput> of the vertices <computeroutput>u</computeroutput>, <computeroutput>v</computeroutput>, <computeroutput>w</computeroutput> and <computeroutput>x</computeroutput> in <computeroutput>c</computeroutput>, in this order. <simplesect kind="pre"><para><computeroutput>u</computeroutput>, <computeroutput>v</computeroutput>, <computeroutput>w</computeroutput> and <computeroutput>x</computeroutput> are vertices of <computeroutput>t</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="616" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a8766c9a0c2a84203be31537e5e015646" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_cell</definition>
        <argsstring>(Vertex_handle u, Vertex_handle v, Vertex_handle w, Vertex_handle x, Cell_handle &amp;c) const</argsstring>
        <name>is_cell</name>
        <qualifiedname>CGAL::Triangulation_3::is_cell</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Tests whether <computeroutput>(u,v,w,x)</computeroutput> is a cell of <computeroutput>t</computeroutput> and computes this cell <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>u</computeroutput>, <computeroutput>v</computeroutput>, <computeroutput>w</computeroutput> and <computeroutput>x</computeroutput> are vertices of <computeroutput>t</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="626" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>There is a method <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a89a5c93d1e8a43cef317ef289f1d5482" kindref="member">has_vertex()</ref></computeroutput> in the cell class.</para>
<para>The analogous methods for facets are defined here. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a89a5c93d1e8a43cef317ef289f1d5482" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::has_vertex</definition>
        <argsstring>(const Facet &amp;f, Vertex_handle v, int &amp;j) const</argsstring>
        <name>has_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::has_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>If <computeroutput>v</computeroutput> is a vertex of <computeroutput>f</computeroutput>, then <computeroutput>j</computeroutput> is the index of <computeroutput>v</computeroutput> in the cell <computeroutput>f.first</computeroutput>, and the method returns <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="641" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1abf51c96f47c1e295fb984ad521634229" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::has_vertex</definition>
        <argsstring>(Cell_handle c, int i, Vertex_handle v, int &amp;j) const</argsstring>
        <name>has_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::has_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Same for facet <computeroutput>(c,i)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the index <computeroutput>j</computeroutput> of <computeroutput>v</computeroutput> in <computeroutput>c</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="647" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a21e33ef0b19042320b461a0a7a0f4e36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::has_vertex</definition>
        <argsstring>(const Facet &amp;f, Vertex_handle v) const</argsstring>
        <name>has_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::has_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="653" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a9d997837c2cb5ecca65658ccf6dc3010" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::has_vertex</definition>
        <argsstring>(Cell_handle c, int i, Vertex_handle v) const</argsstring>
        <name>has_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::has_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Same as the first two methods, but these two methods do not return the index of the vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="659" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>The following three methods test whether two facets have the same vertices. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a04ae7357b56d2bc5bd18c657e5577f79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::are_equal</definition>
        <argsstring>(Cell_handle c, int i, Cell_handle n, int j) const</argsstring>
        <name>are_equal</name>
        <qualifiedname>CGAL::Triangulation_3::are_equal</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="671" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a0460db28850be85188a8dec7c2425c3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::are_equal</definition>
        <argsstring>(const Facet &amp;f, const Facet &amp;g) const</argsstring>
        <name>are_equal</name>
        <qualifiedname>CGAL::Triangulation_3::are_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="676" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a9f0c69f352b9e7fd325980807778b031" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::are_equal</definition>
        <argsstring>(const Facet &amp;f, Cell_handle n, int j) const</argsstring>
        <name>are_equal</name>
        <qualifiedname>CGAL::Triangulation_3::are_equal</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>For these three methods: </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="681" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Point Location</header>
      <description><para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref></computeroutput> provides two functions to locate a given point with respect to a triangulation.</para>
<para>It provides also functions to test if a given point is inside a finite face or not. Note that the class <computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__3" kindref="compound">Delaunay_triangulation_3</ref></computeroutput> also provides a <computeroutput>nearest_vertex()</computeroutput> function. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a02a4a18074670282f3704f32b0901fad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::locate</definition>
        <argsstring>(const Point &amp;query, Cell_handle start=Cell_handle(), bool *could_lock_zone=nullptr) const</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Triangulation_3::locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref>()</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>If the point <computeroutput>query</computeroutput> lies inside the convex hull of the points, the cell that contains the query in its interior is returned. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>query</computeroutput> lies on a facet, an edge or on a vertex, one of the cells having <computeroutput>query</computeroutput> on its boundary is returned.</para>
<para>If the point <computeroutput>query</computeroutput> lies outside the convex hull of the points, an infinite cell with vertices <formula id="43">$ \{ p, q, r, \infty\}$</formula> is returned such that the tetrahedron <formula id="44">$ ( p, q, r, query )$</formula> is positively oriented (the rest of the triangulation lies on the other side of facet <formula id="45">$ ( p, q, r )$</formula>).</para>
<para>Note that locate works even in degenerate dimensions: in dimension 2 (resp. 1, 0) the <computeroutput>Cell_handle</computeroutput> returned is the one that represents the facet (resp. edge, vertex) containing the query point.</para>
<para>The optional argument <computeroutput>start</computeroutput> is used as a starting place for the search.</para>
<para>The optional argument <computeroutput>could_lock_zone</computeroutput> is used by the concurrency-safe version of the triangulation. When the pointer is not null, the locate will try to lock all the cells along the walk. If it succeeds, <computeroutput>*could_lock_zone</computeroutput> is <computeroutput>true</computeroutput>, otherwise it is false. In any case, the locked cells are not unlocked by <computeroutput>locate</computeroutput>, leaving this choice to the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a573cd639a2fdb12f400c0074597a5adc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::locate</definition>
        <argsstring>(const Point &amp;query, Vertex_handle hint, bool *could_lock_zone=nullptr) const</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Triangulation_3::locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>hint</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Same as above but uses <computeroutput>hint</computeroutput> as the starting place for the search. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="722" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af33632f0d268cc25d0df2caa57f69609" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::inexact_locate</definition>
        <argsstring>(const Point &amp;query, Cell_handle start=Cell_handle()) const</argsstring>
        <name>inexact_locate</name>
        <qualifiedname>CGAL::Triangulation_3::inexact_locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a02a4a18074670282f3704f32b0901fad" kindref="member">locate()</ref></computeroutput> but uses inexact predicates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns a handle on a cell that is a good approximation of the exact location of <computeroutput>query</computeroutput>, while being faster. Note that it may return a handle on a cell whose interior does not contain <computeroutput>query</computeroutput>. When the triangulation has dimension smaller than 3, <computeroutput>start</computeroutput> is returned.</para>
<para>Note that this function is available only if the cartesian coordinates of <computeroutput>query</computeroutput> are accessible with functions <computeroutput>x()</computeroutput>, <computeroutput>y()</computeroutput> and <computeroutput>z()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a384e93b6ff4614ed3b35bcf8981520c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::locate</definition>
        <argsstring>(const Point &amp;query, Locate_type &amp;lt, int &amp;li, int &amp;lj, Cell_handle start=Cell_handle(), bool *could_lock_zone=nullptr) const</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Triangulation_3::locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>li</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>lj</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref>()</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>If <computeroutput>query</computeroutput> lies inside the affine hull of the points, the <formula id="46">$ k$</formula>-face (finite or infinite) that contains <computeroutput>query</computeroutput> in its interior is returned, by means of the cell returned together with <computeroutput>lt</computeroutput>, which is set to the locate type of the query (<computeroutput>VERTEX, EDGE, FACET, CELL</computeroutput>, or <computeroutput>OUTSIDE_CONVEX_HULL</computeroutput> if the cell is infinite and <computeroutput>query</computeroutput> lies strictly in it) and two indices <computeroutput>li</computeroutput> and <computeroutput>lj</computeroutput> that specify the <formula id="46">$ k$</formula>-face of the cell containing <computeroutput>query</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the <formula id="46">$ k$</formula>-face is a cell, <computeroutput>li</computeroutput> and <computeroutput>lj</computeroutput> have no meaning; if it is a facet (resp. vertex), <computeroutput>li</computeroutput> gives the index of the facet (resp. vertex) and <computeroutput>lj</computeroutput> has no meaning; if it is and edge, <computeroutput>li</computeroutput> and <computeroutput>lj</computeroutput> give the indices of its vertices.</para>
<para>If the point <computeroutput>query</computeroutput> lies outside the affine hull of the points, which can happen in case of degenerate dimensions, <computeroutput>lt</computeroutput> is set to <computeroutput>OUTSIDE_AFFINE_HULL</computeroutput>, and the cell returned has no meaning. As a particular case, if there is no finite vertex yet in the triangulation, <computeroutput>lt</computeroutput> is set to <computeroutput>OUTSIDE_AFFINE_HULL</computeroutput> and <emphasis>locate</emphasis> returns the default constructed handle.</para>
<para>The optional argument <computeroutput>start</computeroutput> is used as a starting place for the search.</para>
<para>The optional argument <computeroutput>could_lock_zone</computeroutput> is used by the concurrency-safe version of the triangulation. When the pointer is not null, the locate will try to lock all the cells along the walk. If it succeeds, <computeroutput>*could_lock_zone</computeroutput> is <computeroutput>true</computeroutput>, otherwise it is false. In any case, the locked cells are not unlocked by <computeroutput>locate</computeroutput>, leaving this choice to the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ae26c070d4e465b8c6f95d63318080fe7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
        <definition>Cell_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::locate</definition>
        <argsstring>(const Point &amp;query, Locate_type &amp;lt, int &amp;li, int &amp;lj, Vertex_handle hint, bool *could_lock_zone=nullptr) const</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Triangulation_3::locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>li</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>lj</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>hint</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>could_lock_zone</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Same as above but uses <computeroutput>hint</computeroutput> as the starting place for the search. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a0ad86d1f011118565cbef93ad35d673b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_cell</definition>
        <argsstring>(const Point &amp;p, Cell_handle c, Locate_type &amp;lt, int &amp;li, int &amp;lj) const</argsstring>
        <name>side_of_cell</name>
        <qualifiedname>CGAL::Triangulation_3::side_of_cell</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>li</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>lj</declname>
        </param>
        <briefdescription>
<para>Returns a value indicating on which side of the oriented boundary of <computeroutput>c</computeroutput> the point <computeroutput>p</computeroutput> lies. </para>
        </briefdescription>
        <detaileddescription>
<para>More precisely, it returns:</para>
<para><itemizedlist>
<listitem><para><computeroutput>ON_BOUNDED_SIDE</computeroutput> if <computeroutput>p</computeroutput> is inside the cell. For an infinite cell this means that <computeroutput>p</computeroutput> lies strictly in the half space limited by its finite facet and not containing any other point of the triangulation.</para>
</listitem><listitem><para><computeroutput>ON_BOUNDARY</computeroutput> if p on the boundary of the cell. For an infinite cell this means that <computeroutput>p</computeroutput> lies on the <emphasis>finite</emphasis> facet. Then <computeroutput>lt</computeroutput> together with <computeroutput>li</computeroutput> and <computeroutput>lj</computeroutput> give the precise location on the boundary. (See the descriptions of the <emphasis>locate</emphasis> methods.)</para>
</listitem><listitem><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> if <computeroutput>p</computeroutput> lies outside the cell. For an infinite cell this means that <computeroutput>p</computeroutput> does not satisfy either of the two previous conditions. <simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput> </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="799" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a6f26ad9ce68fbe3cb97ed211a68ab21f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_facet</definition>
        <argsstring>(const Point &amp;p, const Facet &amp;f, Locate_type &amp;lt, int &amp;li, int &amp;lj) const</argsstring>
        <name>side_of_facet</name>
        <qualifiedname>CGAL::Triangulation_3::side_of_facet</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>li</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>lj</declname>
        </param>
        <briefdescription>
<para>Returns a value indicating on which side of the oriented boundary of <computeroutput>f</computeroutput> the point <computeroutput>p</computeroutput> lies: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>ON_BOUNDED_SIDE</computeroutput> if <computeroutput>p</computeroutput> is inside the facet. For an infinite facet this means that <computeroutput>p</computeroutput> lies strictly in the half plane limited by its finite edge and not containing any other point of the triangulation .</para>
</listitem><listitem><para><computeroutput>ON_BOUNDARY</computeroutput> if <computeroutput>p</computeroutput> is on the boundary of the facet. For an infinite facet this means that <computeroutput>p</computeroutput> lies on the finite edge. <computeroutput>lt</computeroutput>, <computeroutput>li</computeroutput> and <computeroutput>lj</computeroutput> give the precise location of <computeroutput>p</computeroutput> on the boundary of the facet. <computeroutput>li</computeroutput> and <computeroutput>lj</computeroutput> refer to indices in the degenerate cell <computeroutput>c</computeroutput> representing <computeroutput>f</computeroutput>.</para>
</listitem><listitem><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> if <computeroutput>p</computeroutput> lies outside the facet. For an infinite facet this means that <computeroutput>p</computeroutput> does not satisfy either of the two previous conditions.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 2</computeroutput> and <computeroutput>p</computeroutput> lies in the plane containing the triangulation. <computeroutput>f.second</computeroutput> <formula id="2">$ =3$</formula> (in dimension 2 there is only one facet per cell). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a4b2b97440867950f7a7723262bf93462" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_facet</definition>
        <argsstring>(const Point &amp;p, Cell_handle c, Locate_type &amp;lt, int &amp;li, int &amp;lj) const</argsstring>
        <name>side_of_facet</name>
        <qualifiedname>CGAL::Triangulation_3::side_of_facet</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>li</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>lj</declname>
        </param>
        <briefdescription>
<para>Same as the previous method for the facet <computeroutput>(c,3)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="833" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a3155746fefa1a1f87a834b4d575c904b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_edge</definition>
        <argsstring>(const Point &amp;p, const Edge &amp;e, Locate_type &amp;lt, int &amp;li) const</argsstring>
        <name>side_of_edge</name>
        <qualifiedname>CGAL::Triangulation_3::side_of_edge</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>li</declname>
        </param>
        <briefdescription>
<para>Returns a value indicating on which side of the oriented boundary of <computeroutput>e</computeroutput> the point <computeroutput>p</computeroutput> lies: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>ON_BOUNDED_SIDE</computeroutput> if <computeroutput>p</computeroutput> is inside the edge. For an infinite edge this means that <computeroutput>p</computeroutput> lies in the half line defined by the vertex and not containing any other point of the triangulation.</para>
</listitem><listitem><para><computeroutput>ON_BOUNDARY</computeroutput> if <computeroutput>p</computeroutput> equals one of the vertices, <computeroutput>li</computeroutput> give the index of the vertex in the cell storing <computeroutput>e</computeroutput></para>
</listitem><listitem><para><computeroutput>ON_UNBOUNDED_SIDE</computeroutput> if <computeroutput>p</computeroutput> lies outside the edge. For an infinite edge this means that <computeroutput>p</computeroutput> lies on the other half line, which contains the other points of the triangulation. <simplesect kind="pre"><para><computeroutput>t.dimension() == 1</computeroutput> and <computeroutput>p</computeroutput> is collinear with the points of the triangulation. <computeroutput>e.second == 0</computeroutput> and <computeroutput>e.third</computeroutput> <formula id="47">$ =1$</formula> (in dimension 1 there is only one edge per cell). </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a60b867e74736abf01e8ce50e13c0aa9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1gaf6030e89dadcc1f45369b0cdc5d9e111" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bounded_side</ref></type>
        <definition>Bounded_side CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::side_of_edge</definition>
        <argsstring>(const Point &amp;p, Cell_handle c, Locate_type &amp;lt, int &amp;li) const</argsstring>
        <name>side_of_edge</name>
        <qualifiedname>CGAL::Triangulation_3::side_of_edge</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>li</declname>
        </param>
        <briefdescription>
<para>Same as the previous method for edge <formula id="48">$ (c,0,1)$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="862" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Flips</header>
      <description><para>Two kinds of flips exist for a three-dimensional triangulation.</para>
<para>They are reciprocal. To be flipped, an edge must be incident to three tetrahedra. During the flip, these three tetrahedra disappear and two tetrahedra appear. <ref refid="classCGAL_1_1Triangulation__3_1fig__Triangulation3figflips" kindref="member">fig__Triangulation3figflips</ref> (left) shows the edge that is flipped as bold dashed, and one of its three incident facets is shaded. On the right, the facet shared by the two new tetrahedra is shaded. Flips are possible only under the following conditions: - the edge or facet to be flipped is not on the boundary of the convex hull of the triangulation - the five points involved are in convex position.</para>
<para><anchor id="classCGAL_1_1Triangulation__3_1fig__Triangulation3figflips"/> <image type="html" name="flips.png"></image>
 <image type="latex" name="flips.png" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="classCGAL_1_1Triangulation__3_1fig__Triangulation3figflips" kindref="member">fig__Triangulation3figflips</ref> Flips <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<para>The following methods guarantee the validity of the resulting 3D triangulation. Flips for a 2d triangulation are not implemented yet. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a883fed00b53cae9e85feb20230f54dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::flip</definition>
        <argsstring>(Edge e)</argsstring>
        <name>flip</name>
        <qualifiedname>CGAL::Triangulation_3::flip</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="895" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a5dfdcfc38bf0bf30860d26d0fef7fdc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::flip</definition>
        <argsstring>(Cell_handle c, int i, int j)</argsstring>
        <name>flip</name>
        <qualifiedname>CGAL::Triangulation_3::flip</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Before flipping, these methods check that edge <computeroutput>e=(c,i,j)</computeroutput> is flippable (which is quite expensive). </para>
        </briefdescription>
        <detaileddescription>
<para>They return <computeroutput>false</computeroutput> or <computeroutput>true</computeroutput> according to this test. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="902" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a54b04cf190a4643d43dd67cd808b7fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::flip_flippable</definition>
        <argsstring>(Edge e)</argsstring>
        <name>flip_flippable</name>
        <qualifiedname>CGAL::Triangulation_3::flip_flippable</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="907" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ac31682068c1ff25dc5ccd6f366fd1156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::flip_flippable</definition>
        <argsstring>(Cell_handle c, int i, int j)</argsstring>
        <name>flip_flippable</name>
        <qualifiedname>CGAL::Triangulation_3::flip_flippable</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Should be preferred to the previous methods when the edge is known to be flippable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The edge is flippable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="914" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a659e70e1b740a44b7d6b9886d323f571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::flip</definition>
        <argsstring>(Facet f)</argsstring>
        <name>flip</name>
        <qualifiedname>CGAL::Triangulation_3::flip</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="919" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a8050a0e63dcf0fed2e205ce69b0fa2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::flip</definition>
        <argsstring>(Cell_handle c, int i)</argsstring>
        <name>flip</name>
        <qualifiedname>CGAL::Triangulation_3::flip</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Before flipping, these methods check that facet <computeroutput>f=(c,i)</computeroutput> is flippable (which is quite expensive). </para>
        </briefdescription>
        <detaileddescription>
<para>They return <computeroutput>false</computeroutput> or <computeroutput>true</computeroutput> according to this test. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="926" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2547de40ced9bfa49e16ff4ba2e1c52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::flip_flippable</definition>
        <argsstring>(Facet f)</argsstring>
        <name>flip_flippable</name>
        <qualifiedname>CGAL::Triangulation_3::flip_flippable</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="931" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a1d8720ff50a61985bcbe474268d9d275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::flip_flippable</definition>
        <argsstring>(Cell_handle c, int i)</argsstring>
        <name>flip_flippable</name>
        <qualifiedname>CGAL::Triangulation_3::flip_flippable</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Should be preferred to the previous methods when the facet is known to be flippable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The facet is flippable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="938" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertions</header>
      <description><para>The following operations are guaranteed to lead to a valid triangulation when they are applied on a valid triangulation. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ad8d7a1aa3b310ba8d86ede726746fcb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Cell_handle start=Cell_handle())</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_3::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Inserts the point <computeroutput>p</computeroutput> in the triangulation and returns the corresponding vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>If point <computeroutput>p</computeroutput> coincides with an already existing vertex, this vertex is returned and the triangulation remains unchanged.</para>
<para>If point <computeroutput>p</computeroutput> lies in the convex hull of the points, it is added naturally: if it lies inside a cell, the cell is split into four cells, if it lies on a facet, the two incident cells are split into three cells, if it lies on an edge, all the cells incident to this edge are split into two cells.</para>
<para>If point <computeroutput>p</computeroutput> is strictly outside the convex hull but in the affine hull, <computeroutput>p</computeroutput> is linked to all visible points on the convex hull to form the new triangulation. See Figure <ref refid="classCGAL_1_1Triangulation__3_1Triangulation3figinsert_outside_convex_hull" kindref="member">Triangulation3figinsert_outside_convex_hull</ref>.</para>
<para>If point <computeroutput>p</computeroutput> is outside the affine hull of the points, <computeroutput>p</computeroutput> is linked to all the points, and the dimension of the triangulation is incremented. All the points now belong to the boundary of the convex hull, so, the infinite vertex is linked to all the points to triangulate the new infinite face. See Figure <ref refid="classCGAL_1_1Triangulation__3_1Triangulation3figinsert_outside_affine_hull" kindref="member">Triangulation3figinsert_outside_affine_hull</ref>. The optional argument <computeroutput>start</computeroutput> is used as a starting place for the search. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="973" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a579619f972362fa8cd35d1de72dd677c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Vertex_handle hint)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_3::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>hint</declname>
        </param>
        <briefdescription>
<para>Same as above but uses <computeroutput>hint</computeroutput> as the starting place for the search. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="979" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af41ac521888fafda75100fcd36650aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Locate_type lt, Cell_handle loc, int li, int lj)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_3::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" kindref="member">Locate_type</ref></type>
          <declname>lt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lj</declname>
        </param>
        <briefdescription>
<para>Inserts the point <computeroutput>p</computeroutput> in the triangulation and returns the corresponding vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to the above <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1ad8d7a1aa3b310ba8d86ede726746fcb3" kindref="member">insert()</ref></computeroutput> function, but takes as additional parameter the return values of a previous location query. See description of <emphasis><ref refid="classCGAL_1_1Triangulation__3_1a02a4a18074670282f3704f32b0901fad" kindref="member">locate()</ref></emphasis> above. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="987" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ad3353128386bbb51f79d0263e7f67337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointInputIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(PointInputIterator first, PointInputIterator last)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_3::insert</qualifiedname>
        <param>
          <type>PointInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointInputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Inserts the points in the range <computeroutput>[first,last)</computeroutput> in the given order, and returns the number of inserted points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="997" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a8aa85f88733d30aa3ec5385538e13ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointWithInfoInputIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert</definition>
        <argsstring>(PointWithInfoInputIterator first, PointWithInfoInputIterator last)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_3::insert</qualifiedname>
        <param>
          <type>PointWithInfoInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointWithInfoInputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Inserts the points in the iterator range <computeroutput>[first,last)</computeroutput> in the given order, and returns the number of inserted points. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a pair <computeroutput>(p,i)</computeroutput>, the vertex <computeroutput>v</computeroutput> storing <computeroutput>p</computeroutput> also stores <computeroutput>i</computeroutput>, that is <computeroutput>v.point() == p</computeroutput> and <computeroutput>v.info() == i</computeroutput>. If several pairs have the same point, only one vertex is created, and one of the objects of type <computeroutput>Vertex::Info</computeroutput> will be stored in the vertex. <simplesect kind="pre"><para><computeroutput>Vertex</computeroutput> must be model of the concept <computeroutput><ref refid="classTriangulationVertexBaseWithInfo__3" kindref="compound">TriangulationVertexBaseWithInfo_3</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointWithInfoInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type <computeroutput>std::pair&lt;Point,Vertex::Info&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1014" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>We also provide some other methods that can be used instead of <computeroutput>Triangulatation_3::insert()</computeroutput> when the place where the new point must be inserted is already known.</para>
<para>They are also guaranteed to lead to a valid triangulation when they are applied on a valid triangulation. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1aff8be2085c18e293f6d1a26c282acbc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_cell</definition>
        <argsstring>(const Point &amp;p, Cell_handle c)</argsstring>
        <name>insert_in_cell</name>
        <qualifiedname>CGAL::Triangulation_3::insert_in_cell</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Inserts the point <computeroutput>p</computeroutput> in the cell <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The cell <computeroutput>c</computeroutput> is split into 4 tetrahedra. <simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput> and <computeroutput>p</computeroutput> lies strictly inside cell <computeroutput>c</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1031" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a80f8771ed8bca545ca451afae14b77ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_facet</definition>
        <argsstring>(const Point &amp;p, const Facet &amp;f)</argsstring>
        <name>insert_in_facet</name>
        <qualifiedname>CGAL::Triangulation_3::insert_in_facet</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Inserts the point <computeroutput>p</computeroutput> in the facet <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In dimension 3, the 2 neighboring cells are split into 3 tetrahedra; in dimension 2, the facet is split into 3 triangles. <simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="3">$ \geq2$</formula> and <computeroutput>p</computeroutput> lies strictly inside face <computeroutput>f</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1039" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1aa43e9ac9d97a9a2fa18ae18e21bb25b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_facet</definition>
        <argsstring>(const Point &amp;p, Cell_handle c, int i)</argsstring>
        <name>insert_in_facet</name>
        <qualifiedname>CGAL::Triangulation_3::insert_in_facet</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>As above, insertion in the facet <computeroutput>(c,i)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>As above and <formula id="30">$ i \in\{0,1,2,3\}$</formula> in dimension 3, <formula id="31">$ i = 3$</formula> in dimension 2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1045" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a5c1349d7fcffeac6f98cfc8b8febf564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_edge</definition>
        <argsstring>(const Point &amp;p, const Edge &amp;e)</argsstring>
        <name>insert_in_edge</name>
        <qualifiedname>CGAL::Triangulation_3::insert_in_edge</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Inserts <computeroutput>p</computeroutput> in the edge <computeroutput>e</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In dimension 3, all the cells having this edge are split into 2 tetrahedra; in dimension 2, the 2 neighboring facets are split into 2 triangles; in dimension 1, the edge is split into 2 edges. <simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="32">$ \geq1$</formula> and <computeroutput>p</computeroutput> lies on edge <computeroutput>e</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1055" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a06ba9d64000edc9e5d595ae1c7595922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_edge</definition>
        <argsstring>(const Point &amp;p, Cell_handle c, int i, int j)</argsstring>
        <name>insert_in_edge</name>
        <qualifiedname>CGAL::Triangulation_3::insert_in_edge</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>As above, inserts <computeroutput>p</computeroutput> in the edge <formula id="49">$ (i, j)$</formula> of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>As above and <formula id="33">$ i\neq j$</formula>. Moreover <formula id="34">$ i,j \in\{0,1,2,3\}$</formula> in dimension 3, <formula id="35">$ i,j \in\{0,1,2\}$</formula> in dimension 2, <formula id="36">$ i,j \in\{0,1\}$</formula> in dimension 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1061" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2798aa7502b4929ccaa8cab9bacbff18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_outside_convex_hull</definition>
        <argsstring>(const Point &amp;p, Cell_handle c)</argsstring>
        <name>insert_outside_convex_hull</name>
        <qualifiedname>CGAL::Triangulation_3::insert_outside_convex_hull</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>The cell <computeroutput>c</computeroutput> must be an infinite cell containing <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Links <computeroutput>p</computeroutput> to all points in the triangulation that are visible from <computeroutput>p</computeroutput>. Updates consequently the infinite faces. See Figure <ref refid="classCGAL_1_1Triangulation__3_1Triangulation3figinsert_outside_convex_hull" kindref="member">Triangulation3figinsert_outside_convex_hull</ref>. <simplesect kind="pre"><para><computeroutput>t.dimension() &gt; 0</computeroutput>, <computeroutput>c</computeroutput>, and the <formula id="46">$ k$</formula>-face represented by <computeroutput>c</computeroutput> is infinite and contains <computeroutput>t</computeroutput>.</para>
</simplesect>
<anchor id="classCGAL_1_1Triangulation__3_1Triangulation3figinsert_outside_convex_hull"/><image type="html" name="insert_outside_convex_hull.png">insert_outside_convex_hull() (2-dimensional case)</image>
 <image type="latex" name="insert_outside_convex_hull.png">insert_outside_convex_hull() (2-dimensional case)</image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1075" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a6f3e038498843f6ce7c0c70015ddaff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_outside_affine_hull</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>insert_outside_affine_hull</name>
        <qualifiedname>CGAL::Triangulation_3::insert_outside_affine_hull</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para><computeroutput>p</computeroutput> is linked to all the points, and the infinite vertex is linked to all the points (including <computeroutput>p</computeroutput>) to triangulate the new infinite face, so that all the points now belong to the boundary of the convex hull. </para>
        </briefdescription>
        <detaileddescription>
<para>See Figure <ref refid="classCGAL_1_1Triangulation__3_1Triangulation3figinsert_outside_affine_hull" kindref="member">Triangulation3figinsert_outside_affine_hull</ref>.</para>
<para>This method can be used to insert the first point in an empty triangulation. <simplesect kind="pre"><para><computeroutput>t.dimension() &lt; 3</computeroutput> and <computeroutput>p</computeroutput> lies outside the affine hull of the points.</para>
</simplesect>
<anchor id="classCGAL_1_1Triangulation__3_1Triangulation3figinsert_outside_affine_hull"/><image type="html" name="insert_outside_affine_hull.png">insert_outside_affine_hull() (2-dimensional case)</image>
 <image type="latex" name="insert_outside_affine_hull.png">insert_outside_affine_hull() (2-dimensional case)</image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1092" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a4b298ac4b2d8585dec9e436bb9e65ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CellIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_hole</definition>
        <argsstring>(const Point &amp;p, CellIt cell_begin, CellIt cell_end, Cell_handle begin, int i)</argsstring>
        <name>insert_in_hole</name>
        <qualifiedname>CGAL::Triangulation_3::insert_in_hole</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_begin</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_end</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Creates a new vertex by starring a hole. </para>
        </briefdescription>
        <detaileddescription>
<para>It takes an iterator range <computeroutput>[cell_begin,cell_end)</computeroutput> of <computeroutput>Cell_handle</computeroutput>s which specifies a hole: a set of connected cells (resp. facets in dimension 2) which is star-shaped wrt <computeroutput>p</computeroutput>. (<computeroutput>begin</computeroutput>, <computeroutput>i</computeroutput>) is a facet (resp. an edge) on the boundary of the hole, that is, <computeroutput>begin</computeroutput> belongs to the set of cells (resp. facets) previously described, and <computeroutput>begin-&gt;neighbor(i)</computeroutput> does not. Then this function deletes all the cells (resp. facets) describing the hole, creates a new vertex <computeroutput>v</computeroutput>, and for each facet (resp. edge) on the boundary of the hole, creates a new cell (resp. facet) with <computeroutput>v</computeroutput> as vertex. Then <computeroutput>v-&gt;set_point(p)</computeroutput> is called and <computeroutput>v</computeroutput> is returned.</para>
<para>This operation is equivalent to calling <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a951781437d62955aaae730b87c833498" kindref="member">tds()</ref>.insert_in_hole(cell_begin, cell_end, begin, i); v-&gt;set_point(p)</computeroutput>. <simplesect kind="pre"><para><computeroutput>t.dimension()</computeroutput> <formula id="3">$ \geq2$</formula>, the set of cells (resp. facets in dimension 2) is connected, its boundary is connected, and <computeroutput>p</computeroutput> lies inside the hole, which is star-shaped wrt <computeroutput>p</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1112" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ad5f7bba4f49683befd2f70b35f2d7079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CellIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::insert_in_hole</definition>
        <argsstring>(const Point &amp;p, CellIt cell_begin, CellIt cell_end, Cell_handle begin, int i, Vertex_handle newv)</argsstring>
        <name>insert_in_hole</name>
        <qualifiedname>CGAL::Triangulation_3::insert_in_hole</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_begin</declname>
        </param>
        <param>
          <type>CellIt</type>
          <declname>cell_end</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>newv</declname>
        </param>
        <briefdescription>
<para>Same as above, except that <computeroutput>newv</computeroutput> will be used as the new vertex, which must have been allocated previously with e.g. <computeroutput>create_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1120" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cell, Face, Edge and Vertex Iterators</header>
      <description><para>The following iterators allow the user to visit cells, facets, edges and vertices of the triangulation.</para>
<para>These iterators are non-mutable, bidirectional and their value types are respectively <computeroutput>Cell</computeroutput>, <computeroutput>Facet</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. They are all invalidated by any change in the triangulation. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af43b5f09e0fdcb9b8fff939133f2e814" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1af8d044953011cb5ff6a5ecf87e6f308e" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_begin</name>
        <qualifiedname>CGAL::Triangulation_3::finite_vertices_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>Then <computeroutput>++</computeroutput> and <computeroutput>--</computeroutput> will iterate over finite vertices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1134" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a6bff5471a8bd32d16c396948fdbc3495" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1af8d044953011cb5ff6a5ecf87e6f308e" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_end</name>
        <qualifiedname>CGAL::Triangulation_3::finite_vertices_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1139" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af682021f6f9be1437fe29be125ad14e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1c91aeb6128d5bf33995dca02398d330" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges_begin</name>
        <qualifiedname>CGAL::Triangulation_3::finite_edges_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Then <computeroutput>++</computeroutput> and <computeroutput>--</computeroutput> will iterate over finite edges. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1145" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a5455f4b903db664c1d57634ec15cd13a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1c91aeb6128d5bf33995dca02398d330" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges_end</name>
        <qualifiedname>CGAL::Triangulation_3::finite_edges_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1150" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1adcb08049b8d50168079bbba248f3344d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a6bc54bfb8362670059a4c1a416269994" kindref="member">Finite_facets_iterator</ref></type>
        <definition>Finite_facets_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_facets_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_facets_begin</name>
        <qualifiedname>CGAL::Triangulation_3::finite_facets_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite facet. </para>
        </briefdescription>
        <detaileddescription>
<para>Then <computeroutput>++</computeroutput> and <computeroutput>--</computeroutput> will iterate over finite facets. Returns <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1aee05b9fc603428dfda9712b6c069e4e5" kindref="member">finite_facets_end()</ref></computeroutput> when <computeroutput>t.dimension() &lt; 2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1157" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1aee05b9fc603428dfda9712b6c069e4e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a6bc54bfb8362670059a4c1a416269994" kindref="member">Finite_facets_iterator</ref></type>
        <definition>Finite_facets_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_facets_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_facets_end</name>
        <qualifiedname>CGAL::Triangulation_3::finite_facets_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1162" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a433fa868d7637f2719a40c251bd2ae65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a6d1b83cb6fba001622452aa0f6592e02" kindref="member">Finite_cells_iterator</ref></type>
        <definition>Finite_cells_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_cells_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_cells_begin</name>
        <qualifiedname>CGAL::Triangulation_3::finite_cells_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite cell. </para>
        </briefdescription>
        <detaileddescription>
<para>Then <computeroutput>++</computeroutput> and <computeroutput>--</computeroutput> will iterate over finite cells. Returns <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1a3431b35584d93e305c1548228cf93110" kindref="member">finite_cells_end()</ref></computeroutput> when <computeroutput>t.dimension() &lt; 3</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1169" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a3431b35584d93e305c1548228cf93110" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a6d1b83cb6fba001622452aa0f6592e02" kindref="member">Finite_cells_iterator</ref></type>
        <definition>Finite_cells_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_cells_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_cells_end</name>
        <qualifiedname>CGAL::Triangulation_3::finite_cells_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1174" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1aba04013896bdd4ea1398320869e2d886" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab930d6f34c8346b5191e93ab79475c70" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_begin</name>
        <qualifiedname>CGAL::Triangulation_3::all_vertices_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterates over all vertices (even the infinite one). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1179" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a8f2932dc2d9c018421d195757d9c5ffa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab930d6f34c8346b5191e93ab79475c70" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_end</name>
        <qualifiedname>CGAL::Triangulation_3::all_vertices_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1184" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af284c5406d004ea3316ed61f5a825887" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a67ff0ee4eca14392f1fcb55acd5a6edc" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_edges_begin</name>
        <qualifiedname>CGAL::Triangulation_3::all_edges_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterates over all edges (even infinite ones). Returns <computeroutput>edges_end()</computeroutput> when <computeroutput>t.dimension() &lt; 1</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1190" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2d4389833767a0ac0a469c6d3f1c2604" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a67ff0ee4eca14392f1fcb55acd5a6edc" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>all_edges_end</name>
        <qualifiedname>CGAL::Triangulation_3::all_edges_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1195" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af412b76826082617ad5cd7a6428561b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a086ed61d6d43a10f77f6a4d695a256fc" kindref="member">All_facets_iterator</ref></type>
        <definition>All_facets_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_facets_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_facets_begin</name>
        <qualifiedname>CGAL::Triangulation_3::all_facets_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary facet. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterates over all facets (even infinite ones). Returns <computeroutput>facets_end()</computeroutput> when <computeroutput>t.dimension() &lt; 2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1202" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2cf3371698886ce3d219ba98c0a2452b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a086ed61d6d43a10f77f6a4d695a256fc" kindref="member">All_facets_iterator</ref></type>
        <definition>All_facets_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_facets_end</definition>
        <argsstring>() const</argsstring>
        <name>all_facets_end</name>
        <qualifiedname>CGAL::Triangulation_3::all_facets_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1207" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ad20bfae1b250b357d8ae5bc48eef1f10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1aff2c019af34403770e6e922d616eaf0f" kindref="member">All_cells_iterator</ref></type>
        <definition>All_cells_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_cells_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_cells_begin</name>
        <qualifiedname>CGAL::Triangulation_3::all_cells_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary cell. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterates over all cells (even infinite ones). Returns <computeroutput>cells_end()</computeroutput> when <computeroutput>t.dimension() &lt; 3</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1214" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1aacfd26fa0d3b2a8b2d8008af3b08930a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1aff2c019af34403770e6e922d616eaf0f" kindref="member">All_cells_iterator</ref></type>
        <definition>All_cells_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_cells_end</definition>
        <argsstring>() const</argsstring>
        <name>all_cells_end</name>
        <qualifiedname>CGAL::Triangulation_3::all_cells_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1219" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a067b365119a53428aff40652e0ccb400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a3ec38d2d1afffea88a760f5a50c4f9f0" kindref="member">Point_iterator</ref></type>
        <definition>Point_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::points_begin</definition>
        <argsstring>() const</argsstring>
        <name>points_begin</name>
        <qualifiedname>CGAL::Triangulation_3::points_begin</qualifiedname>
        <briefdescription>
<para>Iterates over the points of the triangulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1224" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ac69f365fe85f589224868cdfc859c078" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a3ec38d2d1afffea88a760f5a50c4f9f0" kindref="member">Point_iterator</ref></type>
        <definition>Point_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::points_end</definition>
        <argsstring>() const</argsstring>
        <name>points_end</name>
        <qualifiedname>CGAL::Triangulation_3::points_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1229" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Ranges</header>
      <description><para>In order to write C++ 11 <computeroutput>for</computeroutput>-loops we provide a range type and member functions to generate ranges.</para>
<para>Note that vertex and cell ranges are special. See Section <ref refid="index_1Triangulation3secRanges" kindref="member">Iterators and Ranges</ref> in the User Manual. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a16e64be4b2c33a5e5442a07b771e3241" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a0ffff120af16e255cee2ccc20be34775" kindref="member">All_cell_handles</ref></type>
        <definition>All_cell_handles CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_cell_handles</definition>
        <argsstring>() const</argsstring>
        <name>all_cell_handles</name>
        <qualifiedname>CGAL::Triangulation_3::all_cell_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over all cells (even the infinite cells). </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty range when <computeroutput>t.number_of_cells() == 0</computeroutput>. <simplesect kind="note"><para>While the value type of <computeroutput>All_cells_iterator</computeroutput> is <computeroutput>Cell</computeroutput>, the value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">All_cell_handles::iterator</ref></computeroutput> is <computeroutput>Cell_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1248" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ab15ab30eb9c54106a96916868f454eef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1abe601aa6506352a8df0877449bcf0dd3" kindref="member">All_facets</ref></type>
        <definition>All_facets CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_facets</definition>
        <argsstring>() const</argsstring>
        <name>all_facets</name>
        <qualifiedname>CGAL::Triangulation_3::all_facets</qualifiedname>
        <briefdescription>
<para>returns a range of iterators starting at an arbitrary facet. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty range when <computeroutput>t.dimension() &lt; 2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1256" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a67412622209344f2f8660b337a6d5e35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a60c2dacc98d57951b9209f94dfcad921" kindref="member">All_edges</ref></type>
        <definition>All_edges CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_edges</definition>
        <argsstring>() const</argsstring>
        <name>all_edges</name>
        <qualifiedname>CGAL::Triangulation_3::all_edges</qualifiedname>
        <briefdescription>
<para>returns a range of iterators starting at an arbitrary edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty range when <computeroutput>t.dimension() &lt; 2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1262" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a61c04821ce4e5b41ce3fb95a22737a9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ae53e08aa6f86bee125ef6ba075b0e973" kindref="member">All_vertex_handles</ref></type>
        <definition>All_vertex_handles CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::all_vertex_handles</definition>
        <argsstring>() const</argsstring>
        <name>all_vertex_handles</name>
        <qualifiedname>CGAL::Triangulation_3::all_vertex_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over all vertices (even the infinite one). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>While the value type of <computeroutput>All_vertices_iterator</computeroutput> is <computeroutput>Vertex</computeroutput>, the value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">All_vertex_handles::iterator</ref></computeroutput> is <computeroutput>Vertex_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1269" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ab9584da45f55288fb2b9d0624250bbf3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a4c94face5ab29897bcb291f157f1635d" kindref="member">Finite_cell_handles</ref></type>
        <definition>Finite_cell_handles CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_cell_handles</definition>
        <argsstring>() const</argsstring>
        <name>finite_cell_handles</name>
        <qualifiedname>CGAL::Triangulation_3::finite_cell_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over finite cells. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty range when <computeroutput>t.number_of_cells() == 0</computeroutput>. <simplesect kind="note"><para>While the value type of <computeroutput>Finite_cells_iterator</computeroutput> is <computeroutput>Cell</computeroutput>, the value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Finite_cell_handles::iterator</ref></computeroutput> is <computeroutput>Cell_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1278" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a95e37032ae2a232c6ac42b114fd7c432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1aa35974d42ec9564687ffbe5f664cb906" kindref="member">Finite_facets</ref></type>
        <definition>Finite_facets CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_facets</definition>
        <argsstring>() const</argsstring>
        <name>finite_facets</name>
        <qualifiedname>CGAL::Triangulation_3::finite_facets</qualifiedname>
        <briefdescription>
<para>returns a range of iterators starting at an arbitrary facet. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty range when <computeroutput>t.dimension() &lt; 2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1286" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1afb40860f9602b54c62c0b7ad645278d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a514f885323d414200cd13e8fa6e79e34" kindref="member">Finite_edges</ref></type>
        <definition>Finite_edges CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_edges</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges</name>
        <qualifiedname>CGAL::Triangulation_3::finite_edges</qualifiedname>
        <briefdescription>
<para>returns a range of iterators starting at an arbitrary edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty range when <computeroutput>t.dimension() &lt; 2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1292" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a33a4aa893719a091df83ee40ad63a49f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ac59a8c8f173db4a1e72b537bb59e16a5" kindref="member">Finite_vertex_handles</ref></type>
        <definition>Finite_vertex_handles CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_vertex_handles</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertex_handles</name>
        <qualifiedname>CGAL::Triangulation_3::finite_vertex_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over finite vertices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>While the value type of <computeroutput>Finite_vertices_iterator</computeroutput> is <computeroutput>Vertex</computeroutput>, the value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Finite_vertex_handles::iterator</ref></computeroutput> is <computeroutput>Vertex_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1299" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ae0b4d6177ffbcbd6c6d58820df53b746" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a5c8812f38413b29cdd7aae517c457d52" kindref="member">Points</ref></type>
        <definition>Points CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::points</definition>
        <argsstring>() const</argsstring>
        <name>points</name>
        <qualifiedname>CGAL::Triangulation_3::points</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over the points of finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1304" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a02faf334255e1ca8caa1a6f412533759" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref>, 2 &gt;</type>
        <definition>std::array&lt; Vertex_handle, 2 &gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::vertices</definition>
        <argsstring>(const Edge &amp;e) const</argsstring>
        <name>vertices</name>
        <qualifiedname>CGAL::Triangulation_3::vertices</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>returns an array containing the vertices of <computeroutput>e</computeroutput>, in the order of their indices <computeroutput>e.second</computeroutput> and <computeroutput>e.third</computeroutput> in the cell <computeroutput>e.first</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1311" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a539aa6bbb70ea430c787ee7e3600e064" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref>, 3 &gt;</type>
        <definition>std::array&lt; Vertex_handle, 3 &gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::vertices</definition>
        <argsstring>(const Facet &amp;f) const</argsstring>
        <name>vertices</name>
        <qualifiedname>CGAL::Triangulation_3::vertices</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>returns an array containing the vertices of <computeroutput>f</computeroutput>, in counterclockwise order on the face of <computeroutput>f.first</computeroutput> opposite to vertex <computeroutput>f.first-&gt;vertex(f.second)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1318" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a32a502a7555b5c77967ea3004a0d5c1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref>, 4 &gt;</type>
        <definition>std::array&lt; Vertex_handle, 4 &gt; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::vertices</definition>
        <argsstring>(const Cell_handle c) const</argsstring>
        <name>vertices</name>
        <qualifiedname>CGAL::Triangulation_3::vertices</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>returns an array containing the vertices of <computeroutput>c</computeroutput>, in the same order as the indices in <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1324" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a7245a46ae480496e8e7e83fb2a1ebb43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a0356538c3ef7d62280a7846c35a8abbb" kindref="member">Segment_traverser_cell_handles</ref></type>
        <definition>Segment_traverser_cell_handles CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment_traverser_cell_handles</definition>
        <argsstring>() const</argsstring>
        <name>segment_traverser_cell_handles</name>
        <qualifiedname>CGAL::Triangulation_3::segment_traverser_cell_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over the cells intersected by a line segment </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1329" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a5bb68143601dda95a446ee55cc7aa200" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ae4a0565708ab5c23639c90c47bbec7cc" kindref="member">Segment_traverser_simplices</ref></type>
        <definition>Segment_traverser_simplices CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment_traverser_simplices</definition>
        <argsstring>() const</argsstring>
        <name>segment_traverser_simplices</name>
        <qualifiedname>CGAL::Triangulation_3::segment_traverser_simplices</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over the simplices intersected by a line segment </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1334" column="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Segment Cell Iterator</header>
      <description><para>The triangulation defines an iterator that visits cells intersected by a line segment.</para>
<para>Segment Cell <ref refid="classIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Iterator</ref> iterates over a sequence of cells which union contains the segment <computeroutput>[s,t]</computeroutput>. The sequence of cells is &quot;minimal&quot; (removing any cell would make the union of the renaming cells not entirely containing <computeroutput>[s,t]</computeroutput>) and sorted along <computeroutput>[s,t]</computeroutput>. The &quot;minimality&quot; of the sequence implies that in degenerate cases, only one cell incident to the traversed simplex will be reported.</para>
<para>The cells visited form a facet-connected region containing both source and target points of the line segment <computeroutput>[s,t]</computeroutput>. Each cell falls within one or more of the following categories:<orderedlist>
<listitem><para>a finite cell whose interior is intersected by <computeroutput>[s,t]</computeroutput>.</para>
</listitem><listitem><para>a finite cell with a facet <computeroutput>f</computeroutput> whose interior is intersected by <computeroutput>[s,t]</computeroutput> in a line segment. If such a cell is visited, its neighbor incident to <computeroutput>f</computeroutput> is not visited.</para>
</listitem><listitem><para>a finite cell with an edge <computeroutput>e</computeroutput> whose interior is intersected by <computeroutput>[s,t]</computeroutput> in a line segment. If such a cell is visited, none of the other cells incident to <computeroutput>e</computeroutput> are visited.</para>
</listitem><listitem><para>a finite cell with an edge <computeroutput>e</computeroutput> whose interior is intersected by <computeroutput>[s,t]</computeroutput> in a point. This cell forms a connected component together with the other cells incident to <computeroutput>e</computeroutput> that are visited. Exactly two of these visited cells also fall in category 1 or 2.</para>
</listitem><listitem><para>a finite cell with a vertex <computeroutput>v</computeroutput> that is an endpoint of <computeroutput>[s,t]</computeroutput>. This cell also fits in either category 1 or 2.</para>
</listitem><listitem><para>a finite cell with a vertex <computeroutput>v</computeroutput> that lies in the interior of <computeroutput>[s,t]</computeroutput>. This cell forms a connected component together with the other cells incident to <computeroutput>v</computeroutput> that are visited. Exactly two of these cells also fall in category 1 or 2.</para>
</listitem><listitem><para>an infinite cell with a finite facet whose interior is intersected by the interior of <computeroutput>[s,t]</computeroutput>.</para>
</listitem><listitem><para>an infinite cell with a finite edge <computeroutput>e</computeroutput> whose interior is intersected by the interior of <computeroutput>[s,t]</computeroutput>. If such a cell is visited, its infinite neighbor incident to <computeroutput>e</computeroutput> is not visited. Among the finite cells incident to <computeroutput>e</computeroutput> that are visited, exactly one also falls in category 1 or 2.</para>
</listitem><listitem><para>an infinite cell with a finite vertex <computeroutput>v</computeroutput> that lies in the interior of <computeroutput>[s,t]</computeroutput>. If such a cell is visited, none of the other infinite cells incident to <computeroutput>v</computeroutput> are visited. Among the finite cells incident to <computeroutput>v</computeroutput> that are visited, exactly one also falls in category 1, 2, or 3.</para>
</listitem><listitem><para>an infinite cell in the special case where the segment does not intersect any finite facet. In this case, exactly one infinite cell is visited. This cell shares a facet <computeroutput>f</computeroutput> with a finite cell <computeroutput>c</computeroutput> such that <computeroutput>f</computeroutput> is intersected by the line through the point <computeroutput>s</computeroutput> and the vertex of <computeroutput>c</computeroutput> opposite of <computeroutput>f</computeroutput>.</para>
</listitem></orderedlist>
</para>
<para>Note that for categories 4 and 6, it is not predetermined which incident cells are visited. However, exactly two of the incident cells <computeroutput>c0,c1</computeroutput> visited also fall in category 1 or 2. The remaining incident cells visited make a facet-connected sequence connecting <computeroutput>c0</computeroutput> to <computeroutput>c1</computeroutput>.</para>
<para><computeroutput>Segment_cell_iterator</computeroutput> implements the concept <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> and is non-mutable. It is invalidated by any modification of one of the cells traversed.</para>
<para>Its <computeroutput>value_type</computeroutput> is <computeroutput>Cell_handle</computeroutput>. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a7b020f2841ad9a6148e79ac0939b06ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a39088e35d874ae7361d96a19acd572c7" kindref="member">Segment_cell_iterator</ref></type>
        <definition>Segment_cell_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment_traverser_cells_begin</definition>
        <argsstring>(Vertex_handle vs, Vertex_handle vt) const</argsstring>
        <name>segment_traverser_cells_begin</name>
        <qualifiedname>CGAL::Triangulation_3::segment_traverser_cells_begin</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>vs</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>vt</declname>
        </param>
        <briefdescription>
<para>returns the iterator that allows to visit the cells intersected by the line segment <computeroutput>[vs,vt]</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The initial value of the iterator is the cell containing <computeroutput>vs</computeroutput> and intersected by the line segment <computeroutput>[vs,vt]</computeroutput> in its interior.</para>
<para>The first cell incident to <computeroutput>vt</computeroutput> is the last valid value of the iterator. It is followed by <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1adb5f31ae685c84289b0d39c2c1b3cf3b" kindref="member">segment_traverser_cells_end()</ref></computeroutput>.</para>
<para><simplesect kind="pre"><para><computeroutput>vs</computeroutput> and <computeroutput>vt</computeroutput> must be different vertices and neither can be the infinite vertex. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>triangulation.dimension() &gt;= 2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1399" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a535b21fc57d175507facde8091852d3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a39088e35d874ae7361d96a19acd572c7" kindref="member">Segment_cell_iterator</ref></type>
        <definition>Segment_cell_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment_traverser_cells_begin</definition>
        <argsstring>(const Point &amp;ps, const Point &amp;pt, Cell_handle hint=Cell_handle()) const</argsstring>
        <name>segment_traverser_cells_begin</name>
        <qualifiedname>CGAL::Triangulation_3::segment_traverser_cells_begin</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>hint</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the iterator that allows to visit the cells intersected by the line segment <computeroutput>[ps, pt]</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>[ps,pt]</computeroutput> entirely lies outside the convex hull, the iterator visits exactly one infinite cell.</para>
<para>The initial value of the iterator is the cell containing <computeroutput>ps</computeroutput>. If more than one cell contains <computeroutput>ps</computeroutput> (e.g. if <computeroutput>ps</computeroutput> lies on a vertex), the initial value is the cell intersected by the interior of the line segment <computeroutput>[ps,pt]</computeroutput>. If <computeroutput>ps</computeroutput> lies outside the convex hull and <computeroutput>pt</computeroutput> inside the convex full, the initial value is the infinite cell which finite facet is intersected by the interior of <computeroutput>[ps,pt]</computeroutput>.</para>
<para>The first cell containing <computeroutput>pt</computeroutput> is the last valid value of the iterator. It is followed by <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1adb5f31ae685c84289b0d39c2c1b3cf3b" kindref="member">segment_traverser_cells_end()</ref></computeroutput>.</para>
<para>The optional argument <computeroutput>hint</computeroutput> can reduce the time to construct the iterator if it is geometrically close to <computeroutput>ps</computeroutput>.</para>
<para><simplesect kind="pre"><para><computeroutput>ps</computeroutput> and <computeroutput>pt</computeroutput> must be different points. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>triangulation.dimension() &gt;= 2</computeroutput>. If the dimension is 2, both <computeroutput>ps</computeroutput> and <computeroutput>pt</computeroutput> must lie in the affine hull. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1424" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1adb5f31ae685c84289b0d39c2c1b3cf3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a39088e35d874ae7361d96a19acd572c7" kindref="member">Segment_cell_iterator</ref></type>
        <definition>Segment_cell_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment_traverser_cells_end</definition>
        <argsstring>() const</argsstring>
        <name>segment_traverser_cells_end</name>
        <qualifiedname>CGAL::Triangulation_3::segment_traverser_cells_end</qualifiedname>
        <briefdescription>
<para>returns the past-the-end iterator over the intersected cells. </para>
        </briefdescription>
        <detaileddescription>
<para>This iterator cannot be dereferenced. It indicates when the <computeroutput>Segment_cell_iterator</computeroutput> has passed the target.</para>
<para><simplesect kind="pre"><para><computeroutput>triangulation.dimension() &gt;= 2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1434" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Segment Simplex Iterator</header>
      <description><para>The triangulation defines an iterator that visits all the triangulation simplices (vertices, edges, facets and cells) intersected by a line segment.</para>
<para>The iterator traverses a connected sequence of simplices - possibly of all dimensions - intersected by the line segment <computeroutput>[s, t]</computeroutput>. In the degenerate case where the query segment goes exactly through a vertex (or along an edge, or along a facet), only one of the cells incident to that vertex (or edge, or facet) is returned by the iterator, and not all of them.</para>
<para>Each simplex falls within one or more of the following categories:<orderedlist>
<listitem><para>a finite cell whose interior is intersected by <computeroutput>[s,t]</computeroutput>,</para>
</listitem><listitem><para>a facet <computeroutput>f</computeroutput> whose interior is intersected by <computeroutput>[s,t]</computeroutput> in a point,</para>
</listitem><listitem><para>a facet <computeroutput>f</computeroutput> whose interior is intersected by <computeroutput>[s,t]</computeroutput> in a line segment,</para>
</listitem><listitem><para>an edge <computeroutput>e</computeroutput> whose interior is intersected by <computeroutput>[s,t]</computeroutput> in a point,</para>
</listitem><listitem><para>an edge <computeroutput>e</computeroutput> whose interior is intersected by <computeroutput>[s,t]</computeroutput> in a line segment,</para>
</listitem><listitem><para>a vertex <computeroutput>v</computeroutput> lying on <computeroutput>[s,t]</computeroutput>,</para>
</listitem><listitem><para>an infinite cell with a finite facet whose interior is intersected by the interior of <computeroutput>[s,t]</computeroutput>,</para>
</listitem><listitem><para>an infinite cell in the special case where the segment does not intersect any finite facet. In this case, exactly one infinite cell is visited. This cell shares a facet <computeroutput>f</computeroutput> with a finite cell <computeroutput>c</computeroutput> such that <computeroutput>f</computeroutput> is intersected by the line through the source of <computeroutput>[s,t]</computeroutput> and the vertex of <computeroutput>c</computeroutput> opposite of <computeroutput>f</computeroutput>.</para>
</listitem></orderedlist>
</para>
<para><computeroutput>Segment_simplex_iterator</computeroutput> implements the concept <computeroutput><ref refid="classForwardIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ForwardIterator</ref></computeroutput> and is non-mutable. It is invalidated by any modification of one of the cells traversed.</para>
<para>Its <computeroutput>value_type</computeroutput> is <computeroutput><ref refid="classCGAL_1_1Triangulation__simplex__3" kindref="compound">Triangulation_simplex_3</ref></computeroutput>. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a31e80cca5efe64571de4017067299449" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a822c7264ac03f629735cb85be4871e1f" kindref="member">Segment_simplex_iterator</ref></type>
        <definition>Segment_simplex_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment_traverser_simplices_begin</definition>
        <argsstring>(Vertex_handle vs, Vertex_handle vt) const</argsstring>
        <name>segment_traverser_simplices_begin</name>
        <qualifiedname>CGAL::Triangulation_3::segment_traverser_simplices_begin</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>vs</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>vt</declname>
        </param>
        <briefdescription>
<para>returns the iterator that allows to visit the simplices intersected by the line segment <computeroutput>[vs,vt]</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The initial value of the iterator is <computeroutput>vs</computeroutput>. The iterator remains valid until <computeroutput>vt</computeroutput> is passed.</para>
<para><simplesect kind="pre"><para><computeroutput>vs</computeroutput> and <computeroutput>vt</computeroutput> must be different vertices and neither can be the infinite vertex. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>triangulation.dimension() &gt;= 2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1475" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a12b4b5511ee276cc341b940971e4544e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a822c7264ac03f629735cb85be4871e1f" kindref="member">Segment_simplex_iterator</ref></type>
        <definition>Segment_simplex_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment_traverser_simplices_begin</definition>
        <argsstring>(const Point &amp;ps, const Point &amp;pt, Cell_handle hint=Cell_handle()) const</argsstring>
        <name>segment_traverser_simplices_begin</name>
        <qualifiedname>CGAL::Triangulation_3::segment_traverser_simplices_begin</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" kindref="member">Point</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>hint</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>returns the iterator that allows to visit the simplices intersected by the line segment <computeroutput>[ps,pt]</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>[ps,pt]</computeroutput> entirely lies outside the convex hull, the iterator visits exactly one infinite cell.</para>
<para>The initial value of the iterator is the lowest dimension simplex containing <computeroutput>ps</computeroutput>.</para>
<para>The iterator remains valid until the first simplex containing <computeroutput>pt</computeroutput> is passed.</para>
<para>The optional argument <computeroutput>hint</computeroutput> can reduce the time to construct the iterator if it is close to <computeroutput>ps</computeroutput>.</para>
<para><simplesect kind="pre"><para><computeroutput>ps</computeroutput> and <computeroutput>pt</computeroutput> must be different points. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>triangulation.dimension() &gt;= 2</computeroutput>. If the dimension is 2, both <computeroutput>ps</computeroutput> and <computeroutput>pt</computeroutput> must lie in the affine hull. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1491" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2e5c7f41baa13b4086fe30ddb90f2c19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a822c7264ac03f629735cb85be4871e1f" kindref="member">Segment_simplex_iterator</ref></type>
        <definition>Segment_simplex_iterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::segment_traverser_simplices_end</definition>
        <argsstring>() const</argsstring>
        <name>segment_traverser_simplices_end</name>
        <qualifiedname>CGAL::Triangulation_3::segment_traverser_simplices_end</qualifiedname>
        <briefdescription>
<para>returns the past-the-end iterator over the intersected simplices. </para>
        </briefdescription>
        <detaileddescription>
<para>This iterator cannot be dereferenced. It indicates when the <computeroutput>Segment_simplex_iterator</computeroutput> has passed the target.</para>
<para><simplesect kind="pre"><para><computeroutput>triangulation.dimension() &gt;= 2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1501" column="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cell and Facet Circulators</header>
      <description><para>The following circulators respectively visit all cells or all facets incident to a given edge.</para>
<para>They are non-mutable and bidirectional. They are invalidated by any modification of one of the cells traversed. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a0741a861a6291131384529349cb994a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a064fb43553690504ee55c4b9a74188e5" kindref="member">Cell_circulator</ref></type>
        <definition>Cell_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_cells</definition>
        <argsstring>(Edge e) const</argsstring>
        <name>incident_cells</name>
        <qualifiedname>CGAL::Triangulation_3::incident_cells</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary cell incident to <computeroutput>e</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1514" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a49921c82183b7bfdb5fac1de73c8d941" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a064fb43553690504ee55c4b9a74188e5" kindref="member">Cell_circulator</ref></type>
        <definition>Cell_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_cells</definition>
        <argsstring>(Cell_handle c, int i, int j) const</argsstring>
        <name>incident_cells</name>
        <qualifiedname>CGAL::Triangulation_3::incident_cells</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1519" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a85d53f656ef4d67ccbf6eaed424e0a35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a064fb43553690504ee55c4b9a74188e5" kindref="member">Cell_circulator</ref></type>
        <definition>Cell_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_cells</definition>
        <argsstring>(Edge e, Cell_handle start) const</argsstring>
        <name>incident_cells</name>
        <qualifiedname>CGAL::Triangulation_3::incident_cells</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Starts at cell <computeroutput>start</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput> and <computeroutput>start</computeroutput> is incident to <computeroutput>e</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1525" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1afd3ed4f0381fdeefb8a9439caa435b2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a064fb43553690504ee55c4b9a74188e5" kindref="member">Cell_circulator</ref></type>
        <definition>Cell_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_cells</definition>
        <argsstring>(Cell_handle c, int i, int j, Cell_handle start) const</argsstring>
        <name>incident_cells</name>
        <qualifiedname>CGAL::Triangulation_3::incident_cells</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1530" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>The following circulators on facets are defined only in dimension 3, though facets are defined also in dimension 2: there are only two facets sharing an edge in dimension 2. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a997be4328927428bce5aee9f775e5e55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_facets</definition>
        <argsstring>(Edge e) const</argsstring>
        <name>incident_facets</name>
        <qualifiedname>CGAL::Triangulation_3::incident_facets</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary facet incident to <computeroutput>e</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1544" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1abdf765a8077bfc18de39734fbe7ab012" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_facets</definition>
        <argsstring>(Cell_handle c, int i, int j) const</argsstring>
        <name>incident_facets</name>
        <qualifiedname>CGAL::Triangulation_3::incident_facets</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1549" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a1cbaaed93e5d67671302649501585a98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_facets</definition>
        <argsstring>(Edge e, Facet start) const</argsstring>
        <name>incident_facets</name>
        <qualifiedname>CGAL::Triangulation_3::incident_facets</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Starts at facet <computeroutput>start</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>start</computeroutput> is incident to <computeroutput>e</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1555" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a4cc635bb45ddcb7c1ab46f90592425d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_facets</definition>
        <argsstring>(Edge e, Cell_handle start, int f) const</argsstring>
        <name>incident_facets</name>
        <qualifiedname>CGAL::Triangulation_3::incident_facets</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at facet of index <computeroutput>f</computeroutput> in <computeroutput>start</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1560" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a5d41217a20ef2851d44315b5166eaf76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_facets</definition>
        <argsstring>(Cell_handle c, int i, int j, Facet start) const</argsstring>
        <name>incident_facets</name>
        <qualifiedname>CGAL::Triangulation_3::incident_facets</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1566" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a5d490167eab1facd3ef982613eb5d242" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" kindref="member">Facet_circulator</ref></type>
        <definition>Facet_circulator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_facets</definition>
        <argsstring>(Cell_handle c, int i, int j, Cell_handle start, int f) const</argsstring>
        <name>incident_facets</name>
        <qualifiedname>CGAL::Triangulation_3::incident_facets</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>As above for edge <computeroutput>(i,j)</computeroutput> of <computeroutput>c</computeroutput> and facet <computeroutput>(start,f)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1572" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversal of the Incident Cells, Facets and Edges, and the Adjacent Vertices of a Given Vertex</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ad9890c64030969cd74f35a007cb6b049" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_cells</definition>
        <argsstring>(Vertex_handle v, OutputIterator cells) const</argsstring>
        <name>incident_cells</name>
        <qualifiedname>CGAL::Triangulation_3::incident_cells</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>cells</declname>
        </param>
        <briefdescription>
<para>Copies the <computeroutput>Cell_handle</computeroutput>s of all cells incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>cells</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput>, <computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ace9dd63ba3a24d11d9b829198e514535" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::try_lock_and_get_incident_cells</definition>
        <argsstring>(Vertex_handle v, std::vector&lt; Cell_handle &gt; &amp;cells) const</argsstring>
        <name>try_lock_and_get_incident_cells</name>
        <qualifiedname>CGAL::Triangulation_3::try_lock_and_get_incident_cells</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref> &gt; &amp;</type>
          <declname>cells</declname>
        </param>
        <briefdescription>
<para>Try to lock and copy the <computeroutput>Cell_handle</computeroutput>s of all cells incident to <computeroutput>v</computeroutput> into <computeroutput>cells</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> in case of success. Otherwise, <computeroutput>cells</computeroutput> is emptied and the function returns false. In any case, the locked cells are not unlocked by <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1ace9dd63ba3a24d11d9b829198e514535" kindref="member">try_lock_and_get_incident_cells()</ref></computeroutput>, leaving this choice to the user.</para>
<para><simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput>, <computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1601" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af3ca792eed2f27ccb932d5f67ce4c6b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_incident_cells</definition>
        <argsstring>(Vertex_handle v, OutputIterator cells) const</argsstring>
        <name>finite_incident_cells</name>
        <qualifiedname>CGAL::Triangulation_3::finite_incident_cells</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>cells</declname>
        </param>
        <briefdescription>
<para>Copies the <computeroutput>Cell_handle</computeroutput>s of all finite cells incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>cells</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>t.dimension() == 3</computeroutput>, <computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a2776f24c7e4cdefc0c511edebf1d3599" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_facets</definition>
        <argsstring>(Vertex_handle v, OutputIterator facets) const</argsstring>
        <name>incident_facets</name>
        <qualifiedname>CGAL::Triangulation_3::incident_facets</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>facets</declname>
        </param>
        <briefdescription>
<para>Copies all <computeroutput>Facet</computeroutput>s incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>facets</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>t.dimension() &gt; 1</computeroutput>, <computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1621" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a1a08f1fcb24e5cd713d862e339ff3f4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_incident_facets</definition>
        <argsstring>(Vertex_handle v, OutputIterator facets) const</argsstring>
        <name>finite_incident_facets</name>
        <qualifiedname>CGAL::Triangulation_3::finite_incident_facets</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>facets</declname>
        </param>
        <briefdescription>
<para>Copies all finite <computeroutput>Facet</computeroutput>s incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>facets</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>t.dimension() &gt; 1</computeroutput>, <computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a81373c29a596ba2f1d6d93e62d1f0d79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::incident_edges</definition>
        <argsstring>(Vertex_handle v, OutputIterator edges) const</argsstring>
        <name>incident_edges</name>
        <qualifiedname>CGAL::Triangulation_3::incident_edges</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Copies all <computeroutput>Edge</computeroutput>s incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>edges</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>t.dimension() &gt; 0</computeroutput>, <computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1640" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ab5b49dae39468e544c183142169208f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_incident_edges</definition>
        <argsstring>(Vertex_handle v, OutputIterator edges) const</argsstring>
        <name>finite_incident_edges</name>
        <qualifiedname>CGAL::Triangulation_3::finite_incident_edges</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Copies all finite <computeroutput>Edge</computeroutput>s incident to <computeroutput>v</computeroutput> to the output iterator <computeroutput>edges</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>t.dimension() &gt; 0</computeroutput>, <computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1aa9814b11ee0a6e024fd3cee4cff066c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::adjacent_vertices</definition>
        <argsstring>(Vertex_handle v, OutputIterator vertices) const</argsstring>
        <name>adjacent_vertices</name>
        <qualifiedname>CGAL::Triangulation_3::adjacent_vertices</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
<para>Copies the <computeroutput>Vertex_handle</computeroutput>s of all vertices adjacent to <computeroutput>v</computeroutput> to the output iterator <computeroutput>vertices</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>t.dimension() &lt; 0</computeroutput>, then do nothing. Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1af779084dce02eb4abba8bd1916891214" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::finite_adjacent_vertices</definition>
        <argsstring>(Vertex_handle v, OutputIterator vertices) const</argsstring>
        <name>finite_adjacent_vertices</name>
        <qualifiedname>CGAL::Triangulation_3::finite_adjacent_vertices</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
<para>Copies the <computeroutput>Vertex_handle</computeroutput>s of all finite vertices adjacent to <computeroutput>v</computeroutput> to the output iterator <computeroutput>vertices</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>t.dimension() &lt; 0</computeroutput>, then do nothing. Returns the resulting output iterator. <simplesect kind="pre"><para><computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a158716f1ea0f94c5f837a5ae244e2fe3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::degree</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>degree</name>
        <qualifiedname>CGAL::Triangulation_3::degree</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the degree of a vertex, that is, the number of incident vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>The infinite vertex is counted. <simplesect kind="pre"><para><computeroutput>v != <ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle()</ref></computeroutput>, <computeroutput>t.is_vertex(v)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1676" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversal Between Adjacent Cells</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a74cfefe0ac5dbe8e734461cda606a189" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::mirror_index</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>mirror_index</name>
        <qualifiedname>CGAL::Triangulation_3::mirror_index</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the index of <computeroutput>c</computeroutput> in its <formula id="50">$ i^{th}$</formula> neighbor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="51">$ i \in\{0, 1, 2, 3\}$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1687" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a35ba5a05076bfeb5357ccdc182b12fee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::mirror_vertex</definition>
        <argsstring>(Cell_handle c, int i) const</argsstring>
        <name>mirror_vertex</name>
        <qualifiedname>CGAL::Triangulation_3::mirror_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the vertex of the <formula id="50">$ i^{th}$</formula> neighbor of <computeroutput>c</computeroutput> that is opposite to <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="51">$ i \in\{0, 1, 2, 3\}$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1694" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1ae443600f92d600b8e7d63a7fe2b5220c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref></type>
        <definition>Facet CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::mirror_facet</definition>
        <argsstring>(Facet f) const</argsstring>
        <name>mirror_facet</name>
        <qualifiedname>CGAL::Triangulation_3::mirror_facet</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" kindref="member">Facet</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Returns the same facet seen from the other adjacent cell. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1699" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checking</header>
      <description><para>The responsibility of keeping a valid triangulation belongs to the user when using advanced operations allowing a direct manipulation of cells and vertices.</para>
<para>We provide the user with the following methods to help debugging. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a76fa2f93b007c62d2c9d8deb09d8c5aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_valid</definition>
        <argsstring>(bool verbose=false) const</argsstring>
        <name>is_valid</name>
        <qualifiedname>CGAL::Triangulation_3::is_valid</qualifiedname>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is a function for debugging purpose. </para>
        </briefdescription>
        <detaileddescription>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALDebug&quot;&gt; &lt;div&gt;Debugging Support&lt;/div&gt; </htmlonly></para>
<para>Checks the combinatorial validity of the triangulation. Checks also the validity of its geometric embedding (see Section <ref refid="index_1Triangulation3secintro" kindref="member">Representation</ref>). When <computeroutput>verbose</computeroutput> is set to <computeroutput>true</computeroutput>, messages describing the first invalidity encountered are printed. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1a57226e0d36b9fb236a0d6711cda456d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::is_valid</definition>
        <argsstring>(Cell_handle c, bool verbose=false) const</argsstring>
        <name>is_valid</name>
        <qualifiedname>CGAL::Triangulation_3::is_valid</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" kindref="member">Cell_handle</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is a function for debugging purpose. </para>
        </briefdescription>
        <detaileddescription>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALDebug&quot;&gt; &lt;div&gt;Debugging Support&lt;/div&gt; </htmlonly></para>
<para>Checks the combinatorial validity of the cell by calling the <computeroutput>is_valid</computeroutput> method of the cell class. Also checks the geometric validity of <computeroutput>c</computeroutput>, if <computeroutput>c</computeroutput> is finite. (See Section <ref refid="index_1Triangulation3secintro" kindref="member">Representation</ref>.)</para>
<para>When <computeroutput>verbose</computeroutput> is set to <computeroutput>true</computeroutput>, messages are printed to give a precise indication of the kind of invalidity encountered. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1736" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>I/O</header>
      <description><para>The information in the <computeroutput>iostream</computeroutput> is: the dimension, the number of finite vertices, the non-combinatorial information about vertices (point, etc; note that the infinite vertex is numbered 0), the number of cells, the indices of the vertices of each cell, plus the non-combinatorial information about each cell, then the indices of the neighbors of each cell, where the index corresponds to the preceding list of cells.</para>
<para>When dimension <formula id="52">$ &lt;$</formula> 3, the same information is stored for faces of maximal dimension instead of cells. </para>
</description>
      <memberdef kind="function" id="group__PkgIOTriangulation3_1gaeea8fffe7fd436b5613b31b973f89563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Triangulation_3 &amp;t)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::Triangulation_3::operator&gt;&gt;</qualifiedname>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Reads the underlying combinatorial triangulation from <computeroutput>is</computeroutput> by calling the corresponding input operator of the triangulation data structure class (note that the infinite vertex is numbered 0), and the non-combinatorial information by calling the corresponding input operators of the vertex and the cell classes (such as point coordinates), which are provided by overloading the stream operators of the vertex and cell types. </para>
        </briefdescription>
        <detaileddescription>
<para>Assigns the resulting triangulation to <computeroutput>t</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1766" column="9"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOTriangulation3_1gaf38f71bfe4880acf5f41844a5204997e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Triangulation_3 &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::Triangulation_3::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Writes the triangulation <computeroutput>t</computeroutput> into <computeroutput>os</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOTriangulation3_1ga20493e5839004e16ccd5929397b2ec75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tr_src</type>
          </param>
          <param>
            <type>typename ConvertVertex</type>
          </param>
          <param>
            <type>typename ConvertCell</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::file_input</definition>
        <argsstring>(std::istream &amp;is, ConvertVertex convert_vertex=ConvertVertex(), ConvertCell convert_cell=ConvertCell())</argsstring>
        <name>file_input</name>
        <qualifiedname>CGAL::Triangulation_3::file_input</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>ConvertVertex</type>
          <declname>convert_vertex</declname>
          <defval>ConvertVertex()</defval>
        </param>
        <param>
          <type>ConvertCell</type>
          <declname>convert_cell</declname>
          <defval>ConvertCell()</defval>
        </param>
        <briefdescription>
<para>The triangulation streamed in <computeroutput>is</computeroutput>, of original type <computeroutput>Tr_src</computeroutput>, is written into the triangulation. </para>
        </briefdescription>
        <detaileddescription>
<para>As the vertex and cell types might be different and incompatible, the creation of new cells and vertices is made thanks to the functors <computeroutput>convert_vertex</computeroutput> and <computeroutput>convert_cell</computeroutput>, that convert vertex and cell types. For each vertex <computeroutput>v_src</computeroutput> in <computeroutput>is</computeroutput>, the corresponding vertex <computeroutput>v_tgt</computeroutput> in the triangulation is a copy of the vertex returned by <computeroutput>convert_vertex(v_src)</computeroutput>. The same operations are done for cells with the functor convert_cell, except cells in the triangulation are created using the default constructor, and then filled with the data contained in the stream.</para>
<para><itemizedlist>
<listitem><para>A model of <computeroutput>ConvertVertex</computeroutput> must provide two <computeroutput>operator()</computeroutput>s that are responsible for converting the source vertex <computeroutput>v_src</computeroutput> into the target vertex:<itemizedlist>
<listitem><para><computeroutput>Vertex operator()(const Tr_src::Vertex&amp; v_src) const;</computeroutput> This operator is used to create the vertex from <computeroutput>v_src</computeroutput>.</para>
</listitem><listitem><para><computeroutput>void operator()(const Tr_src::Vertex&amp; v_src, Vertex&amp; v_tgt) const;</computeroutput> This operator is meant to be used in case heavy data should be transferred to <computeroutput>v_tgt</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>A model of ConvertCell must provide an operator() that is responsible for converting the source cell <computeroutput>c_src</computeroutput> into the target cell:<itemizedlist>
<listitem><para><computeroutput>void operator()(const Tr_src::Cell&amp; c_src, Cell&amp; c_tgt) const;</computeroutput> This operator is meant to be used in case data should be transferred to <computeroutput>c_tgt</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The triangulation contained in <computeroutput>is</computeroutput> can be obtained with the <computeroutput>operator&gt;&gt;</computeroutput> of a <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1801" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Concurrency</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__3_1afba384e440c57f3bb0a71e4b4f7f9944" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::set_lock_data_structure</definition>
        <argsstring>(Lock_data_structure *lock_ds) const</argsstring>
        <name>set_lock_data_structure</name>
        <qualifiedname>CGAL::Triangulation_3::set_lock_data_structure</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__3_1a1f96730cb3b4cfd6c2893ecb7300ec90" kindref="member">Lock_data_structure</ref> *</type>
          <declname>lock_ds</declname>
        </param>
        <briefdescription>
<para>Set the pointer to the lock data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1813" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" prot="public" static="no" strong="no">
        <type></type>
        <name>Locate_type</name>
        <qualifiedname>CGAL::Triangulation_3::Locate_type</qualifiedname>
        <enumvalue id="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a285953109776e1f27769b65bb7249994" prot="public">
          <name>VERTEX</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a708387eea38c6e1ffbd7ef5ef695f2e1" prot="public">
          <name>EDGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75acb284e3051bc02bd4645aca6b2382b42" prot="public">
          <name>FACET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75aa264f5df83d639caa57ea1def2f16f36" prot="public">
          <name>CELL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a4ed6b6faec7f4a57a66120b7c5c11471" prot="public">
          <name>OUTSIDE_CONVEX_HULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a922f153be5cccf0228b56f5160e47e6a" prot="public">
          <name>OUTSIDE_AFFINE_HULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The enum <computeroutput>Locate_type</computeroutput> is defined by <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref></computeroutput> to specify which case occurs when locating a point in the triangulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="47" column="3" bodyfile="CGAL/Triangulation_3.h" bodystart="47" bodyend="47"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref></computeroutput> represents a 3-dimensional tetrahedralization of points. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is the geometric traits class and must be a model of <computeroutput><ref refid="classTriangulationTraits__3" kindref="compound">TriangulationTraits_3</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TDS</parametername>
</parameternamelist>
<parameterdescription>
<para>is the triangulation data structure and must be a model of <computeroutput><ref refid="classTriangulationDataStructure__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_3.tag">TriangulationDataStructure_3</ref></computeroutput>. <computeroutput><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></computeroutput> may be used, with default type <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_3.tag">Triangulation_data_structure_3</ref>&lt;<ref refid="classCGAL_1_1Triangulation__vertex__base__3" kindref="compound">Triangulation_vertex_base_3</ref>&lt;Traits&gt;, <ref refid="classCGAL_1_1Triangulation__cell__base__3" kindref="compound">Triangulation_cell_base_3</ref>&lt;Traits&gt; &gt;</computeroutput>. Any custom type can be used instead of <computeroutput><ref refid="classCGAL_1_1Triangulation__vertex__base__3" kindref="compound">Triangulation_vertex_base_3</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Triangulation__cell__base__3" kindref="compound">Triangulation_cell_base_3</ref></computeroutput>, provided that they are models of the concepts <computeroutput><ref refid="classTriangulationVertexBase__3" kindref="compound">TriangulationVertexBase_3</ref></computeroutput> and <computeroutput><ref refid="classTriangulationCellBase__3" kindref="compound">TriangulationCellBase_3</ref></computeroutput>, respectively.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SLDS</parametername>
</parameternamelist>
<parameterdescription>
<para>is an optional parameter to specify the type of the spatial lock data structure. It must be a model of the <computeroutput><ref refid="classSurjectiveLockDataStructure" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">SurjectiveLockDataStructure</ref></computeroutput> concept, with <computeroutput><ref refid="classCGAL_1_1Object" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Object</ref></computeroutput> being a <computeroutput>Point</computeroutput> (as defined below). It is only used if the triangulation data structure used is concurrency-safe (i.e. when <computeroutput><ref refid="classTriangulationDataStructure__3_1a540c1ac639e9ac22317900eba52dc92a" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_3.tag">TriangulationDataStructure_3::Concurrency_tag</ref></computeroutput> is <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>). The default value is <computeroutput><ref refid="classCGAL_1_1Spatial__lock__grid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Spatial_lock_grid_3</ref>&lt;Tag_priority_blocking&gt;</computeroutput> if the triangulation data structure is concurrency-safe, and <computeroutput>void</computeroutput> otherwise. In order to use concurrent operations, the user must provide a reference to a SLDS instance via the constructor or <computeroutput><ref refid="classCGAL_1_1Triangulation__3_1afba384e440c57f3bb0a71e4b4f7f9944" kindref="member">Triangulation_3::set_lock_data_structure</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Traversal of the Triangulation</bold><linebreak/>
</para>
<para>The triangulation class provides several iterators and circulators that allow one to traverse it (completely or partially).</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Delaunay__triangulation__3" kindref="compound">CGAL::Delaunay_triangulation_3</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Regular__triangulation__3" kindref="compound">CGAL::Regular_triangulation_3</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>CGAL::Delaunay_triangulation_3&lt; Traits, TDS, LP, SLDS &gt;</label>
        <link refid="classCGAL_1_1Delaunay__triangulation__3"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>CGAL::Regular_triangulation_3&lt; Traits, TDS, SLDS &gt;</label>
        <link refid="classCGAL_1_1Regular__triangulation__3"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;</label>
        <link refid="classCGAL_1_1Triangulation__3"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>CGAL::Triangulation_utils_3</label>
        <link refid="structCGAL_1_1Triangulation__utils__3" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_3.tag"/>
      </node>
      <node id="4">
        <label>CGAL::Triangulation_3&lt; Traits, Delaunay_triangulation_3&lt; Traits, TDS, LP &gt;::Triangulation_data_structure, SLDS &gt;</label>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; Traits, Delaunay_triangulation_3&lt; Traits, TDS, LP &gt;::Triangulation_data_structure, SLDS &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;</label>
        <link refid="classCGAL_1_1Triangulation__3"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>CGAL::Triangulation_utils_3</label>
        <link refid="structCGAL_1_1Triangulation__utils__3" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_3.tag"/>
      </node>
    </collaborationgraph>
    <location file="CGAL/Triangulation_3.h" line="40" column="1" bodyfile="CGAL/Triangulation_3.h" bodystart="40" bodyend="1817"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__3_1aa9814b11ee0a6e024fd3cee4cff066c3" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>adjacent_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0ffff120af16e255cee2ccc20be34775" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>All_cell_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a16e64be4b2c33a5e5442a07b771e3241" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_cell_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad20bfae1b250b357d8ae5bc48eef1f10" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_cells_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aacfd26fa0d3b2a8b2d8008af3b08930a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_cells_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aff2c019af34403770e6e922d616eaf0f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>All_cells_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a67412622209344f2f8660b337a6d5e35" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a60c2dacc98d57951b9209f94dfcad921" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>All_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af284c5406d004ea3316ed61f5a825887" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2d4389833767a0ac0a469c6d3f1c2604" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a67ff0ee4eca14392f1fcb55acd5a6edc" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab15ab30eb9c54106a96916868f454eef" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1abe601aa6506352a8df0877449bcf0dd3" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>All_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af412b76826082617ad5cd7a6428561b0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_facets_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2cf3371698886ce3d219ba98c0a2452b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_facets_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a086ed61d6d43a10f77f6a4d695a256fc" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>All_facets_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ae53e08aa6f86bee125ef6ba075b0e973" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>All_vertex_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a61c04821ce4e5b41ce3fb95a22737a9a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_vertex_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aba04013896bdd4ea1398320869e2d886" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8f2932dc2d9c018421d195757d9c5ffa" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab930d6f34c8346b5191e93ab79475c70" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a04ae7357b56d2bc5bd18c657e5577f79" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>are_equal</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0460db28850be85188a8dec7c2425c3d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>are_equal</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a9f0c69f352b9e7fd325980807778b031" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>are_equal</name></member>
      <member refid="structCGAL_1_1Triangulation__utils__3_1a3e483dd7b1e45dd3bcce3dbc7f94bd70" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>ccw</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6ccf0bf0c3ca54b4a2e8f2f1b09a103f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75aa264f5df83d639caa57ea1def2f16f36" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>CELL</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a064fb43553690504ee55c4b9a74188e5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Cell_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac076eb6ecdeeeb2b5bf678a21b3d23ee" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Cell_handle</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0713863e5ff5ceb0a0eb290c4f6767c8" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a029910b5cfe5d470afdd8f79ea49e24e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Concurrency_tag</name></member>
      <member refid="structCGAL_1_1Triangulation__utils__3_1a39b8813b2f15dcb4446ff42b5c100529" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>cw</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a158716f1ea0f94c5f837a5ae244e2fe3" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>degree</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4f5b67204a2a310e48525abd3cdd3660" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a80ba1634c96f534d18d2d2420f65561f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a708387eea38c6e1ffbd7ef5ef695f2e1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>EDGE</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0f355dbb38cf631f24d4df8abd7a942f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75acb284e3051bc02bd4645aca6b2382b42" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>FACET</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aa100228164b0cf78d5c2b1009c2df258" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1c904fc6cbfe189b2cb09f7175044b00" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Facet_circulator</name></member>
      <member refid="group__PkgIOTriangulation3_1ga20493e5839004e16ccd5929397b2ec75" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>file_input</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af779084dce02eb4abba8bd1916891214" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_adjacent_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4c94face5ab29897bcb291f157f1635d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Finite_cell_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab9584da45f55288fb2b9d0624250bbf3" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_cell_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a433fa868d7637f2719a40c251bd2ae65" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_cells_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a3431b35584d93e305c1548228cf93110" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_cells_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6d1b83cb6fba001622452aa0f6592e02" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Finite_cells_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a514f885323d414200cd13e8fa6e79e34" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Finite_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1afb40860f9602b54c62c0b7ad645278d3" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af682021f6f9be1437fe29be125ad14e8" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5455f4b903db664c1d57634ec15cd13a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1c91aeb6128d5bf33995dca02398d330" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aa35974d42ec9564687ffbe5f664cb906" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Finite_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a95e37032ae2a232c6ac42b114fd7c432" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1adcb08049b8d50168079bbba248f3344d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_facets_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aee05b9fc603428dfda9712b6c069e4e5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_facets_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6bc54bfb8362670059a4c1a416269994" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Finite_facets_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af3ca792eed2f27ccb932d5f67ce4c6b9" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab5b49dae39468e544c183142169208f1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1a08f1fcb24e5cd713d862e339ff3f4d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac59a8c8f173db4a1e72b537bb59e16a5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Finite_vertex_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a33a4aa893719a091df83ee40ad63a49f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_vertex_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af43b5f09e0fdcb9b8fff939133f2e814" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6bff5471a8bd32d16c396948fdbc3495" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af8d044953011cb5ff6a5ecf87e6f308e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a883fed00b53cae9e85feb20230f54dd9" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5dfdcfc38bf0bf30860d26d0fef7fdc7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a659e70e1b740a44b7d6b9886d323f571" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8050a0e63dcf0fed2e205ce69b0fa2fe" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a54b04cf190a4643d43dd67cd808b7fad" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>flip_flippable</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac31682068c1ff25dc5ccd6f366fd1156" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>flip_flippable</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2547de40ced9bfa49e16ff4ba2e1c52f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>flip_flippable</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1d8720ff50a61985bcbe474268d9d275" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>flip_flippable</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab250045d0412b06d83977a0c2cf33ff9" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a230ff1dd66791a699820d9865b5a8f4d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a89a5c93d1e8a43cef317ef289f1d5482" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>has_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1abf51c96f47c1e295fb984ad521634229" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>has_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a21e33ef0b19042320b461a0a7a0f4e36" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>has_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a9d997837c2cb5ecca65658ccf6dc3010" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>has_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0741a861a6291131384529349cb994a4" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a49921c82183b7bfdb5fac1de73c8d941" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a85d53f656ef4d67ccbf6eaed424e0a35" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1afd3ed4f0381fdeefb8a9439caa435b2f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad9890c64030969cd74f35a007cb6b049" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a81373c29a596ba2f1d6d93e62d1f0d79" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a997be4328927428bce5aee9f775e5e55" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1abdf765a8077bfc18de39734fbe7ab012" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1cbaaed93e5d67671302649501585a98" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4cc635bb45ddcb7c1ab46f90592425d2" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5d41217a20ef2851d44315b5166eaf76" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5d490167eab1facd3ef982613eb5d242" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2776f24c7e4cdefc0c511edebf1d3599" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>incident_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af33632f0d268cc25d0df2caa57f69609" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>inexact_locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4ef94a8a137601e4cb1905dcdad16c6c" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>infinite_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0dde82d53bcd9f705f3a676329c1df2d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad8d7a1aa3b310ba8d86ede726746fcb3" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a579619f972362fa8cd35d1de72dd677c" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af41ac521888fafda75100fcd36650aa4" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad3353128386bbb51f79d0263e7f67337" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8aa85f88733d30aa3ec5385538e13ace" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aff8be2085c18e293f6d1a26c282acbc7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_in_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5c1349d7fcffeac6f98cfc8b8febf564" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a06ba9d64000edc9e5d595ae1c7595922" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a80f8771ed8bca545ca451afae14b77ed" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_in_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aa43e9ac9d97a9a2fa18ae18e21bb25b3" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_in_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4b298ac4b2d8585dec9e436bb9e65ff0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_in_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad5f7bba4f49683befd2f70b35f2d7079" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_in_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6f3e038498843f6ce7c0c70015ddaff9" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_outside_affine_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2798aa7502b4929ccaa8cab9bacbff18" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>insert_outside_convex_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0b9e348637a4c392f71fed0ef3ff2ad8" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a24095561c8bd3390a58f7b7c9e45d4eb" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8766c9a0c2a84203be31537e5e015646" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a55b3dd5c4161a2612bd8aa60d64fb4f1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aef7c688eb2a28c0aec936c41df46a172" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0a5aa10a1bb88f33b3f07d33f89dd5cc" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a8bc2a0fa204265bf32f1e6dc103988b4" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad66e030d66fdf1ee66e4c280e8894c71" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0ece46e036b7dabfd34fd4662973e221" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab84793de9c9899d8ecc33cdac411d324" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6ca23f6bdd390ac23e7829e7f326efd5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a76fa2f93b007c62d2c9d8deb09d8c5aa" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a57226e0d36b9fb236a0d6711cda456d0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5b45572c663e5d2c10f26e7be421e140" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1d1c9daa1c2031a66c9acc0a958bdb8e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>is_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a02a4a18074670282f3704f32b0901fad" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a573cd639a2fdb12f400c0074597a5adc" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a384e93b6ff4614ed3b35bcf8981520c7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ae26c070d4e465b8c6f95d63318080fe7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Locate_type</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1f96730cb3b4cfd6c2893ecb7300ec90" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Lock_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ae443600f92d600b8e7d63a7fe2b5220c" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>mirror_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a74cfefe0ac5dbe8e734461cda606a189" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>mirror_index</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a35ba5a05076bfeb5357ccdc182b12fee" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>mirror_vertex</name></member>
      <member refid="structCGAL_1_1Triangulation__utils__3_1a54bf42467e28dcbea13bfd022ef49217" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>next_around_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2040b9c297817fb934d3d48908234d13" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>number_of_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a05f820202e1348187eb69693b6ce3d44" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>number_of_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a014b6d2caf1747a3bf2865adb158cbb7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>number_of_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a584b3359337efc7f687513b7ef958b94" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>number_of_finite_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a37efcac10647c16b7ea331e30493cb24" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>number_of_finite_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af332a576da991acf508cbd4473249e0b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>number_of_finite_facets</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a065228f3255a5d41d096fe782b61669f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1afe3483443d5cc96aec2f0603095b95f5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>operator!=</name></member>
      <member refid="group__PkgIOTriangulation3_1gaf38f71bfe4880acf5f41844a5204997e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1abc8aafe82c32f53203d8d97069ef838d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a20b6e473c9ba697893aed432ba3d9754" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>operator==</name></member>
      <member refid="group__PkgIOTriangulation3_1gaeea8fffe7fd436b5613b31b973f89563" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a922f153be5cccf0228b56f5160e47e6a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>OUTSIDE_AFFINE_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a4ed6b6faec7f4a57a66120b7c5c11471" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>OUTSIDE_CONVEX_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a064de663ce02121ba3f0f4223547e064" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ad19deb77eb94761e9bf0934f39cb3fa5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>point</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a914f44aa77c5096630f94af46f98cab5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>point</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a3ec38d2d1afffea88a760f5a50c4f9f0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ae0b4d6177ffbcbd6c6d58820df53b746" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>points</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5c8812f38413b29cdd7aae517c457d52" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Points</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a067b365119a53428aff40652e0ccb400" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac69f365fe85f589224868cdfc859c078" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2ee20454a8adb0ff5d6db5acabd10e05" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Segment</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a22bb4874ea8dc28c07584f1f55628707" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ae28b76ae0e1f364fc55d1b67f5b57249" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a39088e35d874ae7361d96a19acd572c7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Segment_cell_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a822c7264ac03f629735cb85be4871e1f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Segment_simplex_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0356538c3ef7d62280a7846c35a8abbb" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Segment_traverser_cell_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a7245a46ae480496e8e7e83fb2a1ebb43" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment_traverser_cell_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a7b020f2841ad9a6148e79ac0939b06ec" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment_traverser_cells_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a535b21fc57d175507facde8091852d3c" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment_traverser_cells_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1adb5f31ae685c84289b0d39c2c1b3cf3b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment_traverser_cells_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bb68143601dda95a446ee55cc7aa200" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment_traverser_simplices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ae4a0565708ab5c23639c90c47bbec7cc" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Segment_traverser_simplices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a31e80cca5efe64571de4017067299449" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment_traverser_simplices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a12b4b5511ee276cc341b940971e4544e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment_traverser_simplices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2e5c7f41baa13b4086fe30ddb90f2c19" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>segment_traverser_simplices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1af50326c40f34f13a01bb0fd0935301f0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>set_infinite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1afba384e440c57f3bb0a71e4b4f7f9944" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>set_lock_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a0ad86d1f011118565cbef93ad35d673b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>side_of_cell</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a3155746fefa1a1f87a834b4d575c904b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>side_of_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a60b867e74736abf01e8ce50e13c0aa9a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>side_of_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6f26ad9ce68fbe3cb97ed211a68ab21f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>side_of_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a4b2b97440867950f7a7723262bf93462" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>side_of_facet</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a431de9481031045367856fa156fc643f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Simplex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ab33c8cdfd6a571cf9635a531d2d261a0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a767066a964b4d7b14376e5f5d1a04b34" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2caf4005a4dc8a221bfee2e4aeec569e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a951781437d62955aaae730b87c833498" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a83d347f8d914b78f17f6817fdb0b7a14" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>tetrahedron</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1aa88be907873b0469824cc3b2212f2eee" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Tetrahedron</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1adc409424d433ef56a79d5e71c02b8e15" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ac2efcfbc0dcef89c512f65e4d13d4563" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a6f9a07c130cde8a27869944396ab09e7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a2378218ec06f4a4daec0102760da4d73" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Triangulation_3</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a43624064822f4553a51dbd159ecd1bdd" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Triangulation_3</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a7018c73a59388a6d005e8fea1b5c1c32" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Triangulation_3</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a63f67cf6aaadcee14318cf56a36d247a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Triangulation_3</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a142364d710a44fb68daf6cbd185861ce" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1ace9dd63ba3a24d11d9b829198e514535" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>try_lock_and_get_incident_cells</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a689822c56fb0d30a538df471fe076fc1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a5bea7d3470854571f97c18a675daca75a285953109776e1f27769b65bb7249994" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>VERTEX</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a1ba56e37b3a5acb1ba49a56d9d101a19" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>Vertex_handle</name></member>
      <member refid="structCGAL_1_1Triangulation__utils__3_1a71288c8c2833f954a73090336ed60054" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>vertex_triple_index</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a02faf334255e1ca8caa1a6f412533759" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a539aa6bbb70ea430c787ee7e3600e064" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__3_1a32a502a7555b5c77967ea3004a0d5c1c" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_3</scope><name>vertices</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
