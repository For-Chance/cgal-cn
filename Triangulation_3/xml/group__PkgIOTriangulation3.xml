<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgIOTriangulation3" kind="group">
    <compoundname>PkgIOTriangulation3</compoundname>
    <title>I/O for a Triangulation 3</title>
      <sectiondef kind="user-defined">
      <header>I/O</header>
      <description><para>The information in the <computeroutput>iostream</computeroutput> is: the dimension, the number of finite vertices, the non-combinatorial information about vertices (point, etc; note that the infinite vertex is numbered 0), the number of cells, the indices of the vertices of each cell, plus the non-combinatorial information about each cell, then the indices of the neighbors of each cell, where the index corresponds to the preceding list of cells.</para>
<para>When dimension <formula id="52">$ &lt;$</formula> 3, the same information is stored for faces of maximal dimension instead of cells. </para>
</description>
      <memberdef kind="function" id="group__PkgIOTriangulation3_1gaeea8fffe7fd436b5613b31b973f89563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Triangulation_3 &amp;t)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::Triangulation_3::operator&gt;&gt;</qualifiedname>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>Triangulation_3 &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Reads the underlying combinatorial triangulation from <computeroutput>is</computeroutput> by calling the corresponding input operator of the triangulation data structure class (note that the infinite vertex is numbered 0), and the non-combinatorial information by calling the corresponding input operators of the vertex and the cell classes (such as point coordinates), which are provided by overloading the stream operators of the vertex and cell types. </para>
        </briefdescription>
        <detaileddescription>
<para>Assigns the resulting triangulation to <computeroutput>t</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1766" column="9"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOTriangulation3_1gaf38f71bfe4880acf5f41844a5204997e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Triangulation_3 &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::Triangulation_3::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const Triangulation_3 &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Writes the triangulation <computeroutput>t</computeroutput> into <computeroutput>os</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgIOTriangulation3_1ga20493e5839004e16ccd5929397b2ec75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tr_src</type>
          </param>
          <param>
            <type>typename ConvertVertex</type>
          </param>
          <param>
            <type>typename ConvertCell</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; CGAL::Triangulation_3&lt; Traits, TDS, SLDS &gt;::file_input</definition>
        <argsstring>(std::istream &amp;is, ConvertVertex convert_vertex=ConvertVertex(), ConvertCell convert_cell=ConvertCell())</argsstring>
        <name>file_input</name>
        <qualifiedname>CGAL::Triangulation_3::file_input</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>ConvertVertex</type>
          <declname>convert_vertex</declname>
          <defval>ConvertVertex()</defval>
        </param>
        <param>
          <type>ConvertCell</type>
          <declname>convert_cell</declname>
          <defval>ConvertCell()</defval>
        </param>
        <briefdescription>
<para>The triangulation streamed in <computeroutput>is</computeroutput>, of original type <computeroutput>Tr_src</computeroutput>, is written into the triangulation. </para>
        </briefdescription>
        <detaileddescription>
<para>As the vertex and cell types might be different and incompatible, the creation of new cells and vertices is made thanks to the functors <computeroutput>convert_vertex</computeroutput> and <computeroutput>convert_cell</computeroutput>, that convert vertex and cell types. For each vertex <computeroutput>v_src</computeroutput> in <computeroutput>is</computeroutput>, the corresponding vertex <computeroutput>v_tgt</computeroutput> in the triangulation is a copy of the vertex returned by <computeroutput>convert_vertex(v_src)</computeroutput>. The same operations are done for cells with the functor convert_cell, except cells in the triangulation are created using the default constructor, and then filled with the data contained in the stream.</para>
<para><itemizedlist>
<listitem><para>A model of <computeroutput>ConvertVertex</computeroutput> must provide two <computeroutput>operator()</computeroutput>s that are responsible for converting the source vertex <computeroutput>v_src</computeroutput> into the target vertex:<itemizedlist>
<listitem><para><computeroutput>Vertex operator()(const Tr_src::Vertex&amp; v_src) const;</computeroutput> This operator is used to create the vertex from <computeroutput>v_src</computeroutput>.</para>
</listitem><listitem><para><computeroutput>void operator()(const Tr_src::Vertex&amp; v_src, Vertex&amp; v_tgt) const;</computeroutput> This operator is meant to be used in case heavy data should be transferred to <computeroutput>v_tgt</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>A model of ConvertCell must provide an operator() that is responsible for converting the source cell <computeroutput>c_src</computeroutput> into the target cell:<itemizedlist>
<listitem><para><computeroutput>void operator()(const Tr_src::Cell&amp; c_src, Cell&amp; c_tgt) const;</computeroutput> This operator is meant to be used in case data should be transferred to <computeroutput>c_tgt</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The triangulation contained in <computeroutput>is</computeroutput> can be obtained with the <computeroutput>operator&gt;&gt;</computeroutput> of a <computeroutput><ref refid="classCGAL_1_1Triangulation__3" kindref="compound">Triangulation_3</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_3.h" line="1801" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
