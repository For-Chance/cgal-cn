<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="structCGAL_1_1Dummy__straight__skeleton__builder__2__visitor" prot="public">CGAL::Dummy_straight_skeleton_builder_2_visitor</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__offset__builder__2" prot="public">CGAL::Polygon_offset_builder_2</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__offset__builder__traits__2" prot="public">CGAL::Polygon_offset_builder_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Straight__skeleton__2" prot="public">CGAL::Straight_skeleton_2</innerclass>
    <innerclass refid="classCGAL_1_1Straight__skeleton__builder__2" prot="public">CGAL::Straight_skeleton_builder_2</innerclass>
    <innerclass refid="classCGAL_1_1Straight__skeleton__builder__traits__2" prot="public">CGAL::Straight_skeleton_builder_traits_2</innerclass>
    <innerclass refid="structCGAL_1_1Straight__skeleton__converter__2" prot="public">CGAL::Straight_skeleton_converter_2</innerclass>
    <innerclass refid="classCGAL_1_1Straight__skeleton__face__base__2" prot="public">CGAL::Straight_skeleton_face_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Straight__skeleton__halfedge__base__2" prot="public">CGAL::Straight_skeleton_halfedge_base_2</innerclass>
    <innerclass refid="structCGAL_1_1Straight__skeleton__items__converter__2" prot="public">CGAL::Straight_skeleton_items_converter_2</innerclass>
    <innerclass refid="classCGAL_1_1Straight__skeleton__vertex__base__2" prot="public">CGAL::Straight_skeleton_vertex_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Trisegment__2" prot="public">CGAL::Trisegment_2</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceCGAL_1a53d7b0ce7f7c4c8c8dcc7b6be8db075e" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Trisegment__2" kindref="compound">Trisegment_2</ref>&lt; K, Segment &gt; &gt;</type>
        <definition>using CGAL::Trisegment_2_ptr = typedef std::shared_ptr&lt;Trisegment_2&lt;K, Segment&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Trisegment_2_ptr</name>
        <qualifiedname>CGAL::Trisegment_2_ptr</qualifiedname>
        <briefdescription>
<para>a smart pointer to a <computeroutput><ref refid="classCGAL_1_1Trisegment__2" kindref="compound">Trisegment_2</ref></computeroutput> object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Trisegment_2.h" line="63" column="1" bodyfile="CGAL/Trisegment_2.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1gafd9733f1c41a778c6e274017ddae9ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class K</type>
          </param>
          <param>
            <type>class InputPolygonPtrIterator</type>
          </param>
          <param>
            <type>class OutputPolygonWithHolesPtrIterator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::arrange_offset_polygons_2</definition>
        <argsstring>(InputPolygonPtrIterator begin, InputPolygonPtrIterator end, OutputPolygonWithHolesPtrIterator out, const K &amp;k)</argsstring>
        <name>arrange_offset_polygons_2</name>
        <qualifiedname>CGAL::arrange_offset_polygons_2</qualifiedname>
        <param>
          <type>InputPolygonPtrIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputPolygonPtrIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputPolygonWithHolesPtrIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gafd9733f1c41a778c6e274017ddae9ade" kindref="member">arrange_offset_polygons_2()</ref></computeroutput> arranges the sequence of 2D polygons obtained by <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga36fe6fd001343f6cd0a3e8b06d1c325c" kindref="member">create_offset_polygons_2()</ref></computeroutput> into 2D polygons with holes by determining geometric parent-hole relationships using a simple algorithm based on the particular characteristics of offset polygons. </para>
        </briefdescription>
        <detaileddescription>
<para>The function determines parent-hole relationships among the polygons given by <computeroutput>[begin,end]</computeroutput> creating <computeroutput>std::shared_ptr&lt; GeneralPolygonWithHoles_2 &gt;</computeroutput> objects added to the output sequence given <computeroutput>out</computeroutput>. A <computeroutput>CLOCKWISE</computeroutput> oriented polygon <computeroutput>H</computeroutput> is a hole of a <computeroutput>COUNTERCLOCKWISE</computeroutput> polygon <computeroutput>P</computeroutput>, iff at least one vertex of <computeroutput>H</computeroutput> is <computeroutput>ON_BOUNDED_SIDE</computeroutput> of <computeroutput>P</computeroutput>.</para>
<para>This function should not be used to arrange arbitrary polygons into polygons with holes unless they meet the requirements specified below.</para>
<para><simplesect kind="pre"><para>The input polygons must be simple. </para>
</simplesect>
<simplesect kind="pre"><para>The set of input polygons are unique and interior disjoint. That is, given distinct polygons <computeroutput>P</computeroutput> and <computeroutput>Q</computeroutput>, there are vertices of <computeroutput>P</computeroutput> which are not on the boundary of <computeroutput>Q</computeroutput> and are all on the bounded or unbounded side of <computeroutput>Q</computeroutput> (but not both).</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputPolygonPtrIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> whose <computeroutput>value_type</computeroutput> is a smart pointer (such as <computeroutput>std::shared_ptr</computeroutput>) whose <computeroutput>element_type</computeroutput> is a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>K::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputPolygonWithHolesPtrIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>OutputIterator</computeroutput> whose <computeroutput>value_type</computeroutput> is a smart pointer (such as <computeroutput>std::shared_ptr</computeroutput>) whose <computeroutput>element_type</computeroutput> is a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if no error was encountered, and <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">CGAL::create_exterior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/arrange_offset_polygons_2.h" line="34" column="6" declfile="CGAL/arrange_offset_polygons_2.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1ga80c0848e0145bbd531b1fc178fd07d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; typename Traits::FT &gt;</type>
        <definition>std::optional&lt; typename Traits::FT &gt; CGAL::compute_outer_frame_margin</definition>
        <argsstring>(InputIterator first, InputIterator beyond, typename Traits::FT offset, const Traits &amp;traits=Default_traits)</argsstring>
        <name>compute_outer_frame_margin</name>
        <qualifiedname>CGAL::compute_outer_frame_margin</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>typename Traits::FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes the separation required between a polygon and the outer frame used to obtain an exterior skeleton suitable for the computation of outer offset polygons at a given distance. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a non-degenerate strictly-simple 2D polygon whose vertices are passed in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>), calculates the largest euclidean distance <computeroutput>d</computeroutput> between each input vertex and its corresponding offset vertex at a distance <computeroutput>offset</computeroutput>.</para>
<para>If such a distance can be approximately computed, returns an <computeroutput>optional&lt;FT&gt;</computeroutput> with the value <computeroutput>d + (offset * 1.05)</computeroutput>. If the distance cannot be computed, not even approximately, due to overflow for instance, returns an empty <computeroutput>optional&lt;FT&gt;</computeroutput> (an <emphasis>absent result</emphasis>).</para>
<para>This result is the required separation between the input polygon and the rectangular frame used to construct an exterior offset contour at distance <computeroutput>offset</computeroutput> (which is done by placing the polygon as a hole of that frame).</para>
<para>Such a separation must be computed in this way because if the frame is too close to the polygon, the inward offset contour from the frame could collide with the outward offset contour of the polygon, resulting in a merged contour offset instead of two contour offsets, one of them corresponding to the frame.</para>
<para>Simply using <computeroutput>2*offset</computeroutput> as the separation is incorrect since <computeroutput>offset</computeroutput> is the distance between an offset line and its original, not between an offset vertex and its original. The later, which is calculated by this function and needed to place the frame sufficiently away from the polygon, can be thousands of times larger than <computeroutput>offset</computeroutput>.</para>
<para>If the result is <emphasis>absent</emphasis>, any attempt to construct an exterior offset polygon at distance <computeroutput>offset</computeroutput> will fail. This will occur whenever the polygon has a vertex with an internal angle approaching <computeroutput>0</computeroutput> (because the offset vertex of a vertex whose internal angle equals 0 is at <emphasis>infinity</emphasis>).</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is an instance of the class <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;Kernel&gt;</computeroutput> parameterized on the kernel in which the type <computeroutput>InputIterator::value_type</computeroutput> is defined.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model for <computeroutput><ref refid="classPolygonOffsetBuilderTraits__2" kindref="compound">PolygonOffsetBuilderTraits_2</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with <computeroutput>value_type</computeroutput> equivalent to <computeroutput>Traits::Point_2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>offset &gt; 0</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>The range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>) contains the vertices of a non-degenerate strictly-simple 2D polygon.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolygonOffsetBuilderTraits__2" kindref="compound">PolygonOffsetBuilderTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">CGAL::Polygon_offset_builder_traits_2</ref>&lt;K&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/compute_outer_frame_margin.h" line="51" column="1" declfile="CGAL/compute_outer_frame_margin.h" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1ga36fe6fd001343f6cd0a3e8b06d1c325c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfKPolygon</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename StraightSkeleton</type>
          </param>
          <param>
            <type>typename OfK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_offset_polygons_2</definition>
        <argsstring>(FT offset, const StraightSkeleton &amp;ss, OfK k=Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_offset_polygons_2</name>
        <qualifiedname>CGAL::create_offset_polygons_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const StraightSkeleton &amp;</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>k</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with the offset polygons at distance <computeroutput>offset</computeroutput> obtained from the straight skeleton <computeroutput>ss</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>ss</computeroutput> is the interior skeleton of a polygon with holes, the offset polygons will be generated in its interior. If <computeroutput>ss</computeroutput> is the outer skeleton of a polygon with holes, the offset polygons will be generated in its exterior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StraightSkeleton</parametername>
</parameternamelist>
<parameterdescription>
<para>is an object of type <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;SsK&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined from <computeroutput>OfK</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>offset</computeroutput> is positive. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ss</computeroutput> is a valid straight skeleton.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga4baa6cdc2cc19c341be875742387254b" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee243d012e7f942b4d1365dc307546b8" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_offset_polygons_2.h" line="29" column="1" declfile="CGAL/create_offset_polygons_2.h" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1ga4baa6cdc2cc19c341be875742387254b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfKPolygon</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename InKPolygon</type>
          </param>
          <param>
            <type>typename HoleIterator</type>
          </param>
          <param>
            <type>typename OfK</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_interior_skeleton_and_offset_polygons_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;outer_boundary, HoleIterator holes_begin, HoleIterator holes_end, OfK ofk=CGAL::Exact_predicates_inexact_constructions_kernel, SsK ssk=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_skeleton_and_offset_polygons_2</name>
        <qualifiedname>CGAL::create_interior_skeleton_and_offset_polygons_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>outer_boundary</declname>
        </param>
        <param>
          <type>HoleIterator</type>
          <declname>holes_begin</declname>
        </param>
        <param>
          <type>HoleIterator</type>
          <declname>holes_end</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with all the inner offset polygons at distance <computeroutput>offset</computeroutput> of a 2D polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>The outer boundary is <computeroutput>outer_boundary</computeroutput> and its holes are given by <computeroutput>[holes_begin,holes_end)</computeroutput>.</para>
<para><simplesect kind="note"><para>A temporary straight skeleton is constructed in the interior of the input polygon to obtain the offsets. The construction of this skeleton is the most expensive operation, therefore, to construct offsets at more than one single distance, it is advised to use <computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">create_interior_straight_skeleton_2()</ref></computeroutput> to create the skeleton only once, and then call <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga36fe6fd001343f6cd0a3e8b06d1c325c" kindref="member">create_offset_polygons_2()</ref></computeroutput> for each distance.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HoleIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type being a model of <computeroutput>ConstRange</computeroutput> with value type <computeroutput>SsK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined from <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>outer_boundary</computeroutput> describes a weakly simple, counterclockwise polygon. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>[holes_begin,holes_end)</computeroutput> is a range of weakly simple, clockwise polygons. </para>
</simplesect>
<simplesect kind="pre"><para>Holes do not intersect each other or the outer boundary.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee243d012e7f942b4d1365dc307546b8" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gabe025331b6e803f2f942305123a02306" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_offset_polygons_2.h" line="70" column="1" declfile="CGAL/create_offset_polygons_2.h" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1gaf0d0e8321d70cd97e6441b6ce77bdc89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfKPolygon</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename InKPolygon</type>
          </param>
          <param>
            <type>typename OfK</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_interior_skeleton_and_offset_polygons_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;poly, OfK ofk=CGAL::Exact_predicates_inexact_constructions_kernel, SsK ssk=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_skeleton_and_offset_polygons_2</name>
        <qualifiedname>CGAL::create_interior_skeleton_and_offset_polygons_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>poly</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with all the inner offset polygons at distance <computeroutput>offset</computeroutput> of the 2D polygon <computeroutput>poly</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A temporary straight skeleton is constructed in the interior of the input polygon to obtain the offsets. The construction of this skeleton is the most expensive operation, therefore, to construct offsets at more than one single distance, it is advised to use <computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">create_interior_straight_skeleton_2()</ref></computeroutput> to create the skeleton only once, and then call <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga36fe6fd001343f6cd0a3e8b06d1c325c" kindref="member">create_offset_polygons_2()</ref></computeroutput> for each distance</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined by <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>offset</computeroutput> is positive </para>
</simplesect>
<simplesect kind="pre"><para>poly` is weakly simple, counterclockwise polygon.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee243d012e7f942b4d1365dc307546b8" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gabe025331b6e803f2f942305123a02306" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_offset_polygons_2.h" line="108" column="1" declfile="CGAL/create_offset_polygons_2.h" declline="108" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1gaee243d012e7f942b4d1365dc307546b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfKPolygon</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename InKPolygon</type>
          </param>
          <param>
            <type>typename OfK</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_exterior_skeleton_and_offset_polygons_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;poly, OfK ofk=Exact_predicates_inexact_constructions_kernel(), SsK ssk=Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_exterior_skeleton_and_offset_polygons_2</name>
        <qualifiedname>CGAL::create_exterior_skeleton_and_offset_polygons_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>poly</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with all the outer offset polygons at distance <computeroutput>offset</computeroutput> of the 2D polygon <computeroutput>poly</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The exterior skeleton is limited by an outer rectangular frame placed at a margin sufficiently large to allow the offset polygons to be constructed.</para>
<para><simplesect kind="note"><para>A temporary straight skeleton is constructed in the <emphasis>limited exterior</emphasis> of the input polygon to obtain the offsets. The construction of this skeleton is the most expensive operation, therefore, to construct offsets at more than one single distance, use the separate functions <computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">create_exterior_straight_skeleton_2()</ref></computeroutput> and <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga36fe6fd001343f6cd0a3e8b06d1c325c" kindref="member">create_offset_polygons_2()</ref></computeroutput> instead.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined from <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>offset</computeroutput> is positive </para>
</simplesect>
<simplesect kind="pre"><para>poly` is weakly simple, counterclockwise polygon.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga4baa6cdc2cc19c341be875742387254b" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga7627d015c03abaea59b144576afebf70" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_offset_polygons_2.h" line="149" column="1" declfile="CGAL/create_offset_polygons_2.h" declline="149" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1gabe025331b6e803f2f942305123a02306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OfKPolygon</type>
          </param>
          <param>
            <type>class FT</type>
          </param>
          <param>
            <type>class InKPolygon</type>
          </param>
          <param>
            <type>class OfK</type>
          </param>
          <param>
            <type>class SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_interior_skeleton_and_offset_polygons_with_holes_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;poly_with_holes, OfK ofk=CGAL::Exact_predicates_inexact_constructions_kernel, SsK ssk=CGAL::Exact_predicates_inexact_constructions_kernel)</argsstring>
        <name>create_interior_skeleton_and_offset_polygons_with_holes_2</name>
        <qualifiedname>CGAL::create_interior_skeleton_and_offset_polygons_with_holes_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>poly_with_holes</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel</defval>
        </param>
        <briefdescription>
<para>returns a container with all the inner offset polygons <emphasis>with holes</emphasis> at distance <computeroutput>offset</computeroutput> of the 2D polygon with holes <computeroutput>poly_with_holes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <computeroutput>arrange_offset_polygons_2(create_interior_skeleton_and_offset_polygons_2(offset, poly_with_holes, ofk, ssk))</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined by <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga4baa6cdc2cc19c341be875742387254b" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga7627d015c03abaea59b144576afebf70" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_offset_polygons_from_polygon_with_holes_2.h" line="29" column="1" declfile="CGAL/create_offset_polygons_from_polygon_with_holes_2.h" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1ga7627d015c03abaea59b144576afebf70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OfKPolygon</type>
          </param>
          <param>
            <type>class FT</type>
          </param>
          <param>
            <type>class InKPolygon</type>
          </param>
          <param>
            <type>class OfK</type>
          </param>
          <param>
            <type>class SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_exterior_skeleton_and_offset_polygons_with_holes_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;poly_with_holes, OfK ofk=Exact_predicates_inexact_constructions_kernel(), SsK ssk=Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_exterior_skeleton_and_offset_polygons_with_holes_2</name>
        <qualifiedname>CGAL::create_exterior_skeleton_and_offset_polygons_with_holes_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>poly_with_holes</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with all the outer offset polygons <emphasis>with holes</emphasis> at distance <computeroutput>offset</computeroutput> of the 2D polygon <computeroutput>poly_with_holes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the offset of the outer frame is ignored.</para>
<para>This is equivalent to a call to <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gafd9733f1c41a778c6e274017ddae9ade" kindref="member">CGAL::arrange_offset_polygons_2()</ref></computeroutput> on the output of <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee243d012e7f942b4d1365dc307546b8" kindref="member"><computeroutput>create_exterior_skeleton_and_offset_polygons_2(offset, poly_with_holes, ofk, ssk))</computeroutput> </ref> after having filtered out the polygon corresponding to the offset of the outer frame and having reversed the orientation of all other polygons.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined by <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee243d012e7f942b4d1365dc307546b8" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gabe025331b6e803f2f942305123a02306" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_offset_polygons_from_polygon_with_holes_2.h" line="67" column="1" declfile="CGAL/create_offset_polygons_from_polygon_with_holes_2.h" declline="67" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointIterator</type>
          </param>
          <param>
            <type>typename HoleIterator</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_interior_straight_skeleton_2</definition>
        <argsstring>(PointIterator outer_contour_vertices_begin, PointIterator outer_contour_vertices_end, HoleIterator holes_begin, HoleIterator holes_end, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_interior_straight_skeleton_2</qualifiedname>
        <param>
          <type>PointIterator</type>
          <declname>outer_contour_vertices_begin</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>outer_contour_vertices_end</declname>
        </param>
        <param>
          <type>HoleIterator</type>
          <declname>holes_begin</declname>
        </param>
        <param>
          <type>HoleIterator</type>
          <declname>holes_end</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a straight skeleton in the interior of the 2D polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>The outer boundary of the polygon is given by the point sequence <computeroutput>[outer_contour_vertices_begin,outer_contour_vertices_end[</computeroutput> and its holes given by <computeroutput>[holes_begin, holes_end[</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HoleIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with <computeroutput>value_type</computeroutput> a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> is used to convert from <computeroutput>InK::Point_2</computeroutput> to <computeroutput>SsK::Point_2</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para>the range <computeroutput>[outer_contour_vertices_begin, outer_contour_vertices_end[</computeroutput> describes a weakly simple polygon that is oriented counterclockwise. \pre the range <computeroutput>[holes_begin, holes_end[</computeroutput> describes a sequence of weakly simple polygons that are oriented clockwise. </para>
</simplesect>
<simplesect kind="pre"><para>Holes neither intersect each other nor the outer boundary.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">CGAL::create_exterior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_straight_skeleton_2.h" line="30" column="1" declfile="CGAL/create_straight_skeleton_2.h" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2SkeletonFunctions_1ga9a8b0749901ca3a551d4f15a45bc0437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointIterator</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_interior_straight_skeleton_2</definition>
        <argsstring>(PointIterator outer_contour_vertices_begin, PointIterator outer_contour_vertices_end, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_interior_straight_skeleton_2</qualifiedname>
        <param>
          <type>PointIterator</type>
          <declname>outer_contour_vertices_begin</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>outer_contour_vertices_end</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a straight skeleton in the interior of the 2D polygon. </para>
        </briefdescription>
        <detaileddescription>
<para>The outer boundary of the polygon is given by the point sequence <computeroutput>[outer_contour_vertices_begin,outer_contour_vertices_end[</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> is used to convert from <computeroutput>InK::Point_2</computeroutput> to <computeroutput>SsK::Point_2</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para>the range <computeroutput>[outer_contour_vertices_begin, outer_contour_vertices_end[</computeroutput> describes a weakly simple polygon that is oriented counterclockwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">CGAL::create_exterior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_straight_skeleton_2.h" line="56" column="1" declfile="CGAL/create_straight_skeleton_2.h" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2SkeletonFunctions_1ga75b6c1f14dc887bc51ae6e000d608855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_interior_straight_skeleton_2</definition>
        <argsstring>(const Polygon &amp;polygon, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_interior_straight_skeleton_2</qualifiedname>
        <param>
          <type>const Polygon &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a straight skeleton in the interior of the 2D polygon <computeroutput>polygon</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Holes of the polygon are ignored. If you also need the exterior skeleton for the holes, you should call <computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">CGAL::create_interior_straight_skeleton_2()</ref></computeroutput> for each hole.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> is used to convert from <computeroutput>InK::Point_2</computeroutput> to <computeroutput>SsK::Point_2</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> is a weakly simple, counterclockwise polygon with clockwise oriented holes. </para>
</simplesect>
<simplesect kind="pre"><para>Holes neither intersect each other nor the outer boundary.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">CGAL::create_exterior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_straight_skeleton_2.h" line="83" column="1" declfile="CGAL/create_straight_skeleton_2.h" declline="83" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename PointIterator</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_exterior_straight_skeleton_2</definition>
        <argsstring>(FT max_offset, PointIterator vertices_begin, PointIterator vertices_end, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_exterior_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_exterior_straight_skeleton_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>max_offset</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>vertices_begin</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>vertices_end</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a straight skeleton in the exterior of a 2D polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns a straight skeleton in the <emphasis>limited exterior</emphasis> of the 2D polygon <computeroutput>P</computeroutput> given by the point sequence <computeroutput>[vertices_begin,vertices_end[</computeroutput>. The skeleton in the <emphasis>limited exterior</emphasis> of <computeroutput>P</computeroutput> is the skeleton in the interior of a polygon <computeroutput>Q</computeroutput> with <computeroutput>P</computeroutput> as its hole and a rectangular frame <computeroutput>F</computeroutput> as outer boundary. The outer boundary <computeroutput>F</computeroutput> is constructed by enlarging the bounding box of <computeroutput>P</computeroutput> a distance <computeroutput>d</computeroutput>. <computeroutput>d</computeroutput> is a margin sufficiently large to allow an outer offset at distance <computeroutput>max_offset</computeroutput> to be obtained from this exterior skeleton, as computed by the function <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga80c0848e0145bbd531b1fc178fd07d33" kindref="member">compute_outer_frame_margin()</ref></computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> is used to convert from <computeroutput>InK::Point_2</computeroutput> to <computeroutput>SsK::Point_2</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>vertices_begin</computeroutput> and <computeroutput>vertices_end</computeroutput> describe a weakly simple polygon that is oriented counterclockwise.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">CGAL::create_interior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_straight_skeleton_2.h" line="114" column="1" declfile="CGAL/create_straight_skeleton_2.h" declline="114" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2SkeletonFunctions_1ga83229dd3649bc7624d7c6f2733c2edde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_exterior_straight_skeleton_2</definition>
        <argsstring>(FT max_offset, const Polygon &amp;P, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_exterior_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_exterior_straight_skeleton_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>max_offset</declname>
        </param>
        <param>
          <type>const Polygon &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a straight skeleton in the exterior of a 2D polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns a straight skeleton in the <emphasis>limited exterior</emphasis> of the 2D polygon <computeroutput>P</computeroutput>. The skeleton in the <emphasis>limited exterior</emphasis> of <computeroutput>P</computeroutput> is the skeleton in the interior of a polygon <computeroutput>Q</computeroutput> with <computeroutput>P</computeroutput> as its hole and a rectangular frame <computeroutput>F</computeroutput> as outer boundary. The outer boundary <computeroutput>F</computeroutput> is constructed by enlarging the bounding box of <computeroutput>P</computeroutput> a distance <computeroutput>d</computeroutput>. <computeroutput>d</computeroutput> is a margin sufficiently large to allow an outer offset at distance <computeroutput>max_offset</computeroutput> to be obtained from this exterior skeleton, as computed by the function <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga80c0848e0145bbd531b1fc178fd07d33" kindref="member">compute_outer_frame_margin()</ref></computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> is used to convert from <computeroutput>InK::Point_2</computeroutput> to <computeroutput>SsK::Point_2</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>P</computeroutput> is a weakly simple, counterclockwise polygon with clockwise oriented holes. </para>
</simplesect>
<simplesect kind="pre"><para>Holes neither intersect each other nor the outer boundary. </para>
</simplesect>
<simplesect kind="pre"><para>All the weights must be (strictly) positive. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>max_offset</computeroutput> is positive.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">CGAL::create_interior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_straight_skeleton_2.h" line="148" column="1" declfile="CGAL/create_straight_skeleton_2.h" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2WeightedOffsetFunctions_1ga773095b0af928be7e38960c7ae46d00d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfKPolygon</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename InKPolygon</type>
          </param>
          <param>
            <type>typename InKWeights</type>
          </param>
          <param>
            <type>typename HoleIterator</type>
          </param>
          <param>
            <type>typename OfK</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_interior_weighted_skeleton_and_offset_polygons_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;outer_boundary, const InKWeights &amp;outer_boundary_weights, HoleIterator holes_begin, HoleIterator holes_end, HoleWeightsIterator holes_weights_begin, HoleWeightsIterator holes_weights_end, OfK ofk=CGAL::Exact_predicates_inexact_constructions_kernel, SsK ssk=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_weighted_skeleton_and_offset_polygons_2</name>
        <qualifiedname>CGAL::create_interior_weighted_skeleton_and_offset_polygons_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>outer_boundary</declname>
        </param>
        <param>
          <type>const InKWeights &amp;</type>
          <declname>outer_boundary_weights</declname>
        </param>
        <param>
          <type>HoleIterator</type>
          <declname>holes_begin</declname>
        </param>
        <param>
          <type>HoleIterator</type>
          <declname>holes_end</declname>
        </param>
        <param>
          <type>HoleWeightsIterator</type>
          <declname>holes_weights_begin</declname>
        </param>
        <param>
          <type>HoleWeightsIterator</type>
          <declname>holes_weights_end</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with all the inner offset polygons at distance <computeroutput>offset</computeroutput> of a 2D polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>The outer boundary is <computeroutput>outer_boundary</computeroutput> and its holes are given by <computeroutput>[holes_begin,holes_end)</computeroutput>. Weights of the outer contour are given by <computeroutput>outer_boundary_weights</computeroutput> and weights of the holes are given by <computeroutput>[holes_weights_begin, holes_weights_end]</computeroutput>, in the same order as holes appear in the iterator range. Within each weight range, weights are given in the same order as the vertices of the contour: the <computeroutput>i</computeroutput>-th weight in the range is associated to the contour edge between the <computeroutput>i-1</computeroutput>-th and <computeroutput>i</computeroutput>-th vertices.</para>
<para><simplesect kind="note"><para>A temporary straight skeleton is constructed in the interior of the input polygon to obtain the offsets. The construction of this skeleton is the most expensive operation, therefore, to construct offsets at more than one single distance, it is advised to use the separate functions <computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">create_interior_straight_skeleton_2()</ref></computeroutput> and <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga36fe6fd001343f6cd0a3e8b06d1c325c" kindref="member">create_offset_polygons_2()</ref></computeroutput> instead.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKWeights</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Range</computeroutput> with value type <computeroutput>InK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HoleIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type being a model of <computeroutput>ConstRange</computeroutput> with value type <computeroutput>SsK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HoleWeightsIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type being a model of <computeroutput>ConstRange</computeroutput> with value type <computeroutput>InK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined from <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee243d012e7f942b4d1365dc307546b8" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gabe025331b6e803f2f942305123a02306" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_offset_polygons_2.h" line="46" column="1" declfile="CGAL/create_weighted_offset_polygons_2.h" declline="46" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2WeightedOffsetFunctions_1ga37e2dd0a30bf5eb8c840a51882b12914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfKPolygon</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename InKPolygon</type>
          </param>
          <param>
            <type>typename InKWeights</type>
          </param>
          <param>
            <type>typename OfK</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_interior_weighted_skeleton_and_offset_polygons_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;poly, const InKWeights &amp;weights, OfK ofk=CGAL::Exact_predicates_inexact_constructions_kernel, SsK ssk=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_weighted_skeleton_and_offset_polygons_2</name>
        <qualifiedname>CGAL::create_interior_weighted_skeleton_and_offset_polygons_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>poly</declname>
        </param>
        <param>
          <type>const InKWeights &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with all the inner offset polygons at distance <computeroutput>offset</computeroutput> of the 2D polygon <computeroutput>poly</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Weights of the polygon are given by <computeroutput>weights</computeroutput>, in the same order as the vertices of the polygon: the <computeroutput>i</computeroutput>-th weight in the range is associated to the contour edge between the <computeroutput>i-1</computeroutput>-th and <computeroutput>i</computeroutput>-th vertices.</para>
<para><simplesect kind="note"><para>A temporary straight skeleton is constructed in the interior of the input polygon to obtain the offsets. The construction of this skeleton is the most expensive operation, therefore, to construct offsets at more than one single distance, use the separate functions <computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">create_interior_straight_skeleton_2()</ref></computeroutput> and <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga36fe6fd001343f6cd0a3e8b06d1c325c" kindref="member">create_offset_polygons_2()</ref></computeroutput> instead.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKWeights</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Range</computeroutput> with value type <computeroutput>InK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined by <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee243d012e7f942b4d1365dc307546b8" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gabe025331b6e803f2f942305123a02306" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_offset_polygons_2.h" line="88" column="1" declfile="CGAL/create_weighted_offset_polygons_2.h" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2WeightedOffsetFunctions_1ga01cf19d841b9d7b8c022560011308315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfKPolygon</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename InKPolygon</type>
          </param>
          <param>
            <type>typename InKWeights</type>
          </param>
          <param>
            <type>typename OfK</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_exterior_weighted_skeleton_and_offset_polygons_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;poly, const InKWeights &amp;weights, OfK ofk=Exact_predicates_inexact_constructions_kernel(), SsK ssk=Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_exterior_weighted_skeleton_and_offset_polygons_2</name>
        <qualifiedname>CGAL::create_exterior_weighted_skeleton_and_offset_polygons_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>poly</declname>
        </param>
        <param>
          <type>const InKWeights &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with all the outer offset polygons at distance <computeroutput>offset</computeroutput> of the 2D polygon <computeroutput>poly</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Weights of the polygon are given by <computeroutput>weights</computeroutput>, in the same order as the vertices of the polygon: the <computeroutput>i</computeroutput>-th weight in the range is associated to the contour edge between the <computeroutput>i-1</computeroutput>-th and <computeroutput>i</computeroutput>-th vertices.</para>
<para>The exterior skeleton is limited by an outer rectangular frame placed at a margin sufficiently large to allow the offset polygons to be constructed.</para>
<para><simplesect kind="note"><para>A temporary straight skeleton is constructed in the <emphasis>limited exterior</emphasis> of the input polygon to obtain the offsets. The construction of this skeleton is the most expensive operation, therefore, to construct offsets at more than one single distance, use the separate functions <computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">create_exterior_straight_skeleton_2()</ref></computeroutput> and <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga36fe6fd001343f6cd0a3e8b06d1c325c" kindref="member">create_offset_polygons_2()</ref></computeroutput> instead.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKWeights</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Range</computeroutput> with value type <computeroutput>InK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined from <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>offset</computeroutput> is positive </para>
</simplesect>
<simplesect kind="pre"><para>poly` is weakly simple, counterclockwise polygon.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga4baa6cdc2cc19c341be875742387254b" kindref="member">CGAL::create_interior_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga7627d015c03abaea59b144576afebf70" kindref="member">CGAL::create_exterior_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_offset_polygons_2.h" line="134" column="1" declfile="CGAL/create_weighted_offset_polygons_2.h" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1gaee073b6bd62fb5722bad41528647ec30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OfKPolygon</type>
          </param>
          <param>
            <type>class FT</type>
          </param>
          <param>
            <type>class InKPolygon</type>
          </param>
          <param>
            <type>class OfK</type>
          </param>
          <param>
            <type>class SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_interior_weighted_skeleton_and_offset_polygons_with_holes_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;poly_with_holes, OfK ofk=CGAL::Exact_predicates_inexact_constructions_kernel, SsK ssk=CGAL::Exact_predicates_inexact_constructions_kernel)</argsstring>
        <name>create_interior_weighted_skeleton_and_offset_polygons_with_holes_2</name>
        <qualifiedname>CGAL::create_interior_weighted_skeleton_and_offset_polygons_with_holes_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>poly_with_holes</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel</defval>
        </param>
        <briefdescription>
<para>returns a container with all the inner offset polygons <emphasis>with holes</emphasis> at distance <computeroutput>offset</computeroutput> of the 2D polygon with holes <computeroutput>poly_with_holes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <computeroutput>arrange_offset_polygons_2(create_interior_weighted_skeleton_and_offset_polygons_2(offset, poly_with_holes, ofk, ssk))</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the weighted straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined by <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed weighted straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2WeightedOffsetFunctions_1ga773095b0af928be7e38960c7ae46d00d" kindref="member">CGAL::create_interior_weighted_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga52736ea80b6df08be011d5d66e26a543" kindref="member">CGAL::create_exterior_weighted_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_offset_polygons_from_polygon_with_holes_2.h" line="29" column="1" declfile="CGAL/create_weighted_offset_polygons_from_polygon_with_holes_2.h" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1ga52736ea80b6df08be011d5d66e26a543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OfKPolygon</type>
          </param>
          <param>
            <type>class FT</type>
          </param>
          <param>
            <type>class InKPolygon</type>
          </param>
          <param>
            <type>class OfK</type>
          </param>
          <param>
            <type>class SsK</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; OfKPolygon &gt; &gt; CGAL::create_exterior_weighted_skeleton_and_offset_polygons_with_holes_2</definition>
        <argsstring>(FT offset, const InKPolygon &amp;poly_with_holes, OfK ofk=Exact_predicates_inexact_constructions_kernel(), SsK ssk=Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_exterior_weighted_skeleton_and_offset_polygons_with_holes_2</name>
        <qualifiedname>CGAL::create_exterior_weighted_skeleton_and_offset_polygons_with_holes_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>poly_with_holes</declname>
        </param>
        <param>
          <type>OfK</type>
          <declname>ofk</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <param>
          <type>SsK</type>
          <declname>ssk</declname>
          <defval>Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>returns a container with all the outer offset polygons <emphasis>with holes</emphasis> at distance <computeroutput>offset</computeroutput> of the 2D polygon <computeroutput>poly_with_holes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the offset of the outer frame is ignored.</para>
<para>This is equivalent to a call to <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gafd9733f1c41a778c6e274017ddae9ade" kindref="member">CGAL::arrange_offset_polygons_2()</ref></computeroutput> on the output of <ref refid="group__PkgStraightSkeleton2WeightedOffsetFunctions_1ga01cf19d841b9d7b8c022560011308315" kindref="member"><computeroutput>create_exterior_weighted_skeleton_and_offset_polygons_2(offset, poly_with_holes, ofk, ssk))</computeroutput> </ref> after having filtered out the polygon corresponding to the offset of the outer frame and having reversed the orientation of all other polygons.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OfK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__traits__2" kindref="compound">Polygon_offset_builder_traits_2</ref>&lt;OfK&gt;</computeroutput> for constructing the offset polygons. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. It is used to instantiate <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__traits__2" kindref="compound">Straight_skeleton_builder_traits_2</ref>&lt;SsK&gt;</computeroutput> for constructing the straight skeleton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>OfK::FT</computeroutput> and <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OfKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a polygon without holes type determined by <computeroutput>OfK</computeroutput> and <computeroutput>InKPolygon</computeroutput>, see Section <ref refid="group__PkgStraightSkeleton2OffsetFunctions_1SLSOffsetPolygonReturnType" kindref="member">Polygon Return Type</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>SsK != OfK</computeroutput> the constructed weighted straight skeleton is converted to <computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref>&lt;OfK&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2WeightedOffsetFunctions_1ga01cf19d841b9d7b8c022560011308315" kindref="member">CGAL::create_exterior_weighted_skeleton_and_offset_polygons_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee073b6bd62fb5722bad41528647ec30" kindref="member">CGAL::create_interior_weighted_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Polygon__offset__builder__2" kindref="compound">Polygon_offset_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_offset_polygons_from_polygon_with_holes_2.h" line="67" column="1" declfile="CGAL/create_weighted_offset_polygons_from_polygon_with_holes_2.h" declline="67" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2WeightedSkeletonFunctions_1ga325dbd960b6d715f39325fa2db01d92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointIterator</type>
          </param>
          <param>
            <type>typename HoleIterator</type>
          </param>
          <param>
            <type>typename WeightIterator</type>
          </param>
          <param>
            <type>typename HoleWeightsIterator</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_interior_weighted_straight_skeleton_2</definition>
        <argsstring>(PointIterator outer_contour_vertices_begin, PointIterator outer_contour_vertices_end, HoleIterator holes_begin, HoleIterator holes_end, WeightIterator outer_contour_weights_begin, WeightIterator outer_contour_weights_end, HoleWeightsIterator holes_weights_begin, HoleWeightsIterator holes_weights_end, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_weighted_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_interior_weighted_straight_skeleton_2</qualifiedname>
        <param>
          <type>PointIterator</type>
          <declname>outer_contour_vertices_begin</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>outer_contour_vertices_end</declname>
        </param>
        <param>
          <type>HoleIterator</type>
          <declname>holes_begin</declname>
        </param>
        <param>
          <type>HoleIterator</type>
          <declname>holes_end</declname>
        </param>
        <param>
          <type>WeightIterator</type>
          <declname>outer_contour_weights_begin</declname>
        </param>
        <param>
          <type>WeightIterator</type>
          <declname>outer_contour_weights_end</declname>
        </param>
        <param>
          <type>HoleWeightsIterator</type>
          <declname>holes_weights_begin</declname>
        </param>
        <param>
          <type>HoleWeightsIterator</type>
          <declname>holes_weights_end</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a weighted straight skeleton in the interior of a 2D polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>The outer contour is given by the point sequence <computeroutput>[outer_contour_vertices_begin, outer_contour_vertices_end]</computeroutput> and its holes are given by <computeroutput>[holes_begin,holes_end[</computeroutput>. Weights of the outer contour are given by <computeroutput>[outer_contour_weights_begin, outer_contour_weights_end[</computeroutput>, and weights of the holes are given by <computeroutput>[holes_weights_begin, holes_weights_end]</computeroutput>, in the same order as holes appear in the iterator range. Within each weight range, weights are given in the same order as the vertices of the contour: the <computeroutput>i</computeroutput>-th weight in the range is associated to the contour edge between the <computeroutput>i-1</computeroutput>-th and <computeroutput>i</computeroutput>-th vertices.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HoleIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with <computeroutput>value_type</computeroutput> a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WeightIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with <computeroutput>value_type</computeroutput> <computeroutput>InK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HoleWeightsIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with <computeroutput>value_type</computeroutput> a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> and <computeroutput>NT_converter</computeroutput> are used to convert objects from <computeroutput>InK</computeroutput> to <computeroutput>SsK</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para>the range <computeroutput>[outer_contour_vertices_begin, outer_contour_vertices_end[</computeroutput> describes a weakly simple polygon that is oriented counterclockwise. \pre the range <computeroutput>[holes_begin, holes_end[</computeroutput> describes a sequence of weakly simple polygons that are oriented clockwise. </para>
</simplesect>
<simplesect kind="pre"><para>Holes neither intersect each other nor the outer boundary. </para>
</simplesect>
<simplesect kind="pre"><para>All the weights must be (strictly) positive. </para>
</simplesect>
<simplesect kind="pre"><para>Collinear consecutive contour edges must have equal weights.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">CGAL::create_exterior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_straight_skeleton_2.h" line="42" column="1" declfile="CGAL/create_weighted_straight_skeleton_2.h" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2WeightedSkeletonFunctions_1gadabc695ea752780c073bc156fecd22c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointIterator</type>
          </param>
          <param>
            <type>typename WeightIterator</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_interior_weighted_straight_skeleton_2</definition>
        <argsstring>(PointIterator outer_contour_vertices_begin, PointIterator outer_contour_vertices_end, WeightIterator outer_contour_weights_begin, WeightIterator outer_contour_weights_end, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_weighted_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_interior_weighted_straight_skeleton_2</qualifiedname>
        <param>
          <type>PointIterator</type>
          <declname>outer_contour_vertices_begin</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>outer_contour_vertices_end</declname>
        </param>
        <param>
          <type>WeightIterator</type>
          <declname>outer_contour_weights_begin</declname>
        </param>
        <param>
          <type>WeightIterator</type>
          <declname>outer_contour_weights_end</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a weighted straight skeleton in the interior of a 2D polygon <emphasis>without</emphasis> holes. </para>
        </briefdescription>
        <detaileddescription>
<para>The outer contour is given by the point sequence <computeroutput>[outer_contour_vertices_begin, outer_contour_vertices_end]</computeroutput>. Weights of the outer contour are given by <computeroutput>[outer_contour_weights_begin, outer_contour_weights_end]</computeroutput>, appearing in the same order as the vertices of the contour: the <computeroutput>i</computeroutput>-th weight in the range is associated to the contour edge between the <computeroutput>i-1</computeroutput>-th and <computeroutput>i</computeroutput>-th vertices.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WeightIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with <computeroutput>value_type</computeroutput> <computeroutput>InK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> and <computeroutput>NT_converter</computeroutput> are used to convert objects from <computeroutput>InK</computeroutput> to <computeroutput>SsK</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para>the range <computeroutput>[outer_contour_vertices_begin, outer_contour_vertices_end[</computeroutput> describes a weakly simple polygon that is oriented counterclockwise. </para>
</simplesect>
<simplesect kind="pre"><para>All the weights must be (strictly) positive. </para>
</simplesect>
<simplesect kind="pre"><para>Collinear consecutive contour edges must have equal weights.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">CGAL::create_exterior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_straight_skeleton_2.h" line="79" column="1" declfile="CGAL/create_weighted_straight_skeleton_2.h" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2WeightedSkeletonFunctions_1gaf1060822f8bac7f57ca961b04a08fac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InKPolygon</type>
          </param>
          <param>
            <type>typename InKWeights</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_interior_weighted_straight_skeleton_2</definition>
        <argsstring>(const InKPolygon &amp;polygon, const InKWeights &amp;weights, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_interior_weighted_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_interior_weighted_straight_skeleton_2</qualifiedname>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const InKWeights &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a weighted straight skeleton in the interior of a 2D polygon, possibly with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>Range of weights <computeroutput>weights</computeroutput> must be provided in the same order as the contours (i.e., first the weights of the outer boundary, and then the weights of the holes, if there are any). Within each range of weights, the weights must be given in the same order as the vertices of the contour: the <computeroutput>i</computeroutput>-th weight in the range is associated to the contour edge between the <computeroutput>i-1</computeroutput>-th and <computeroutput>i</computeroutput>-th vertices.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>), or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKWeights</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Range</computeroutput> whose value type is itself a model of <computeroutput>Range</computeroutput> with value type <computeroutput>InK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> and <computeroutput>NT_converter</computeroutput> are used to convert objects from <computeroutput>InK</computeroutput> to <computeroutput>SsK</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> is a weakly simple, counterclockwise polygon with clockwise oriented holes. </para>
</simplesect>
<simplesect kind="pre"><para>Holes neither intersect each other nor the outer boundary. </para>
</simplesect>
<simplesect kind="pre"><para>All the weights must be (strictly) positive. </para>
</simplesect>
<simplesect kind="pre"><para>Collinear consecutive contour edges must have equal weights.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1ga02808f3323f2e728f04e982020d1e9fd" kindref="member">CGAL::create_exterior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_straight_skeleton_2.h" line="113" column="1" declfile="CGAL/create_weighted_straight_skeleton_2.h" declline="113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2WeightedSkeletonFunctions_1ga68bd822b108199be009e58c9b30a3c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename PointIterator</type>
          </param>
          <param>
            <type>typename WeightIterator</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_exterior_weighted_straight_skeleton_2</definition>
        <argsstring>(FT max_offset, PointIterator vertices_begin, PointIterator vertices_end, WeightIterator weights_begin, WeightIterator weights_end, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_exterior_weighted_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_exterior_weighted_straight_skeleton_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>max_offset</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>vertices_begin</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>vertices_end</declname>
        </param>
        <param>
          <type>WeightIterator</type>
          <declname>weights_begin</declname>
        </param>
        <param>
          <type>WeightIterator</type>
          <declname>weights_end</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a weighted straight skeleton in the <emphasis>limited exterior</emphasis> of the 2D polygon <computeroutput>P</computeroutput> given by the point sequence <computeroutput>[vertices_begin,vertices_end[</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The skeleton in the <emphasis>limited exterior</emphasis> of <computeroutput>P</computeroutput> is the skeleton in the interior of a polygon <computeroutput>Q</computeroutput> with <computeroutput>P</computeroutput> as its hole and a rectangular frame <computeroutput>F</computeroutput> as outer boundary. The outer boundary <computeroutput>F</computeroutput> is constructed by enlarging the bounding box of <computeroutput>P</computeroutput> by a distance <computeroutput>d</computeroutput>. The distance <computeroutput>d</computeroutput> is a margin sufficiently large to allow an outer offset at distance <computeroutput>max_offset</computeroutput> to be obtained from this exterior skeleton, as computed by the function <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga80c0848e0145bbd531b1fc178fd07d33" kindref="member">compute_outer_frame_margin()</ref></computeroutput>.</para>
<para>Weights must be provided in the same order as the vertices of the polygon: the <computeroutput>i</computeroutput>-th weight in the range is associated to the contour edge between the <computeroutput>i-1</computeroutput>-th and <computeroutput>i</computeroutput>-th vertices.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WeightIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>InputIterator</computeroutput> with <computeroutput>value_type</computeroutput> <computeroutput>InK::FT</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> and <computeroutput>NT_converter</computeroutput> are used to convert objects from <computeroutput>InK</computeroutput> to <computeroutput>SsK</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>vertices_begin</computeroutput> and <computeroutput>vertices_end</computeroutput> describe a weakly simple polygon that is oriented counterclockwise. </para>
</simplesect>
<simplesect kind="pre"><para>All the weights must be (strictly) positive. </para>
</simplesect>
<simplesect kind="pre"><para>Collinear consecutive contour edges must have equal weights.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">CGAL::create_interior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_straight_skeleton_2.h" line="151" column="1" declfile="CGAL/create_weighted_straight_skeleton_2.h" declline="151" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2WeightedSkeletonFunctions_1ga75a14b882aab08c4e0a8b09c1a06a7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename Weights</type>
          </param>
          <param>
            <type>typename SsK</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">Straight_skeleton_2</ref>&lt; SsK &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Straight_skeleton_2&lt; SsK &gt; &gt; CGAL::create_exterior_weighted_straight_skeleton_2</definition>
        <argsstring>(FT max_offset, const InKPolygon &amp;P, const InKWeights &amp;weights, SsK k=CGAL::Exact_predicates_inexact_constructions_kernel())</argsstring>
        <name>create_exterior_weighted_straight_skeleton_2</name>
        <qualifiedname>CGAL::create_exterior_weighted_straight_skeleton_2</qualifiedname>
        <param>
          <type>FT</type>
          <declname>max_offset</declname>
        </param>
        <param>
          <type>const InKPolygon &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const InKWeights &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>SsK</type>
          <declname>k</declname>
          <defval>CGAL::Exact_predicates_inexact_constructions_kernel()</defval>
        </param>
        <briefdescription>
<para>creates a weighted straight skeleton in the exterior of a 2D polygon (with holes). </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns a straight skeleton in the <emphasis>limited exterior</emphasis> of the 2D polygon <computeroutput>P</computeroutput>. The skeleton in the <emphasis>limited exterior</emphasis> of <computeroutput>P</computeroutput> is the skeleton in the interior of a polygon <computeroutput>Q</computeroutput> with <computeroutput>P</computeroutput> as its hole and a rectangular frame <computeroutput>F</computeroutput> as outer boundary. The outer boundary <computeroutput>F</computeroutput> is constructed by enlarging the bounding box of <computeroutput>P</computeroutput> a distance <computeroutput>d</computeroutput>. <computeroutput>d</computeroutput> is a margin sufficiently large to allow an outer offset at distance <computeroutput>max_offset</computeroutput> to be obtained from this exterior skeleton, as computed by the function <computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1ga80c0848e0145bbd531b1fc178fd07d33" kindref="member">compute_outer_frame_margin()</ref></computeroutput>.</para>
<para>Weights must be provided in the same order as the vertices of the polygon: the <computeroutput>i</computeroutput>-th weight in the range is associated to the contour edge between the <computeroutput>i-1</computeroutput>-th and <computeroutput>i</computeroutput>-th vertices.</para>
<para><simplesect kind="warning"><para>Holes of the polygon <computeroutput>P</computeroutput> are ignored. If you also need the exterior skeleton for the holes, you should call <computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">CGAL::create_interior_straight_skeleton_2()</ref></computeroutput> for each hole.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SsK</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Kernel</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FT</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>FieldNumberType</computeroutput> convertible to <computeroutput>SsK::FT</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InKWeights</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>Range</computeroutput> whose value type is itself a model of <computeroutput>Range</computeroutput> with value type <computeroutput>InK::FT</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>Cartesian_converter</computeroutput> and <computeroutput>NT_converter</computeroutput> are used to convert objects from <computeroutput>InK</computeroutput> to <computeroutput>SsK</computeroutput>, if they differ.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>P</computeroutput> is a weakly simple, counterclockwise polygon with clockwise oriented holes. </para>
</simplesect>
<simplesect kind="pre"><para>Holes neither intersect each other nor the outer boundary. </para>
</simplesect>
<simplesect kind="pre"><para>All the weights must be (strictly) positive. </para>
</simplesect>
<simplesect kind="pre"><para>Collinear consecutive contour edges must have equal weights. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>max_offset</computeroutput> must be positive.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2SkeletonFunctions_1gae1eec4fe2422502d32906f11306a4979" kindref="member">CGAL::create_interior_straight_skeleton_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__builder__2" kindref="compound">CGAL::Straight_skeleton_builder_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/create_weighted_straight_skeleton_2.h" line="196" column="1" declfile="CGAL/create_weighted_straight_skeleton_2.h" declline="196" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2Extrusion_1ga0d1ccb10934bb54fb88a6174f30dfe49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename PolygonMesh</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::extrude_skeleton</definition>
        <argsstring>(const Polygon &amp;polygon, PolygonMesh &amp;out, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>extrude_skeleton</name>
        <qualifiedname>CGAL::extrude_skeleton</qualifiedname>
        <param>
          <type>const Polygon &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>constructs the straight skeleton-based extrusion of a polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a polygon with holes and a set of weights, the skeleton extrusion is a volume constructed from the weighted straight skeleton by associating a height to the vertices of the skeleton, which corresponds to the time at the vertex. The input polygon is placed at <computeroutput>z = 0</computeroutput>.</para>
<para>This function allows cropping the extruded skeleton at a maximum height, using the optional <computeroutput>maximum_height()</computeroutput> named parameter.</para>
<para>The result is a closed, 2-manifold surface triangle mesh. Note that this mesh can have non-local self-intersections if a maximal height is provided due to possible (geometric) non-manifold occurrences.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonWithHoles</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>SequenceContainer</computeroutput> with value type <computeroutput>InK::Point_2</computeroutput> (e.g. <computeroutput>Polygon_2&lt;InK&gt;</computeroutput>) or a model of <computeroutput>GeneralPolygonWithHoles_2</computeroutput> (e.g. <computeroutput>Polygon_with_holes_2&lt;InK&gt;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>MutableFaceGraph</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon with holes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output polygon mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>weights</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a range of weights, one for each edge of the input polygon </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Range</computeroutput> whose value type is a model of <computeroutput>Range</computeroutput> whose value type is <computeroutput>FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an empty range (uniform weights are used) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Weights should be finite and all of the same sign. Negative weights are used to signify exterior extrusion. Contrary to weighted skeleton functions, a weight <computeroutput>0</computeroutput> can here be used to signify a vertical extrusion of this edge. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If neither <computeroutput>weights</computeroutput> nor <computeroutput>angles</computeroutput> are provided, uniform weights are used. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>angles</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a range of angles, one for each edge of the input polygon. For each contour edge, the angle is the dihedral angle between the <computeroutput>z=0</computeroutput> plane and the desired extrusion plane. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput>Range</computeroutput> whose value type is a model of <computeroutput>Range</computeroutput> whose value type is <computeroutput>FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>an empty range (uniform weights are used) </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>Angles are measured in degrees and should be strictly within <computeroutput>0</computeroutput> and <computeroutput>180</computeroutput> degrees and should be eitger all acute (inward extrusion) or all obtuse (outward extrusion). </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is ignored if the <computeroutput>weights</computeroutput> parameter is provided. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The conversion to weights involves trigonometry and will be inexact, even when using a number type with exact square roots. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_height</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the maximum height of the extrusion </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>FT</computeroutput>, a model of <computeroutput>FieldNumberType</computeroutput> convertible to the kernel type of the polygon. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>unused </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter should not be null, but can be negative; in this case, the polygon is extruded downwards. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>Whether information about the extrusion process should be printed to <computeroutput>std::cout</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of a geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>Kernel</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a CGAL Kernel deduced from the polygon&apos;s point type, using <computeroutput>CGAL::Kernel_traits</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>out</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>boost::graph_traits&lt;PolygonMesh&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>InK::Point_2</computeroutput> as value type. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the internal property map for <computeroutput>CGAL::vertex_point_t</computeroutput> of <computeroutput>out</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the construction was successful, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>polygon</computeroutput> is a weakly simple polygon with holes. </para>
</simplesect>
<simplesect kind="pre"><para>Holes are weakly simple polygons that do not intersect each other or the outer boundary.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStraightSkeleton2OffsetFunctions_1gaee073b6bd62fb5722bad41528647ec30" kindref="member">CGAL::create_interior_weighted_skeleton_and_offset_polygons_with_holes_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Straight__skeleton__2" kindref="compound">CGAL::Straight_skeleton_2</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/extrude_skeleton.h" line="90" column="6" declfile="CGAL/extrude_skeleton.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStraightSkeleton2OffsetFunctions_1ga84423baa5902a7d6c2f8278f93d82f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Target_skeleton</type>
          </param>
          <param>
            <type>class Source_skeleton</type>
          </param>
          <param>
            <type>class Items_converter</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; Target_skeleton &gt;</type>
        <definition>std::shared_ptr&lt; Target_skeleton &gt; CGAL::convert_straight_skeleton_2</definition>
        <argsstring>(Source_skeleton const &amp;s, Items_converted const &amp;ic=Items_converter())</argsstring>
        <name>convert_straight_skeleton_2</name>
        <qualifiedname>CGAL::convert_straight_skeleton_2</qualifiedname>
        <param>
          <type>Source_skeleton const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Items_converted const &amp;</type>
          <declname>ic</declname>
          <defval>Items_converter()</defval>
        </param>
        <briefdescription>
<para>returns a new straight skeleton data structure with the same combinatorial and geometric data as <computeroutput>s</computeroutput> using the items converter <computeroutput>ic</computeroutput> to convert the geometric embedding to the types of the target skeleton. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Target_skeleton</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classStraightSkeleton__2" kindref="compound">StraightSkeleton_2</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Source_skeleton</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classStraightSkeleton__2" kindref="compound">StraightSkeleton_2</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Items_converter</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classStraightSkeletonItemsConverter__2" kindref="compound">StraightSkeletonItemsConverter_2</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Straight__skeleton__items__converter__2" kindref="compound">CGAL::Straight_skeleton_items_converter_2</ref>&lt;SrcSs,TgtSs,NTCV&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Straight__skeleton__converter__2" kindref="compound">CGAL::Straight_skeleton_converter_2</ref>&lt;SrcSs,TgtSs,ItemsCV&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Straight_skeleton_converter_2.h" line="18" column="1" declfile="CGAL/Straight_skeleton_converter_2.h" declline="18" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/arrange_offset_polygons_2.h" line="1" column="1"/>
  </compounddef>
</doxygen>
