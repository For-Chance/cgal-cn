<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Point__set__2" prot="public">CGAL::Point_set_2</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPointSet2NeighborSearch_1gab3b8b4a40e3140bb0579d0a9f6b68ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
        </templateparamlist>
        <type>Dt::Vertex_handle</type>
        <definition>Dt::Vertex_handle CGAL::nearest_neighbor</definition>
        <argsstring>(const Dt &amp;delau, Dt::Vertex_handle v)</argsstring>
        <name>nearest_neighbor</name>
        <qualifiedname>CGAL::nearest_neighbor</qualifiedname>
        <param>
          <type>const Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>Dt::Vertex_handle</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>computes a handle to a vertex <computeroutput>w</computeroutput> of <computeroutput>delau</computeroutput> that is closest to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>v</computeroutput> is the only vertex in <computeroutput>delau</computeroutput>, <computeroutput>NULL</computeroutput> is returned.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Dt</computeroutput> is a CGAL Delaunay triangulation and contains the following subset of types from the concept <computeroutput><ref refid="classPointSetTraits" kindref="compound">PointSetTraits</ref></computeroutput> and from the Delaunay triangulation data type: <itemizedlist>
<listitem>
<para><computeroutput>Dt::Geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Point</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_circulator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_handle</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Compare_distance_2</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/nearest_neighbor_delaunay_2.h" line="23" column="19" declfile="CGAL/nearest_neighbor_delaunay_2.h" declline="23" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet2NeighborSearch_1ga090435625efc6eb912876d3be761be1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::nearest_neighbors</definition>
        <argsstring>(Dt &amp;delau, const Dt::Point &amp;p, Dt::size_type k, OutputIterator res)</argsstring>
        <name>nearest_neighbors</name>
        <qualifiedname>CGAL::nearest_neighbors</qualifiedname>
        <param>
          <type>Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Dt::size_type</type>
          <declname>k</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the <computeroutput>k</computeroutput> nearest neighbors of <computeroutput>p</computeroutput> in <computeroutput>delau</computeroutput>, and places the handles to the corresponding vertices as a sequence of objects of type Vertex_handle in a container of value type of <computeroutput>res</computeroutput> which points to the first object in the sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns an output iterator pointing to the position beyond the end of the sequence.</para>
<para>The function <computeroutput><ref refid="group__PkgPointSet2NeighborSearch_1ga090435625efc6eb912876d3be761be1d" kindref="member">nearest_neighbors()</ref></computeroutput> is the function template version of the k nearest neighbors search on Delaunay triangulations. There are two versions of this function, one taking a point of the Delaunay triangulation and the other taking a vertex handle.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Dt</computeroutput> is a CGAL Delaunay triangulation and contains the following subset of types from the concept <computeroutput><ref refid="classPointSetTraits" kindref="compound">PointSetTraits</ref></computeroutput> and from the Delaunay triangulation data type: <itemizedlist>
<listitem>
<para><computeroutput>Dt::Geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_handle</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_iterator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_circulator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Face</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Face_handle</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Locate_type</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Point</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Compute_squared_distance_2</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/nearest_neighbor_delaunay_2.h" line="64" column="16" declfile="CGAL/nearest_neighbor_delaunay_2.h" declline="64" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet2NeighborSearch_1ga6ee8a29dabc0e28f29f350977b78fd18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::nearest_neighbors</definition>
        <argsstring>(Dt &amp;delau, Dt::Vertex_handle v, Dt::size_type k, OutputIterator res)</argsstring>
        <name>nearest_neighbors</name>
        <qualifiedname>CGAL::nearest_neighbors</qualifiedname>
        <param>
          <type>Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>Dt::Vertex_handle</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Dt::size_type</type>
          <declname>k</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the <computeroutput>k</computeroutput> nearest neighbors of <computeroutput>v</computeroutput> (including <computeroutput>v</computeroutput>) in <computeroutput>delau</computeroutput>, and places them as a sequence of objects of type Vertex_handle in a container of value type of <computeroutput>res</computeroutput> which points to the first object in the sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns an output iterator pointing to the position beyond the end of the sequence.</para>
<para>The function <computeroutput><ref refid="group__PkgPointSet2NeighborSearch_1ga090435625efc6eb912876d3be761be1d" kindref="member">nearest_neighbors()</ref></computeroutput> is the function template version of the k nearest neighbors search on Delaunay triangulations. There are two versions of this function, one taking a point of the Delaunay triangulation and the other taking a vertex handle.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Dt</computeroutput> is a CGAL Delaunay triangulation and contains the following subset of types from the concept <computeroutput><ref refid="classPointSetTraits" kindref="compound">PointSetTraits</ref></computeroutput> and from the Delaunay triangulation data type: <itemizedlist>
<listitem>
<para><computeroutput>Dt::Geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_handle</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_iterator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_circulator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Point</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Compute_squared_distance_2</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/nearest_neighbor_delaunay_2.h" line="97" column="16" declfile="CGAL/nearest_neighbor_delaunay_2.h" declline="97" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet2RangeSearch_1gaf189c64e1f7a1fe09b332c5f32c2c665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class Circle</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::range_search</definition>
        <argsstring>(Dt &amp;delau, const Circle &amp;C, OutputIterator res)</argsstring>
        <name>range_search</name>
        <qualifiedname>CGAL::range_search</qualifiedname>
        <param>
          <type>Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>const Circle &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes handles to all vertices contained in the closure of disk <computeroutput>C</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed vertex handles will be placed as a sequence of objects in a container of value type of <computeroutput>res</computeroutput> which points to the first object in the sequence. The function returns an output iterator pointing to the position beyond the end of the sequence. <computeroutput>delau</computeroutput>$ is the CGAL Delaunay triangulation on which we perform the range search operation.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem>
<para><computeroutput>Dt</computeroutput> is a CGAL Delaunay triangulation and contains the following subset of types from the concept <computeroutput><ref refid="classPointSetTraits" kindref="compound">PointSetTraits</ref></computeroutput> and from the Delaunay triangulation data type: <itemizedlist>
<listitem>
<para><computeroutput>Dt::Geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_handle</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_circulator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_iterator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Point</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Bounded_side_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Construct_center_2</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para>the template parameter <computeroutput>Circle</computeroutput> corresponds to <computeroutput>Dt::Geom_traits::Cricle_2</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/range_search_delaunay_2.h" line="49" column="16" declfile="CGAL/range_search_delaunay_2.h" declline="49" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet2RangeSearch_1ga62f1643582cbeb6a69e3d93cf3ce02d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::range_search</definition>
        <argsstring>(Dt &amp;delau, const Dt::Point &amp;a, const Dt::Point &amp;b, const Dt::Point &amp;c, OutputIterator res)</argsstring>
        <name>range_search</name>
        <qualifiedname>CGAL::range_search</qualifiedname>
        <param>
          <type>Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes handles to all vertices contained in the closure of the triangle <computeroutput>(a,b,c)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>a</computeroutput>, <computeroutput>b</computeroutput>, and <computeroutput>c</computeroutput> must not be collinear. The computed vertex handles will be placed as a sequence of objects in a container of value type of <computeroutput>res</computeroutput> which points to the first object in the sequence. The function returns an output iterator pointing to the position beyond the end of the sequence. <computeroutput>delau</computeroutput> is the CGAL Delaunay triangulation on which we perform the range search operation.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Dt</computeroutput> is a CGAL Delaunay triangulation and contains the following subset of types from the concept <computeroutput><ref refid="classPointSetTraits" kindref="compound">PointSetTraits</ref></computeroutput> and from the Delaunay triangulation data type: <itemizedlist>
<listitem>
<para><computeroutput>Dt::Geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_handle</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_circulator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_iterator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Point</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Circle_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Bounded_side_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Construct_center_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Orientation_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Construct_circle_2</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/range_search_delaunay_2.h" line="84" column="16" declfile="CGAL/range_search_delaunay_2.h" declline="84" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet2RangeSearch_1ga38a178552f8af14b4ba65ce68a1f9b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::range_search</definition>
        <argsstring>(Dt &amp;delau, const Dt::Point &amp;a, const Dt::Point &amp;b, const Dt::Point &amp;c, const Dt::Point &amp;d, OutputIterator res)</argsstring>
        <name>range_search</name>
        <qualifiedname>CGAL::range_search</qualifiedname>
        <param>
          <type>Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes handles to all vertices contained in the closure of the iso-rectangle <computeroutput>(a,b,c,d)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>a</computeroutput> is the upper left point, <computeroutput>b</computeroutput> the lower left, <computeroutput>c</computeroutput> the lower right and <computeroutput>d</computeroutput> the upper right point of the iso rectangle. The computed vertex handles will be placed as a sequence of objects in a container of value type of <computeroutput>res</computeroutput> which points to the first object in the sequence. The function returns an output iterator pointing to the position beyond the end of the sequence. <computeroutput>delau</computeroutput> is the CGAL Delaunay triangulation on which we perform the range search operation.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><computeroutput>Dt</computeroutput> is a CGAL Delaunay triangulation and contains the following subset of types from the concept <computeroutput><ref refid="classPointSetTraits" kindref="compound">PointSetTraits</ref></computeroutput> and from the Delaunay triangulation data type: <itemizedlist>
<listitem>
<para><computeroutput>Dt::Geom_traits</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_handle</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_circulator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Vertex_iterator</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Point</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Circle_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Bounded_side_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Construct_center_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Orientation_2</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>Dt::Geom_traits::Construct_circle_2</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/range_search_delaunay_2.h" line="119" column="16" declfile="CGAL/range_search_delaunay_2.h" declline="119" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet2RangeSearch_1gacf0d03e86c48edc2563a0339a47648de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class Circle</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Pred</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::range_search</definition>
        <argsstring>(Dt &amp;delau, const Circle &amp;C, OutputIterator res, Pred &amp;pred, bool return_if_succeded)</argsstring>
        <name>range_search</name>
        <qualifiedname>CGAL::range_search</qualifiedname>
        <param>
          <type>Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>const Circle &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>res</declname>
        </param>
        <param>
          <type>Pred &amp;</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_if_succeded</declname>
        </param>
        <briefdescription>
<para>computes handles to all vertices contained in the closure of disk <computeroutput>C</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed vertex handles will be placed as a sequence of objects in a container of value type of <computeroutput>res</computeroutput> which points to the first object in the sequence. The function returns an output iterator pointing to the position beyond the end of the sequence. <computeroutput>delau</computeroutput> is the CGAL Delaunay triangulation on that we perform the range search operation. <computeroutput>pred</computeroutput> controls the search operation. If <computeroutput>return_if_succeded</computeroutput> is <computeroutput>true</computeroutput>, we will end the search after the first success of the predicate, otherwise we will continue till the search is finished.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para>For the requirements of <computeroutput>Dt</computeroutput> see the description for the non-predicate version.</para>
<para>Requirements of <computeroutput>Pred</computeroutput>: <itemizedlist>
<listitem>
<para><computeroutput>void set_result(bool);</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>bool operator()(const Point&amp;);</computeroutput> </para>
</listitem>
</itemizedlist>
The <computeroutput>operator()</computeroutput> is used for testing the current point in the search operation. If this operator returns <computeroutput>true</computeroutput> and <computeroutput>return_if_succeded</computeroutput> is <computeroutput>true</computeroutput>, the range search will stop. Otherwise the range search operation will continue. Member function <computeroutput>set_result()</computeroutput> can be used to store the result of the range search in the function object. The result will be <computeroutput>true</computeroutput> if the last call to the <computeroutput>operator()</computeroutput> of the predicate returned <computeroutput>true</computeroutput>, <computeroutput>false</computeroutput> otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/range_search_delaunay_2.h" line="151" column="16" declfile="CGAL/range_search_delaunay_2.h" declline="151" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet2RangeSearch_1ga1e2bae672dcdb46dedbf0cab8fb51b09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Pred</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::range_search</definition>
        <argsstring>(Dt &amp;delau, const Dt::Point &amp;a, const Dt::Point &amp;b, const Dt::Point &amp;c, OutputIterator res, Pred &amp;pred, bool return_if_succeded)</argsstring>
        <name>range_search</name>
        <qualifiedname>CGAL::range_search</qualifiedname>
        <param>
          <type>Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>res</declname>
        </param>
        <param>
          <type>Pred &amp;</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_if_succeded</declname>
        </param>
        <briefdescription>
<para>computes handles to all vertices contained in the closure of the triangle <computeroutput>(a,b,c)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>a</computeroutput>, <computeroutput>b</computeroutput>, and <computeroutput>c</computeroutput> must not be collinear. The computed vertex handles will be placed as a sequence of objects in a container of value type of <computeroutput>res</computeroutput> which points to the first object in the sequence. The function returns an output iterator pointing to the position beyond the end of the sequence. <computeroutput>delau</computeroutput> is the CGAL Delaunay triangulation on which we perform the range search operation. <computeroutput>pred</computeroutput> controls the search operation. If <computeroutput>return_if_succeded</computeroutput> is <computeroutput>true</computeroutput>, we will end the search after the first success of the predicate, otherwise we will continue till the search is finished.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para>For the requirements of <computeroutput>Dt</computeroutput> see the description for the non-predicate version.</para>
<para>For the requirements of <computeroutput>Pred</computeroutput> see the description above. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/range_search_delaunay_2.h" line="177" column="16" declfile="CGAL/range_search_delaunay_2.h" declline="177" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPointSet2RangeSearch_1ga7bf45fde569d67d4f7905d179a3b9b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dt</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Pred</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::range_search</definition>
        <argsstring>(Dt &amp;delau, const Dt::Point &amp;a, const Dt::Point &amp;b, const Dt::Point &amp;c, const Dt::Point &amp;d, OutputIterator res, Pred &amp;pred, bool return_if_succeded)</argsstring>
        <name>range_search</name>
        <qualifiedname>CGAL::range_search</qualifiedname>
        <param>
          <type>Dt &amp;</type>
          <declname>delau</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const Dt::Point &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>res</declname>
        </param>
        <param>
          <type>Pred &amp;</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_if_succeded</declname>
        </param>
        <briefdescription>
<para>computes handles to all vertices contained in the closure of the iso-rectangle <computeroutput>(a,b,c,d)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>a</computeroutput> is the upper left point, <computeroutput>b</computeroutput> the lower left, <computeroutput>c</computeroutput> the lower right and <computeroutput>d</computeroutput> the upper right point of the iso rectangle. The computed vertex handles will be placed as a sequence of objects in a container of value type of <computeroutput>res</computeroutput> which points to the first object in the sequence. The function returns an output iterator pointing to the position beyond the end of the sequence. <computeroutput>delau</computeroutput> is the CGAL Delaunay triangulation on which we perform the range search operation. <computeroutput>pred</computeroutput> controls the search operation. If <computeroutput>return_if_succeded</computeroutput> is <computeroutput>true</computeroutput>, we will end the search after the first success of the predicate, otherwise we will continue till the search is finished.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para>For the requirements of <computeroutput>Dt</computeroutput> see the description for the non-predicate version.</para>
<para>For the requirements of <computeroutput>Pred</computeroutput> see the description above. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/range_search_delaunay_2.h" line="202" column="16" declfile="CGAL/range_search_delaunay_2.h" declline="202" declcolumn="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/nearest_neighbor_delaunay_2.h" line="1" column="1"/>
  </compounddef>
</doxygen>
