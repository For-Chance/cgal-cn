<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Segment__Delaunay__graph__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Segment_Delaunay_graph_2</compoundname>
    <derivedcompoundref refid="classCGAL_1_1Segment__Delaunay__graph__hierarchy__2" prot="public" virt="non-virtual">CGAL::Segment_Delaunay_graph_hierarchy_2&lt; Gt, St, STag, DS &gt;</derivedcompoundref>
    <includes local="no">CGAL/Segment_Delaunay_graph_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Gt</type>
      </param>
      <param>
        <type>typename St</type>
      </param>
      <param>
        <type>typename DS</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1aff6c4ee1b70d55dde320c9886f27cbb2" prot="public" static="no">
        <type>Gt</type>
        <definition>typedef Gt CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Geom_traits</definition>
        <argsstring></argsstring>
        <name>Geom_traits</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Geom_traits</qualifiedname>
        <briefdescription>
<para>Type for the geometric traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="57" column="12" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1ab61d4320d4111a66959197ad0021756b" prot="public" static="no">
        <type>St</type>
        <definition>typedef St CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Storage_traits</definition>
        <argsstring></argsstring>
        <name>Storage_traits</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Storage_traits</qualifiedname>
        <briefdescription>
<para>Type for the storage traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="62" column="12" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a644b112649bab16159b430ae4932c1ab" prot="public" static="no">
        <type>DS</type>
        <definition>typedef DS CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Data_structure</definition>
        <argsstring></argsstring>
        <name>Data_structure</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Data_structure</qualifiedname>
        <briefdescription>
<para>Type for the underlying data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="67" column="12" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a98e07e07272cd63907891704236b0316" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a644b112649bab16159b430ae4932c1ab" kindref="member">Data_structure</ref></type>
        <definition>typedef Data_structure CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Triangulation_data_structure</definition>
        <argsstring></argsstring>
        <name>Triangulation_data_structure</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Triangulation_data_structure</qualifiedname>
        <briefdescription>
<para>This type has been added so that the <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound">Segment_Delaunay_graph_2</ref></computeroutput> class is a model of the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Voronoi_diagram_2.tag">DelaunayGraph_2</ref></computeroutput> concept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="73" column="24" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" prot="public" static="no">
        <type>DS::size_type</type>
        <definition>typedef DS::size_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::size_type</qualifiedname>
        <briefdescription>
<para>Size type (an unsigned integral type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="78" column="32" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" prot="public" static="no">
        <type>Gt::Point_2</type>
        <definition>typedef Gt::Point_2 CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Point_2</definition>
        <argsstring></argsstring>
        <name>Point_2</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Point_2</qualifiedname>
        <briefdescription>
<para>Type for the point defined in the geometric traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="83" column="30" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a6f9279b27e0be7ee36cad459ed086075" prot="public" static="no">
        <type>Gt::Site_2</type>
        <definition>typedef Gt::Site_2 CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Site_2</definition>
        <argsstring></argsstring>
        <name>Site_2</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Site_2</qualifiedname>
        <briefdescription>
<para>Type for the segment Delaunay graph site, defined in the geometric traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="88" column="29" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a0d263f63754b0c64bdf395917c10233d" prot="public" static="no">
        <type>Storage_traits::Storage_site_2</type>
        <definition>typedef Storage_traits::Storage_site_2 CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Storage_site_2</definition>
        <argsstring></argsstring>
        <name>Storage_site_2</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Storage_site_2</qualifiedname>
        <briefdescription>
<para>Type for the segment Delaunay storage site, defined in the storage traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="93" column="49" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a964649be1037cdd27590b8f7d2822f94" prot="public" static="no">
        <type>Storage_traits::Point_container</type>
        <definition>typedef Storage_traits::Point_container CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Point_container</definition>
        <argsstring></argsstring>
        <name>Point_container</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Point_container</qualifiedname>
        <briefdescription>
<para>Type for the container of points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="98" column="50" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a73bb7134d819a60d94b4c0942beb0291" prot="public" static="no">
        <type>Storage_traits::Point_handle</type>
        <definition>typedef Storage_traits::Point_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Point_handle</definition>
        <argsstring></argsstring>
        <name>Point_handle</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Point_handle</qualifiedname>
        <briefdescription>
<para><ref refid="classHandle" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Handle</ref> type for points in the point container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="103" column="47" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iterators and Handles</header>
      <description><para>The vertices and faces of the segment Delaunay graph are accessed through <computeroutput>handles</computeroutput>, <computeroutput>iterators</computeroutput> and <computeroutput>circulators</computeroutput>.</para>
<para>The iterators and circulators are all bidirectional and non-mutable. The circulators and iterators are assignable to the corresponding handle types, and they are also convertible to the corresponding handles. The edges of the segment Delaunay graph can also be visited through iterators and circulators, the edge circulators and iterators are also bidirectional and non-mutable. In the following, we call <emphasis>infinite</emphasis> any face or edge incident to the infinite vertex and the infinite vertex itself. Any other feature (face, edge or vertex) of the segment Delaunay graph is said to be <emphasis>finite</emphasis>. Some iterators (the <computeroutput>All</computeroutput> iterators ) allow to visit finite or infinite features while the others (the <computeroutput>Finite</computeroutput> iterators) visit only finite features. Circulators visit both infinite and finite features. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a961dd5d5acab82d04ab89ccb4c17ea93" prot="public" static="no">
        <type>DS::Edge</type>
        <definition>typedef DS::Edge CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Edge</definition>
        <argsstring></argsstring>
        <name>Edge</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Edge</qualifiedname>
        <briefdescription>
<para>The edge type. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a961dd5d5acab82d04ab89ccb4c17ea93" kindref="member">Edge(f,i)</ref></computeroutput> is the edge common to faces <computeroutput>f</computeroutput> and <computeroutput>f.neighbor(i)</computeroutput>. It is also the edge joining the vertices <computeroutput>vertex(cw(i))</computeroutput> and <computeroutput>vertex(ccw(i))</computeroutput> of <computeroutput>f</computeroutput>. <simplesect kind="pre"><para><computeroutput>i</computeroutput> must be <computeroutput>0</computeroutput>, <computeroutput>1</computeroutput> or <computeroutput>2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="133" column="27" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a3b4edd7dcd894d79ec9a22237525fff5" prot="public" static="no">
        <type>DS::Vertex</type>
        <definition>typedef DS::Vertex CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Vertex</definition>
        <argsstring></argsstring>
        <name>Vertex</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Vertex</qualifiedname>
        <briefdescription>
<para>Type for a vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="138" column="29" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a201b849093da7cccb3f74ef3bdf6d190" prot="public" static="no">
        <type>DS::Face</type>
        <definition>typedef DS::Face CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Face</definition>
        <argsstring></argsstring>
        <name>Face</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Face</qualifiedname>
        <briefdescription>
<para>Type for a face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="143" column="27" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" prot="public" static="no">
        <type>DS::Vertex_handle</type>
        <definition>typedef DS::Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Vertex_handle</qualifiedname>
        <briefdescription>
<para>Type for a handle to a vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="148" column="36" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1aabcdc2d8f964ce64286285efd7b1fcc1" prot="public" static="no">
        <type>DS::Face_handle</type>
        <definition>typedef DS::Face_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Face_handle</definition>
        <argsstring></argsstring>
        <name>Face_handle</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Face_handle</qualifiedname>
        <briefdescription>
<para>Type for a handle to a face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="153" column="34" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a546dc147bdd1a3071f3030912520c6b2" prot="public" static="no">
        <type>DS::Vertex_circulator</type>
        <definition>typedef DS::Vertex_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Vertex_circulator</definition>
        <argsstring></argsstring>
        <name>Vertex_circulator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Vertex_circulator</qualifiedname>
        <briefdescription>
<para>Type for a circulator over vertices incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="158" column="40" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a70303659970be1b00476db944ab9d312" prot="public" static="no">
        <type>DS::Face_circulator</type>
        <definition>typedef DS::Face_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Face_circulator</definition>
        <argsstring></argsstring>
        <name>Face_circulator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Face_circulator</qualifiedname>
        <briefdescription>
<para>Type for a circulator over faces incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="163" column="38" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a5cc24d678431de42b2577a7e20e8415d" prot="public" static="no">
        <type>DS::Edge_circulator</type>
        <definition>typedef DS::Edge_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Edge_circulator</definition>
        <argsstring></argsstring>
        <name>Edge_circulator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Edge_circulator</qualifiedname>
        <briefdescription>
<para>Type for a circulator over edges incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="168" column="38" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a9483678cb338f7f6cd653e080e04fbd9" prot="public" static="no">
        <type>DS::Vertex_iterator</type>
        <definition>typedef DS::Vertex_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::All_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>All_vertices_iterator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::All_vertices_iterator</qualifiedname>
        <briefdescription>
<para>Type for an iterator over all vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="173" column="38" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1ac49511156f955fc742814c228e037eca" prot="public" static="no">
        <type>DS::Face_iterator</type>
        <definition>typedef DS::Face_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::All_faces_iterator</definition>
        <argsstring></argsstring>
        <name>All_faces_iterator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::All_faces_iterator</qualifiedname>
        <briefdescription>
<para>Type for an iterator over all faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="178" column="36" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a3cb65e75134b2279d0f31440d6c4825f" prot="public" static="no">
        <type>DS::Edge_iterator</type>
        <definition>typedef DS::Edge_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::All_edges_iterator</definition>
        <argsstring></argsstring>
        <name>All_edges_iterator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::All_edges_iterator</qualifiedname>
        <briefdescription>
<para>Type for an iterator over all edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="183" column="36" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a6865572600bfd51a155b356ce9708900" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Finite_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_vertices_iterator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Finite_vertices_iterator</qualifiedname>
        <briefdescription>
<para>Type for an iterator over finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="188" column="26" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1ae6e3d8bbaee3f8045e3a28047a2d9ec2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Finite_faces_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_faces_iterator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Finite_faces_iterator</qualifiedname>
        <briefdescription>
<para>Type for an iterator over finite faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="193" column="26" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a1386ae2da6e5328ba8e2fb4d7139bfcc" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Finite_edges_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_edges_iterator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Finite_edges_iterator</qualifiedname>
        <briefdescription>
<para>Type for an iterator over finite edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="198" column="26" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Site Iterators</header>
      <description><para>The following iterators allow respectively to visit all sites.</para>
<para>These iterators are non-mutable, bidirectional and their value type is <computeroutput>Site_2</computeroutput>. They are all invalidated by any change in the segment Delaunay graph. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1af788737a5aad8c8371813389805e631b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Input_sites_iterator</definition>
        <argsstring></argsstring>
        <name>Input_sites_iterator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Input_sites_iterator</qualifiedname>
        <briefdescription>
<para>Type for a bidirectional iterator over all input sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="217" column="26" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Segment__Delaunay__graph__2_1a811a22cf59ece05315f8782e596e3c01" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Output_sites_iterator</definition>
        <argsstring></argsstring>
        <name>Output_sites_iterator</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Output_sites_iterator</qualifiedname>
        <briefdescription>
<para>Type for a bidirectional iterator over all output sites (the sites in the Delaunay graph). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="223" column="26" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ac99449fb3651fd2587bf2f8b59ab660f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1af788737a5aad8c8371813389805e631b" kindref="member">Input_sites_iterator</ref></type>
        <definition>Input_sites_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::input_sites_begin</definition>
        <argsstring>() const</argsstring>
        <name>input_sites_begin</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::input_sites_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary input site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="417" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a47cd3858386b0b2c85557e07856939dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1af788737a5aad8c8371813389805e631b" kindref="member">Input_sites_iterator</ref></type>
        <definition>Input_sites_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::input_sites_end</definition>
        <argsstring>() const</argsstring>
        <name>input_sites_end</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::input_sites_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="422" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a9aa5c8c9b078d5787fc93d7d92861a63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a811a22cf59ece05315f8782e596e3c01" kindref="member">Output_sites_iterator</ref></type>
        <definition>Output_sites_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::output_sites_begin</definition>
        <argsstring>() const</argsstring>
        <name>output_sites_begin</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::output_sites_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary output site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="427" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a375bacc9efc9ae442d1553b2e0ab666c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a811a22cf59ece05315f8782e596e3c01" kindref="member">Output_sites_iterator</ref></type>
        <definition>Output_sites_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::output_sites_end</definition>
        <argsstring>() const</argsstring>
        <name>output_sites_end</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::output_sites_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="432" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <description><para>In addition to the default and copy constructors the following constructors are defined: </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ae7b711ae6ec529623afbf9fbadb5f8d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Segment_Delaunay_graph_2</definition>
        <argsstring>(Gt gt=Gt(), St st=St())</argsstring>
        <name>Segment_Delaunay_graph_2</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Segment_Delaunay_graph_2</qualifiedname>
        <param>
          <type>Gt</type>
          <declname>gt</declname>
          <defval>Gt()</defval>
        </param>
        <param>
          <type>St</type>
          <declname>st</declname>
          <defval>St()</defval>
        </param>
        <briefdescription>
<para>Creates the segment Delaunay graph using <computeroutput>gt</computeroutput> as geometric traits and <computeroutput>st</computeroutput> as storage traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a77e6d212e45bbce3b3582c0ed49de4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Input_iterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::Segment_Delaunay_graph_2</definition>
        <argsstring>(Input_iterator first, Input_iterator beyond, Gt gt=Gt(), St gt=St())</argsstring>
        <name>Segment_Delaunay_graph_2</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::Segment_Delaunay_graph_2</qualifiedname>
        <param>
          <type>Input_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Input_iterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>Gt</type>
          <declname>gt</declname>
          <defval>Gt()</defval>
        </param>
        <param>
          <type>St</type>
          <declname>gt</declname>
          <defval>St()</defval>
        </param>
        <briefdescription>
<para>Creates the segment Delaunay graph using <computeroutput>gt</computeroutput> as geometric traits, <computeroutput>st</computeroutput> as storage traits, and inserts all sites in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>Input_iterator</computeroutput> must be a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. The value type of <computeroutput>Input_iterator</computeroutput> must be either <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref></computeroutput> or <computeroutput>Site_2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="244" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ac22960b106fdd0096dcc0b9f2038adb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1aff6c4ee1b70d55dde320c9886f27cbb2" kindref="member">Geom_traits</ref> &amp;</type>
        <definition>const Geom_traits &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::geom_traits</definition>
        <argsstring>() const</argsstring>
        <name>geom_traits</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::geom_traits</qualifiedname>
        <briefdescription>
<para>Returns a reference to the segment Delaunay graph geometric traits object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="255" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a9a42d008d34a5d1565dff38f0c4afb0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab61d4320d4111a66959197ad0021756b" kindref="member">Storage_traits</ref> &amp;</type>
        <definition>const Storage_traits &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::storage_traits</definition>
        <argsstring>() const</argsstring>
        <name>storage_traits</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::storage_traits</qualifiedname>
        <briefdescription>
<para>Returns a reference to the segment Delaunay graph storage traits object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="260" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ad4e99f21b4d29d9c7f6b4b1a0951a121" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a964649be1037cdd27590b8f7d2822f94" kindref="member">Point_container</ref> &amp;</type>
        <definition>const Point_container &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::point_container</definition>
        <argsstring>() const</argsstring>
        <name>point_container</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::point_container</qualifiedname>
        <briefdescription>
<para>Returns a reference to the point container object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="265" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a3c5ab5beb60cc7c50ea4841e5108b087" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a644b112649bab16159b430ae4932c1ab" kindref="member">Data_structure</ref> &amp;</type>
        <definition>const Data_structure &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::data_structure</definition>
        <argsstring>() const</argsstring>
        <name>data_structure</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::data_structure</qualifiedname>
        <briefdescription>
<para>Returns a reference to the segment Delaunay graph data structure object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="271" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1aa681252013b753e58d3f3864ec5e390f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a644b112649bab16159b430ae4932c1ab" kindref="member">Data_structure</ref> &amp;</type>
        <definition>const Data_structure &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::tds</definition>
        <argsstring>() const</argsstring>
        <name>tds</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::tds</qualifiedname>
        <briefdescription>
<para>Same as <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a3c5ab5beb60cc7c50ea4841e5108b087" kindref="member">data_structure()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It has been added for compliance to the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Voronoi_diagram_2.tag">DelaunayGraph_2</ref></computeroutput> concept. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="276" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ace396a1db19375a56ab024daee16551c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::dimension</qualifiedname>
        <briefdescription>
<para>Returns the dimension of the segment Delaunay graph. </para>
        </briefdescription>
        <detaileddescription>
<para>The dimension is <formula id="0">$ -1$</formula> if the graph contains no sites, <formula id="1">$ 0$</formula> if the graph contains one site, <formula id="2">$ 1$</formula> if it contains two sites and <formula id="3">$ 2$</formula> if it contains three or more sites. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="284" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1aeb78ff99737811fd9fbdeb859f2f87cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::number_of_vertices</qualifiedname>
        <briefdescription>
<para>Returns the number of finite vertices of the segment Delaunay graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="289" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1af829b9f6600f58de9bccab1c56170c87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::number_of_faces</definition>
        <argsstring>() const</argsstring>
        <name>number_of_faces</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::number_of_faces</qualifiedname>
        <briefdescription>
<para>Returns the number of faces (both finite and infinite) of the segment Delaunay graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="295" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a873f18ec3bd12c647c684b49f99ac910" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::number_of_input_sites</definition>
        <argsstring>() const</argsstring>
        <name>number_of_input_sites</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::number_of_input_sites</qualifiedname>
        <briefdescription>
<para>Return the number of input sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="300" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a110e6a2e70491ffe5109b8f128999e60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::number_of_output_sites</definition>
        <argsstring>() const</argsstring>
        <name>number_of_output_sites</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::number_of_output_sites</qualifiedname>
        <briefdescription>
<para>Return the number of output sites. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equal to the number of vertices in the segment Delaunay graph. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="306" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a7e1e0b3096cd2f93157ad71e2a155f50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1aabcdc2d8f964ce64286285efd7b1fcc1" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::infinite_face</definition>
        <argsstring>() const</argsstring>
        <name>infinite_face</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::infinite_face</qualifiedname>
        <briefdescription>
<para>Returns a face incident to the <computeroutput>infinite_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="311" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1abc11b8fd15d62a3cc469c2dd907c1401" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::infinite_vertex</definition>
        <argsstring>() const</argsstring>
        <name>infinite_vertex</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::infinite_vertex</qualifiedname>
        <briefdescription>
<para>Returns the <computeroutput>infinite_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="316" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a32a4f10cc2ccb876c82ac669fa80701e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::finite_vertex</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertex</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::finite_vertex</qualifiedname>
        <briefdescription>
<para>Returns a vertex distinct from the <computeroutput>infinite_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The number of sites in the segment Delaunay graph must be at least one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="322" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Finite Face, Edge and Vertex Iterators</header>
      <description><para>The following iterators allow respectively to visit finite faces, finite edges and finite vertices of the segment Delaunay graph.</para>
<para>These iterators are non-mutable, bidirectional and their value types are respectively <computeroutput>Face</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. They are all invalidated by any change in the segment Delaunay graph. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a9253b1d8e0294f6b9ba3b9dd9dd309ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a6865572600bfd51a155b356ce9708900" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::finite_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_begin</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::finite_vertices_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="337" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a0e30fb7490bb6f5794d7617ac50e59b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a6865572600bfd51a155b356ce9708900" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::finite_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_end</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::finite_vertices_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="342" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a2d1b5ff5235f6ee585a4cdffac2a71ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a1386ae2da6e5328ba8e2fb4d7139bfcc" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::finite_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges_begin</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::finite_edges_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="347" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a299e492f4cb896fd575755d3bc622d29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a1386ae2da6e5328ba8e2fb4d7139bfcc" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::finite_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges_end</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::finite_edges_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="352" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a1eacc659c42f3d2e48677c24b857e501" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ae6e3d8bbaee3f8045e3a28047a2d9ec2" kindref="member">Finite_faces_iterator</ref></type>
        <definition>Finite_faces_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::finite_faces_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_faces_begin</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::finite_faces_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="357" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a05ddcd579436fbfb9e1481d6541e1130" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ae6e3d8bbaee3f8045e3a28047a2d9ec2" kindref="member">Finite_faces_iterator</ref></type>
        <definition>Finite_faces_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::finite_faces_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_faces_end</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::finite_faces_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="362" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Infinite Face, Edge, and Vertex Iterators</header>
      <description><para>The following iterators allow respectively to visit all (both finite and infinite) faces, edges and vertices of the segment Delaunay graph.</para>
<para>These iterators are non-mutable, bidirectional and their value types are respectively <computeroutput>Face</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. They are all invalidated by any change in the segment Delaunay graph. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a98a5678a7f3989208bcf797a9f19f70a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9483678cb338f7f6cd653e080e04fbd9" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::all_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_begin</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::all_vertices_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="378" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a7e9e44d8f2de87613f4613d663a7ce8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9483678cb338f7f6cd653e080e04fbd9" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::all_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_end</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::all_vertices_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="383" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1afc4adc111ed17626459aae6cdd9809d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a3cb65e75134b2279d0f31440d6c4825f" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::all_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_edges_begin</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::all_edges_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="388" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a3a411d83e179f46609dd277198b45284" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a3cb65e75134b2279d0f31440d6c4825f" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::all_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>all_edges_end</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::all_edges_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="393" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a797fe4428141ff2925ccfbc324ebdd31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ac49511156f955fc742814c228e037eca" kindref="member">All_faces_iterator</ref></type>
        <definition>All_faces_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::all_faces_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_faces_begin</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::all_faces_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="398" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a87f6cef1f8c431c1874a9891b51a7ee5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ac49511156f955fc742814c228e037eca" kindref="member">All_faces_iterator</ref></type>
        <definition>All_faces_iterator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::all_faces_end</definition>
        <argsstring>() const</argsstring>
        <name>all_faces_end</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::all_faces_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="403" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Face, Edge and Vertex Circulators</header>
      <description><para>The <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound">Segment_Delaunay_graph_2</ref></computeroutput> class also provides circulators that allow to visit respectively all faces or edges incident to a given vertex or all vertices adjacent to a given vertex.</para>
<para>These circulators are non-mutable and bidirectional. The operator <computeroutput>operator++</computeroutput> moves the circulator counterclockwise around the vertex while the <computeroutput>operator-</computeroutput> moves clockwise. A face circulator is invalidated by any modification of the face pointed to. An edge circulator is invalidated by any modification in one of the two faces incident to the edge pointed to. A vertex circulator is invalidated by any modification in any of the faces adjacent to the vertex pointed to.</para>
<para>Applied on the <computeroutput>infinite_vertex</computeroutput> the above methods allow to visit the vertices on the convex hull and the infinite edges and faces. Note that a counterclockwise traversal of the vertices adjacent to the <computeroutput>infinite_vertex</computeroutput> is a clockwise traversal of the convex hull. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a5e2930d0ae146011d7020dbbeebb98ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a70303659970be1b00476db944ab9d312" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::incident_faces</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_faces</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::incident_faces</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary face incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="462" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a72357ff62983e5e7da76ab88e8d4ca27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a70303659970be1b00476db944ab9d312" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::incident_faces</definition>
        <argsstring>(Vertex_handle v, Face_handle f) const</argsstring>
        <name>incident_faces</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::incident_faces</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1aabcdc2d8f964ce64286285efd7b1fcc1" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="468" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1aa30693cf070503b0f9c8fda2f2cade4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5cc24d678431de42b2577a7e20e8415d" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::incident_edges</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_edges</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::incident_edges</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary edge incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="474" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a4c916443215b0386f988f4822398161c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5cc24d678431de42b2577a7e20e8415d" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::incident_edges</definition>
        <argsstring>(Vertex_handle v, Face_handle f) const</argsstring>
        <name>incident_edges</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::incident_edges</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1aabcdc2d8f964ce64286285efd7b1fcc1" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at the first edge of <computeroutput>f</computeroutput> incident to <computeroutput>v</computeroutput>, in counterclockwise order around <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="481" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a01c8f3250c5d0d6584317d22df260b05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a546dc147bdd1a3071f3030912520c6b2" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::incident_vertices</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_vertices</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::incident_vertices</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary vertex incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="487" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a694dfb542456d0aa2186fa60245418a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a546dc147bdd1a3071f3030912520c6b2" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::incident_vertices</definition>
        <argsstring>(Vertex_handle v, Face_handle f) const</argsstring>
        <name>incident_vertices</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::incident_vertices</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1aabcdc2d8f964ce64286285efd7b1fcc1" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at the first vertex of <computeroutput>f</computeroutput> adjacent to <computeroutput>v</computeroutput> in counterclockwise order around <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="494" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <description><para>The class <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound">Segment_Delaunay_graph_2</ref></computeroutput> provides methods to test the finite or infinite character of any feature. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ace15a75982eaf86f1c7d2507cf80a870" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::is_infinite</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff <computeroutput>v</computeroutput> is the <computeroutput>infinite_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="506" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a47f6e41999c64bc3f915ddda91d6a669" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::is_infinite</definition>
        <argsstring>(Face_handle f) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1aabcdc2d8f964ce64286285efd7b1fcc1" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff face <computeroutput>f</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="511" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a125ba2fc60742a07c85986ff73c2dc53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::is_infinite</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1aabcdc2d8f964ce64286285efd7b1fcc1" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>(f,i)</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="516" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ad3b42d6dc006c704c4759f820ff3226f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::is_infinite</definition>
        <argsstring>(Edge e) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a961dd5d5acab82d04ab89ccb4c17ea93" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>e</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="521" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a92e9bea4999d87150c894635e264b2f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::is_infinite</definition>
        <argsstring>(Edge_circulator ec) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5cc24d678431de42b2577a7e20e8415d" kindref="member">Edge_circulator</ref></type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>*ec</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="526" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1accb50cf54c7c8dcc93e643a67fe81891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Input_iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(Input_iterator first, Input_iterator beyond)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>Input_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Input_iterator</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>Iteratively inserts the sites in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Input_iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> and its value type must be either <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref></computeroutput> or <computeroutput>Site_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of sites inserted in the Delaunay graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="539" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a4c38d30277b965be645f8b3b11bba92d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Input_iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(Input_iterator first, Input_iterator beyond, CGAL::Tag_false)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>Input_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Input_iterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="group__PkgSTLExtensionUtilities_1ga89d5ecf1540b2ec0a2bf5dd003e186d0" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_false</ref></type>
        </param>
        <briefdescription>
<para>Iteratively inserts the sites in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Input_iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> and its value type must be either <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref></computeroutput> or <computeroutput>Site_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of sites inserted in the Delaunay graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="547" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1af95131302a9b3ae34940f1026658c177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Input_iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(Input_iterator first, Input_iterator beyond, CGAL::Tag_true)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>Input_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Input_iterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type><ref refid="group__PkgSTLExtensionUtilities_1gab3e2296107b5d26c32c8183028a217f1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Tag_true</ref></type>
        </param>
        <briefdescription>
<para>Decomposes the range [first,beyond) into a range of input points and a range of input segments that are respectively passed to <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1aac42f0ea4bf167a0a09154acd6391cb1" kindref="member">insert_segments()</ref></computeroutput> and <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1af34c5b5476782bfeab3065fd7cb843fd" kindref="member">insert_points()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Non-input sites are first random_shuffled and then inserted one by one. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Input_iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> and its value type must be either <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref></computeroutput>, <computeroutput><ref refid="classCGAL_1_1Segment__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Segment_2</ref></computeroutput> or <computeroutput>Site_2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of sites inserted in the Delaunay graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="557" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1af34c5b5476782bfeab3065fd7cb843fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointIterator</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert_points</definition>
        <argsstring>(PointIterator first, PointIterator beyond)</argsstring>
        <name>insert_points</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert_points</qualifiedname>
        <param>
          <type>PointIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>Inserts the points in the range [first,beyond) as sites. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function is not guaranteed to insert the points following the order of <computeroutput>PointInputIterator</computeroutput>, as <computeroutput>spatial_sort()</computeroutput> is used to improve efficiency. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref></computeroutput> or <computeroutput>Site_2</computeroutput> as value_type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of points inserted in the Delaunay graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="568" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1aac42f0ea4bf167a0a09154acd6391cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SegmentIterator</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert_segments</definition>
        <argsstring>(SegmentIterator first, SegmentIterator beyond)</argsstring>
        <name>insert_segments</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert_segments</qualifiedname>
        <param>
          <type>SegmentIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>SegmentIterator</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>Inserts the segments in the range [first,beyond) as sites. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function is not guaranteed to insert the segments following the order of <computeroutput>SegmentIterator</computeroutput>, as <computeroutput>spatial_sort()</computeroutput> is used to improve efficiency. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SegmentIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with <computeroutput>Site_2</computeroutput>, <computeroutput><ref refid="classCGAL_1_1Segment__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Segment_2</ref></computeroutput> or <computeroutput>std::pair&lt;<ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref>,<ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref>&gt;</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of segments inserted in the Delaunay graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="579" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a21f1ac813bf15063da2c2ecbcdf30daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointIterator</type>
          </param>
          <param>
            <type>class IndicesIterator</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert_segments</definition>
        <argsstring>(PointIterator points_first, PointIterator points_beyond, IndicesIterator indices_first, IndicesIterator indices_beyond)</argsstring>
        <name>insert_segments</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert_segments</qualifiedname>
        <param>
          <type>PointIterator</type>
          <declname>points_first</declname>
        </param>
        <param>
          <type>PointIterator</type>
          <declname>points_beyond</declname>
        </param>
        <param>
          <type>IndicesIterator</type>
          <declname>indices_first</declname>
        </param>
        <param>
          <type>IndicesIterator</type>
          <declname>indices_beyond</declname>
        </param>
        <briefdescription>
<para>Same as above except that each segment is given as a pair of indices of the points in the range [points_first, points_beyond). </para>
        </briefdescription>
        <detaileddescription>
<para>The indices must start from 0 to <computeroutput>std::distance(points_first, points_beyond)</computeroutput> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>is an input iterator with <computeroutput><ref refid="classCGAL_1_1Point__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_2</ref></computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndicesIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>is an input iterator with <computeroutput>std::pair&lt;std::size_t, std::size_t&gt;</computeroutput> as value type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of segments inserted in the Delaunay graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="589" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a0e5ac3c19398daedfe871fdacd63b728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(const Point_2 &amp;p)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Inserts the point <computeroutput>p</computeroutput> in the segment Delaunay graph. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>p</computeroutput> has already been inserted, then the vertex handle of its already inserted copy is returned. If <computeroutput>p</computeroutput> has not been inserted yet, the vertex handle of <computeroutput>p</computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="597" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a5f787c033d11114a86ca3877b02c9033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(const Point_2 &amp;p, Vertex_handle vnear)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>vnear</declname>
        </param>
        <briefdescription>
<para>Inserts <computeroutput>p</computeroutput> in the segment Delaunay graph using the site associated with <computeroutput>vnear</computeroutput> as an estimate for the nearest neighbor of <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The vertex handle returned has the same semantics as the vertex handle returned by the method <computeroutput>Vertex_handle insert(Point_2 p)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="605" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ab092560ed8f6186ec7ed5e819366f9e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(const Point_2 &amp;p1, const Point_2 &amp;p2)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" kindref="member">Point_2</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" kindref="member">Point_2</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Inserts the closed segment with endpoints <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> in the segment Delaunay graph. </para>
        </briefdescription>
        <detaileddescription>
<para>If the segment has already been inserted in the Delaunay graph then the vertex handle of its already inserted copy is returned. If the segment does not intersect any segment in the existing diagram, the vertex handle corresponding to its corresponding open segment is returned. Finally, if the segment intersects other segments in the existing Delaunay graph, the vertex handle to one of its open subsegments is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="617" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a9be228deffb2ec2a3a799b33e4216b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(const Point_2 &amp;p1, const Point_2 &amp;p2, Vertex_handle vnear)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" kindref="member">Point_2</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" kindref="member">Point_2</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>vnear</declname>
        </param>
        <briefdescription>
<para>Inserts the segment whose endpoints are <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> in the segment Delaunay graph using the site associated with <computeroutput>vnear</computeroutput> as an estimate for the nearest neighbor of <computeroutput>p1</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The vertex handle returned has the same semantics as the vertex handle returned by the method <computeroutput>Vertex_handle insert(Point_2 p1, Point_2 p2)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="625" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1aa9ab750a38b8acbe5c0bf9b7ae5b5125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(const Site_2 &amp;s)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a6f9279b27e0be7ee36cad459ed086075" kindref="member">Site_2</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Inserts the site <computeroutput>s</computeroutput> in the segment Delaunay graph. </para>
        </briefdescription>
        <detaileddescription>
<para>The vertex handle returned has the same semantics as the vertex handle returned by the methods <computeroutput>Vertex_handle insert(Point_2 p)</computeroutput> and <computeroutput>Vertex_handle insert(Point_2 p1, Point_2 p2)</computeroutput>, depending on whether <computeroutput>s</computeroutput> represents a point or a segment respectively. <simplesect kind="pre"><para><computeroutput>s.is_input()</computeroutput> must be <computeroutput>true</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="634" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1af0baf24d13f3c93f1e52a67599824406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::insert</definition>
        <argsstring>(const Site_2 &amp;s, Vertex_handle vnear)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a6f9279b27e0be7ee36cad459ed086075" kindref="member">Site_2</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>vnear</declname>
        </param>
        <briefdescription>
<para>Inserts <computeroutput>s</computeroutput> in the segment Delaunay graph using the site associated with <computeroutput>vnear</computeroutput> as an estimate for the nearest neighbor of <computeroutput>s</computeroutput>, if <computeroutput>s</computeroutput> is a point, or the first endpoint of <computeroutput>s</computeroutput>, if <computeroutput>s</computeroutput> is a segment. </para>
        </briefdescription>
        <detaileddescription>
<para>The vertex handle returned has the same semantics as the vertex handle returned by the method <computeroutput>Vertex_handle insert(Site_2 s)</computeroutput>. <simplesect kind="pre"><para><computeroutput>s.is_input()</computeroutput> must be <computeroutput>true</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="644" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Nearest neighbor location</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ab77199a11e58fa7af85c987e676aec59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::nearest_neighbor</definition>
        <argsstring>(const Point_2 &amp;p) const</argsstring>
        <name>nearest_neighbor</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::nearest_neighbor</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Finds the nearest neighbor of the point <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In other words it finds the site whose segment Voronoi diagram cell contains <computeroutput>p</computeroutput>. Ties are broken arbitrarily and one of the nearest neighbors of <computeroutput>p</computeroutput> is returned. If there are no sites in the segment Delaunay graph <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle()</ref></computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="658" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a96b4599afe601a7ef4aa1f1e1c70df52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::nearest_neighbor</definition>
        <argsstring>(const Point_2 &amp;p, Vertex_handle vnear) const</argsstring>
        <name>nearest_neighbor</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::nearest_neighbor</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle</ref></type>
          <declname>vnear</declname>
        </param>
        <briefdescription>
<para>Finds the nearest neighbor of the point <computeroutput>p</computeroutput> using the site associated with <computeroutput>vnear</computeroutput> as an estimate for the nearest neighbor of <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Ties are broken arbitrarily and one of the nearest neighbors of <computeroutput>p</computeroutput> is returned. If there are no sites in the segment Delaunay graph <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" kindref="member">Vertex_handle()</ref></computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="668" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>I/O</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a5eb5a19db73870391d2a32ca3dd38e45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::draw_dual</definition>
        <argsstring>(Stream &amp;str) const</argsstring>
        <name>draw_dual</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::draw_dual</qualifiedname>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the segment Voronoi diagram to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following operators must be defined:</para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Line_2)</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="688" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a453733666c46d66f87661df78febda65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::draw_skeleton</definition>
        <argsstring>(Stream &amp;str) const</argsstring>
        <name>draw_skeleton</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::draw_skeleton</qualifiedname>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the segment Voronoi diagram to the stream <computeroutput>str</computeroutput>, except the edges of the diagram corresponding to a segment and its endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>The following operators must be defined:</para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Line_2)</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="704" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a8facf6d405b3ed9ff076f73e4a7d21c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::draw_dual_edge</definition>
        <argsstring>(Edge e, Stream &amp;str) const</argsstring>
        <name>draw_dual_edge</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::draw_dual_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a961dd5d5acab82d04ab89ccb4c17ea93" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the edge <computeroutput>e</computeroutput> of the segment Voronoi diagram to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following operators must be defined:</para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Line_2)</computeroutput> <simplesect kind="pre"><para><computeroutput>e</computeroutput> must be a finite edge. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="719" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a86f340cf1f7b5d26e1f2f520f9d8a745" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::draw_dual_edge</definition>
        <argsstring>(Edge_circulator ec, Stream &amp;str) const</argsstring>
        <name>draw_dual_edge</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::draw_dual_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5cc24d678431de42b2577a7e20e8415d" kindref="member">Edge_circulator</ref></type>
          <declname>ec</declname>
        </param>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the edge <computeroutput>*ec</computeroutput> of the segment Voronoi diagram to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following operators must be defined:</para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Line_2)</computeroutput> <simplesect kind="pre"><para><computeroutput>*ec</computeroutput> must be a finite edge. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="734" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1afcc2a36040df3845d67e1d14a97563db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::draw_dual_edge</definition>
        <argsstring>(All_edges_iterator eit, Stream &amp;str) const</argsstring>
        <name>draw_dual_edge</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::draw_dual_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a3cb65e75134b2279d0f31440d6c4825f" kindref="member">All_edges_iterator</ref></type>
          <declname>eit</declname>
        </param>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the edge <computeroutput>*eit</computeroutput> of the segment Voronoi diagram to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following operators must be defined:</para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Line_2)</computeroutput> <simplesect kind="pre"><para><computeroutput>*eit</computeroutput> must be a finite edge. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="749" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a9b8ca967333ff8fa4d244038c16048c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::draw_dual_edge</definition>
        <argsstring>(Finite_edges_iterator eit, Stream &amp;str) const</argsstring>
        <name>draw_dual_edge</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::draw_dual_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2_1a1386ae2da6e5328ba8e2fb4d7139bfcc" kindref="member">Finite_edges_iterator</ref></type>
          <declname>eit</declname>
        </param>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the edge <computeroutput>*eit</computeroutput> of the segment Voronoi diagram to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following operators must be defined:</para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput></para>
<para><computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Line_2)</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="763" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a7ba8284bef9be9d3f69dc4416de35de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::file_output</definition>
        <argsstring>(std::ostream &amp;os)</argsstring>
        <name>file_output</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::file_output</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Writes the current state of the segment Delaunay graph to an output stream. </para>
        </briefdescription>
        <detaileddescription>
<para>In particular, all sites in the diagram are written to the stream (represented through appropriate input sites), as well as the underlying combinatorial data structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="772" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ac9d57105a6e48884fc75e484379d6738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::file_input</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>file_input</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::file_input</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Reads the state of the segment Delaunay graph from an input stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="777" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ab507797fdc0b20ac27458c78269e2f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Segment_Delaunay_graph_2&lt; Gt, St, DS &gt; &amp;sdg)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound">Segment_Delaunay_graph_2</ref>&lt; Gt, St, DS &gt; &amp;</type>
          <declname>sdg</declname>
        </param>
        <briefdescription>
<para>Writes the current state of the segment Delaunay graph to an output stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="782" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a5f07981544edce9443b7d83fa8898964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Segment_Delaunay_graph_2&lt; Gt, St, DS &gt; &amp;sdg)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound">Segment_Delaunay_graph_2</ref>&lt; Gt, St, DS &gt; &amp;</type>
          <declname>sdg</declname>
        </param>
        <briefdescription>
<para>Reads the state of the segment Delaunay graph from an input stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="787" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Validity check</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a85fc80cedd5a0bf144d95f1ee38e482d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::is_valid</definition>
        <argsstring>(bool verbose=false, int level=1) const</argsstring>
        <name>is_valid</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::is_valid</qualifiedname>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Checks the validity of the segment Delaunay graph. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>verbose</computeroutput> is <computeroutput>true</computeroutput> a short message is sent to <computeroutput>std::cerr</computeroutput>. If <computeroutput>level</computeroutput> is 0, only the data structure is validated. If <computeroutput>level</computeroutput> is 1, then both the data structure and the segment Delaunay graph are validated. Negative values of <computeroutput>level</computeroutput> always return true, and values greater than 1 are equivalent to <computeroutput>level</computeroutput> being 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="803" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1ad5602c6ee3823208254aeca3cfe6495b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::clear</qualifiedname>
        <briefdescription>
<para>Clears all contents of the segment Delaunay graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="813" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Segment__Delaunay__graph__2_1a78495715f959802e35edb86cdffe18ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;::swap</definition>
        <argsstring>(Segment_Delaunay_graph_2&lt; Gt, St, DS &gt; &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>CGAL::Segment_Delaunay_graph_2::swap</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound">Segment_Delaunay_graph_2</ref>&lt; Gt, St, DS &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>The segment Delaunay graphs <computeroutput>other</computeroutput> and <computeroutput>*this</computeroutput> are swapped. </para>
        </briefdescription>
        <detaileddescription>
<para>For a segment Delaunay graph <computeroutput>sdg</computeroutput>, the operation <computeroutput>sdg</computeroutput>.<computeroutput>swap(other)</computeroutput> should be preferred to <computeroutput>sdg</computeroutput><computeroutput>= other</computeroutput> or to <computeroutput>sdg</computeroutput><computeroutput>(other)</computeroutput> if <computeroutput>other</computeroutput> is deleted afterwards. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Segment_Delaunay_graph_2.h" line="821" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound">Segment_Delaunay_graph_2</ref></computeroutput> represents the segment Delaunay graph (which is the dual graph of the 2D segment Voronoi diagram). </para>
    </briefdescription>
    <detaileddescription>
<para>Currently it only supports the insertions of sites.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Gt</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classSegmentDelaunayGraphTraits__2" kindref="compound">SegmentDelaunayGraphTraits_2</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>St</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classSegmentDelaunayGraphStorageTraits__2" kindref="compound">SegmentDelaunayGraphStorageTraits_2</ref></computeroutput>. By default, the storage traits is instantiated by <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__storage__traits__2" kindref="compound">Segment_Delaunay_graph_storage_traits_2</ref>&lt;Gt&gt;</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DS</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classSegmentDelaunayGraphDataStructure__2" kindref="compound">SegmentDelaunayGraphDataStructure_2</ref></computeroutput> whose vertex and face are models of the concepts <computeroutput><ref refid="classSegmentDelaunayGraphVertexBase__2" kindref="compound">SegmentDelaunayGraphVertexBase_2</ref></computeroutput> and <computeroutput><ref refid="classTriangulationFaceBase__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_2.tag">TriangulationFaceBase_2</ref></computeroutput>, respectively. It defaults to: <programlisting><codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">CGAL::Triangulation_data_structure_2</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Segment__Delaunay__graph__vertex__base__2" kindref="compound">CGAL::Segment_Delaunay_graph_vertex_base_2&lt;St&gt;</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCGAL_1_1Segment__Delaunay__graph__face__base__2" kindref="compound">CGAL::Segment_Delaunay_graph_face_base_2&lt;Gt&gt;</ref><sp/>&gt;</highlight></codeline>
</programlisting></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Storage</bold><linebreak/>
</para>
<para>To avoid redundancy in the storage of points, input points are stored in a container, and the various types of sites (input points and segments, points of intersection, subsegments with one or two points of intersection as endpoints) only store handles to the points in the container. See Section <ref refid="index_1Segment_Delaunay_graph_2StronglyIntersecting" kindref="member">Strongly Intersecting Sites and their Representation</ref> for more information.</para>
<para><bold>Traversal of the Segment Delaunay Graph</bold><linebreak/>
</para>
<para>A segment Delaunay graph can be seen as a container of faces and vertices. Therefore the <computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__2" kindref="compound">Segment_Delaunay_graph_2</ref></computeroutput> class provides several iterators and circulators that allow to traverse it (completely or partially).</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classDelaunayGraph__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Voronoi_diagram_2.tag">DelaunayGraph_2</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__traits__2" kindref="compound">CGAL::Segment_Delaunay_graph_traits_2</ref>&lt;K,MTag&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__traits__without__intersections__2" kindref="compound">CGAL::Segment_Delaunay_graph_traits_without_intersections_2</ref>&lt;K,MTag&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__filtered__traits__2" kindref="compound">CGAL::Segment_Delaunay_graph_filtered_traits_2</ref>&lt;CK,CM,EK,EM,FK,FM&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="structCGAL_1_1Segment__Delaunay__graph__filtered__traits__without__intersections__2" kindref="compound">CGAL::Segment_Delaunay_graph_filtered_traits_without_intersections_2</ref>&lt;CK,CM,EK,EM,FK,FM&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Segment__Delaunay__graph__hierarchy__2" kindref="compound">CGAL::Segment_Delaunay_graph_hierarchy_2</ref>&lt;Gt,St,STag,DS&gt;</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>CGAL::Segment_Delaunay_graph_2&lt; Gt, St, DS &gt;</label>
        <link refid="classCGAL_1_1Segment__Delaunay__graph__2"/>
      </node>
      <node id="2">
        <label>CGAL::Segment_Delaunay_graph_hierarchy_2&lt; Gt, St, STag, DS &gt;</label>
        <link refid="classCGAL_1_1Segment__Delaunay__graph__hierarchy__2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="CGAL/Segment_Delaunay_graph_2.h" line="47" column="1" bodyfile="CGAL/Segment_Delaunay_graph_2.h" bodystart="47" bodyend="825"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1afc4adc111ed17626459aae6cdd9809d2" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a3a411d83e179f46609dd277198b45284" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a3cb65e75134b2279d0f31440d6c4825f" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a797fe4428141ff2925ccfbc324ebdd31" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>all_faces_begin</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a87f6cef1f8c431c1874a9891b51a7ee5" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>all_faces_end</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ac49511156f955fc742814c228e037eca" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>All_faces_iterator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a98a5678a7f3989208bcf797a9f19f70a" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a7e9e44d8f2de87613f4613d663a7ce8e" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9483678cb338f7f6cd653e080e04fbd9" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ad5602c6ee3823208254aeca3cfe6495b" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a3c5ab5beb60cc7c50ea4841e5108b087" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>data_structure</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a644b112649bab16159b430ae4932c1ab" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Data_structure</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ace396a1db19375a56ab024daee16551c" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5eb5a19db73870391d2a32ca3dd38e45" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>draw_dual</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a8facf6d405b3ed9ff076f73e4a7d21c1" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>draw_dual_edge</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a86f340cf1f7b5d26e1f2f520f9d8a745" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>draw_dual_edge</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1afcc2a36040df3845d67e1d14a97563db" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>draw_dual_edge</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9b8ca967333ff8fa4d244038c16048c5" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>draw_dual_edge</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a453733666c46d66f87661df78febda65" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>draw_skeleton</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a961dd5d5acab82d04ab89ccb4c17ea93" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5cc24d678431de42b2577a7e20e8415d" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Edge_circulator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a201b849093da7cccb3f74ef3bdf6d190" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Face</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a70303659970be1b00476db944ab9d312" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Face_circulator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1aabcdc2d8f964ce64286285efd7b1fcc1" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ac9d57105a6e48884fc75e484379d6738" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>file_input</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a7ba8284bef9be9d3f69dc4416de35de1" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>file_output</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a2d1b5ff5235f6ee585a4cdffac2a71ba" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a299e492f4cb896fd575755d3bc622d29" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a1386ae2da6e5328ba8e2fb4d7139bfcc" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a1eacc659c42f3d2e48677c24b857e501" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>finite_faces_begin</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a05ddcd579436fbfb9e1481d6541e1130" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>finite_faces_end</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ae6e3d8bbaee3f8045e3a28047a2d9ec2" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Finite_faces_iterator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a32a4f10cc2ccb876c82ac669fa80701e" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>finite_vertex</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9253b1d8e0294f6b9ba3b9dd9dd309ba" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a0e30fb7490bb6f5794d7617ac50e59b3" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a6865572600bfd51a155b356ce9708900" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1aff6c4ee1b70d55dde320c9886f27cbb2" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ac22960b106fdd0096dcc0b9f2038adb4" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1aa30693cf070503b0f9c8fda2f2cade4c" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a4c916443215b0386f988f4822398161c" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5e2930d0ae146011d7020dbbeebb98ec" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a72357ff62983e5e7da76ab88e8d4ca27" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a01c8f3250c5d0d6584317d22df260b05" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a694dfb542456d0aa2186fa60245418a8" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a7e1e0b3096cd2f93157ad71e2a155f50" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>infinite_face</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1abc11b8fd15d62a3cc469c2dd907c1401" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ac99449fb3651fd2587bf2f8b59ab660f" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>input_sites_begin</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a47cd3858386b0b2c85557e07856939dc" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>input_sites_end</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1af788737a5aad8c8371813389805e631b" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Input_sites_iterator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1accb50cf54c7c8dcc93e643a67fe81891" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a4c38d30277b965be645f8b3b11bba92d" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1af95131302a9b3ae34940f1026658c177" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a0e5ac3c19398daedfe871fdacd63b728" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5f787c033d11114a86ca3877b02c9033" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab092560ed8f6186ec7ed5e819366f9e4" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9be228deffb2ec2a3a799b33e4216b46" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1aa9ab750a38b8acbe5c0bf9b7ae5b5125" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1af0baf24d13f3c93f1e52a67599824406" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1af34c5b5476782bfeab3065fd7cb843fd" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert_points</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1aac42f0ea4bf167a0a09154acd6391cb1" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert_segments</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a21f1ac813bf15063da2c2ecbcdf30daa" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>insert_segments</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ace15a75982eaf86f1c7d2507cf80a870" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a47f6e41999c64bc3f915ddda91d6a669" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a125ba2fc60742a07c85986ff73c2dc53" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ad3b42d6dc006c704c4759f820ff3226f" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a92e9bea4999d87150c894635e264b2f8" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a85fc80cedd5a0bf144d95f1ee38e482d" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab77199a11e58fa7af85c987e676aec59" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>nearest_neighbor</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a96b4599afe601a7ef4aa1f1e1c70df52" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>nearest_neighbor</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1af829b9f6600f58de9bccab1c56170c87" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>number_of_faces</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a873f18ec3bd12c647c684b49f99ac910" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>number_of_input_sites</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a110e6a2e70491ffe5109b8f128999e60" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>number_of_output_sites</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1aeb78ff99737811fd9fbdeb859f2f87cb" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab507797fdc0b20ac27458c78269e2f35" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a5f07981544edce9443b7d83fa8898964" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9aa5c8c9b078d5787fc93d7d92861a63" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>output_sites_begin</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a375bacc9efc9ae442d1553b2e0ab666c" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>output_sites_end</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a811a22cf59ece05315f8782e596e3c01" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Output_sites_iterator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a74c365bebb7af7d301107ee94b650826" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Point_2</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a964649be1037cdd27590b8f7d2822f94" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Point_container</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ad4e99f21b4d29d9c7f6b4b1a0951a121" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>point_container</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a73bb7134d819a60d94b4c0942beb0291" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Point_handle</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ae7b711ae6ec529623afbf9fbadb5f8d5" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Segment_Delaunay_graph_2</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a77e6d212e45bbce3b3582c0ed49de4d5" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Segment_Delaunay_graph_2</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a6f9279b27e0be7ee36cad459ed086075" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Site_2</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab93ec2700dd54a3dc52c8c658e540cf6" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a0d263f63754b0c64bdf395917c10233d" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Storage_site_2</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1ab61d4320d4111a66959197ad0021756b" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Storage_traits</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a42d008d34a5d1565dff38f0c4afb0a" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>storage_traits</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a78495715f959802e35edb86cdffe18ca" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1aa681252013b753e58d3f3864ec5e390f" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a98e07e07272cd63907891704236b0316" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a3b4edd7dcd894d79ec9a22237525fff5" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a546dc147bdd1a3071f3030912520c6b2" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Vertex_circulator</name></member>
      <member refid="classCGAL_1_1Segment__Delaunay__graph__2_1a9a7dbb0128a8b00322c23cbf930bcba9" prot="public" virt="non-virtual"><scope>CGAL::Segment_Delaunay_graph_2</scope><name>Vertex_handle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
