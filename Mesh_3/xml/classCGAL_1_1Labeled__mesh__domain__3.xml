<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Labeled__mesh__domain__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Labeled_mesh_domain_3</compoundname>
    <includes local="no">CGAL/Labeled_mesh_domain_3.h</includes>
    <templateparamlist>
      <param>
        <type>class BGT</type>
      </param>
      <param>
        <type>class Subdomain_index_</type>
        <defval>int</defval>
      </param>
      <param>
        <type>class Surface_patch_index_</type>
        <defval>std::pair&lt;Subdomain_index_,                                                Subdomain_index_&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Labeled__mesh__domain__3_1acbbbc049fc195ef85f0a4f1027210da4" prot="public" static="no">
        <type>Subdomain_index_</type>
        <definition>typedef Subdomain_index_ CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::Subdomain_index</definition>
        <argsstring></argsstring>
        <name>Subdomain_index</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::Subdomain_index</qualifiedname>
        <briefdescription>
<para>The subdomain index of this model of <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="368" column="45" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Labeled__mesh__domain__3_1a80d8cea7974bc58fa6bdc049271b95a6" prot="public" static="no">
        <type>std::function&lt; <ref refid="classCGAL_1_1Labeled__mesh__domain__3_1acbbbc049fc195ef85f0a4f1027210da4" kindref="member">Subdomain_index</ref>(const <ref refid="classCGAL_1_1Labeled__mesh__domain__3_1a6180cb25285e4474e6e9ea8d8e25a4c6" kindref="member">Point_3</ref> &amp;)&gt;</type>
        <definition>typedef std::function&lt; Subdomain_index(const Point_3 &amp;)&gt; CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::Labeling_function</definition>
        <argsstring></argsstring>
        <name>Labeling_function</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::Labeling_function</qualifiedname>
        <briefdescription>
<para>The type of object that stores the function using type-erasure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="372" column="25" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Types imported from the geometric traits class</header>
      <memberdef kind="typedef" id="classCGAL_1_1Labeled__mesh__domain__3_1a6180cb25285e4474e6e9ea8d8e25a4c6" prot="public" static="no">
        <type>Geom_traits::Point_3</type>
        <definition>typedef Geom_traits::Point_3 CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::Point_3</definition>
        <argsstring></argsstring>
        <name>Point_3</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::Point_3</qualifiedname>
        <briefdescription>
<para>The point type of the geometric traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="378" column="46" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Labeled__mesh__domain__3_1aad24ed250124ce44fe04c063b1f1ed82" prot="public" static="no">
        <type>Geom_traits::Sphere_3</type>
        <definition>typedef Geom_traits::Sphere_3 CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::Sphere_3</definition>
        <argsstring></argsstring>
        <name>Sphere_3</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::Sphere_3</qualifiedname>
        <briefdescription>
<para>The sphere type of the geometric traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="380" column="46" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Labeled__mesh__domain__3_1af7a1ec25230d6dd39a07fa10ff6a7b0c" prot="public" static="no">
        <type>Geom_traits::Iso_cuboid_3</type>
        <definition>typedef Geom_traits::Iso_cuboid_3 CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::Iso_cuboid_3</definition>
        <argsstring></argsstring>
        <name>Iso_cuboid_3</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::Iso_cuboid_3</qualifiedname>
        <briefdescription>
<para>The iso-cuboid type of the geometric traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="382" column="46" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Labeled__mesh__domain__3_1a968c58925f779c6dd03251c7b0af38c0" prot="public" static="no">
        <type>Geom_traits::FT</type>
        <definition>typedef Geom_traits::FT CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::FT</qualifiedname>
        <briefdescription>
<para>The number type (a field type) of the geometric traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="384" column="46" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Labeled__mesh__domain__3_1aea98eab3399b0a32f9d19a30df7ff9b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
          <param>
            <type>typename Bounding_object</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::Labeled_mesh_domain_3</definition>
        <argsstring>(const Function &amp;function, const Bounding_object &amp;bounding_object, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>Labeled_mesh_domain_3</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::Labeled_mesh_domain_3</qualifiedname>
        <param>
          <type>const Function &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const Bounding_object &amp;</type>
          <declname>bounding_object</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Construction from a function, a bounding object and a relative error bound. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Function</parametername>
</parameternamelist>
<parameterdescription>
<para>a type compatible with <computeroutput>Labeling_function</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Bounding_object</parametername>
</parameternamelist>
<parameterdescription>
<para>either a bounding sphere (of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Sphere_3</ref></computeroutput>), a bounding box (type <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref></computeroutput>), or a bounding <computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Iso_cuboid_3</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the labeling function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounding_object</parametername>
</parameternamelist>
<parameterdescription>
<para>the bounding object bounding the meshable space. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>relative_error_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the relative error bound used to compute intersection points between the implicit surface and query segments. The bisection is stopped when the length of the intersected segment is less than the product of <computeroutput>relative_error_bound</computeroutput> by the diameter of the bounding object. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>FT(1e-3) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><bold>Example</bold><linebreak/>
 From the example (<ref refid="Mesh_3_2mesh_implicit_domains_2_8cpp-example" kindref="compound">Mesh_3/mesh_implicit_domains_2.cpp</ref>): <programlisting filename="Mesh_3/mesh_implicit_domains_2.cpp"><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(Function_wrapper(v,<sp/>vps),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K::Sphere_3(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>,<sp/><ref refid="group__PkgAlgebraicFoundationsRef_1ga07001b5ddc5c43096c811c91a306be9a" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL::square</ref>(K::FT(5))),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::relative_error_bound(1e-6));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="462" column="3" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="462" bodyend="475"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation of domains from 3D images</header>
      <memberdef kind="function" id="classCGAL_1_1Labeled__mesh__domain__3_1ab679583cf0a87571b5fd830a42050450" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref></type>
        <definition>static Labeled_mesh_domain_3 CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::create_gray_image_mesh_domain</definition>
        <argsstring>(const CGAL::Image_3 &amp;image_, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>create_gray_image_mesh_domain</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::create_gray_image_mesh_domain</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref> &amp;</type>
          <declname>image_</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Construction from a 3D gray image. </para>
        </briefdescription>
        <detaileddescription>
<para>This static method is a <emphasis>named constructor</emphasis>. It constructs a domain described by a 3D gray image. A 3D gray image is a grid of voxels, where each voxel is associated with a gray level value. Unless otherwise specified by the parameter <computeroutput>image_values_to_subdom_indices</computeroutput>, the domain to be discretized is the union of voxels that lie inside a surface described by an isolevel value, called <emphasis>isovalue</emphasis>. The voxels lying inside the domain have gray level values that are larger than the isovalue.</para>
<para>The value of voxels is interpolated to a gray level value at any query point.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_</parametername>
</parameternamelist>
<parameterdescription>
<para>the input 3D image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>iso_value</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the isovalue, inside <computeroutput>image</computeroutput>, of the surface describing the boundary of the object to be meshed. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>image_values_to_subdomain_indices</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a function or a function object, compatible with the signature <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3_1acbbbc049fc195ef85f0a4f1027210da4" kindref="member">Subdomain_index(double)</ref></computeroutput>. This function returns the subdomain index corresponding to a pixel value. If this parameter is used, then the parameter <computeroutput>iso_value</computeroutput> is ignored. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>Null_functor() </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>value_outside</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the value attached to voxels outside of the domain to be meshed. It should be lower than <computeroutput>iso_value</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>relative_error_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is the relative error bound, relative to the diameter of the box of the image. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>FT(1e-3) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><bold>Examples</bold><linebreak/>
</para>
<para>From the example (<ref refid="Mesh_3_2mesh_3D_gray_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_gray_image.cpp</ref>):</para>
<para><programlisting filename="Mesh_3/mesh_3D_gray_image.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh_domain::create_gray_image_mesh_domain(image,<sp/>params::iso_value(2.9f).value_outside(0.f));</highlight></codeline>
</programlisting></para>
<para>From the example (<ref refid="Mesh_3_2mesh_3D_gray_vtk_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_gray_vtk_image.cpp</ref>):</para>
<para><programlisting filename="Mesh_3/mesh_3D_gray_vtk_image.cpp"><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_gray_image_mesh_domain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>params::image_values_to_subdomain_indices(Less(iso)).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_outside(iso+1));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="575" column="32" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="575" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Labeled__mesh__domain__3_1aec3f58e9883a8036a1b3e379df7d8fa9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::create_labeled_image_mesh_domain</definition>
        <argsstring>(const CGAL::Image_3 &amp;image_, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>create_labeled_image_mesh_domain</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::create_labeled_image_mesh_domain</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref> &amp;</type>
          <declname>image_</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Construction from a 3D labeled image. </para>
        </briefdescription>
        <detaileddescription>
<para>This static method is a <emphasis>named constructor</emphasis>. It constructs a domain described by a 3D labeled image. A 3D labeled image is a grid of voxels, where each voxel is associated with an index (a subdomain index) characterizing the subdomain in which the voxel lies. The domain to be discretized is the union of voxels that have non-zero values.</para>
<para><simplesect kind="return"><para>either a <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref></computeroutput>, or a <computeroutput><ref refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" kindref="compound">Mesh_domain_with_polyline_features_3</ref>&lt;<ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref>&gt;</computeroutput> depending on whether one or more of the named parameters <computeroutput>features_detector</computeroutput> and <computeroutput>input_features</computeroutput> are provided.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_</parametername>
</parameternamelist>
<parameterdescription>
<para>the input 3D image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>weights</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a reference to an input 3D image that provides weights associated to each voxel (the word type is <computeroutput>unsigned char</computeroutput>, and the voxels values are integers between 0 and 255). The weights image can be generated with <computeroutput><ref refid="group__PkgMesh3Functions_1gaa7f5d88727381f5923f1e093dc7de81a" kindref="member">CGAL::Mesh_3::generate_label_weights()</ref></computeroutput>. Its dimensions must be the same as the dimensions of <computeroutput>parameters::image</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3()</ref> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref>&amp; </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>if <computeroutput>features_detector</computeroutput> is provided, <computeroutput>weights</computeroutput> should be modified accordingly. The available functors described in See <ref refid="group__PkgMesh3FeatureDetection" kindref="compound">Feature Detection</ref> implement the necessary modifications. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>if <computeroutput>input_features</computeroutput> is provided, <computeroutput>weights</computeroutput> should be modified accordingly to keep consistency of the output <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>value_outside</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>the value attached to voxels outside of the domain to be meshed. It should be lower than <computeroutput>iso_value</computeroutput>. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>relative_error_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is the relative error bound, relative to the diameter of the box of the image. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>FT(1e-3) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>features_detector</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a functor that implements <computeroutput>std::vector&lt;std::vector&lt;Point&gt;&gt; operator()(const <ref refid="classCGAL_1_1Image__3" kindref="compound">Image_3</ref>&amp; img) const</computeroutput>, and <computeroutput>std::vector&lt;std::vector&lt;Point&gt;&gt; operator()(const <ref refid="classCGAL_1_1Image__3" kindref="compound">Image_3</ref>&amp; img, <ref refid="classCGAL_1_1Image__3" kindref="compound">Image_3</ref>&amp; weights) const</computeroutput>, where <computeroutput>Point</computeroutput> matches the mesh domain point type, that both return a range of detected polyline features for feature protection. Only one implementation is used, depending on whether the named parameter <computeroutput>weights</computeroutput> is provided or not. Polyline features are added to the domain for further feature protection. See <ref refid="group__PkgMesh3FeatureDetection" kindref="compound">Feature Detection</ref> for available functors. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><ref refid="structCGAL_1_1Null__functor" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Null_functor()</ref> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The return type of the function depends on whether this parameter or <computeroutput>input_features</computeroutput> are provided or not. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If <computeroutput>weights</computeroutput> is provided, it must either be adapted to the detected features, or post-processed during feature detection to keep consistency of the output <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput>. Available functors implement the necessary modifications. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>input_features</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput> of polyline features, represented as <computeroutput><ref refid="classRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Range</ref></computeroutput>s of <computeroutput><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref></computeroutput>. Polyline features are added to the domain for further feature protection. Input polyline features must be different from the detected features and can intersect only at vertices, if they do. Otherwise, the meshing process may not terminate. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>std::vector&lt;std::vector&lt;<ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref>&gt;&gt;()</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>The return type of the function depends on whether this parameter or <computeroutput>input_features</computeroutput> are provided or not. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>It is recommended to pass a const-reference for this parameter, possibly using <computeroutput>std::cref(polylines_range)</computeroutput> to avoid useless copies. </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If <computeroutput>weights</computeroutput> is provided, it must be adapted to the input features, to keep consistency of the output <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>From the example (<ref refid="Mesh_3_2mesh_3D_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image.cpp</ref>):</para>
<para><programlisting filename="Mesh_3/mesh_3D_image.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image);</highlight></codeline>
</programlisting></para>
<para>From the example (<ref refid="Mesh_3_2mesh_3D_weighted_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_weighted_image.cpp</ref>), where the labeled image is used with a precomputed 3D image of weights :</para>
<para><programlisting filename="Mesh_3/mesh_3D_weighted_image.cpp"><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>(std::max)(image.vx(),<sp/>(std::max)(image.vy(),<sp/>image.vz()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>img_weights<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh3Functions_1gaa7f5d88727381f5923f1e093dc7de81a" kindref="member">CGAL::Mesh_3::generate_label_weights</ref>(image,<sp/>sigma);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::weights(img_weights).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relative_error_bound(1e-6));</highlight></codeline>
</programlisting></para>
<para>From the example (<ref refid="Mesh_3_2mesh_3D_image_with_detection_of_features_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image_with_detection_of_features.cpp</ref>) where the features are detected in <computeroutput>image</computeroutput>:</para>
<para><programlisting filename="Mesh_3/mesh_3D_image_with_detection_of_features.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::features_detector<sp/>=<sp/><ref refid="structCGAL_1_1Mesh__3_1_1Detect__features__in__image" kindref="compound">CGAL::Mesh_3::Detect_features_in_image</ref>());</highlight></codeline>
</programlisting></para>
<para>From the example (<ref refid="Mesh_3_2mesh_3D_image_with_input_features_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image_with_input_features.cpp</ref>) where the features are provided by the user:</para>
<para><programlisting filename="Mesh_3/mesh_3D_image_with_input_features.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params::input_features<sp/>=<sp/>std::cref(features_inside));</highlight><highlight class="comment">//use<sp/>std::cref<sp/>to<sp/>avoid<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="710" column="3" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="710" bodyend="777"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation of domains from implicit functions</header>
      <memberdef kind="function" id="classCGAL_1_1Labeled__mesh__domain__3_1a7824b7e09d8d4cf12020a38bee8932f5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
          <param>
            <type>typename Bounding_object</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval><ref refid="group__PkgSTLExtensionRef_1ga1ea7a72cb4d04623ca568523ba262c9b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters::Default_named_parameters</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref></type>
        <definition>static Labeled_mesh_domain_3 CGAL::Labeled_mesh_domain_3&lt; BGT, Subdomain_index_, Surface_patch_index_ &gt;::create_implicit_mesh_domain</definition>
        <argsstring>(const Function &amp;function, const Bounding_object &amp;bounding_object, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>create_implicit_mesh_domain</name>
        <qualifiedname>CGAL::Labeled_mesh_domain_3::create_implicit_mesh_domain</qualifiedname>
        <param>
          <type>const Function &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const Bounding_object &amp;</type>
          <declname>bounding_object</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval><ref refid="group__PkgSTLExtensionRef_1gaac7f54fe7abb7321d8d755683eaafaf2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">parameters::default_values</ref>()</defval>
        </param>
        <briefdescription>
<para>Construction from an implicit function. </para>
        </briefdescription>
        <detaileddescription>
<para>This static method is a <emphasis>named constructor</emphasis>. It constructs a domain whose bounding surface is described implicitly as the zero level set of a function. The domain to be discretized is assumed to be the domain where the function has negative values.</para>
<para>The method takes as argument a bounding sphere which is required to circumscribe the surface and to have its center inside the domain.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Function</parametername>
</parameternamelist>
<parameterdescription>
<para>a type compatible with the signature <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3_1a968c58925f779c6dd03251c7b0af38c0" kindref="member">FT(Point_3)</ref></computeroutput>: it takes a point as argument, and returns a scalar value. That object must be model of <computeroutput><ref refid="classCopyConstructible" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CopyConstructible</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Bounding_object</parametername>
</parameternamelist>
<parameterdescription>
<para>either a bounding sphere (of type <computeroutput><ref refid="classCGAL_1_1Sphere__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Sphere_3</ref></computeroutput>), a bounding box (type <computeroutput><ref refid="classCGAL_1_1Bbox__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Bbox_3</ref></computeroutput>), or a bounding <computeroutput><ref refid="classCGAL_1_1Iso__cuboid__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Iso_cuboid_3</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the implicit function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounding_object</parametername>
</parameternamelist>
<parameterdescription>
<para>object boundint the meshable domain and its center is inside the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>relative_error_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is the relative error bound, relative to the diameter of the box of the image. </para>
</listitem>
<listitem>
<para><bold>Default: </bold>FT(1e-3) </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><bold>Examples</bold><linebreak/>
</para>
<para>From the example (<ref refid="Mesh_3_2mesh_implicit_sphere_8cpp-example" kindref="compound">Mesh_3/mesh_implicit_sphere.cpp</ref>):</para>
<para><programlisting filename="Mesh_3/mesh_implicit_sphere.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh_domain::create_implicit_mesh_domain(<sp/>sphere_function,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K::Sphere_3(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>,<sp/>K::FT(2)));</highlight></codeline>
</programlisting></para>
<para>From the example (<ref refid="Mesh_3_2mesh_implicit_sphere_variable_size_8cpp-example" kindref="compound">Mesh_3/mesh_implicit_sphere_variable_size.cpp</ref>):</para>
<para><programlisting filename="Mesh_3/mesh_implicit_sphere_variable_size.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_implicit_mesh_domain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(sphere_function,<sp/>K::Sphere_3(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>,<sp/>K::FT(2))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Labeled_mesh_domain_3.h" line="911" column="32" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="911" bodyend="935"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref></computeroutput> implements indexed domains. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is a model of concept <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput>.</para>
<para>Any boundary facet is labeled &lt;a,b&gt;, with a&lt;b, where a and b are the tags of its incident subdomains. Thus, a boundary facet of the domain is labeled &lt;0,b&gt;, where b!=0.</para>
<para>This class includes a <emphasis>labeling function</emphasis> that provides the index of the subdomain in which any query point lies. An intersection between a segment and bounding surfaces is detected when both segment endpoints are associated with different values of subdomain indices. The intersection is then constructed by bisection. The bisection stops when the query segment is shorter than an error bound <computeroutput>e</computeroutput> given by the product of the length of the diagonal of the bounding box (in world coordinates), or the radius of the bounding sphere, and a relative error bound passed as argument to the constructor of <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref></computeroutput>.</para>
<para>This class has a constructor taking a labeling function. It has also three static template member functions that act as named constructors: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3_1ab679583cf0a87571b5fd830a42050450" kindref="member">create_gray_image_mesh_domain()</ref></computeroutput>, to create a domain from a 3D gray image, </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3_1aec3f58e9883a8036a1b3e379df7d8fa9" kindref="member">create_labeled_image_mesh_domain()</ref></computeroutput>, to create a domain from a 3D labeled image, and </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3_1a7824b7e09d8d4cf12020a38bee8932f5" kindref="member">create_implicit_mesh_domain()</ref></computeroutput>, to create a domain from an implicit function. </para>
</listitem>
</itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BGT</parametername>
</parameternamelist>
<parameterdescription>
<para>is a geometric traits class that provides the basic operations to implement intersection tests and intersection computations through a bisection method. This parameter must be instantiated with a model of the concept <computeroutput><ref refid="classBisectionGeometricTraits__3" kindref="compound">BisectionGeometricTraits_3</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Labeling function</bold><linebreak/>
</para>
<para>A labeling function <computeroutput>f</computeroutput> must return <computeroutput>0</computeroutput> if the point isn&apos;t located in any subdomain. The return type of labeling functions is an integer.</para>
<para>Let <computeroutput>p</computeroutput> be a Point. <itemizedlist>
<listitem>
<para><computeroutput>f(p)=0</computeroutput> means that <computeroutput>p</computeroutput> is outside domain. </para>
</listitem>
<listitem>
<para><computeroutput>f(p)=a</computeroutput>, <computeroutput>a!=0</computeroutput> means that <computeroutput>p</computeroutput> is inside subdomain <computeroutput>a</computeroutput>. </para>
</listitem>
</itemizedlist>
<computeroutput><ref refid="classCGAL_1_1Implicit__multi__domain__to__labeling__function__wrapper" kindref="compound">CGAL::Implicit_multi_domain_to_labeling_function_wrapper</ref></computeroutput> is a good candidate for this template parameter if there are several components to mesh.</para>
<para>The function type can be any model of the concept <computeroutput><ref refid="classCallable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">Callable</ref></computeroutput> compatible with the signature <computeroutput>Subdomain_index(const Point_3&amp;)</computeroutput>: it can be a function, a function object, a lambda expression... that takes a <computeroutput>Point_3</computeroutput> as argument, and returns a type convertible to <computeroutput>Subdomain_index</computeroutput>.</para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Implicit__multi__domain__to__labeling__function__wrapper" kindref="compound">CGAL::Implicit_multi_domain_to_labeling_function_wrapper</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">CGAL::make_mesh_3()</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="CGAL/Labeled_mesh_domain_3.h" line="353" column="1" bodyfile="CGAL/Labeled_mesh_domain_3.h" bodystart="359" bodyend="1492"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1ab679583cf0a87571b5fd830a42050450" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>create_gray_image_mesh_domain</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1a7824b7e09d8d4cf12020a38bee8932f5" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>create_implicit_mesh_domain</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1aec3f58e9883a8036a1b3e379df7d8fa9" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>create_labeled_image_mesh_domain</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1a968c58925f779c6dd03251c7b0af38c0" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>FT</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1af7a1ec25230d6dd39a07fa10ff6a7b0c" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>Iso_cuboid_3</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1aea98eab3399b0a32f9d19a30df7ff9b3" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>Labeled_mesh_domain_3</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1a80d8cea7974bc58fa6bdc049271b95a6" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>Labeling_function</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1a6180cb25285e4474e6e9ea8d8e25a4c6" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>Point_3</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1aad24ed250124ce44fe04c063b1f1ed82" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>Sphere_3</name></member>
      <member refid="classCGAL_1_1Labeled__mesh__domain__3_1acbbbc049fc195ef85f0a4f1027210da4" prot="public" virt="non-virtual"><scope>CGAL::Labeled_mesh_domain_3</scope><name>Subdomain_index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
