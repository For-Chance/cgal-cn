<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Compact__mesh__cell__3" prot="public">CGAL::Compact_mesh_cell_3</innerclass>
    <innerclass refid="classCGAL_1_1Compact__mesh__cell__base__3" prot="public">CGAL::Compact_mesh_cell_base_3</innerclass>
    <innerclass refid="classCGAL_1_1Compact__mesh__cell__base__3_3_01GT_00_01MD_00_01void_01_4" prot="public">CGAL::Compact_mesh_cell_base_3&lt; GT, MD, void &gt;</innerclass>
    <innerclass refid="classCGAL_1_1Compact__mesh__cell__base__3__base" prot="public">CGAL::Compact_mesh_cell_base_3_base</innerclass>
    <innerclass refid="classCGAL_1_1Compact__mesh__cell__generator__3" prot="public">CGAL::Compact_mesh_cell_generator_3</innerclass>
    <innerclass refid="classCGAL_1_1Image__3" prot="public">CGAL::Image_3</innerclass>
    <innerclass refid="classCGAL_1_1Implicit__multi__domain__to__labeling__function__wrapper" prot="public">CGAL::Implicit_multi_domain_to_labeling_function_wrapper</innerclass>
    <innerclass refid="classCGAL_1_1Implicit__to__labeling__function__wrapper" prot="public">CGAL::Implicit_to_labeling_function_wrapper</innerclass>
    <innerclass refid="classCGAL_1_1Implicit__vector__to__labeling__function__wrapper" prot="public">CGAL::Implicit_vector_to_labeling_function_wrapper</innerclass>
    <innerclass refid="classCGAL_1_1Labeled__mesh__domain__3" prot="public">CGAL::Labeled_mesh_domain_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__3__regular__triangulation__3__wrapper" prot="public">CGAL::Mesh_3_regular_triangulation_3_wrapper</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__cell__base__3" prot="public">CGAL::Mesh_cell_base_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__cell__base__3__base" prot="public">CGAL::Mesh_cell_base_3_base</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__cell__criteria__3" prot="public">CGAL::Mesh_cell_criteria_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__constant__domain__field__3" prot="public">CGAL::Mesh_constant_domain_field_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__criteria__3" prot="public">CGAL::Mesh_criteria_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" prot="public">CGAL::Mesh_domain_with_polyline_features_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__edge__criteria__3" prot="public">CGAL::Mesh_edge_criteria_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__facet__criteria__3" prot="public">CGAL::Mesh_facet_criteria_3</innerclass>
    <innerclass refid="structCGAL_1_1Mesh__polyhedron__3" prot="public">CGAL::Mesh_polyhedron_3</innerclass>
    <innerclass refid="structCGAL_1_1Mesh__triangulation__3" prot="public">CGAL::Mesh_triangulation_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__vertex__3" prot="public">CGAL::Mesh_vertex_3</innerclass>
    <innerclass refid="structCGAL_1_1Mesh__vertex__base__3" prot="public">CGAL::Mesh_vertex_base_3</innerclass>
    <innerclass refid="classCGAL_1_1Mesh__vertex__base__3__base" prot="public">CGAL::Mesh_vertex_base_3_base</innerclass>
    <innerclass refid="structCGAL_1_1Mesh__vertex__generator__3" prot="public">CGAL::Mesh_vertex_generator_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedral__complex__mesh__domain__3" prot="public">CGAL::Polyhedral_complex_mesh_domain_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedral__mesh__domain__3" prot="public">CGAL::Polyhedral_mesh_domain_3</innerclass>
    <innerclass refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" prot="public">CGAL::Polyhedral_mesh_domain_with_features_3</innerclass>
    <innerclass refid="structCGAL_1_1Sizing__field__with__aabb__tree" prot="public">CGAL::Sizing_field_with_aabb_tree</innerclass>
    <innernamespace refid="namespaceCGAL_1_1Mesh__3">CGAL::Mesh_3</innernamespace>
    <innernamespace refid="namespaceCGAL_1_1parameters">CGAL::parameters</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="Mesh__optimization__return__code_8h_1ab9fe60482a45120b3c061a8a4ec9018d" prot="public" static="no" strong="no">
        <type></type>
        <name>Mesh_optimization_return_code</name>
        <qualifiedname>CGAL::Mesh_optimization_return_code</qualifiedname>
        <enumvalue id="Mesh__optimization__return__code_8h_1ab9fe60482a45120b3c061a8a4ec9018da4bc941633941ed8c4e5d7c099387f587" prot="public">
          <name>MESH_OPTIMIZATION_UNKNOWN_ERROR</name>
          <initializer>=-1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mesh__optimization__return__code_8h_1ab9fe60482a45120b3c061a8a4ec9018da700b34635bba84023202ffb43ea072d6" prot="public">
          <name>BOUND_REACHED</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mesh__optimization__return__code_8h_1ab9fe60482a45120b3c061a8a4ec9018dae51c3b06e2ee9b31f5b812cc86cbd229" prot="public">
          <name>TIME_LIMIT_REACHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mesh__optimization__return__code_8h_1ab9fe60482a45120b3c061a8a4ec9018da9c7c2f09314491da054f3f5d7d7ab3b9" prot="public">
          <name>CANT_IMPROVE_ANYMORE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mesh__optimization__return__code_8h_1ab9fe60482a45120b3c061a8a4ec9018da19d4b9484d2ed90e8fec7e1194d25df2" prot="public">
          <name>CONVERGENCE_REACHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mesh__optimization__return__code_8h_1ab9fe60482a45120b3c061a8a4ec9018da058b57a483e13d1ed274217b75ca0afc" prot="public">
          <name>MAX_ITERATION_NUMBER_REACHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mesh__optimization__return__code_8h_1ab9fe60482a45120b3c061a8a4ec9018dab191e538b64f19bb21b00eadae3934b7" prot="public">
          <name>ALL_VERTICES_FROZEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/cgal-cn/cgal-cn/Mesher_level/include/CGAL/Mesh_optimization_return_code.h" line="22" column="1" bodyfile="/home/runner/work/cgal-cn/cgal-cn/Mesher_level/include/CGAL/Mesh_optimization_return_code.h" bodystart="23" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="group__PkgMesh3Enum_1gaac682a581ddebf8daff681621911d1f3" prot="public" static="no" strong="no">
        <type></type>
        <name>Mesh_facet_topology</name>
        <qualifiedname>CGAL::Mesh_facet_topology</qualifiedname>
        <enumvalue id="group__PkgMesh3Enum_1ggaac682a581ddebf8daff681621911d1f3ad6594c00cfd02e9c61a483fc2efc9f9e" prot="public">
          <name>FACET_VERTICES_ON_SURFACE</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Each vertex of the facet has to be on the surface, on a curve, or on a corner. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgMesh3Enum_1ggaac682a581ddebf8daff681621911d1f3ac2f01956631bda386cf288106762b2cf" prot="public">
          <name>FACET_VERTICES_ON_SAME_SURFACE_PATCH</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>The three vertices of a facet belonging to a surface patch <computeroutput>s</computeroutput> have to be on the same surface patch <computeroutput>s</computeroutput>, on a curve or on a corner. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgMesh3Enum_1ggaac682a581ddebf8daff681621911d1f3a166e21d2a4cc315f3503104066246482" prot="public">
          <name>FACET_VERTICES_ON_SAME_SURFACE_PATCH_WITH_ADJACENCY_CHECK</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>The three vertices of a facet belonging to a surface patch <computeroutput>s</computeroutput> have to be on the same surface patch <computeroutput>s</computeroutput>, or on a curve incident to the surface patch <computeroutput>s</computeroutput> or on a corner incident to the surface patch <computeroutput>s</computeroutput>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The enum <computeroutput>Mesh_facet_topology</computeroutput> is designed to tell which constraints have to be checked on each surface facet during the mesh refinement process. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3</ref>&lt;Tr&gt;</computeroutput>, </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Mesh__facet__criteria__3" kindref="compound">CGAL::Mesh_facet_criteria_3</ref>&lt;Tr&gt;</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Mesh_facet_topology.h" line="34" column="1" bodyfile="CGAL/Mesh_facet_topology.h" bodystart="35" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Polyhedral__mesh__domain__with__features__3_8h_1a05f73895b5d82a5d195deebbff0acc8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::dump_graph_edges</definition>
        <argsstring>(std::ostream &amp;out, const Graph &amp;g)</argsstring>
        <name>dump_graph_edges</name>
        <qualifiedname>CGAL::dump_graph_edges</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="462" column="6" bodyfile="CGAL/Polyhedral_mesh_domain_with_features_3.h" bodystart="462" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="Polyhedral__mesh__domain__with__features__3_8h_1acf7222b3ad4aa37102a0949b7031459e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::dump_graph_edges</definition>
        <argsstring>(const char *filename, const Graph &amp;g)</argsstring>
        <name>dump_graph_edges</name>
        <qualifiedname>CGAL::dump_graph_edges</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Polyhedral_mesh_domain_with_features_3.h" line="477" column="6" bodyfile="CGAL/Polyhedral_mesh_domain_with_features_3.h" bodystart="477" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="Implicit__to__labeling__function__wrapper_8h_1a59e6e58c28062f413ff08326510df364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BGT</type>
          </param>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Implicit__to__labeling__function__wrapper" kindref="compound">Implicit_to_labeling_function_wrapper</ref>&lt; Function, BGT &gt;</type>
        <definition>Implicit_to_labeling_function_wrapper&lt; Function, BGT &gt; CGAL::make_implicit_to_labeling_function_wrapper</definition>
        <argsstring>(Function f)</argsstring>
        <name>make_implicit_to_labeling_function_wrapper</name>
        <qualifiedname>CGAL::make_implicit_to_labeling_function_wrapper</qualifiedname>
        <param>
          <type>Function</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Implicit_to_labeling_function_wrapper.h" line="79" column="1" bodyfile="CGAL/Implicit_to_labeling_function_wrapper.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::exude_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>exude_mesh_3</name>
        <qualifiedname>CGAL::exude_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">exude_mesh_3()</ref></computeroutput> performs a sliver exudation process on a Delaunay mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The sliver exudation process consists in optimizing the weights of vertices of the weighted Delaunay triangulation in such a way that slivers disappear and the quality of the mesh improves.</para>
<para><simplesect kind="warning"><para>This optimizer modifies the weight of vertices of the triangulation and, if called, must be the last optimizer to be called. If the mesh is refined after this optimization has been performed, all improvements will be lost.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>MeshComplex_3InTriangulation_3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c3t3</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial mesh that will be modified by the algorithm to represent the final optimized mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>time_limit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is used to set up, in seconds, a CPU time limit after which the optimization process is stopped. This time is measured using the <computeroutput>Real_timer</computeroutput> class. The default value is 0 and means that there is no time limit. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>time_limit &gt;= 0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sliver_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is designed to give, in degrees, a targeted lower bound on dihedral angles of mesh cells. The exudation process considers in turn all the mesh cells that have a smallest dihedral angle less than <computeroutput>sliver_bound</computeroutput> and tries to make them disappear by weighting their vertices. The optimization process stops when every cell in the mesh achieves this quality. The default value is 0 and means that there is no targeted bound: the exuder then runs as long as it can improve the smallest dihedral angles of the set of cells incident to some vertices. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>0&lt;= sliver_bound &lt;= 180</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>a value of type <computeroutput>CGAL::Mesh_optimization_return_code</computeroutput> which is: <itemizedlist>
<listitem>
<para><computeroutput>CGAL::BOUND_REACHED</computeroutput> when the targeted bound for the smallest dihedral angle in the mesh is reached. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::TIME_LIMIT_REACHED</computeroutput> when the time limit is reached. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::CANT_IMPROVE_ANYMORE</computeroutput> when exudation process stops because it can no longer improve the smallest dihedral angle of the set of cells incident to some vertex in the mesh. </para>
</listitem>
</itemizedlist>
</para>
</simplesect>
<bold>Example</bold><linebreak/>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Exude<sp/>without<sp/>sliver_bound,<sp/>using<sp/>at<sp/>most<sp/>10s<sp/>CPU<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">exude_mesh_3</ref>(c3t3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::time_limit(10));</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><computeroutput>CGAL::Mesh_optimization_return_code</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">CGAL::make_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">CGAL::refine_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">CGAL::perturb_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">CGAL::lloyd_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">CGAL::odt_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/exude_mesh_3.h" line="95" column="31" bodyfile="CGAL/exude_mesh_3.h" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="exude__mesh__3_8h_1ab53fe0a63bf92867c2f6ddd209210448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::exude_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, double time_limit, double sliver_bound=0)</argsstring>
        <name>exude_mesh_3</name>
        <qualifiedname>CGAL::exude_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time_limit</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sliver_bound</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/exude_mesh_3.h" line="107" column="31" bodyfile="CGAL/exude_mesh_3.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::odt_optimize_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>odt_optimize_mesh_3</name>
        <qualifiedname>CGAL::odt_optimize_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput> is a mesh optimization process based on the minimization of a global energy function. </para>
        </briefdescription>
        <detaileddescription>
<para>In <computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput>, the minimized global energy may be interpreted as the <formula id="13">$ L^1$</formula>-norm of the error achieved when the function <formula id="14">$ x^2$</formula> is interpolated on the mesh domain using a piecewise linear function which is linear in each mesh cell.</para>
<para>The optimizer <computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput> works in iterative steps. At each iteration, mesh vertices are moved into positions that bring to zero the energy gradient and the Delaunay triangulation is updated. Vertices on the mesh boundaries are handled in a special way so as to preserve an accurate representation of the domain boundaries.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>MeshComplex_3InTriangulation_3</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MeshDomain</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c3t3</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial mesh and is modified by the algorithm to represent the final optimized mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain used to create the <computeroutput>c3t3</computeroutput> parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>time_limit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is used to set up, in seconds, a CPU time limit after which the optimization process is stopped. This time is measured using <computeroutput>Real_timer</computeroutput>. The default value is 0 and means that there is no time limit. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>time_limit &gt;= 0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>max_iteration_number</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>sets a limit on the number of performed iterations. The default value of 0 means that there is no limit on the number of performed iterations. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>std::size_t</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>convergence</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is a stopping criterion based on convergence: the optimization process is stopped, when at the last iteration, the displacement of any vertex is less than a given percentage of the length the shortest edge incident to that vertex. The parameter <computeroutput>convergence</computeroutput> gives the threshold ratio. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>0 &lt;= convergence &lt;= 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0.02 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>freeze_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is designed to reduce running time of each optimization iteration. Any vertex that has a displacement less than a given percentage of the length of its shortest incident edge, is frozen (i.e. is not relocated). The parameter <computeroutput>freeze_bound</computeroutput> gives the threshold ratio. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>0 &lt;= freeze_bound &lt;= 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0.01 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_freeze</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>completes the <computeroutput>freeze_bound</computeroutput> parameter. If it is set to <computeroutput>true</computeroutput>, frozen vertices will not move anymore in next iterations. Otherwise, at each iteration, any vertex that moves, unfreezes all its incident vertices. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>true </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>a value of type <computeroutput>CGAL::Mesh_optimization_return_code</computeroutput> which is: <itemizedlist>
<listitem>
<para><computeroutput>CGAL::TIME_LIMIT_REACHED</computeroutput> when the time limit is reached. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::MAX_ITERATION_NUMBER_REACHED</computeroutput> when <computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput> stops because it has performed <computeroutput>max_iteration_number</computeroutput> iterations. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::CONVERGENCE_REACHED</computeroutput> when <computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput> stops because the convergence criterion is achieved. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::ALL_VERTICES_FROZEN</computeroutput> when all vertices have been frozen, when the <computeroutput>do_freeze</computeroutput> parameter is set to true. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::CANT_IMPROVE_ANYMORE</computeroutput> when <computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput> stops because most vertices have been frozen, and no better convergence can be reached. </para>
</listitem>
</itemizedlist>
</para>
</simplesect>
<bold>Example</bold><linebreak/>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>100<sp/>iterations<sp/>of<sp/>ODT-smoothing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3</ref>(c3t3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::max_iteration_number<sp/>=<sp/>100,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::convergence<sp/>=<sp/>0);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><computeroutput>CGAL::Mesh_optimization_return_code</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">CGAL::make_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">CGAL::refine_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">CGAL::exude_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">CGAL::perturb_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">CGAL::lloyd_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/odt_optimize_mesh_3.h" line="133" column="31" bodyfile="CGAL/odt_optimize_mesh_3.h" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::lloyd_optimize_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>lloyd_optimize_mesh_3</name>
        <qualifiedname>CGAL::lloyd_optimize_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput> is a mesh optimization process based on the minimization of a global energy function. </para>
        </briefdescription>
        <detaileddescription>
<para>In <computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput>, the minimized global energy may be interpreted as the <formula id="13">$ L^1$</formula>-norm of the error achieved when the function <formula id="14">$ x^2$</formula> is interpolated on the mesh domain using a piecewise linear function which is linear in each cell of the Voronoi diagram of the mesh vertices.</para>
<para>The optimizer <computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput> works in iterative steps. At each iteration, mesh vertices are moved into positions that bring to zero the energy gradient and the Delaunay triangulation is updated. Vertices on the mesh boundaries are handled in a special way so as to preserve an accurate representation of the domain boundaries.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>MeshComplex_3InTriangulation_3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MD</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c3t3</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial mesh that will be modified by the algorithm to represent the final optimized mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain used to create the <computeroutput>c3t3</computeroutput> parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>time_limit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>to set up, in seconds, a CPU time limit after which the optimization process is stopped. This time is measured using <computeroutput>CGAL::Real_timer</computeroutput>. 0 means that there is no time limit. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>time_limit &gt;= 0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>max_iteration_number</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>limit on the number of performed iterations. 0 means that there is no limit on the number of performed iterations. </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>max_iteration_number &gt;=0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>int</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>freeze_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>designed to reduce running time of each optimization iteration. Any vertex that has a displacement less than a given fraction of the length of its shortest incident edge, is frozen (i.e. is not relocated). The parameter <computeroutput>freeze_bound</computeroutput> gives the threshold ratio. If it is set to 0, freezing of vertices is disabled. </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>0&lt;= freeze_bound &lt;=1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0.01 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>convergence</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>threshold ratio of stopping criterion based on convergence: the optimization process is stopped when at the last iteration the displacement of any vertex is less than a given fraction of the length of the shortest edge incident to that vertex. </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>0 &lt;=convergence &lt;= 1</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0.02 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>do_freeze</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>completes the <computeroutput>freeze_bound</computeroutput> parameter. If it is set to <computeroutput>true</computeroutput> (default value), frozen vertices will not move anymore in next iterations. Otherwise, at each iteration, any vertex that moves, unfreezes all its incident vertices. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>true </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>a value of type <computeroutput>CGAL::Mesh_optimization_return_code</computeroutput> which is: <itemizedlist>
<listitem>
<para><computeroutput>CGAL::TIME_LIMIT_REACHED</computeroutput> when the time limit is reached. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::MAX_ITERATION_NUMBER_REACHED</computeroutput> when <computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput> stops because it has performed <computeroutput>max_iteration_number</computeroutput> iterations. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::CONVERGENCE_REACHED</computeroutput> when <computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput> stops because the convergence criterion is achieved. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::ALL_VERTICES_FROZEN</computeroutput> when all vertices have been frozen, when the <computeroutput>do_freeze</computeroutput> parameter is set to true. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::CANT_IMPROVE_ANYMORE</computeroutput> when <computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput> stops because most vertices have been frozen, and no better convergence can be reached. </para>
</listitem>
</itemizedlist>
</para>
</simplesect>
<bold>Example</bold><linebreak/>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Lloyd-smoothing<sp/>until<sp/>convergence<sp/>reaches<sp/>0.01,<sp/>freezing<sp/>vertices<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>move<sp/>less<sp/>than<sp/>0.001*shortest_incident_edge_length</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3</ref>(c3t3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::convergence(0.01).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::freeze_bound(0.001).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::do_freeze(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><computeroutput>CGAL::Mesh_optimization_return_code</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">CGAL::make_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">CGAL::refine_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">CGAL::exude_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">CGAL::perturb_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">CGAL::odt_optimize_mesh_3()</ref></computeroutput></para>
</simplesect>
<simplesect kind="note"><para>This function requires the thirdpartyEigen library. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/lloyd_optimize_mesh_3.h" line="138" column="31" bodyfile="CGAL/lloyd_optimize_mesh_3.h" bodystart="138" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>Mesh_optimization_return_code</type>
        <definition>Mesh_optimization_return_code CGAL::perturb_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>perturb_mesh_3</name>
        <qualifiedname>CGAL::perturb_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">perturb_mesh_3()</ref></computeroutput> is a mesh optimizer that improves the quality of a Delaunay mesh by changing the positions of some vertices of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>The perturber tries to improve the dihedral angles of the worst cells in the mesh degree by degree: the step number <computeroutput>n</computeroutput> is considered as successful if after this step the worst tetrahedron of the mesh has a minimal dihedral angle larger than <computeroutput>n</computeroutput> degrees. The perturber exits if this is not the case.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>MeshComplex_3InTriangulation_3</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MD</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c3t3</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial mesh, modified by the algorithm to represent the final optimized mesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain used to create the <computeroutput>c3t3</computeroutput> parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>time_limit</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is used to set up, in seconds, a CPU time limit after which the optimization process is stopped. This time is measured using the <computeroutput>Real_timer</computeroutput> class. The default value is 0 and means that there is no time limit. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>time_limit &gt;= 0</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>sliver_bound</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>is designed to give, in degrees, a targeted lower bound on dihedral angles of mesh cells. The function <computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">perturb_mesh_3()</ref></computeroutput> runs as long as steps are successful and step number <computeroutput>sliver_bound</computeroutput> (after which the worst tetrahedron in the mesh has a smallest angle larger than <computeroutput>sliver_bound</computeroutput> degrees) has not been reached. The default value is 0 and means that there is no targeted bound: the perturber then runs as long as steps are successful. </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>double</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Precondition: </bold><computeroutput>0 &lt;= sliver_bound &lt;= 180</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0 </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>a value of type <computeroutput>CGAL::Mesh_optimization_return_code</computeroutput> which is: <itemizedlist>
<listitem>
<para><computeroutput>CGAL::BOUND_REACHED</computeroutput> when the targeted bound for the smallest dihedral angle in the mesh is reached. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::TIME_LIMIT_REACHED</computeroutput> when the time limit is reached. </para>
</listitem>
<listitem>
<para><computeroutput>CGAL::CANT_IMPROVE_ANYMORE</computeroutput> when the perturbation process stops because the last step is unsuccessful. </para>
</listitem>
</itemizedlist>
</para>
</simplesect>
<bold>Example</bold><linebreak/>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Perturb<sp/>until<sp/>every<sp/>dihedral<sp/>angle<sp/>of<sp/>the<sp/>mesh<sp/>is<sp/>&gt;=<sp/>10<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>time<sp/>bound<sp/>is<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">perturb_mesh_3</ref>(c3t3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters::sliver_bound<sp/>=<sp/>10);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><computeroutput>CGAL::Mesh_optimization_return_code</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">CGAL::make_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">CGAL::refine_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">CGAL::exude_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">CGAL::lloyd_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">CGAL::odt_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/perturb_mesh_3.h" line="105" column="31" bodyfile="CGAL/perturb_mesh_3.h" bodystart="105" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename MeshCriteria</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::refine_mesh_3</definition>
        <argsstring>(C3T3 &amp;c3t3, const MeshDomain &amp;domain, const MeshCriteria &amp;criteria, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>refine_mesh_3</name>
        <qualifiedname>CGAL::refine_mesh_3</qualifiedname>
        <param>
          <type>C3T3 &amp;</type>
          <declname>c3t3</declname>
        </param>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const MeshCriteria &amp;</type>
          <declname>criteria</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3()</ref></computeroutput> is a 3D mesh generator. </para>
        </briefdescription>
        <detaileddescription>
<para>It produces simplicial meshes which discretize 3D domains.</para>
<para>The mesh generation algorithm is a Delaunay refinement process followed by an optimization phase. The criteria driving the Delaunay refinement process may be tuned to achieve the user needs with respect to the size of mesh elements, the accuracy of boundaries approximation, etc.</para>
<para>The optimization phase is a sequence of optimization processes, amongst the following available optimizers: an ODT smoothing, a Lloyd smoothing, a sliver perturber, and a sliver exuder. Each optimization process can be activated or not, according to the user requirements and available time. By default, only the perturber and the exuder are activated. Note that the benefits of the exuder will be lost if the mesh is further refined afterward.</para>
<para><simplesect kind="attention"><para>The function template <computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3()</ref></computeroutput> may be used to refine a previously computed mesh, e.g.: <programlisting filename=".cpp"><codeline><highlight class="normal">C3T3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3T3&gt;(domain,criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">CGAL::refine_mesh_3</ref>(c3t3,<sp/>domain,<sp/>new_criteria);</highlight></codeline>
</programlisting></para>
</simplesect>
Please note that we guarantee the result if and only if the domain does not change from one refinement to the next one.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>either a model of the concept <computeroutput>MeshComplex_3InTriangulation_3</computeroutput> or of <computeroutput>MeshComplexWithFeatures_3InTriangulation_3</computeroutput> if <computeroutput>MD</computeroutput> is a model of <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput>. The type <computeroutput>C3T3</computeroutput> is in particular required to provide a nested type <computeroutput>C3T3::Triangulation</computeroutput> for the 3D triangulation embedding the mesh. The vertex and cell base classes of the triangulation <computeroutput>C3T3::Triangulation</computeroutput> are required to be models of the concepts <computeroutput><ref refid="classMeshVertexBase__3" kindref="compound">MeshVertexBase_3</ref></computeroutput> and <computeroutput><ref refid="classMeshCellBase__3" kindref="compound">MeshCellBase_3</ref></computeroutput> respectively.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MD</parametername>
</parameternamelist>
<parameterdescription>
<para>either a model of the concept <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput> or of <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput> if 0 and 1-dimensional features of the input complex have to be accurately represented in the mesh.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MC</parametername>
</parameternamelist>
<parameterdescription>
<para>either a model of the concept <computeroutput><ref refid="classMeshCriteria__3" kindref="compound">MeshCriteria_3</ref></computeroutput> or a model of <computeroutput><ref refid="classMeshCriteriaWithFeatures__3" kindref="compound">MeshCriteriaWithFeatures_3</ref></computeroutput> if the domain has exposed features.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c3t3</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh to be refined that is modified by the refinement process. As the refinement process only adds points to the triangulation, all vertices of the triangulation of <computeroutput>c3t3</computeroutput> remain in the mesh during the refinement process. <computeroutput>c3t3</computeroutput> can be used to insert specific points in the domain to ensure that they will be contained in the final triangulation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain used to create the <computeroutput>c3t3</computeroutput> parameter. It is the sole link through which the domain to be discretized is known by the mesh generation algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>criteria</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the size and shape requirements for mesh tetrahedra and surface facets. These criteria form the rules which drive the refinement process. All mesh elements satisfy those criteria at the end of the refinement process. In addition, if the domain has features, the argument <computeroutput>criteria</computeroutput> provides a sizing field to guide the discretization of 1-dimensional exposed features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below. They control which optimization processes are performed and enable the user to tune the parameters of the optimization processes. Individual optimization parameters are not described here as they are internal types (see instead the documentation page of each optimizer). For each optimization algorithm, there exist two global functions that enable/disable the optimizer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="5" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Topological options (manifoldness)</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>In order to drive the meshing algorithm and ensure that the output mesh follows a desired topological criterion, three named parameters control this option: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga666e751a1518b97a63ff2d0e01a1008b" kindref="member">parameters::manifold()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga6392d76fc574edf9de766c6806f0741c" kindref="member">parameters::manifold_with_boundary()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga910ada4d26130095019315acae35e601" kindref="member">parameters::non_manifold()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
Note that the meshing algorithm cannot generate a manifold surface if the input surface is not manifold. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga910ada4d26130095019315acae35e601" kindref="member">parameters::non_manifold()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Lloyd optimization</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga8bd27303eebeb84a2fa70fbb3aa8a56c" kindref="member">parameters::no_lloyd()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::lloyd_optimize_mesh_3()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga8bd27303eebeb84a2fa70fbb3aa8a56c" kindref="member">parameters::no_lloyd()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>ODT optimization</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga4d83f119881f1c461357344b96364f2c" kindref="member">parameters::no_odt()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga684a23d08b8d8086063c6e3276025322" kindref="member">parameters::odt()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga4d83f119881f1c461357344b96364f2c" kindref="member">parameters::no_odt()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Mesh perturbation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">perturb_mesh_3()</ref></computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga9f696ff6caf3c4efd246e43946a89294" kindref="member">parameters::no_perturb()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga69a51bb2164f320aa5e76409cefd6554" kindref="member">parameters::perturb()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga69a51bb2164f320aa5e76409cefd6554" kindref="member">parameters::perturb()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Mesh exudation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">exude_mesh_3()</ref></computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga09f46cfd7b3364794e767755f4191862" kindref="member">parameters::exude()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1gab24d8652fbb6ae045e989769c5bc69f0" kindref="member">parameters::no_exude()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga09f46cfd7b3364794e767755f4191862" kindref="member">parameters::exude()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>The optimization parameters can be passed in arbitrary order. If one parameter is not passed, its default value is used. The default values are <computeroutput>no_lloyd()</computeroutput>, <computeroutput>no_odt()</computeroutput>, <computeroutput>perturb()</computeroutput> and <computeroutput>exude()</computeroutput>. Note that regardless of which optimization processes are activated, they are always launched in the order that is a suborder of the following (see user manual for further details): <emphasis>ODT-smoother</emphasis>, <emphasis>Lloyd-smoother</emphasis>, <emphasis>perturber</emphasis>, and <emphasis>exuder</emphasis>.</para>
<para>Beware that optimization of the mesh is obtained by perturbing mesh vertices and modifying the mesh connectivity and that this has an impact on the strict compliance to the refinement criteria. Though a strict compliance to mesh criteria is guaranteed at the end of the Delaunay refinement, this may no longer be true after some optimization processes. Also beware that the default behavior does involve some optimization processes.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">CGAL::make_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga666e751a1518b97a63ff2d0e01a1008b" kindref="member">CGAL::parameters::manifold()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga6392d76fc574edf9de766c6806f0741c" kindref="member">CGAL::parameters::manifold_with_boundary()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga910ada4d26130095019315acae35e601" kindref="member">CGAL::parameters::non_manifold()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">CGAL::exude_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">CGAL::perturb_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">CGAL::lloyd_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">CGAL::odt_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga09f46cfd7b3364794e767755f4191862" kindref="member">CGAL::parameters::exude()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1gab24d8652fbb6ae045e989769c5bc69f0" kindref="member">CGAL::parameters::no_exude()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga69a51bb2164f320aa5e76409cefd6554" kindref="member">CGAL::parameters::perturb()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga9f696ff6caf3c4efd246e43946a89294" kindref="member">CGAL::parameters::no_perturb()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1gae8754fd84eee75700656e4459f3a515d" kindref="member">CGAL::parameters::lloyd()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga8bd27303eebeb84a2fa70fbb3aa8a56c" kindref="member">CGAL::parameters::no_lloyd()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga684a23d08b8d8086063c6e3276025322" kindref="member">CGAL::parameters::odt()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga4d83f119881f1c461357344b96364f2c" kindref="member">CGAL::parameters::no_odt()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/refine_mesh_3.h" line="264" column="6" bodyfile="CGAL/refine_mesh_3.h" bodystart="264" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C3T3</type>
          </param>
          <param>
            <type>typename MeshDomain</type>
          </param>
          <param>
            <type>typename MeshCriteria</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>C3T3</type>
        <definition>C3T3 CGAL::make_mesh_3</definition>
        <argsstring>(const MeshDomain &amp;domain, const MeshCriteria &amp;criteria, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>make_mesh_3</name>
        <qualifiedname>CGAL::make_mesh_3</qualifiedname>
        <param>
          <type>const MeshDomain &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const MeshCriteria &amp;</type>
          <declname>criteria</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">make_mesh_3()</ref></computeroutput> is a 3D mesh generator. </para>
        </briefdescription>
        <detaileddescription>
<para>It produces simplicial meshes which discretize 3D domains.</para>
<para>The mesh generation algorithm is a Delaunay refinement process followed by an optimization phase. The criteria driving the Delaunay refinement process may be tuned to achieve the user needs with respect to the size of mesh elements, the accuracy of boundaries approximation, etc.</para>
<para>The optimization phase is a sequence of optimization processes, amongst the following available optimizers: an ODT-smoothing, a Lloyd-smoothing, a sliver perturber, and a sliver exuder. Each optimization process can be activated or not, according to the user requirements and available time. By default, only the perturber and the exuder are activated. Note that the benefits of the exuder will be lost if the mesh is further refined afterward, and that ODT-smoothing, Lloyd-smoothing, and sliver perturber should never be called after the sliver exuder. In the case of further refinement, only the sliver exuder can be used.</para>
<para>The function outputs the mesh to an object which provides iterators to traverse the resulting mesh data structure or can be written to a file (see <ref refid="index_1Mesh_3_section_examples" kindref="member">Examples</ref> ).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C3T3</parametername>
</parameternamelist>
<parameterdescription>
<para>either a model of the concept <computeroutput>MeshComplex_3InTriangulation_3</computeroutput> or of <computeroutput>MeshComplexWithFeatures_3InTriangulation_3</computeroutput> if <computeroutput>MD</computeroutput> is a model of <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput>. The type <computeroutput>C3T3</computeroutput> is in particular required to provide a nested type <computeroutput>C3T3::Triangulation</computeroutput> for the 3D triangulation embedding the mesh. The vertex and cell base classes of the triangulation <computeroutput>C3T3::Triangulation</computeroutput> are required to be models of the concepts <computeroutput><ref refid="classMeshVertexBase__3" kindref="compound">MeshVertexBase_3</ref></computeroutput> and <computeroutput><ref refid="classMeshCellBase__3" kindref="compound">MeshCellBase_3</ref></computeroutput> respectively.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MD</parametername>
</parameternamelist>
<parameterdescription>
<para>either a model of the concept <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput> or of <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput> if 0 and 1-dimensional features of the input complex have to be accurately represented in the mesh.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MC</parametername>
</parameternamelist>
<parameterdescription>
<para>either a model of the concept <computeroutput><ref refid="classMeshCriteria__3" kindref="compound">MeshCriteria_3</ref></computeroutput> or a model of <computeroutput><ref refid="classMeshCriteriaWithFeatures__3" kindref="compound">MeshCriteriaWithFeatures_3</ref></computeroutput> if the domain has exposed features.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain used to create the <computeroutput>c3t3</computeroutput> parameter. It is the sole link through which the domain to be discretized is known by the mesh generation algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>criteria</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the size and shape requirements for mesh tetrahedra and surface facets. These criteria form the rules which drive the refinement process. All mesh elements satisfy those criteria at the end of the refinement process. In addition, if the domain has features, the argument <computeroutput>criteria</computeroutput> provides a sizing field to guide the discretization of 1-dimensional exposed features.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of Named Parameters among the ones listed below:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="6" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Feature preservation options</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>If the domain is a model of <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput>, 0 and 1-dimensional features can be taken into account while generating the mesh. The following two named parameters control this option: <itemizedlist>
<listitem>
<para><ref refid="group__PkgMesh3Parameters_1gaf2aaad1efc924b8d96992a85334f0ca5" kindref="member"><computeroutput>parameters::features(domain)</computeroutput> </ref> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1gab6c227cc0baf003108979eef46cf430d" kindref="member">parameters::no_features()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>parameters::features(domain)</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Topological options (manifoldness)</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>In order to drive the meshing algorithm and ensure that the output mesh follows a desired topological criterion, three named parameters control this option: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga666e751a1518b97a63ff2d0e01a1008b" kindref="member">parameters::manifold()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga6392d76fc574edf9de766c6806f0741c" kindref="member">parameters::manifold_with_boundary()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga910ada4d26130095019315acae35e601" kindref="member">parameters::non_manifold()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
Note that the meshing algorithm cannot generate a manifold surface if the input surface is not manifold. </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga910ada4d26130095019315acae35e601" kindref="member">parameters::non_manifold()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Lloyd optimization</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga8bd27303eebeb84a2fa70fbb3aa8a56c" kindref="member">parameters::no_lloyd()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>parameters::lloyd_optimize_mesh_3()</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga8bd27303eebeb84a2fa70fbb3aa8a56c" kindref="member">parameters::no_lloyd()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>ODT optimization</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga4d83f119881f1c461357344b96364f2c" kindref="member">parameters::no_odt()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga684a23d08b8d8086063c6e3276025322" kindref="member">parameters::odt()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga4d83f119881f1c461357344b96364f2c" kindref="member">parameters::no_odt()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Mesh perturbation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">perturb_mesh_3()</ref></computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga9f696ff6caf3c4efd246e43946a89294" kindref="member">parameters::no_perturb()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga69a51bb2164f320aa5e76409cefd6554" kindref="member">parameters::perturb()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga69a51bb2164f320aa5e76409cefd6554" kindref="member">parameters::perturb()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>Mesh exudation</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">exude_mesh_3()</ref></computeroutput> can optionally be called after the meshing process. Two named parameters control this behavior: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1gab24d8652fbb6ae045e989769c5bc69f0" kindref="member">parameters::no_exude()</ref></computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga09f46cfd7b3364794e767755f4191862" kindref="member">parameters::exude()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="group__PkgMesh3Parameters_1ga09f46cfd7b3364794e767755f4191862" kindref="member">parameters::exude()</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para>Note that regardless of which optimization processes are activated, they are always launched in the order that is a suborder of the following (see user manual for further details): <emphasis>ODT-smoother</emphasis>, <emphasis>Lloyd-smoother</emphasis>, <emphasis>perturber</emphasis>, and <emphasis>exuder</emphasis>.</para>
<para>Beware that optimization of the mesh is obtained by perturbing mesh vertices and modifying the mesh connectivity and that this has an impact on the strict compliance to the refinement criteria. Though a strict compliance to mesh criteria is guaranteed at the end of the Delaunay refinement, this may no longer be true after some optimization processes. Also beware that the default behavior does involve some optimization processes.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">exude_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">perturb_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/make_mesh_3.h" line="468" column="6" bodyfile="CGAL/make_mesh_3.h" bodystart="468" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="Mesh__cell__base__3_8h_1a3368165c498e8b51c4a5f92ad2a640d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GT</type>
          </param>
          <param>
            <type>class MT</type>
          </param>
          <param>
            <type>class Cb</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; CGAL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Mesh_cell_base_3&lt; GT, MT, Cb &gt; &amp;c)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Mesh__cell__base__3" kindref="compound">Mesh_cell_base_3</ref>&lt; GT, MT, Cb &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Mesh_cell_base_3.h" line="282" column="1" bodyfile="CGAL/Mesh_cell_base_3.h" bodystart="282" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="Mesh__cell__base__3_8h_1a4b64097b25db1d80409f63439d9147f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GT</type>
          </param>
          <param>
            <type>class MT</type>
          </param>
          <param>
            <type>class Cb</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Mesh_cell_base_3&lt; GT, MT, Cb &gt; &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Mesh__cell__base__3" kindref="compound">Mesh_cell_base_3</ref>&lt; GT, MT, Cb &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Mesh_cell_base_3.h" line="297" column="1" bodyfile="CGAL/Mesh_cell_base_3.h" bodystart="298" bodyend="307"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Image_3.h" line="1" column="1"/>
  </compounddef>
</doxygen>
