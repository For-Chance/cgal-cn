<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>User Manual</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1Chapter_3D_Mesh_Generation"/><anchor id="index_1userchaptermesh3"/><simplesect kind="authors"><para>Pierre Alliez, Clément Jamin, Laurent Rineau, Stéphane Tayeb, Jane Tournois, Mariette Yvinec <htmlonly block="yes"> &lt;div id=&quot;autotoc&quot; class=&quot;toc&quot;&gt;&lt;/div&gt; </htmlonly></para>
</simplesect>
<anchor id="index_1fig__figuremultilabel_mesher"/> <image type="html" name="multilabel_mesher.jpg"></image>
 <image type="latex" name="multilabel_mesher.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figuremultilabel_mesher" kindref="member">fig__figuremultilabel_mesher</ref> Cut-view of a multi-domain 3D mesh generated from a segmented image. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<sect1 id="index_1Mesh_3_section_intro">
<title>Introduction</title>
<para>This package is devoted to the generation of isotropic simplicial meshes discretizing 3D domains. The domain to be meshed is a subset of 3D space, required to be bounded. The domain may be connected or composed of multiple components and/or subdivided in several subdomains.</para>
<para>Boundary and subdivision surfaces are either smooth or piecewise smooth surfaces, formed with planar or curved surface patches. Surfaces may exhibit 1-dimensional features (e.g. crease edges) and 0-dimensional features (e.g. singular points as corners tips, cusps or darts), that have to be fairly approximated in the mesh.</para>
<para>The output mesh is a 3-dimensional triangulation, including subcomplexes that approximate each input domain feature: subdomain, boundary surface patch or input domain feature with dimension 0 or 1. Thus, the output mesh includes a 3D submesh covering each subdomain, a surface mesh approximating each boundary or subdividing surface patch, a polyline approximation for each 1-dimensional feature and of course a vertex on each corner.</para>
<para>The main entry points of the package are two global functions that respectively generate and refine such meshes. The mesh generator is customized to output a mesh that fits as much as possible the user needs, for instance in terms of sizing field or with respect to some user customized quality criteria.</para>
<para>The meshing engine used in this mesh generator is based on Delaunay refinement <ref refid="citelist_1CITEREF_c-gqmgc-93" kindref="member">[9]</ref>, <ref refid="citelist_1CITEREF_r-draq2d-95" kindref="member">[15]</ref>, <ref refid="citelist_1CITEREF_s-tmgdr-98" kindref="member">[16]</ref>. It uses the notion of restricted Delaunay triangulation to approximate 1-dimensional curves and surface patches <ref refid="citelist_1CITEREF_cgal:bo-pgsms-05" kindref="member">[2]</ref>. Before the refinement, a mechanism of protecting balls is set up on 1-dimensional features, if any, to ensure a fair representation of those features in the mesh, and also to guarantee the termination of the refinement process, whatever may be the input geometry, in particular whatever small angles the boundary and subdivision surface patches may form <ref refid="citelist_1CITEREF_cgal:cdl-pdma-07" kindref="member">[7]</ref>, <ref refid="citelist_1CITEREF_cgal:cdr-drpsc-07" kindref="member">[8]</ref>. The Delaunay refinement is followed by a mesh optimization phase to remove slivers and provide a good quality mesh.</para>
<para>Optionally, the meshing and optimization algorithms support multi-core shared-memory architectures to take advantage of available parallelism.</para>
<sect2 id="index_1Mesh_3InputDomain">
<title>Input Domain</title>
<para>The domain to be meshed is assumed to be bounded and representable as a pure 3D complex. A 3D complex is a set of faces with dimension 0, 1, 2, and 3 such that all faces are pairwise interior disjoint and the boundary of each face of the complex is the union of lower-dimensional faces of the complex. The 3D complex is pure, meaning that each face is included in a face of dimension 3, so that the complex is entirely described by the set of its 3D faces and their subfaces. However the 3D complex needs not be connected. The set of faces with dimension lower or equal than 2 forms a 2D subcomplex which needs not be manifold, neither pure, nor connected: some 3D faces may have dangling 2D or 1D faces in their boundary faces.</para>
<para>In the rest of the documentation, we will refer to the input 3D complex as the input domain. The faces of the input domain with dimension 0, 1, 2, and 3 are called respectively <emphasis>corners</emphasis>, <emphasis>curves</emphasis>, <emphasis>surface patches</emphasis>, and <emphasis>subdomains</emphasis> to clearly distinguish them from the faces of the mesh that are called vertices, edges, facets, and cells.</para>
<para>Note that the input complex faces are not required to be linear nor smooth. Surface patches, for instance, may be smooth surface patches or portions of surface meshes with boundaries. Curves may be for instance straight segments, parameterized curves or polylines. Each of those features will be accurately represented in the final mesh.</para>
<para>The 0 and 1-dimensional features of the input domain are usually singular points of the subdomain boundaries, however this is not required. Furthermore, those features are not required to cover all the subdomains boundaries singularities but only those that need to be accurately represented in the final mesh. In the following, we say that a domain has <emphasis>features</emphasis> when it has 0 and 1-dimensional features that need to be accurately represented in the mesh, and we call those features <emphasis>exposed features</emphasis>. Therefore, a domain may be without features either because all boundary surface patches are smooth closed surfaces, or simply because the curves joining different surface patches and the singularities of those patches need not be accurately approximated in the final mesh.</para>
<para>Note also that input complex faces are not required to be connected. Faces of the input domain are identified by indices. If a subdomain is not connected, its different components receive the same index. Likewise different surface patches, curves, or corners may share the same index. Each connected component of a feature will be accurately represented in the final mesh. Note however that the occurrence of multiply connected faces in the input complex may affect the relevance of internal topological checks performed by the mesh generator.</para>
<para>The domain is passed to the mesh generation function as a domain class, often called the oracle, that provides predicates and constructors related to the domain, the subdomains, the boundary surface patches, and also the 0 and 1-dimensional exposed features, if any. Mainly, the oracle provides a predicate to test if a given query point belongs to the domain or not and to find in which subdomain it lies in, in the affirmative case. The domain class also provides predicates and constructors to test the intersection of a query line segment with the boundary surface patches and to construct intersection points, if any. Lastly, if the input domain includes 1-dimensional exposed features, the domain class provides a way to construct sample points on these features.</para>
<para>The current implementation provides classes to represent domains bounded by isosurfaces of implicit functions, polyhedral domains, and domains defined through 3D labeled images. Currently, 1-dimensional features may be defined as segments and polyline segments.</para>
</sect2>
<sect2 id="index_1Mesh_3OutputMesh">
<title>Output Mesh</title>
<para>The resulting mesh is output as a subcomplex of a <ref refid="classCGAL_1_1Regular__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_3.tag">weighted Delaunay 3D triangulation</ref>, in a class providing various iterators on mesh elements.</para>
<para>The 3D triangulation provides approximations of the subdomains, surface patches, curves, and corners according to the restricted Delaunay triangulation paradigm. This means that each subdomain is approximated by the union of the tetrahedral cells whose circumcenters are located inside the domain (or subdomain). Each surface patch is approximated by the union of the Delaunay mesh facets whose dual Voronoi edges intersect the surface patch. Such mesh facets are called <emphasis>surface facets</emphasis> in the following. The 1-dimensional exposed features are approximated by sequences of mesh edges and the 0-dimensional exposed features are represented by mesh vertices.</para>
<para>It is possible to extract the facets of the complex as a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput>, using the function <computeroutput><ref refid="group__PkgSMDS3Functions_1ga84189751a55cc6af2aa5db504780b18d" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">facets_in_complex_3_to_triangle_mesh()</ref></computeroutput>.</para>
</sect2>
<sect2 id="index_1Mesh_3DelaunayRefinement">
<title>Delaunay Refinement</title>
<para><anchor id="index_1introsecparam"/> The mesh generation algorithm is mainly a Delaunay refinement process. The Delaunay refinement is preceded by a protecting phase to ensure an accurate representation of 1-dimensional features, if any, and followed by an optimization phase to achieve a good quality mesh.</para>
<para>The Delaunay refinement process is driven by criteria concerning either the size and shape of mesh cells and surface facets. The refinement process terminates when there are no more mesh cells or surface facets violating the criteria.</para>
<para>The criteria are designed to achieve a nice spread of the mesh vertices while ensuring the termination of the refinement process. Those criteria may be somehow tuned to the user needs to achieve for instance the respect of a sizing field by mesh elements, some topological conditions on the representation of boundary surfaces in the mesh, and/or some error bound for the approximation of boundary surfaces. To some extent, the user may tune the Delaunay refinement to a prescribed trade-off between mesh quality and mesh density. The mesh density refers to the number of mesh vertices and cells, i.e. to the complexity of the mesh. The mesh quality referred to here is measured by the radius edge ratio of surface facets end mesh cells, where the radius edge ratio of a simplex (triangle or tetrahedron) is the ratio between its circumradius and its shortest edge length.</para>
</sect2>
<sect2 id="index_1Mesh_3Protectionof0and1dimensionalExposed">
<title>Protection of 0 and 1-dimensional Exposed Features</title>
<para>If the domain description includes 0 dimensional features, the corresponding points are inserted into the Delaunay triangulation from the start.</para>
<para>If the domain has 1-dimensional exposed features, the method of protecting balls <ref refid="citelist_1CITEREF_cgal:cdl-pdma-07" kindref="member">[7]</ref>, <ref refid="citelist_1CITEREF_cgal:cdr-drpsc-07" kindref="member">[8]</ref> is used to achieve an accurate representation of those features in the mesh and to guarantee that the refinement process terminates whatever may be the dihedral angles formed by input surface patches incident to a given 1-feature or the angles formed by two 1-features incident to a 0-feature.</para>
<para>According to this method, the 1-dimensional features are sampled with points and covered by protecting balls centered on the sample points, in such a way that:<itemizedlist>
<listitem><para>no three balls intersect;</para>
</listitem><listitem><para>no pair of balls centered on different 1-features intersect.</para>
</listitem></itemizedlist>
</para>
<para>The triangulation embedding the mesh is in fact a weighted Delaunay triangulation, and the triangulation is initialized by the insertion of all the protecting balls, regarded as weighted points. The Delaunay refinement process is then launched as before except that refinement points are no longer circumcenters but are weighted circumcenters. All Steiner vertices inserted by the refinement process are given a zero weight. The method guarantees:<itemizedlist>
<listitem><para>that each segment joining two successive centers on a 1-dimensional feature will stay in the triangulation, thus ensuring an accurate approximation of the 1-dimensional features;</para>
</listitem><listitem><para>that the refinement process will never try to insert a refinement point in the union of the protecting balls, which ensures the termination of the refinement process.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1Mesh_3OptimizationPhase">
<title>Optimization Phase</title>
<para>Any tetrahedron that is quasi degenerate has a big radius edge ratio, except those belonging to the family of slivers. A sliver is easily obtained as the convex hull of 4 points close to the equatorial circle of a 3D ball and roughly equally spread along this circle. The Delaunay refinement tracks tetrahedra with big radius edge ratio and therefore eliminates all kinds of badly shaped tetrahedra except slivers.</para>
<para>Therefore, some sliver-shaped tetrahedra may still be present in the mesh at the end of the refinement process. The optimization phase aims to eliminate these slivers.</para>
<para>The optimization phase is a sequence of optimization processes, amongst the following available optimizers: an ODT-smoother, a Lloyd-smoother, a sliver perturber, and a sliver exuder.</para>
<para>The Lloyd and ODT-smoother are global optimizers moving the mesh vertices to minimize a mesh energy. Those optimizers are described respectively in <ref refid="citelist_1CITEREF_cgal:dfg-cvtaa-99t" kindref="member">[11]</ref>, <ref refid="citelist_1CITEREF_cgal:dw-tmgob-02" kindref="member">[10]</ref> and in <ref refid="citelist_1CITEREF_cgal::c-mssbo-04" kindref="member">[5]</ref>, <ref refid="citelist_1CITEREF_cgal:acyd-vtm-05" kindref="member">[1]</ref>. In both cases the mesh energy is the <computeroutput>L1</computeroutput> error resulting from the interpolation of the function <formula id="8">$ f(x) =x^2$</formula> by a piecewise linear function. In the case of the Lloyd smoother, the interpolation is linear in each Voronoi cell of the set of mesh vertices. In the case of the ODT-smoother, the interpolation is linear in each cell of the Delaunay triangulation of the mesh vertices, hence the name <computeroutput>ODT</computeroutput> which is an abbreviation for <emphasis>Optimal Delaunay Triangulation</emphasis>.</para>
<para><anchor id="index_1fig__mesh_3paraboloid"/> <image type="html" name="paraboloid.jpg"></image>
 <image type="latex" name="paraboloid.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__mesh_3paraboloid" kindref="member">fig__mesh_3paraboloid</ref> The one dimensional illustration of the mesh energy minimized by ODT (left) and Lloyd (right) smoothers. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<para>The Lloyd optimizer is known to be blind to the occurrence of slivers in the mesh while the ODT-smoother tends to chase them out. Both of them are global optimizers, meaning that they try to improve the whole mesh rather than focusing on the worst elements. However, both are empirically known to be very efficient as a preliminary step of optimization as they tend to enhance the efficiency of the perturber and/or the exuder applied afterwards, see <ref refid="index_1fig__figureoptimization" kindref="member">fig__figureoptimization</ref></para>
<para>The perturber and the exuder focus on improving the worst mesh elements. The perturber <ref refid="citelist_1CITEREF_cgal:tsa-ps3dd-09" kindref="member">[18]</ref> improves the meshes by local changes in the vertices positions aiming to make slivers disappear. The exuder <ref refid="citelist_1CITEREF_cgal:cdeft-slive-00" kindref="member">[6]</ref> chases the remaining slivers by re-weighting mesh vertices with optimal weights.</para>
<para>Each optimization process can be activated or not, and tuned according to the user requirements and the available time. By default, only the perturber and the exuder are activated.</para>
<para>Optimization processes are designed to improve mesh quality. However, beware that such an improvement is obtained by perturbing mesh vertices and modifying the mesh connectivity which has an impact on the strict compliance to the refinement criteria. Though a strict compliance to mesh criteria is granted at the end of the Delaunay refinement, this may no longer be true after some optimization processes. Also beware that the default behavior does involve some optimization processes.</para>
<para><anchor id="index_1fig__figureoptimization"/> <image type="html" name="optimization.jpg"></image>
 <image type="latex" name="optimization.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figureoptimization" kindref="member">fig__figureoptimization</ref> Compared effect of a global optimizer and the perturber. The left part shows the distribution of dihedral angles of mesh cells, right after Delaunay refinement (top), after some ODT smoothing (middle) and after perturbation (bottom). The numbers under the histograms give the measure in degrees of the smallest and biggest dihedral angles in the mesh. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect2>
<sect2 id="index_1Mesh_3PostProcessing">
<title>Post-processing</title>
<para>The tetrahedral mesh generation algorithm by Delaunay refinement provided by this package does not guarantee that all the vertices of the output mesh are actually present in the final mesh.</para>
<para>In most cases, all points are used, but if the geometry of the object has small features, compared to the size of the simplices (triangles and tetrahedra), it might be that the Delaunay facets that are selected in the restricted Delaunay triangulation miss some vertices of the triangulation. The concurrent version of the tetrahedral mesh generation algorithm also inserts a small set of auxiliary vertices that belong to the triangulation but are isolated from the complex at the end of the meshing process.</para>
<para>These so-called <emphasis>isolated</emphasis> vertices belong to the triangulation but not to any cell of the <computeroutput>C3T3</computeroutput>. They can be removed using the function <computeroutput>remove_isolated_vertices()</computeroutput> of <computeroutput><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref></computeroutput>.</para>
</sect2>
</sect1>
<sect1 id="index_1Mesh_3_section_interface">
<title>Interface</title>
<para>As of CGAL 5.6, this package uses <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> to set parameters. More details are provided in <ref refid="FromBoostNPtoCGALNP" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Upgrading Code using Boost Parameters to CGAL Named Function Parameters</ref>.</para>
<sect2 id="index_1Mesh_3TheGlobalFunctions">
<title>The Global Functions</title>
<para>A 3D mesh generation process is launched through a call to one of the two following functions:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3T3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshDomain,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshCriteria,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>NamedParameters&gt;</highlight></codeline>
<codeline><highlight class="normal">C3T3<sp/><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">make_mesh_3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshDomain&amp;<sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshCriteria&amp;<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamedParameters&amp;<sp/>np);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3T3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshDomain,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshCriteria,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>NamedParameters&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3</ref>(C3T3&amp;<sp/>c3t3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshDomain&amp;<sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshCriteria&amp;<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamedParameters&amp;<sp/>np);</highlight></codeline>
</programlisting></para>
<para>The function <computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">make_mesh_3()</ref></computeroutput> generates from scratch a mesh of the input domain, while the function <computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3()</ref></computeroutput> refines an existing mesh of the input domain. Note that as the protection of 0 and 1-dimensional features does not rely on Delaunay refinement, the function <computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3()</ref></computeroutput> has no parameter to preserve features.</para>
<para>The following sections describe the different template parameters (and their requirements) of these two global functions.</para>
</sect2>
<sect2 id="index_1Mesh_3TheDataStructure">
<title>The Data Structure</title>
<para>The template parameter <computeroutput>C3T3</computeroutput> is required to be a model of the concept <computeroutput><ref refid="classMeshComplex__3InTriangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">MeshComplex_3InTriangulation_3</ref></computeroutput>, a data structure devised to represent a three dimensional complex embedded in a 3D triangulation. In both functions, an instance of type <computeroutput>C3T3</computeroutput> is used to maintain the current approximating simplicial mesh and to represent the final 3D mesh at the end of the procedure.</para>
<para>The embedding 3D triangulation is required to be the nested type <computeroutput><ref refid="structCGAL_1_1Mesh__triangulation__3_1aacde3b6321609039e777e11c49ada1dc" kindref="member">CGAL::Mesh_triangulation_3::type</ref></computeroutput>, provided by the class template <computeroutput><ref refid="structCGAL_1_1Mesh__triangulation__3" kindref="compound">CGAL::Mesh_triangulation_3</ref></computeroutput>. The type for this triangulation is a wrapper around the class <computeroutput><ref refid="classCGAL_1_1Regular__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_3.tag">CGAL::Regular_triangulation_3</ref></computeroutput> whose vertex and cell base classes are respectively models of the concepts <computeroutput><ref refid="classMeshVertexBase__3" kindref="compound">MeshVertexBase_3</ref></computeroutput> and <computeroutput><ref refid="classMeshCellBase__3" kindref="compound">MeshCellBase_3</ref></computeroutput>.</para>
</sect2>
<sect2 id="index_1Mesh_3TheDomainOracleandtheFeaturesParameter">
<title>The Domain Oracle and the Features Parameter</title>
<para>The template parameter <computeroutput>MeshDomain</computeroutput> is required to be a model of the concept <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput>. The argument <computeroutput>domain</computeroutput> of type <computeroutput>MeshDomain</computeroutput> is the sole link through which the domain to be discretized is known by the mesh generation algorithm.</para>
<para>This concept provides, among others, member functions to test whether or not a query segment intersects boundary surfaces, and to compute an intersection point in the affirmative. The <computeroutput><ref refid="classMeshDomain__3" kindref="compound">MeshDomain_3</ref></computeroutput> concept adds member functions which given a query point tell whether the point lies inside or outside the domain and in which subdomain the point lies, if inside.</para>
<para>If the domain description includes 0 and 1-dimensional features that have to be accurately represented in the final mesh, the template parameter <computeroutput>MeshDomain</computeroutput> is required to be of a model of the concept <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput>. The concept <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput> mainly provides the incidence graph of 0, 1 and 2-dimensional features, and a member function to construct sample points on curves.</para>
<para>Users whose domain is a model of <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput> can choose to have the corners and curves of the domain represented in the mesh or not, using the following parameters: <itemizedlist>
<listitem>
<para><ref refid="group__PkgMesh3Parameters_1gaf2aaad1efc924b8d96992a85334f0ca5" kindref="member"><computeroutput>parameters::features(domain)</computeroutput> </ref> sets features according to the domain, i.e. 0 and 1-dimensional features are taken into account if <computeroutput>domain</computeroutput> is a <computeroutput><ref refid="classMeshDomainWithFeatures__3" kindref="compound">MeshDomainWithFeatures_3</ref></computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1gab6c227cc0baf003108979eef46cf430d" kindref="member">parameters::no_features()</ref></computeroutput> prevents the representation of 0 and 1-dimensional features in the mesh. This is useful to get a smooth and rough approximation of a domain with features. </para>
</listitem>
</itemizedlist>
</para>
</sect2>
<sect2 id="index_1Mesh_3TheMeshingCriteria">
<title>The Meshing Criteria</title>
<para>The template parameter <computeroutput>MeshCriteria</computeroutput> must be a model of the concept <computeroutput><ref refid="classMeshCriteria__3" kindref="compound">MeshCriteria_3</ref></computeroutput>, or a model of the refined concept <computeroutput><ref refid="classMeshCriteriaWithFeatures__3" kindref="compound">MeshCriteriaWithFeatures_3</ref></computeroutput> if the domain has exposed features. The argument of type <computeroutput>MeshCriteria</computeroutput> passed to the mesh generator specifies the size and shape requirements for the tetrahedra in the mesh and for the triangles in the boundary surface mesh. These criteria condition the rules that drive the refinement process. At the end of the refinement process, mesh elements satisfy the criteria. Note that this may not be strictly true anymore after the optimization phase, but this last phase is devised to only improve the mesh quality.</para>
<para>The criteria for surface facets are governed by the four following parameters: <itemizedlist>
<listitem>
<para><emphasis><computeroutput>facet_angle</computeroutput>.</emphasis> This parameter controls the shape of surface facets. Specifically, it is a lower bound for the angle (in degrees) of surface facets. When boundary surfaces are smooth, the termination of the meshing process is guaranteed if this angular bound is at most 30 degrees <ref refid="citelist_1CITEREF_c-gqmgc-93" kindref="member">[9]</ref>. </para>
</listitem>
<listitem>
<para><emphasis><computeroutput>facet_size</computeroutput>.</emphasis> This parameter controls the size of surface facets. Each surface facet has a surface Delaunay ball which is a ball circumscribing the surface facet and centered on the surface patch. The parameter <computeroutput>facet_size</computeroutput> is either a constant or a spatially variable scalar field, providing an upper bound for the radii of surface Delaunay balls. </para>
</listitem>
<listitem>
<para><emphasis><computeroutput>facet_distance</computeroutput>.</emphasis> This parameter controls the approximation error of boundary and subdivision surfaces. Specifically, it is either a constant or a spatially variable scalar field. It provides an upper bound for the distance between the circumcenter of a surface facet and the center of a surface Delaunay ball of this facet. </para>
</listitem>
<listitem>
<para><emphasis><computeroutput>facet_topology</computeroutput>.</emphasis> This parameter controls the set of topological constraints which have to be verified by each surface facet. By default, each vertex of a surface facet has to be located on a surface patch, on a curve, or on a corner. It can also be set to check whether the three vertices of a surface facet belongs to the same surface patch. This has to be done cautiously, as such a criterion needs that each intersection of input surface patches is an input 1-dimensional feature. </para>
</listitem>
</itemizedlist>
</para>
<para>The criteria for mesh cells are governed by two parameters: <itemizedlist>
<listitem>
<para><emphasis><computeroutput>cell_radius_edge_ratio</computeroutput>.</emphasis> This parameter controls the shape of mesh cells (but can&apos;t filter slivers, as we discussed earlier). It is an upper bound for the ratio between the circumradius of a mesh tetrahedron and its shortest edge. There is a theoretical bound for this parameter: the Delaunay refinement process is guaranteed to terminate for values of <computeroutput>cell_radius_edge_ratio</computeroutput> bigger than 2. </para>
</listitem>
<listitem>
<para><emphasis><computeroutput>cell_size</computeroutput>.</emphasis> This parameter controls the size of mesh tetrahedra. It is either a scalar or a spatially variable scalar field. It provides an upper bound on the circumradii of the mesh tetrahedra. </para>
</listitem>
</itemizedlist>
</para>
<para><ref refid="index_1fig__figureparameters" kindref="member">fig__figureparameters</ref> shows how the mesh generation process behaves with respect to these parameters.</para>
<para><anchor id="index_1fig__figureparameters"/><center> <table rows="2" cols="3"><row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para><image type="html" name="./implicit_domain.jpg" inline="yes"></image>
   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><image type="html" name="./implicit_domain_3.jpg" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./implicit_domain_4.jpg" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./implicit_domain_5.jpg" inline="yes"></image>
  </para>
</entry></row>
</table>
</center> <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly> <ref refid="index_1fig__figureparameters" kindref="member">fig__figureparameters</ref> Top: the mesh is obtained using the parameters <formula id="9">$ (25,0.15,0.05)$</formula> for the angular bound, radius bound and distance bound of surface facets and <formula id="10">$ (4,0.2) $</formula> for the radius-edge bound and radius bound of mesh cells. The result is a uniform mesh which contains tetrahedra of about the same size. Bottom left : the mesh is obtained by relaxing the <emphasis> size bound</emphasis> of tetrahedra and facets. The result is a small coarse mesh. Bottom middle : the mesh is obtained from the previous one by tightening the <emphasis>distance bound</emphasis> of surface facets to <formula id="11">$
0.01$</formula>. The result is then a graded 3D mesh with a dense surface mesh achieving a precise approximation. Bottom right : the mesh is obtained from the previous one by fixing <emphasis>radius bound</emphasis> of surface facets to <formula id="12">$ 0.01$</formula>. The surface mesh is then denser to achieve the size bound. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<para>If the domain has 1-dimensional exposed features, the <computeroutput>criteria</computeroutput> includes a sizing field to guide the sampling of 1-dimensional features with protecting balls centers. <itemizedlist>
<listitem>
<para><emphasis><computeroutput>edge_size</computeroutput></emphasis>. This constant or variable scalar field is used as an upper bound for the distance between two protecting ball centers that are consecutive on a 1-feature. This parameter has to be set to a positive value when 1-dimensional features protection is used. </para>
</listitem>
</itemizedlist>
</para>
</sect2>
<sect2 id="index_1Mesh_3TheOptimizationParameters">
<title>The Optimization Parameters</title>
<para>The four additional parameters are optimization parameters. They control which optimization processes are performed and enable the user to tune the parameters of the activated optimization processes. These parameters have internal types which are not described but the library provides global functions to generate appropriate values of these types: <itemizedlist>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1gae8754fd84eee75700656e4459f3a515d" kindref="member">parameters::lloyd()</ref></computeroutput> and <computeroutput><ref refid="group__PkgMesh3Parameters_1ga8bd27303eebeb84a2fa70fbb3aa8a56c" kindref="member">parameters::no_lloyd()</ref></computeroutput> activate and deactivate the Lloyd smoother. </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga684a23d08b8d8086063c6e3276025322" kindref="member">parameters::odt()</ref></computeroutput> and <computeroutput><ref refid="group__PkgMesh3Parameters_1ga4d83f119881f1c461357344b96364f2c" kindref="member">parameters::no_odt()</ref></computeroutput> activate and deactivate the ODT-smoother. </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga69a51bb2164f320aa5e76409cefd6554" kindref="member">parameters::perturb()</ref></computeroutput> and <computeroutput><ref refid="group__PkgMesh3Parameters_1ga9f696ff6caf3c4efd246e43946a89294" kindref="member">parameters::no_perturb()</ref></computeroutput> activate and deactivate the perturber. </para>
</listitem>
<listitem>
<para><computeroutput><ref refid="group__PkgMesh3Parameters_1ga09f46cfd7b3364794e767755f4191862" kindref="member">parameters::exude()</ref></computeroutput> and <computeroutput><ref refid="group__PkgMesh3Parameters_1gab24d8652fbb6ae045e989769c5bc69f0" kindref="member">parameters::no_exude()</ref></computeroutput> activate and deactivate the exuder. </para>
</listitem>
</itemizedlist>
</para>
<para>These parameters are optional and can be passed in any order. If one parameter is not passed the default value is used. By default, only the perturber and the exuder are activated. Note that whatever may be the optimization processes activated by <computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">make_mesh_3()</ref></computeroutput> or <computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3()</ref></computeroutput>, they are always launched in the order that is a suborder of the following: <emphasis>ODT-smoother</emphasis>, <emphasis>Lloyd-smoother</emphasis>, <emphasis>perturber</emphasis>, and <emphasis>exuder</emphasis>.</para>
<para>The package also provides four global functions to launch each optimization process independently. These functions are useful for advanced experimentation on the efficiency of each optimization method. Note however that the exuder adds on mesh vertices weights that are conditioned by vertices positions. Therefore an exudation process should never be run before a smoother or a perturber. For a maximum efficiency, whatever may be the optimization processes activated, they should be launched in the order that is a suborder of the following: <emphasis>ODT-smoother</emphasis>, <emphasis>Lloyd-smoother</emphasis>, <emphasis>perturber</emphasis>, and <emphasis>exuder</emphasis>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3T3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshDomain<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh2Enum_1gab9fe60482a45120b3c061a8a4ec9018d" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_2.tag">Mesh_optimization_return_code</ref><sp/><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">lloyd_optimize_mesh_3</ref>(C3T3&amp;<sp/>c3t3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshDomain&amp;<sp/>domain);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3T3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshDomain<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh2Enum_1gab9fe60482a45120b3c061a8a4ec9018d" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_2.tag">Mesh_optimization_return_code</ref><sp/><ref refid="group__PkgMesh3Functions_1ga4e27ad603e8376a2cd05166162ea3a61" kindref="member">odt_optimize_mesh_3</ref>(C3T3&amp;<sp/>c3t3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshDomain&amp;<sp/>domain);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3T3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MeshDomain<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh2Enum_1gab9fe60482a45120b3c061a8a4ec9018d" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_2.tag">Mesh_optimization_return_code</ref><sp/><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">perturb_mesh_3</ref>(C3T3&amp;<sp/>c3t3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshDomain&amp;<sp/>domain);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3T3<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__PkgMesh2Enum_1gab9fe60482a45120b3c061a8a4ec9018d" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_2.tag">Mesh_optimization_return_code</ref><sp/><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">exude_mesh_3</ref>(C3T3&amp;<sp/>c3t3);</highlight></codeline>
</programlisting></para>
<para>Note that the global functions activating the optimization processes or launching those processes have themselves parameters (see details in reference pages) to tune the optimization process.</para>
</sect2>
<sect2 id="index_1Mesh_3ParallelAlgorithms">
<title>Parallel Algorithms</title>
<para>Enabling parallel meshing and optimization algorithms is achieved through setting the third template parameter of the <computeroutput><ref refid="structCGAL_1_1Mesh__triangulation__3" kindref="compound">Mesh_triangulation_3</ref></computeroutput> class to <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, when defining the triangulation type. Note that when the user provides his/her own vertex and cell base classes, the <computeroutput><ref refid="classMeshVertexBase__3" kindref="compound">MeshVertexBase_3</ref></computeroutput> and <computeroutput><ref refid="classMeshCellBase__3" kindref="compound">MeshCellBase_3</ref></computeroutput> concepts impose additional requirements.</para>
<para>Parallel algorithms require the executable to be linked against the <ulink url="https://github.com/oneapi-src/oneTBB">Intel TBB library</ulink>. To control the number of threads used, the user may use the tbb::task_scheduler_init class. See the <ulink url="https://software.intel.com/content/www/us/en/develop/documentation/onetbb-documentation/top.html">TBB documentation</ulink> for more details.</para>
</sect2>
</sect1>
<sect1 id="index_1Mesh_3_section_io">
<title>Input/Output</title>
<para>Several file formats are supported for writing a mesh:<itemizedlist>
<listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamMedit" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Medit File Format</ref>, using <ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag"><computeroutput>CGAL::IO::write_MEDIT()</computeroutput></ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamVTK" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">VTK (VTU / VTP / legacy) File Formats</ref>, using <ref refid="group__PkgSMDS3ExportFunctions_1gae43fbd7adc8ca9598471575c96a44a3a" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag"><computeroutput>CGAL::IO::output_to_vtu()</computeroutput></ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamAvizo" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Avizo File Format</ref>, using <ref refid="group__PkgSMDS3ExportFunctions_1ga94b54be4b5bd58928241f9d389a222f0" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag"><computeroutput>CGAL::IO::output_to_avizo()</computeroutput></ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamTetgen" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Stream_support.tag">Tetgen File Format</ref>, using <ref refid="group__PkgSMDS3ExportFunctions_1gaad775f6b0b4a36dfcab35c8d005fdca3" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag"><computeroutput>CGAL::IO::output_to_tetgen()</computeroutput></ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="index_1Mesh_3_section_examples">
<title>Examples</title>
<sect2 id="index_1Mesh_33DDomainsBoundedbyIsosurfaces">
<title>3D Domains Bounded by Isosurfaces</title>
<sect3 id="index_1Mesh_33DDomainsImplicitIsosurfaces">
<title>3D Domains Bounded by Implicit Isosurfaces</title>
<para>The following code produces a 3D mesh for a domain whose boundary surface is an isosurface defined by an implicit function. <ref refid="index_1fig__figureimplicit_domain" kindref="member">fig__figureimplicit_domain</ref> shows a cut view of the resulting mesh.</para>
<para>Note the use of named parameters in the constructor of the <computeroutput>Mesh_criteria</computeroutput> instance.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_implicit_sphere_8cpp-example" kindref="compound">Mesh_3/mesh_implicit_sphere.cpp</ref> <programlisting filename="Mesh_3/mesh_implicit_sphere.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_3<sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT<sp/>(Function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>sphere_function<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::squared_distance</ref>(p,<sp/>Point(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>))-1;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh_domain::create_implicit_mesh_domain(<sp/>sphere_function,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K::Sphere_3(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>,<sp/>K::FT(2)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(30).facet_size(0.1).facet_distance(0.025).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(2).cell_size(0.1));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figureimplicit_domain"/> <image type="html" name="implicit_domain.jpg"></image>
 <image type="latex" name="implicit_domain.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figureimplicit_domain" kindref="member">fig__figureimplicit_domain</ref> Cut view of a 3D mesh produced from an implicit domain <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
</sect2>
<sect2 id="index_1Mesh_3MeshingMultipleDomains">
<title>Meshing Multiple Domains</title>
<para><anchor id="index_1Mesh_3_subsection_examples_multi_domain"/> </para>
<sect3 id="index_1Mesh_3MeshingMultipleDomains_1">
<title>Construction from a Vector of Implicit Functions</title>
<para>The following code produces a 3D mesh for a domain consisting of several subdomains. It uses <computeroutput><ref refid="classCGAL_1_1Implicit__multi__domain__to__labeling__function__wrapper" kindref="compound">Implicit_multi_domain_to_labeling_function_wrapper</ref></computeroutput> as model of <computeroutput><ref refid="classImplicitFunction" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesher.tag">ImplicitFunction</ref></computeroutput> which is required by <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref></computeroutput>.</para>
<para><ref refid="index_1fig__figuremulti_domain" kindref="member">fig__figuremulti_domain</ref> shows a view and a cut view of the resulting mesh.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_implicit_domains_8cpp-example" kindref="compound">Mesh_3/mesh_implicit_domains.cpp</ref> <programlisting filename="Mesh_3/mesh_implicit_domains.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Implicit_to_labeling_function_wrapper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;implicit_functions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>IO</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT_to_point_function_wrapper&lt;double,<sp/>K::Point_3&gt;<sp/>Function;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Implicit__multi__domain__to__labeling__function__wrapper" kindref="compound">CGAL::Implicit_multi_domain_to_labeling_function_wrapper&lt;Function&gt;</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function_wrapper;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Function_wrapper::Function_vector<sp/>Function_vector;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mesh<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mesh_criteria::Facet_criteria<sp/><sp/><sp/><sp/>Facet_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mesh_criteria::Cell_criteria<sp/><sp/><sp/><sp/><sp/>Cell_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Function<sp/>f1(&amp;torus_function);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Function<sp/>f2(&amp;sphere_function&lt;3&gt;);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Function_vector<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(f1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(f2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Domain<sp/>(Warning:<sp/>Sphere_3<sp/>constructor<sp/>uses<sp/>square<sp/>radius<sp/>!)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(Function_wrapper(v),<sp/>K::Sphere_3(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>,<sp/><ref refid="group__PkgAlgebraicFoundationsRef_1ga07001b5ddc5c43096c811c91a306be9a" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL::square</ref>(K::FT(5))),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::relative_error_bound(1e-6));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Facet_criteria<sp/>facet_criteria(30,<sp/>0.2,<sp/>0.02);<sp/></highlight><highlight class="comment">//<sp/>angle,<sp/>size,<sp/>approximation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Cell_criteria<sp/>cell_criteria(2.,<sp/>0.4);<sp/></highlight><highlight class="comment">//<sp/>radius-edge<sp/>ratio,<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(facet_criteria,<sp/>cell_criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/>params::no_exude().no_perturb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perturbation<sp/>(maximum<sp/>cpu<sp/>time:<sp/>10s,<sp/>targeted<sp/>dihedral<sp/>angle:<sp/>default)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">CGAL::perturb_mesh_3</ref>(c3t3,<sp/>domain,<sp/>params::time_limit(10));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Exudation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">CGAL::exude_mesh_3</ref>(c3t3,<sp/>params::time_limit(12));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <anchor id="index_1fig__figuremulti_domain"/> <center> <table rows="1" cols="2"><row>
<entry thead="no"><para><image type="html" name="multi_domain.jpg"></image>
 <image type="latex" name="multi_domain.jpg" width="7.5cm"></image>
  </para>
</entry><entry thead="no"><para><image type="html" name="multi_domain_cut.jpg"></image>
 <image type="latex" name="multi_domain_cut.jpg" width="7.5cm"></image>
   </para>
</entry></row>
</table>
</center> <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figuremulti_domain" kindref="member">fig__figuremulti_domain</ref> View (left) and cut view (right) of a 3D mesh of a torus intersecting sphere. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3MeshingMultipleDomains_2">
<title>Construction from a Vector of Implicit Functions and a Vector of Strings</title>
<para>The following code produces a 3D mesh for a domain consisting of several subdomains too. Here, the set of subdomains is given by a vector of vector of signs, whereas the set was built automatically in the previous example. Each subdomain corresponds to a sign vector [s1, s2, ..., sn] where si is the sign of the function fi(p) at a point p of the subdomain.</para>
<para><ref refid="index_1fig__figuremulti_domain2" kindref="member">fig__figuremulti_domain2</ref> shows a view of the resulting mesh.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_implicit_domains_2_8cpp-example" kindref="compound">Mesh_3/mesh_implicit_domains_2.cpp</ref> <programlisting filename="Mesh_3/mesh_implicit_domains_2.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Implicit_to_labeling_function_wrapper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;implicit_functions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>IO</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT_to_point_function_wrapper&lt;double,<sp/>K::Point_3&gt;<sp/>Function;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Implicit__multi__domain__to__labeling__function__wrapper" kindref="compound">CGAL::Implicit_multi_domain_to_labeling_function_wrapper&lt;Function&gt;</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function_wrapper;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Function_wrapper::Function_vector<sp/>Function_vector;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mesh<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mesh_criteria::Facet_criteria<sp/><sp/><sp/><sp/>Facet_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mesh_criteria::Cell_criteria<sp/><sp/><sp/><sp/><sp/>Cell_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Function<sp/>f1(&amp;torus_function);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Function<sp/>f2(&amp;sphere_function&lt;3&gt;);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Function_vector<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(f1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.push_back(f2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vps;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vps.push_back(</highlight><highlight class="stringliteral">&quot;+-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(Function_wrapper(v,<sp/>vps),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K::Sphere_3(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>,<sp/><ref refid="group__PkgAlgebraicFoundationsRef_1ga07001b5ddc5c43096c811c91a306be9a" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL::square</ref>(K::FT(5))),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::relative_error_bound(1e-6));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Facet_criteria<sp/>facet_criteria(30,<sp/>0.2,<sp/>0.02);<sp/></highlight><highlight class="comment">//<sp/>angle,<sp/>size,<sp/>approximation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Cell_criteria<sp/>cell_criteria(2.,<sp/>0.4);<sp/></highlight><highlight class="comment">//<sp/>radius-edge<sp/>ratio,<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(facet_criteria,<sp/>cell_criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/>params::no_exude().no_perturb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perturbation<sp/>(maximum<sp/>cpu<sp/>time:<sp/>10s,<sp/>targeted<sp/>dihedral<sp/>angle:<sp/>default)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">CGAL::perturb_mesh_3</ref>(c3t3,<sp/>domain,<sp/>params::time_limit(10));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Exudation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">CGAL::exude_mesh_3</ref>(c3t3,<sp/>params::time_limit(12));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <anchor id="index_1fig__figuremulti_domain2"/> <image type="html" name="multi_domain_2.jpg"></image>
 <image type="latex" name="multi_domain_2.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figuremulti_domain2" kindref="member">fig__figuremulti_domain2</ref> View of a 3D mesh of the relative complement of a torus in a sphere. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3MeshingMultipleDomains_3">
<title>Construction of a Hybrid Domain : From an Implicit and a Polyhedral Domain</title>
<para>The example code of <ref refid="Mesh_3_2mesh_hybrid_mesh_domain_8cpp-example" kindref="compound">Mesh_3/mesh_hybrid_mesh_domain.cpp</ref> produces a 3D mesh for a domain consisting of several subdomains too. Here, the set of subdomains is given by two subdomains of different types : a domain defined by an implicit sphere, and a domain defined by the triangulated surface of a cube.</para>
<para><ref refid="index_1fig__mesh3HybridDomainExample" kindref="member">fig__mesh3HybridDomainExample</ref> shows the results with or without the protection of the 1D-features.</para>
<para><anchor id="index_1fig__mesh3HybridDomainExample"/><center> <table rows="1" cols="3"><row>
<entry thead="no"><para><image type="html" name="./hybrid_domain.jpg" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./hybrid_domain_mesh_no_protection.jpg" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./hybrid_domain_mesh_protection.jpg" inline="yes"></image>
  </para>
</entry></row>
</table>
</center> <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly> <ref refid="index_1fig__mesh3HybridDomainExample" kindref="member">fig__mesh3HybridDomainExample</ref> Left: the input hybrid domain.</para>
<para>Middle : the output mesh without any call to <computeroutput>add_features()</computeroutput>.</para>
<para>Right : the output mesh with added 1D-features at the intersection of subdomains. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
</sect2>
<sect2 id="index_1Mesh_3PolyhedralDomains">
<title>Polyhedral Domains</title>
<para><anchor id="index_1Mesh_3_subsection_examples_polyhedral"/> </para>
<sect3 id="index_1Mesh_33DPolyhedralDomains">
<title>3D Polyhedral Domains</title>
<para>The following code produces a 3D mesh for a domain defined by a polyhedral surface. <ref refid="index_1fig__figurepolyhedral_domain" kindref="member">fig__figurepolyhedral_domain</ref> shows the resulting mesh.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_polyhedral_domain_8cpp-example" kindref="compound">Mesh_3/mesh_polyhedral_domain.cpp</ref> <programlisting filename="Mesh_3/mesh_polyhedral_domain.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedron_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/boost/graph/helpers.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedral_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/refine_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/File_medit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3&lt;K&gt;</ref><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedral__mesh__domain__3" kindref="compound">CGAL::Polyhedral_mesh_domain_3&lt;Polyhedron, K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/elephant.off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>input<sp/>polyhedron</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyhedron<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>input(fname);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input<sp/>&gt;&gt;<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.fail()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__PkgBGLHelperFct_1ga11883d231eec1b58f37efe4acedd9588" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::is_triangle_mesh</ref>(polyhedron)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>geometry<sp/>is<sp/>not<sp/>triangulated.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(polyhedron);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria<sp/>(no<sp/>cell_size<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(25).facet_size(0.15).facet_distance(0.008).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/>params::no_perturb().<ref refid="group__PkgMesh3Parameters_1gab24d8652fbb6ae045e989769c5bc69f0" kindref="member">no_exude</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out_1.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>tetrahedron<sp/>size<sp/>(keep<sp/>cell_radius_edge_ratio),<sp/>ignore<sp/>facets</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>new_criteria(params::cell_radius_edge_ratio(3).cell_size(0.03));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>refinement<sp/>(and<sp/>make<sp/>the<sp/>output<sp/>manifold)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">CGAL::refine_mesh_3</ref>(c3t3,<sp/>domain,<sp/>new_criteria,<sp/>params::manifold());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.open(</highlight><highlight class="stringliteral">&quot;out_2.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figurepolyhedral_domain"/> <center> <table rows="1" cols="2"><row>
<entry thead="no"><para><image type="html" name="polyhedral_domain.jpg"></image>
 <image type="latex" name="polyhedral_domain.jpg" width="7.5cm"></image>
  </para>
</entry><entry thead="no"><para><image type="html" name="polyhedral_domain_2.jpg"></image>
 <image type="latex" name="polyhedral_domain_2.jpg" width="7.5cm"></image>
   </para>
</entry></row>
</table>
</center> <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figurepolyhedral_domain" kindref="member">fig__figurepolyhedral_domain</ref> View of 3D meshes produced from a polyhedral domain. (i) is a view of file out_1.mesh and (ii) is a view of file out_2.mesh. Code from subsection <ref refid="index_1Mesh_3_subsection_examples_polyhedral" kindref="member">Mesh_3_subsection_examples_polyhedral</ref> generates these files. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_33DSurfaceInsidePolyhedralDomain">
<title>Remeshing a Polyhedral Domain with Surfaces</title>
<para>In the following example we have a &quot;bounding polyhedron&quot; which defines the meshing domain and two surfaces inside this domain. The surfaces inside the domain may be closed surfaces as well as surfaces with boundaries. In the case of a closed surface the volume delimited by this surface is also considered as inside the domain. previous subsection.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_polyhedral_domain_with_surface_inside_8cpp-example" kindref="compound">Mesh_3/mesh_polyhedral_domain_with_surface_inside.cpp</ref> <programlisting filename="Mesh_3/mesh_polyhedral_domain_with_surface_inside.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedron_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedral_mesh_domain_with_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Timer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_polyhedron_3&lt;K&gt;::type</ref><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">CGAL::Polyhedral_mesh_domain_with_features_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,CGAL::Sequential_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tr,Mesh_domain::Corner_index,Mesh_domain::Curve_index&gt;<sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout.precision(17);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cerr.precision(17);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/horizons.off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>input(fname);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname2<sp/>=<sp/>(argc&gt;2)?argv[2]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/horizons-domain.off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>input2(fname2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyhedron<sp/>sm,<sp/>smbounding;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input<sp/>&gt;&gt;<sp/>sm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input2<sp/>&gt;&gt;<sp/>smbounding;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.fail()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Timer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Miscellany.tag">CGAL::Timer</ref><sp/>t;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t.<ref refid="classCGAL_1_1Timer_1a6a017f275336b7bac43ba48c4d86331b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Miscellany.tag">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(sm,<sp/>smbounding);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>sharp<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.detect_features();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size(0.025).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_angle(25).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_size(0.05).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_distance(0.005).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_size(0.05));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::no_perturb().no_exude());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>t.<ref refid="classCGAL_1_1Timer_1a393807d2b9639442c12d65497d56ff97" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Miscellany.tag">time</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>sec.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dump_c3t3(c3t3,<sp/></highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figurepolyhedral_domain_with_surface"/> <image type="html" name="polyhedral_domain_with_surface.jpg"></image>
 <image type="latex" name="polyhedral_domain_with_surface.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figurepolyhedral_domain_with_surface" kindref="member">fig__figurepolyhedral_domain_with_surface</ref> View of 3D meshes produced from a polyhedral domain with a nested surface. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3RemeshingPolyhedralSurface">
<title>Remeshing a Polyhedral Surface</title>
<para>The following code creates a polyhedral domain, with only one polyhedron, and no &quot;bounding polyhedron&quot;, so the volumetric part of the domain will be empty. This enables to remesh a surface, and is equivalent to the function <computeroutput><ref refid="group__PkgSurfaceMesher3FunctionsMakeMesh_1ga7e188adef5bfadaafd08db82c8a25dc1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesher.tag">make_surface_mesh()</ref></computeroutput>.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2remesh_polyhedral_surface_8cpp-example" kindref="compound">Mesh_3/remesh_polyhedral_surface.cpp</ref> <programlisting filename="Mesh_3/remesh_polyhedral_surface.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedral_mesh_domain_with_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">CGAL::Polyhedral_mesh_domain_with_features_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Polyhedron<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_polyhedron_3&lt;K&gt;::type</ref><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tr,Mesh_domain::Corner_index,Mesh_domain::Curve_index&gt;<sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>a<sp/>polyhedron</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyhedron<sp/>poly;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>input(<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/lion-head.off&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input<sp/>&gt;&gt;<sp/>poly;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__PkgBGLHelperFct_1ga11883d231eec1b58f37efe4acedd9588" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::is_triangle_mesh</ref>(poly)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>geometry<sp/>is<sp/>not<sp/>triangulated.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>vector<sp/>with<sp/>only<sp/>one<sp/>element:<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>polyhedron.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Polyhedron*&gt;<sp/>poly_ptrs_vector(1,<sp/>&amp;poly);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>polyhedral<sp/>domain,<sp/>with<sp/>only<sp/>one<sp/>polyhedron,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>no<sp/>&quot;bounding<sp/>polyhedron&quot;,<sp/>so<sp/>the<sp/>volumetric<sp/>part<sp/>of<sp/>the<sp/>domain<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(poly_ptrs_vector.begin(),<sp/>poly_ptrs_vector.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>sharp<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.detect_features();<sp/></highlight><highlight class="comment">//includes<sp/>detection<sp/>of<sp/>borders</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size(0.025).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_angle(25).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_size(0.1).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_distance(0.001));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/>params::no_perturb().no_exude());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>the<sp/>facets<sp/>of<sp/>the<sp/>c3t3<sp/>to<sp/>an<sp/>OFF<sp/>file.<sp/>The<sp/>facets<sp/>will<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>oriented.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>off_file(</highlight><highlight class="stringliteral">&quot;out.off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c3t3.output_boundary_to_off(off_file);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>off_file.fail()<sp/>?<sp/>EXIT_FAILURE<sp/>:<sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figureremeshing"/> <image type="html" name="remeshing.jpg"></image>
 <image type="latex" name="remeshing.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figureremeshing" kindref="member">fig__figureremeshing</ref> View of a remeshed surface. (Left) input mesh (Right) output mesh. Code from subsection <ref refid="index_1Mesh_3RemeshingPolyhedralSurface" kindref="member">Remeshing a Polyhedral Surface</ref> generates the file. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
</sect2>
<sect2 id="index_1Mesh_3DomainsFrom3DImages">
<title>Domains From 3D Images</title>
<sect3 id="index_1Mesh_33DDomainsGrayImageIsosurfaces">
<title>3D Domains Bounded by Isosurfaces in 3D Gray-Level Images</title>
<para>The following example produces a 3D mesh for a domain whose boundary surface is the isosurface associated to an isovalue inside the input gray-level 3D image. In the distribution you can also find the example <ref refid="Mesh_3_2mesh_3D_gray_vtk_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_gray_vtk_image.cpp</ref> which can deal with <computeroutput>*.nii</computeroutput> as well as <computeroutput>DICOM</computeroutput> files as input.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_3D_gray_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_gray_image.cpp</ref> <programlisting filename="Mesh_3/mesh_3D_gray_image.cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Image_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Image_word_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;images/skull_2.9.inr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>image;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!image.<ref refid="classCGAL_1_1Image__3_1a6be029d7a0ee6dbd5eab1fd0adae42ba" kindref="member">read</ref>(fname)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh_domain::create_gray_image_mesh_domain(image,<sp/>params::iso_value(2.9f).value_outside(0.f));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(30).facet_size(6).facet_distance(2).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).cell_size(8));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Meshing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1Mesh_3DomainsFromSegmented3DImages">
<title>Domains From Segmented 3D Images</title>
<para><anchor id="index_1Mesh_3_subsection_examples_3d_image"/>The following code produces a 3D mesh from a 3D image. The image is a segmented medical image in which each voxel is associated a label in accordance with the tissue the voxel belongs to. The domain is therefore a multi-domain where each subdomain corresponds to a specific tissue.</para>
<para>In the following example, the image is read from the file <computeroutput>liver.inr.gz</computeroutput> which is encoded in the format of the library Inrimage <computeroutput><ulink url="https://www-pequan.lip6.fr/~bereziat/inrimage/">https://www-pequan.lip6.fr/~bereziat/inrimage/</ulink></computeroutput>. The resulting mesh is shown in <ref refid="index_1fig__figureliver_3d_image_mesh" kindref="member">fig__figureliver_3d_image_mesh</ref>.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_3D_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image.cpp</ref> <programlisting filename="Mesh_3/mesh_3D_image.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Image_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;images/liver.inr.gz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>image;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!image.<ref refid="classCGAL_1_1Image__3_1a6be029d7a0ee6dbd5eab1fd0adae42ba" kindref="member">read</ref>(fname)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(30).facet_size(6).facet_distance(4).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).cell_size(8));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figureliver_3d_image_mesh"/> <image type="html" name="liver.jpg"></image>
 <image type="latex" name="liver.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figureliver_3d_image_mesh" kindref="member">fig__figureliver_3d_image_mesh</ref> Cut view of a 3D mesh produced from a segmented liver image. Code from subsection <ref refid="index_1Mesh_3_subsection_examples_3d_image" kindref="member">Mesh_3_subsection_examples_3d_image</ref> generates this file. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3DomainsFrom3DImagesWithWeights">
<title>Domains From Segmented 3D Images, with Weights</title>
<para>When a segmented image is given as input, the generated mesh surface sometimes sticks too closely to the voxels surface, causing an aliasing effect. A solution to generate a smooth and accurate output surface was described by Stalling et al in <ref refid="citelist_1CITEREF_stalling1998weighted" kindref="member">[17]</ref>. It consists in generating a second input image, made of integer coefficients called <emphasis>weights</emphasis>, and use those weights to define smoother domain boundaries. The 3D image of weights can be generated using <computeroutput><ref refid="group__PkgMesh3Functions_1gaa7f5d88727381f5923f1e093dc7de81a" kindref="member">CGAL::Mesh_3::generate_label_weights()</ref></computeroutput> as shown in the following example.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_3D_weighted_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_weighted_image.cpp</ref> <programlisting filename="Mesh_3/mesh_3D_weighted_image.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_3/generate_label_weights.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Image_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/File_binary_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/tags.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">K<sp/>=<sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Mesh_domain<sp/>=<sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Tr<sp/><sp/><sp/>=<sp/><ref refid="structCGAL_1_1Mesh__triangulation__3" kindref="compound">CGAL::Mesh_triangulation_3</ref>&lt;Mesh_domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Default</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_if_available_tag</ref>&gt;::type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">C3t3<sp/>=<sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Mesh_criteria<sp/>=<sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc<sp/>&gt;<sp/>1)<sp/>?<sp/>argv[1]<sp/>:<sp/><ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;images/420.inr&quot;</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>liver.inr.gz&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>image;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!image.<ref refid="classCGAL_1_1Image__3_1a6be029d7a0ee6dbd5eab1fd0adae42ba" kindref="member">read</ref>(fname)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>(std::max)(image.vx(),<sp/>(std::max)(image.vy(),<sp/>image.vz()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>img_weights<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PkgMesh3Functions_1gaa7f5d88727381f5923f1e093dc7de81a" kindref="member">CGAL::Mesh_3::generate_label_weights</ref>(image,<sp/>sigma);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::weights(img_weights).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relative_error_bound(1e-6));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(30).facet_size(6).facet_distance(0.5).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).cell_size(8));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/>params::no_exude(),<sp/>params::no_perturb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>bin_file(</highlight><highlight class="stringliteral">&quot;out.binary.cgal&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::binary);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga2a63991512cf9f678cf2b778029b676b" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::save_binary_file</ref>(bin_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figure_weightedImage"/> <image type="html" name="weighted_images.jpg"></image>
 <image type="latex" name="weighted_images.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figure_weightedImage" kindref="member">fig__figure_weightedImage</ref> Surface of the output mesh generated with a very small <computeroutput>facet_distance</computeroutput> without the weights (left, 25563 vertices) and with the weights (right, 19936 vertices). <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3DomainsFrom3DImagesWithCustomInitialization">
<title>Domains From 3D Images, with a Custom Initialization</title>
<para>The example <ref refid="Mesh_3_2mesh_3D_image_with_custom_initialization_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image_with_custom_initialization.cpp</ref> is a modification of <ref refid="Mesh_3_2mesh_3D_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image.cpp</ref>. The goal of that example is to show how the default initialization of the triangulation, using random rays, can be replaced by a new implementation. In this case, the initialization detects all connected components in the 3D segmented image, and inserts points in the triangulation for each connected component.</para>
<para>For the meshing, in the previous example (<ref refid="Mesh_3_2mesh_3D_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image.cpp</ref>), we called <computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">make_mesh_3()</ref></computeroutput> as follows.</para>
<para><programlisting filename="Mesh_3/mesh_3D_image.cpp"><codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
</programlisting></para>
<para>In the example <ref refid="Mesh_3_2mesh_3D_image_with_custom_initialization_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image_with_custom_initialization.cpp</ref>, that call is replaced by:<orderedlist>
<listitem><para>the creation of an empty <computeroutput>c3t3</computeroutput> object,</para>
</listitem><listitem><para>a call to a non-documented function <computeroutput>initialize_triangulation_from_labeled_image()</computeroutput> that inserts points in the triangulation,</para>
</listitem><listitem><para>then the call to <computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3()</ref></computeroutput>.</para>
</listitem></orderedlist>
</para>
<para><programlisting filename="Mesh_3/mesh_3D_image_with_custom_initialization.cpp"><codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>initialize_triangulation_from_labeled_image(c3t3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">CGAL::refine_mesh_3</ref>(c3t3,<sp/>domain,<sp/>criteria);</highlight></codeline>
</programlisting></para>
<para>The code of the function <computeroutput>initialize_triangulation_from_labeled_image()</computeroutput> is in the non-documented header <ref refid="CGAL_2Mesh_3_2initialize_triangulation_from_labeled_image_8h-example" kindref="compound">CGAL/Mesh_3/initialize_triangulation_from_labeled_image.h</ref>. As it is undocumented and may be removed or modified at any time, if you wish to use it then you should copy-paste it to your user code. The code of that function is rather complicated. The following lines show how to insert new points in the <computeroutput>c3t3</computeroutput> object, with the calls to <computeroutput><ref refid="classMeshVertexBase__3_1a9fe48efb87f7ee8fe294f2053be1eb26" kindref="member">MeshVertexBase_3::set_dimension()</ref></computeroutput> and <computeroutput><ref refid="classMeshVertexBase__3_1a3604c8c08cbb9d0b1f02dc53901fbd63" kindref="member">MeshVertexBase_3::set_index()</ref></computeroutput>.</para>
<para><programlisting filename="CGAL/Mesh_3/initialize_triangulation_from_labeled_image.h"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertex_handle<sp/>v<sp/>=<sp/>tr.insert(pi);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`v`<sp/>could<sp/>be<sp/>null<sp/>if<sp/>`pi`<sp/>is<sp/>hidden<sp/>by<sp/>other<sp/>vertices<sp/>of<sp/>`tr`.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CGAL_assertion(v<sp/>!=<sp/>Vertex_handle());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c3t3.set_dimension(v,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>by<sp/>construction,<sp/>points<sp/>are<sp/>on<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c3t3.set_index(v,<sp/>index);</highlight></codeline>
</programlisting></para>
<para>The value of <computeroutput>index</computeroutput> must be consistent with the possible values of <computeroutput>Mesh_domain::Index</computeroutput>. In <ref refid="CGAL_2Mesh_3_2initialize_triangulation_from_labeled_image_8h-example" kindref="compound">CGAL/Mesh_3/initialize_triangulation_from_labeled_image.h</ref>, it is constructed using the API of the mesh domain, as follows. First the functor <computeroutput>construct_intersect</computeroutput> is created</para>
<para> <programlisting filename="CGAL/Mesh_3/initialize_triangulation_from_labeled_image.h"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Mesh_domain::Construct_intersection<sp/>construct_intersection<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>domain.construct_intersection_object();</highlight></codeline>
</programlisting>then the <computeroutput>Mesh_domain::Intersection</computeroutput> object (a <computeroutput>tuple</computeroutput> with three elements) is constructed using a call to the functor <computeroutput>construct_intersection</computeroutput> <programlisting filename="CGAL/Mesh_3/initialize_triangulation_from_labeled_image.h"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Mesh_domain::Intersection<sp/>intersect<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>construct_intersection(<ref refid="classCGAL_1_1Segment__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Segment_3</ref>(seed_point,<sp/>test));</highlight></codeline>
</programlisting>and eventually <computeroutput>index</computeroutput> is the element #1 of <computeroutput>intersect</computeroutput>. <programlisting filename="CGAL/Mesh_3/initialize_triangulation_from_labeled_image.h"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Mesh_domain::Index<sp/>index<sp/>=<sp/>std::get&lt;1&gt;(intersect);</highlight></codeline>
</programlisting> The result of the custom initialization can be seen in <ref refid="index_1fig__mesh3custominitimage3D" kindref="member">fig__mesh3custominitimage3D</ref>. The generated 3D image contains a big sphere at the center, and 50 smaller spheres, generated randomly. Without the custom initialization, only the biggest component (the sphere at the center) was initialized and meshed. With the custom initialization, the initial <computeroutput>c3t3</computeroutput> object contains points on all connected components, and all spheres are meshed.</para>
<para><anchor id="index_1fig__mesh3custominitimage3D"/><center> <table rows="1" cols="2"><row>
<entry thead="no"><para><image type="html" name="./no-custom-init.png" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./with-custom-init.png" inline="yes"></image>
  </para>
</entry></row>
</table>
</center> <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly> <ref refid="index_1fig__mesh3custominitimage3D" kindref="member">fig__mesh3custominitimage3D</ref> Left: the mesh without the custom initialization, only the big sphere at the center is meshed</para>
<para>Right: the mesh generated after the initialization of all connected components <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<para>Note that the example <ref refid="Mesh_3_2mesh_3D_image_with_custom_initialization_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image_with_custom_initialization.cpp</ref> also shows how to create a 3D image using the undocumented API of CGAL_ImageIO.</para>
<para><programlisting filename="Mesh_3/mesh_3D_image_with_custom_initialization.cpp"><codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>image<sp/>=<sp/>random_labeled_image();</highlight></codeline>
</programlisting></para>
<para>The code of the function <computeroutput>random_labeled_image()</computeroutput> is in the header file <ref refid="Mesh_3_2random_labeled_image_8h-example" kindref="compound">Mesh_3/random_labeled_image.h</ref>.</para>
<para>The example <ref refid="Mesh_3_2mesh_3D_gray_image_with_custom_initialization_8cpp-example" kindref="compound">Mesh_3/mesh_3D_gray_image_with_custom_initialization.cpp</ref> is another custom initialization example, for meshing of 3D gray-level images. Similarly to the segmented image example above, the code consists in:<orderedlist>
<listitem><para>the creation of an empty <computeroutput>c3t3</computeroutput> object,</para>
</listitem><listitem><para>a call to a non-documented function <computeroutput>initialize_triangulation_from_gray_image()</computeroutput> that inserts points in the triangulation,</para>
</listitem><listitem><para>then the call to <computeroutput><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">refine_mesh_3()</ref></computeroutput>.</para>
</listitem></orderedlist>
</para>
<para><programlisting filename="Mesh_3/mesh_3D_gray_image_with_custom_initialization.cpp"><codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>initialize_triangulation_from_gray_image(c3t3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.9f,</highlight><highlight class="comment">//isolevel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Image_word_type(0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1gabd5d3e92323fc601e87700b92fa49962" kindref="member">CGAL::refine_mesh_3</ref>(c3t3,<sp/>domain,<sp/>criteria);</highlight></codeline>
</programlisting></para>
<para>The code of the function <computeroutput>initialize_triangulation_from_gray_image()</computeroutput> is in the non-documented header <ref refid="CGAL_2Mesh_3_2initialize_triangulation_from_gray_image_8h-example" kindref="compound">CGAL/Mesh_3/initialize_triangulation_from_gray_image.h</ref>. As it is undocumented and may be removed or modified at any time, if you wish to use it then you should copy-paste it to your user code.</para>
</sect3>
</sect2>
<sect2 id="index_1Mesh_3UsingVariableSizingField">
<title>Using Variable Sizing Field</title>
<sect3 id="index_1Mesh_3SizingFieldasanAnalyticalFunction">
<title>Sizing Field as an Analytical Function</title>
<para><anchor id="index_1Mesh_3_subsubsection_examples_sphere_variable"/> The following example shows how to use an analytical function as sizing field.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_implicit_sphere_variable_size_8cpp-example" kindref="compound">Mesh_3/mesh_implicit_sphere_variable_size.cpp</ref> <programlisting filename="Mesh_3/mesh_implicit_sphere_variable_size.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_3<sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT<sp/>(Function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sizing<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Spherical_sizing_field</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>::FT<sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Point<sp/><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mesh_domain::Index<sp/><ref refid="classIndex" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Index</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FT<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Point_3</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classIndex" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Index</ref>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FT<sp/>sq_d_to_origin<sp/>=<sp/><ref refid="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::squared_distance</ref>(p,<sp/>Point(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__PkgAlgebraicFoundationsRef_1ga1d5106cf8be16adb4c4dc8b1ec3a5a92" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL::abs</ref>(<sp/><ref refid="group__PkgAlgebraicFoundationsRef_1gab922269072ee9ee99ba8c541418b2e11" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">CGAL::sqrt</ref>(sq_d_to_origin)-0.5<sp/>)<sp/>/<sp/>5.<sp/>+<sp/>0.025;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>sphere_function<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::squared_distance</ref>(p,<sp/>Point(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>))-1;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_implicit_mesh_domain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(sphere_function,<sp/>K::Sphere_3(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>,<sp/>K::FT(2))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Spherical_sizing_field<sp/>size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(30).facet_size(0.1).facet_distance(0.025).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(2).cell_size(size));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/>params::no_exude().<ref refid="group__PkgMesh3Parameters_1ga9f696ff6caf3c4efd246e43946a89294" kindref="member">no_perturb</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figuresphere_variable_mesh"/> <image type="html" name="sphere_variable.jpg"></image>
 <image type="latex" name="sphere_variable.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figuresphere_variable_mesh" kindref="member">fig__figuresphere_variable_mesh</ref> Cut view of a 3D mesh produced from an implicit sphere with non-constant sizing field. Code from subsection <ref refid="index_1Mesh_3_subsubsection_examples_sphere_variable" kindref="member">Mesh_3_subsubsection_examples_sphere_variable</ref> generates this file. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3DifferentSizingFieldforDifferentSubdomains">
<title>Different Sizing Field for Different Subdomains</title>
<para><anchor id="index_1Mesh_3_subsubsection_examples_3d_image_variable"/> The following example shows how to use different size for different organs in a 3D medical image.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_3D_image_variable_size_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image_variable_size.cpp</ref> <programlisting filename="Mesh_3/mesh_3D_image_variable_size.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_constant_domain_field_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Image_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__constant__domain__field__3" kindref="compound">CGAL::Mesh_constant_domain_field_3</ref>&lt;Mesh_domain::R,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mesh_domain::Index&gt;<sp/>Sizing_field;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;images/liver.inr.gz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loads<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>image;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!image.<ref refid="classCGAL_1_1Image__3_1a6be029d7a0ee6dbd5eab1fd0adae42ba" kindref="member">read</ref>(fname)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sizing<sp/>field:<sp/>set<sp/>global<sp/>size<sp/>to<sp/>8<sp/>and<sp/>kidney<sp/>size<sp/>(label<sp/>127)<sp/>to<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kidney_size<sp/>=<sp/>3.;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>volume_dimension<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Sizing_field<sp/>size(8);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size.set_size(kidney_size,<sp/>volume_dimension,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain.index_from_subdomain_index(127));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(30).facet_size(6).facet_distance(2).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).cell_size(size));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Meshing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figureliver_variable_mesh"/> <image type="html" name="liver_variable.jpg"></image>
 <image type="latex" name="liver_variable.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figureliver_variable_mesh" kindref="member">fig__figureliver_variable_mesh</ref> View of a 3D mesh produced from a 3D image with different size for different organs. Code from subsection <ref refid="index_1Mesh_3_subsubsection_examples_3d_image_variable" kindref="member">Mesh_3_subsubsection_examples_3d_image_variable</ref> generates this file. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3LipschitzSizingField">
<title>Lipschitz Sizing Field</title>
<para><anchor id="index_1Mesh_3_subsubsection_examples_3d_image_lip_sizing"/> The following example shows how to use another custom sizing function, that is <computeroutput>k</computeroutput>-Lipschitz. For each subdomain, the user provides the parameter <computeroutput>k</computeroutput>, a minimal size and maximal size for cells.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_polyhedral_domain_with_lipschitz_sizing_8cpp-example" kindref="compound">Mesh_3/mesh_polyhedral_domain_with_lipschitz_sizing.cpp</ref> <programlisting filename="Mesh_3/mesh_polyhedral_domain_with_lipschitz_sizing.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedral_mesh_domain_with_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_3/experimental/Lipschitz_sizing_polyhedron.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_polyhedron_3&lt;K&gt;::type</ref><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">CGAL::Polyhedral_mesh_domain_with_features_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tr,Mesh_domain::Corner_index,Mesh_domain::Curve_index&gt;<sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sizing<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Mesh_3::Lipschitz_sizing&lt;K,<sp/>Mesh_domain,<sp/>Mesh_domain::AABB_tree&gt;<sp/>Lip_sizing;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)<sp/>?<sp/>argv[1]<sp/>:<sp/><ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/fandisk.off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>input(fname);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyhedron<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input<sp/>&gt;&gt;<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input.fail()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__PkgBGLHelperFct_1ga11883d231eec1b58f37efe4acedd9588" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::is_triangle_mesh</ref>(polyhedron)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>geometry<sp/>is<sp/>not<sp/>triangulated.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(polyhedron);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>sharp<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.detect_features();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Lipschitz<sp/>sizing<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Lip_sizing<sp/>lip_sizing(domain,<sp/>&amp;domain.aabb_tree());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FT<sp/>min_size<sp/>=<sp/>0.02;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lip_sizing.add_parameters_for_subdomain(1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//subdomain<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.3,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//k</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_size,</highlight><highlight class="comment">//min_size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//max_size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size(min_size).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_angle(25).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_size(min_size).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_distance(0.005).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_size(lip_sizing));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figurefandisk_lip_sizing"/> <image type="html" name="fandisk_lip.jpg"></image>
 <image type="latex" name="fandisk_lip.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figurefandisk_lip_sizing" kindref="member">fig__figurefandisk_lip_sizing</ref> View of a 3D mesh produced with a Lipschitz sizing field, for a single subdomain. Code from subsection <ref refid="index_1Mesh_3_subsubsection_examples_3d_image_lip_sizing" kindref="member">Mesh_3_subsubsection_examples_3d_image_lip_sizing</ref> generates this mesh. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
</sect2>
<sect2 id="index_1Mesh_3MeshingDomainswithSharpFeatures">
<title>Meshing Domains with Sharp Features</title>
<para><anchor id="index_1Mesh_3_subsection_example_polyhedral_with_edges"/> </para>
<sect3 id="index_1Mesh_33DPolyhedralDomainwithEdges">
<title>3D Polyhedral Domain with Edges</title>
<para>The following example shows how to generate a mesh from a polyhedral surface. The output mesh conforms to the sharp features of the input surface.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_polyhedral_domain_with_features_8cpp-example" kindref="compound">Mesh_3/mesh_polyhedral_domain_with_features.cpp</ref> <programlisting filename="Mesh_3/mesh_polyhedral_domain_with_features.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedral_mesh_domain_with_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/IO/output_to_vtu.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_polyhedron_3&lt;K&gt;::type</ref><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">CGAL::Polyhedral_mesh_domain_with_features_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tr,Mesh_domain::Corner_index,Mesh_domain::Curve_index&gt;<sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/fandisk.off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>input(fname);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyhedron<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input<sp/>&gt;&gt;<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.fail()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__PkgBGLHelperFct_1ga11883d231eec1b58f37efe4acedd9588" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::is_triangle_mesh</ref>(polyhedron)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>geometry<sp/>is<sp/>not<sp/>triangulated.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(polyhedron);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>sharp<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.detect_features();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size(0.025).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_angle(25).facet_size(0.05).facet_distance(0.005).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).cell_size(0.05));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>file(</highlight><highlight class="stringliteral">&quot;out.vtu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3ExportFunctions_1gae43fbd7adc8ca9598471575c96a44a3a" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::output_to_vtu</ref>(file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Could<sp/>be<sp/>replaced<sp/>by:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CGAL::IO::write_MEDIT(file,<sp/>c3t3);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figurefandisk_mesh"/> <image type="html" name="fandisk.jpg"></image>
 <image type="latex" name="fandisk.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figurefandisk_mesh" kindref="member">fig__figurefandisk_mesh</ref> View of a 3D mesh with sharp features. Code from subsection <ref refid="index_1Mesh_3_subsection_example_polyhedral_with_edges" kindref="member">Mesh_3_subsection_example_polyhedral_with_edges</ref> generates this mesh. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3ImplicitDomainWith1DFeatures">
<title>Implicit Domain With 1D Features</title>
<para>The following example shows how to generate a mesh from an implicit domain. We add by hand the intersection of the spheres as a sharp feature.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_two_implicit_spheres_with_balls_8cpp-example" kindref="compound">Mesh_3/mesh_two_implicit_spheres_with_balls.cpp</ref> <programlisting filename="Mesh_3/mesh_two_implicit_spheres_with_balls.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_domain_with_polyline_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_3<sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FT<sp/>(Function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" kindref="compound">CGAL::Mesh_domain_with_polyline_features_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>&gt;<sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Polyline</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;Point&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyline_3;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;Polyline_3&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polylines;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tr,Mesh_domain::Corner_index,Mesh_domain::Curve_index&gt;<sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>sphere_function1<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::squared_distance</ref>(p,<sp/>Point(<ref refid="group__kernel__enums_1ga9d272a8e3a8080b851741b6d3a44afdc" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::ORIGIN</ref>))-2;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>sphere_function2<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__squared__distance__grp_1ga1ff73525660a052564d33fbdd61a4f71" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::squared_distance</ref>(p,<sp/>Point(2,<sp/>0,<sp/>0))-2;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FT<sp/>sphere_function<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sphere_function1(p)<sp/>&lt;<sp/>0<sp/>||<sp/>sphere_function2(p)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Domain<sp/>(Warning:<sp/>Sphere_3<sp/>constructor<sp/>uses<sp/>squared<sp/>radius<sp/>!)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh_domain::create_implicit_mesh_domain(sphere_function,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K::Sphere_3(Point(1,<sp/>0,<sp/>0),<sp/>6.));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size(0.15).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_angle(25).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_size(0.15).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(2).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_size(0.15));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>edge<sp/>that<sp/>we<sp/>want<sp/>to<sp/>preserve</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polylines<sp/>polylines<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyline_3&amp;<sp/>polyline<sp/>=<sp/>polylines.front();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>360;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>p<sp/>(1,<sp/>std::cos(i*CGAL_PI/180),<sp/>std::sin(i*CGAL_PI/180));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>polyline.push_back(p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>polyline.push_back(polyline.front());<sp/></highlight><highlight class="comment">//<sp/>close<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>edge<sp/>in<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.add_features(polylines.begin(),<sp/>polylines.end());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>without<sp/>feature<sp/>preservation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::no_features());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out-no-protection.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c3t3.clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>with<sp/>feature<sp/>preservation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.open(</highlight><highlight class="stringliteral">&quot;out-with-protection.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__figuretwo_spheres_mesh"/> <image type="html" name="twospheres.jpg"></image>
 <image type="latex" name="twospheres.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figuretwo_spheres_mesh" kindref="member">fig__figuretwo_spheres_mesh</ref> View of a 3D mesh with sharp features generated from two intersected implicit spheres. On the left, one can see the mesh without feature preservation, and on the right the mesh with feature preservation. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3DomainsFromSegmented3DImagesWithFeatures">
<title>Domains from Segmented 3D Images, with 1D Features</title>
<para>The example <ref refid="Mesh_3_2mesh_3D_image_with_features_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image_with_features.cpp</ref> is a modification of <ref refid="Mesh_3_2mesh_3D_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image.cpp</ref>. That example shows how to generate a mesh from a 3D labeled image (also known as &quot;a segmented image&quot;), that has 2D surfaces that intersect the box corresponding to the boundary of the image. The intersection of the 2D surface with the bounding box of the image is composed of 1D curves, and must be defined as 1D-features in the domain.</para>
<para>The first modification is the type of the mesh domain. Instead of being <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref></computeroutput>, it is a <computeroutput><ref refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" kindref="compound">Mesh_domain_with_polyline_features_3</ref></computeroutput> templated by a <computeroutput><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">Labeled_mesh_domain_3</ref></computeroutput>.</para>
<para><programlisting filename="Mesh_3/mesh_3D_image_with_features.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_domain_with_polyline_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Image_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__domain__with__polyline__features__3" kindref="compound">CGAL::Mesh_domain_with_polyline_features_3&lt;Image_domain&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
</programlisting></para>
<para>In the main() function, the domain is created with an additional argument - a dedicated functor that computes the one-dimensional features, which are then added to the domain.</para>
<para><programlisting filename="Mesh_3/mesh_3D_image_with_detection_of_features.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::features_detector<sp/>=<sp/><ref refid="structCGAL_1_1Mesh__3_1_1Detect__features__in__image" kindref="compound">CGAL::Mesh_3::Detect_features_in_image</ref>());</highlight></codeline>
</programlisting></para>
<para>The <computeroutput><ref refid="structCGAL_1_1Mesh__3_1_1Detect__features__in__image" kindref="compound">CGAL::Mesh_3::Detect_features_in_image</ref></computeroutput> functor is defined in its own header file. It computes the one-dimensional features that correspond to the intersections of the bounding box of the image with the surfaces defined by the image, as well as polylines that lie at the intersection of three or more subdomains (including the outside). It then constructs a graph of these polyline features. The named constructor adds this feature graph to the domain for later feature protection. The original feature detection algorithm was described in <ref refid="citelist_1CITEREF_cgal:hssz-gmcabonbc-97" kindref="member">[12]</ref>, which provides a list of possible voxel configurations. The feature detection implemented in CGAL generalizes this description.</para>
<para>The example <ref refid="Mesh_3_2mesh_3D_image_with_features_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image_with_features.cpp</ref> shows how user-specified input polylines can further be added as 1D features to the mesh domain.</para>
<para><programlisting filename="Mesh_3/mesh_3D_image_with_features.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params::features_detector<sp/>=<sp/><ref refid="structCGAL_1_1Mesh__3_1_1Detect__features__on__image__bbox" kindref="compound">CGAL::Mesh_3::Detect_features_on_image_bbox</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params::input_features<sp/><sp/>=<sp/>std::cref(features_inside));</highlight><highlight class="comment">//use<sp/>std::cref<sp/>to<sp/>avoid<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
</programlisting></para>
<para>In the meshing criteria, if 1D features are added to the domain, the user can define the parameter <computeroutput>edge_size</computeroutput> of the criteria class <computeroutput><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">Mesh_criteria_3</ref></computeroutput>, as follows, to set up an upper bound on the length of the edges of the 1D-mesh corresponding to the 1D-features.</para>
<para><programlisting filename="Mesh_3/mesh_3D_image_with_features.cpp"><codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size<sp/>=<sp/>6.,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params::facet_angle<sp/>=<sp/>30,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params::facet_size<sp/>=<sp/>6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params::facet_distance<sp/>=<sp/>4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params::cell_radius_edge_ratio<sp/>=<sp/>3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params::cell_size<sp/>=<sp/>8);</highlight></codeline>
</programlisting></para>
<para>The rest of the example is similar to <ref refid="Mesh_3_2mesh_3D_image_8cpp-example" kindref="compound">Mesh_3/mesh_3D_image.cpp</ref>.</para>
<para><ref refid="index_1fig__mesh3protectionimage3D" kindref="member">fig__mesh3protectionimage3D</ref> shows the results without or with the protection of the 1D-features.</para>
<para><anchor id="index_1fig__mesh3protectionimage3D"/><center> <table rows="1" cols="3"><row>
<entry thead="no"><para><image type="html" name="./no-protection.png" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./protection-box.png" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./protection-all.png" inline="yes"></image>
  </para>
</entry></row>
</table>
</center> <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly> <ref refid="index_1fig__mesh3protectionimage3D" kindref="member">fig__mesh3protectionimage3D</ref> Left: the mesh without any call to <computeroutput>add_features()</computeroutput>.</para>
<para>Middle: the mesh with only the 1D-features computed by <computeroutput><ref refid="structCGAL_1_1Mesh__3_1_1Detect__features__on__image__bbox" kindref="compound">CGAL::Mesh_3::Detect_features_on_image_bbox()</ref></computeroutput>.</para>
<para>Right: the mesh with added 1D-features in the interior of the bounding box of the image. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3PolyhedralComplex">
<title>Polyhedral Complex</title>
<para>The following example shows how to generate a mesh from a polyhedral complex that forms a bounded domain. The domain is defined by a group of polyhedral surfaces that are conformal. For each facet of the input polyhedral surfaces, the ids of incident subdomains are known. The input surfaces intersect along polylines that are considered as sharp features, and protected as for all domain types in this Section.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_polyhedral_complex_8cpp-example" kindref="compound">Mesh_3/mesh_polyhedral_complex.cpp</ref> <programlisting filename="Mesh_3/mesh_polyhedral_complex.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedral_complex_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_polyhedron_3&lt;K&gt;::type</ref><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedral__complex__mesh__domain__3" kindref="compound">CGAL::Polyhedral_complex_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tr,Mesh_domain::Corner_index,Mesh_domain::Curve_index&gt;<sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>filenames[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;meshes/patch-01.off&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;meshes/patch-13.off&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;meshes/patch-20.off&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;meshes/patch-21.off&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;meshes/patch-23.off&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;meshes/patch-30.off&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;int,<sp/>int&gt;<sp/>incident_subdomains[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::make_pair(0,<sp/>1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::make_pair(1,<sp/>3),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::make_pair(2,<sp/>0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::make_pair(2,<sp/>1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::make_pair(2,<sp/>3),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::make_pair(3,<sp/>0),</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>nb_patches<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(filenames)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(incident_subdomains)<sp/>==<sp/>nb_patches<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::pair&lt;int,<sp/>int&gt;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Polyhedron&gt;<sp/>patches(nb_patches);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nb_patches;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>input(<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(filenames[i]));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(input<sp/>&gt;&gt;<sp/>patches[i]))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(filenames[i])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>as<sp/>a<sp/>polyhedron!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(patches.begin(),<sp/>patches.end(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incident_subdomains,<sp/>incident_subdomains+nb_patches);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.detect_features();<sp/></highlight><highlight class="comment">//includes<sp/>detection<sp/>of<sp/>borders</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size(8).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_angle(25).facet_size(8).facet_distance(0.2).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).cell_size(10));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><ref refid="index_1fig__mesh3protectionComplex" kindref="member">fig__mesh3protectionComplex</ref> shows the results without or with the protection of the 1D-features.</para>
<para><anchor id="index_1fig__mesh3protectionComplex"/><center> <table rows="1" cols="2"><row>
<entry thead="no"><para><image type="html" name="./no-protection-complex.png" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./protection-complex.png" inline="yes"></image>
  </para>
</entry></row>
</table>
</center> <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly> <ref refid="index_1fig__mesh3protectionComplex" kindref="member">fig__mesh3protectionComplex</ref> Left: the mesh without any call to <computeroutput>detect_features()</computeroutput>. The mesh is overrefined next to sharp features, because the mesher tries to reach the target <computeroutput>facet_distance</computeroutput>, by inserting centers of surface Delaunay balls, that are not likely to be on sharp edges.</para>
<para>Right: the mesh with added 1D-features along sharp edges and edges shared by at least two of the input polyhedral surfaces forming the complex. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
<sect3 id="index_1Mesh_3EdgesSizingField">
<title>Sizing Field for Feature Edges</title>
<para>The following example shows how to generate a mesh from a polyhedral complex or a polyhedral surface with polyline features. Polyline features are covered by a set of so-called &quot;protecting balls&quot; which sizes are highly related to the edge length, and are driven by the size component of <computeroutput><ref refid="classCGAL_1_1Mesh__edge__criteria__3" kindref="compound">Mesh_edge_criteria_3</ref></computeroutput> (see Section <ref refid="index_1Mesh_3Protectionof0and1dimensionalExposed" kindref="member">Protection of 0 and 1-dimensional Exposed Features</ref>). The ideal size can be computed using <computeroutput><ref refid="structCGAL_1_1Sizing__field__with__aabb__tree" kindref="compound">Sizing_field_with_aabb_tree</ref></computeroutput> that helps start the feature protection and one-dimensional meshing process with a good initial guess. To fit the protecting balls requirements, no protecting ball can have its radius larger than half of the distance from the corresponding vertex (its center), to surface patches the current polyline feature does not belong to.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_polyhedral_domain_with_features_sizing_8cpp-example" kindref="compound">Mesh_3/mesh_polyhedral_domain_with_features_sizing.cpp</ref> <programlisting filename="Mesh_3/mesh_polyhedral_domain_with_features_sizing.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Surface_mesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedral_mesh_domain_with_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Sizing_field_with_aabb_tree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">K<sp/>=<sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Polyhedron<sp/>=<sp/>CGAL::Surface_mesh&lt;K::Point_3&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Mesh_domain<sp/>=<sp/><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">CGAL::Polyhedral_mesh_domain_with_features_3&lt;K, Polyhedron&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Features_sizing_field<sp/>=<sp/><ref refid="structCGAL_1_1Sizing__field__with__aabb__tree" kindref="compound">CGAL::Sizing_field_with_aabb_tree&lt;K, Mesh_domain&gt;</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tr,Mesh_domain::Corner_index,Mesh_domain::Curve_index&gt;<sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/fandisk.off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ifstream<sp/>input(fname);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Polyhedron<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input<sp/>&gt;&gt;<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.fail()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain(polyhedron);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>sharp<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>domain.detect_features();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Features_sizing_field<sp/>edges_sizing_field(0.07,<sp/>domain);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size(edges_sizing_field).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_distance(0.0072).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,<sp/>params::no_exude().no_perturb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CGAL::dump_c3t3(c3t3,<sp/></highlight><highlight class="stringliteral">&quot;out_sizing_field_with_aabb_tree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1Mesh_WithEdgeDistanceCriterion">
<title>Approximation Criterion for Feature Edges</title>
<para>The following example shows how to generate a mesh with an approximation error criterion. Polyline features are covered by a set of so-called &quot;protecting balls&quot; which sizes are highly related to the <computeroutput>edge_size</computeroutput> and <computeroutput>edge_distance</computeroutput> criteria. This edge distance is driven by the distance component of <computeroutput><ref refid="classCGAL_1_1Mesh__edge__criteria__3" kindref="compound">Mesh_edge_criteria_3</ref></computeroutput> (see Section <ref refid="index_1Mesh_3Protectionof0and1dimensionalExposed" kindref="member">Protection of 0 and 1-dimensional Exposed Features</ref>). The parameter <computeroutput>edge_distance</computeroutput> enables the subdivision of edges that are too far away from the corresponding input sharp features. It may result in an output mesh with shorter edges along the input polyline features. <linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_polyhedral_domain_with_edge_distance_8cpp-example" kindref="compound">Mesh_3/mesh_polyhedral_domain_with_edge_distance.cpp</ref> <programlisting filename="Mesh_3/mesh_polyhedral_domain_with_edge_distance.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polyhedral_mesh_domain_with_features_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_polyhedron_3&lt;K&gt;::type</ref><sp/>Polyhedron;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Polyhedral__mesh__domain__with__features__3" kindref="compound">CGAL::Polyhedral_mesh_domain_with_features_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tr,Mesh_domain::Corner_index,Mesh_domain::Curve_index&gt;<sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;meshes/u_arch.off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>input(fname);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Polyhedron<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input<sp/>&gt;&gt;<sp/>polyhedron;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.fail()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__PkgBGLHelperFct_1ga11883d231eec1b58f37efe4acedd9588" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::is_triangle_mesh</ref>(polyhedron)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>geometry<sp/>is<sp/>not<sp/>triangulated.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh_domain<sp/>domain(polyhedron);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>sharp<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>domain.detect_features();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh_criteria<sp/>criteria(params::edge_size(4).edge_distance(0.01).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facet_angle(25).facet_size(4).facet_distance(0.01).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(3).cell_size(4));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CGAL::dump_c3t3(c3t3,<sp/>&quot;out&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="index_1fig__mesh3edge_distance"/><center> <table rows="1" cols="2"><row>
<entry thead="no"><para><image type="html" name="./u_arch_no_edge_distance.png" alt="u_arch mesh without edge_distance criterion" inline="yes"></image>
 </para>
</entry><entry thead="no"><para><image type="html" name="./u_arch_with_edge_distance.png" alt="u_arch mesh with edge_distance criterion" inline="yes"></image>
  </para>
</entry></row>
</table>
</center> <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly> <ref refid="index_1fig__mesh3edge_distance" kindref="member">fig__mesh3edge_distance</ref> Left: the mesh without the <computeroutput>edge_distance</computeroutput> criterion.</para>
<para>Right: the mesh with the <computeroutput>edge_distance</computeroutput> criterion set to the same value as <computeroutput>facet_distance</computeroutput>. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect3>
</sect2>
<sect2 id="index_1Mesh_3TuningMeshOptimization">
<title>Tuning Mesh Optimization</title>
<para><anchor id="index_1Mesh_3_subsection_examples_optimization"/> In the previous examples, the mesh generation is launched through a call <computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">make_mesh_3()</ref></computeroutput> with a minimal number of parameters. In such cases, the default optimization strategy is applied: after the Delaunay refinement process two optimization steps are performed, a perturbation and a sliver exudation. The following examples show how to disable default optimization steps and how to tune the parameters of optimization steps.</para>
<sect3 id="index_1Mesh_3DisablingExudationandTuningPerturbation">
<title>Disabling Exudation and Tuning Perturbation</title>
<para>In this first example, we show how to disable the exudation step. The optimization phase after the refinement includes only a perturbation phase which is launched with no time bound and an objective of 10 degrees for the minimum dihedral angle of the mesh. The example shows two ways of achieving the same result. The first way issues a single call to <computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">make_mesh_3()</ref></computeroutput> with the required optimization process activated and tuned. In the second way, <computeroutput><ref refid="group__PkgMesh3Functions_1gac8599a0c967075f740bf8e2e92c4770e" kindref="member">make_mesh_3()</ref></computeroutput> is first called without any optimization process and the resulting mesh is next optimized through a call to <computeroutput><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">perturb_mesh_3()</ref></computeroutput> with tuned parameters.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_optimization_example_8cpp-example" kindref="compound">Mesh_3/mesh_optimization_example.cpp</ref> <programlisting filename="Mesh_3/mesh_optimization_example.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Image_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mesh<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;images/liver.inr.gz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>image;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!image.<ref refid="classCGAL_1_1Image__3_1a6be029d7a0ee6dbd5eab1fd0adae42ba" kindref="member">read</ref>(fname)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(30).facet_size(5).facet_distance(1.5).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(2).cell_size(7));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>and<sp/>optimization<sp/>in<sp/>one<sp/>call<sp/>(sliver_bound<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>targeted<sp/>dihedral<sp/>angle<sp/>in<sp/>degrees)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::no_exude().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perturb(params::sliver_bound(10).time_limit(15)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>and<sp/>optimization<sp/>in<sp/>several<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3_bis<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::no_perturb().no_exude());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1ga04b81c22e2273645cc3c62a21c4a4636" kindref="member">CGAL::perturb_mesh_3</ref>(c3t3_bis,<sp/>domain,<sp/>params::time_limit(15));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file_bis(</highlight><highlight class="stringliteral">&quot;out_bis.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file_bis,<sp/>c3t3_bis);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file_bis.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1Mesh_3UsingLloydGlobalOptimization">
<title>Using Lloyd Global Optimization</title>
<para>In this second example, we show how to call the Lloyd optimization on the mesh, followed by a call to exudation. We set a time bound of 30s for the Lloyd optimization. We set a time bound of 10s and a sliver bound of 10 degrees for the exuder.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Mesh_3_2mesh_optimization_lloyd_example_8cpp-example" kindref="compound">Mesh_3/mesh_optimization_lloyd_example.cpp</ref> <programlisting filename="Mesh_3/mesh_optimization_lloyd_example.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_complex_3_in_triangulation_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Mesh_criteria_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Labeled_mesh_domain_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/make_mesh_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Image_3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Exact__predicates__inexact__constructions__kernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Exact_predicates_inexact_constructions_kernel</ref><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Labeled__mesh__domain__3" kindref="compound">CGAL::Labeled_mesh_domain_3&lt;K&gt;</ref><sp/>Mesh_domain;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_CONCURRENT_MESH_3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Parallel_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::Sequential_tag</ref><sp/>Concurrency_tag;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangulation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::Mesh_triangulation_3&lt;Mesh_domain,CGAL::Default,Concurrency_tag&gt;::type</ref><sp/>Tr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3&lt;Tr&gt;</ref><sp/>C3t3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mesh<sp/>Criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Mesh__criteria__3" kindref="compound">CGAL::Mesh_criteria_3&lt;Tr&gt;</ref><sp/>Mesh_criteria;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">params<sp/>=<sp/><ref refid="namespaceCGAL_1_1parameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">CGAL::parameters</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname<sp/>=<sp/>(argc&gt;1)?argv[1]:<ref refid="namespaceCGAL_1acdae9a147ad2a3998cc21f88bc292dac" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL::data_file_path</ref>(</highlight><highlight class="stringliteral">&quot;images/liver.inr.gz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref><sp/>image;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!image.<ref refid="classCGAL_1_1Image__3_1a6be029d7a0ee6dbd5eab1fd0adae42ba" kindref="member">read</ref>(fname)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>read<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>fname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_domain<sp/>domain<sp/>=<sp/>Mesh_domain::create_labeled_image_mesh_domain(image);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mesh_criteria<sp/>criteria(params::facet_angle(30).facet_distance(1.2).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_radius_edge_ratio(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>and<sp/>optimization<sp/>in<sp/>one<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::lloyd(params::time_limit(30)).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no_perturb().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exude(params::time_limit(10).sliver_bound(10)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mesh<sp/>generation<sp/>and<sp/>optimization<sp/>in<sp/>several<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C3t3<sp/>c3t3_bis<sp/>=<sp/>CGAL::make_mesh_3&lt;C3t3&gt;(domain,<sp/>criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params::no_perturb().no_exude());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1ga833cd5f487e406a46106028b9ac0ee0b" kindref="member">CGAL::lloyd_optimize_mesh_3</ref>(c3t3_bis,<sp/>domain,<sp/>params::time_limit(30));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgMesh3Functions_1gab295d7888d08a4679b79d9349cf5b16d" kindref="member">CGAL::exude_mesh_3</ref>(c3t3_bis,<sp/>params::sliver_bound(10),<sp/>params::time_limit(10));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file(</highlight><highlight class="stringliteral">&quot;out.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file,<sp/>c3t3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>medit_file_bis(</highlight><highlight class="stringliteral">&quot;out_bis.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::IO::write_MEDIT</ref>(medit_file_bis,<sp/>c3t3_bis);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>medit_file_bis.close();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
</sect1>
<sect1 id="index_1Mesh_3Performances">
<title>Performance</title>
<para>We provide here some benchmarks of the performance of the mesh generation algorithms.</para>
<sect2 id="index_1Mesh_3DelaunayRefinement_1">
<title>Delaunay Refinement</title>
<para>The computer used for benchmarking is a PC running Linux64 with two Intel Xeon CPU X5450 clocked at 3.00 GHz with 32GB of RAM. The program has been compiled with g++ v4.3.2 with the -O3 option. These benchmarks have been done using CGAL v3.8. Note that these benchmarks were obtained with the sequential version of the algorithm, which does not take advantage of multi-core architectures. See the next section for performance of parallel algorithms.</para>
<para>We study the refinement part of the mesh generation engine in this section. We give the CPU time (measured by <computeroutput><ref refid="classCGAL_1_1Timer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Miscellany.tag">Timer</ref></computeroutput>) using the 3 provided oracles. In all experiments, we produce well shaped elements: we set the facet angle bound and the radius edge bound to their theoretical limit (resp. 30 degrees and 2). We also use the same uniform sizing field for facets and cells.</para>
<sect3 id="index_1Mesh_3ImplicitFunction">
<title>Implicit Function</title>
<para>We mesh an analytical sphere of radius 1.</para>
<para><center> <table rows="9" cols="6"><row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>Size bound </para>
</entry><entry thead="no" align="left"><para>vertices nb </para>
</entry><entry thead="no" align="left"><para>facets nb </para>
</entry><entry thead="no" align="left"><para>tetrahedra nb </para>
</entry><entry thead="no" align="center"><para>CPU Time (s) </para>
</entry><entry thead="no" align="center"><para>vertices/second </para>
</entry></row>
<row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.2 </para>
</entry><entry thead="no" align="left"><para>499 </para>
</entry><entry thead="no" align="left"><para>488 </para>
</entry><entry thead="no" align="left"><para>2,299 </para>
</entry><entry thead="no" align="center"><para>0.0240 </para>
</entry><entry thead="no" align="center"><para>20,800 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.1 </para>
</entry><entry thead="no" align="left"><para>3,480 </para>
</entry><entry thead="no" align="left"><para>2,046 </para>
</entry><entry thead="no" align="left"><para>18,756 </para>
</entry><entry thead="no" align="center"><para>0.146 </para>
</entry><entry thead="no" align="center"><para>23,800 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.05 </para>
</entry><entry thead="no" align="left"><para>25,556 </para>
</entry><entry thead="no" align="left"><para>8,274 </para>
</entry><entry thead="no" align="left"><para>149,703 </para>
</entry><entry thead="no" align="center"><para>1.50 </para>
</entry><entry thead="no" align="center"><para>17,000 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.025 </para>
</entry><entry thead="no" align="left"><para>195,506 </para>
</entry><entry thead="no" align="left"><para>33,212 </para>
</entry><entry thead="no" align="left"><para>1,194,727 </para>
</entry><entry thead="no" align="center"><para>17.4 </para>
</entry><entry thead="no" align="center"><para>11,200 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.0125 </para>
</entry><entry thead="no" align="left"><para>1,528,636 </para>
</entry><entry thead="no" align="left"><para>134,810 </para>
</entry><entry thead="no" align="left"><para>9,547,772 </para>
</entry><entry thead="no" align="center"><para>179 </para>
</entry><entry thead="no" align="center"><para>8,530 </para>
</entry></row>
<row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
</table>
</center></para>
<para><center></center></para>
</sect3>
<sect3 id="index_1Mesh_3PolyhedralDomain">
<title>Polyhedral Domain</title>
<para><anchor id="index_1fig__figuremesh_3_benchmark_polyhedral"/> <image type="html" name="bench_polyhedral.jpg"></image>
 <image type="latex" name="bench_polyhedral.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figuremesh_3_benchmark_polyhedral" kindref="member">fig__figuremesh_3_benchmark_polyhedral</ref> View of polyhedral mesh generation result (size = 0.005). <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<para>We mesh a volume bounded by a closed triangulated surface made of about 50,000 vertices and 100,000 triangles. <ref refid="index_1fig__figuremesh_3_benchmark_polyhedral" kindref="member">fig__figuremesh_3_benchmark_polyhedral</ref> shows the mesh obtained when size is set to 0.005.</para>
<para><center> <table rows="9" cols="6"><row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>Size bound </para>
</entry><entry thead="no" align="left"><para>vertices nb </para>
</entry><entry thead="no" align="left"><para>facets nb </para>
</entry><entry thead="no" align="left"><para>tetrahedra nb </para>
</entry><entry thead="no" align="center"><para>CPU Time (s) </para>
</entry><entry thead="no" align="center"><para>vertices/second </para>
</entry></row>
<row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.04 </para>
</entry><entry thead="no" align="left"><para>423 </para>
</entry><entry thead="no" align="left"><para>717 </para>
</entry><entry thead="no" align="left"><para>1,332 </para>
</entry><entry thead="no" align="center"><para>0.488 </para>
</entry><entry thead="no" align="center"><para>866 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.02 </para>
</entry><entry thead="no" align="left"><para>2,638 </para>
</entry><entry thead="no" align="left"><para>3,414 </para>
</entry><entry thead="no" align="left"><para>10,957 </para>
</entry><entry thead="no" align="center"><para>2.64 </para>
</entry><entry thead="no" align="center"><para>998 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.01 </para>
</entry><entry thead="no" align="left"><para>18,168 </para>
</entry><entry thead="no" align="left"><para>15,576 </para>
</entry><entry thead="no" align="left"><para>90,338 </para>
</entry><entry thead="no" align="center"><para>13.9 </para>
</entry><entry thead="no" align="center"><para>1,310 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.005 </para>
</entry><entry thead="no" align="left"><para>129,442 </para>
</entry><entry thead="no" align="left"><para>64,645 </para>
</entry><entry thead="no" align="left"><para>722,018 </para>
</entry><entry thead="no" align="center"><para>66.7 </para>
</entry><entry thead="no" align="center"><para>1,940 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>0.0025 </para>
</entry><entry thead="no" align="left"><para>967,402 </para>
</entry><entry thead="no" align="left"><para>263,720 </para>
</entry><entry thead="no" align="left"><para>5,756,491 </para>
</entry><entry thead="no" align="center"><para>348 </para>
</entry><entry thead="no" align="center"><para>2,780 </para>
</entry></row>
<row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
</table>
</center></para>
<para><center></center></para>
</sect3>
<sect3 id="index_1Mesh_33DImage">
<title>3D Image</title>
<para><anchor id="index_1fig__figuremesh_3_benchmark_3d_image"/> <image type="html" name="bench_3d.jpg"></image>
 <image type="latex" name="bench_3d.jpg" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figuremesh_3_benchmark_3d_image" kindref="member">fig__figuremesh_3_benchmark_3d_image</ref> View of 3d image mesh generation result (size = 4). <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<para>We mesh image number 2 from the 3D-IRCADb-01 (available at <ulink url="https://www.ircad.fr/research/data-sets/liver-segmentation-3d-ircadb-01/">https://www.ircad.fr/research/data-sets/liver-segmentation-3d-ircadb-01/</ulink>) public database. The size of this image is 512x512x172 voxels (about 45M voxels). The size of the voxels is 0.78mm x 0.78mm x 1.6mm. <ref refid="index_1fig__figuremesh_3_benchmark_3d_image" kindref="member">fig__figuremesh_3_benchmark_3d_image</ref> shows the mesh obtained for size set to 4.</para>
<para><center> <table rows="8" cols="6"><row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>Size bound (mm) </para>
</entry><entry thead="no" align="left"><para>vertices nb </para>
</entry><entry thead="no" align="left"><para>facets nb </para>
</entry><entry thead="no" align="left"><para>tetrahedra nb </para>
</entry><entry thead="no" align="center"><para>CPU Time (s) </para>
</entry><entry thead="no" align="center"><para>vertices/second </para>
</entry></row>
<row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>16 </para>
</entry><entry thead="no" align="left"><para>3,898 </para>
</entry><entry thead="no" align="left"><para>4,099 </para>
</entry><entry thead="no" align="left"><para>20,692 </para>
</entry><entry thead="no" align="center"><para>0.344 </para>
</entry><entry thead="no" align="center"><para>11,300 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>8 </para>
</entry><entry thead="no" align="left"><para>34,117 </para>
</entry><entry thead="no" align="left"><para>27,792 </para>
</entry><entry thead="no" align="left"><para>199,864 </para>
</entry><entry thead="no" align="center"><para>3.09 </para>
</entry><entry thead="no" align="center"><para>11,000 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>4 </para>
</entry><entry thead="no" align="left"><para>206,566 </para>
</entry><entry thead="no" align="left"><para>86,180 </para>
</entry><entry thead="no" align="left"><para>1,253,694 </para>
</entry><entry thead="no" align="center"><para>22.4 </para>
</entry><entry thead="no" align="center"><para>9,230 </para>
</entry></row>
<row>
<entry thead="no" align="left"><para>2 </para>
</entry><entry thead="no" align="left"><para>1,546,196 </para>
</entry><entry thead="no" align="left"><para>329,758 </para>
</entry><entry thead="no" align="left"><para>9,617,278 </para>
</entry><entry thead="no" align="center"><para>199 </para>
</entry><entry thead="no" align="center"><para>7,780 </para>
</entry></row>
<row>
<entry thead="no" align="left" colspan="6"><para><hruler/>
 </para>
</entry></row>
</table>
</center></para>
<para><center></center></para>
</sect3>
</sect2>
<sect2 id="index_1Mesh_3Parallel_performance_1">
<title>Parallel Performance</title>
<para>We provide below speed-up charts generated using the parallel version of the meshing algorithms of CGAL 4.5. The machine used is a PC running Windows 7 64-bits with two 6-core Intel Xeon CPU X5660 clocked at 2.80 GHz with 32GB of RAM. The program has been compiled with Microsoft Visual C++ 2012 in Release mode.</para>
<para>Figure <ref refid="index_1fig__figure_refinement_speedup" kindref="member">fig__figure_refinement_speedup</ref> shows mesh refinement speed-up, and figure <ref refid="index_1fig__figure_lloyd_speedup" kindref="member">fig__figure_lloyd_speedup</ref> shows Lloyd optimization speed-up. ODT optimization exhibits similar speed-up.</para>
<para><anchor id="index_1fig__figure_refinement_speedup"/> <image type="html" name="refinement_speedup.png"></image>
 <image type="latex" name="refinement_speedup.png" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figure_refinement_speedup" kindref="member">fig__figure_refinement_speedup</ref> Facet refinement speed-up (left) and cell refinement speed-up (right), compared to the sequential version of the algorithm. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
<para><anchor id="index_1fig__figure_lloyd_speedup"/> <image type="html" name="lloyd_speedup.png"></image>
 <image type="latex" name="lloyd_speedup.png" width="15cm"></image>
 <htmlonly block="yes"> &lt;div class=&quot;cgal_figure_caption&quot;&gt; </htmlonly>  <ref refid="index_1fig__figure_lloyd_speedup" kindref="member">fig__figure_lloyd_speedup</ref> Lloyd optimization speed-up, compared to the sequential version of the algorithm. Parallel ODT exhibits similar performance. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> <linebreak/>
</para>
</sect2>
</sect1>
<sect1 id="index_1Mesh_3DesignAndImpl">
<title>Design and Implementation History</title>
<sect2 id="index_1Mesh_3TheoreticalFoundations">
<title>Theoretical Foundations</title>
<para>The CGAL mesh generation package implements a meshing engine based on the method of Delaunay refinement introduced by Chew <ref refid="citelist_1CITEREF_c-gqmgc-93" kindref="member">[9]</ref> and Ruppert <ref refid="citelist_1CITEREF_r-draq2d-95" kindref="member">[15]</ref> and pioneered in 3D by Shewchuk <ref refid="citelist_1CITEREF_s-tmgdr-98" kindref="member">[16]</ref>. It uses the notion of restricted Delaunay triangulation to approximate 1-dimensional curved features and curved surface patches and rely on the work of Boissonnat and Oudot <ref refid="citelist_1CITEREF_cgal:bo-pgsms-05" kindref="member">[2]</ref> and Oudot et al. <ref refid="citelist_1CITEREF_cgal:ory-mvbss-05" kindref="member">[13]</ref> to achieve accurate representation of boundary and subdividing surfaces in the mesh. The mechanism of protecting balls, used to ensure a fair representation of 1-dimensional features, if any, and the termination of the refinement process whatever may be the input geometry, in particular whatever small dihedral angles may form the boundary and subdivision surface patches, was pioneered by Cheng et al. <ref refid="citelist_1CITEREF_cgal:cdr-drpsc-07" kindref="member">[8]</ref> and further experimented by Dey, Levine et al. <ref refid="citelist_1CITEREF_cgal:cdl-pdma-07" kindref="member">[7]</ref>. The optimization phase involves global optimization processes, a perturbation process and a sliver exudation process. The global optimizers are based on Lloyd smoothing <ref refid="citelist_1CITEREF_cgal:dfg-cvtaa-99t" kindref="member">[11]</ref>, <ref refid="citelist_1CITEREF_cgal:dw-tmgob-02" kindref="member">[10]</ref> and odt smoothing <ref refid="citelist_1CITEREF_cgal::c-mssbo-04" kindref="member">[5]</ref>, <ref refid="citelist_1CITEREF_cgal:acyd-vtm-05" kindref="member">[1]</ref>, where odt means <emphasis>optimal Delaunay triangulation</emphasis>. The perturbation process is mainly based on the work of Tournois <ref refid="citelist_1CITEREF_cgal:t-om-09" kindref="member">[20]</ref> and Tournois et al. <ref refid="citelist_1CITEREF_cgal:twad-iropitmg-09" kindref="member">[19]</ref>, while the exudation process is, the now famous, optimization by weighting described in Edelsbrunner et al. <ref refid="citelist_1CITEREF_cgal:cdeft-slive-00" kindref="member">[6]</ref>.</para>
</sect2>
<sect2 id="index_1Mesh_3ImplementationHistory">
<title>Implementation History</title>
<para>Work on the package <computeroutput>Mesh_3</computeroutput> started during the PhD thesis of Laurent Rineau advised by Mariette Yvinec. A code prototype, together with a first version of design and specifications <ref refid="citelist_1CITEREF_cgal:ry-gsddrm-06" kindref="member">[14]</ref> came out of their collaboration.</para>
<para>From the beginning of 2009, most of the work has been performed by Stéphane Tayeb, in collaboration with Mariette Yvinec, Laurent Rineau, Pierre Alliez and Jane Tournois. First, Stéphane released the first public version of the package, implementing the specifications written by Laurent and Mariette.</para>
<para>The optimization processes are heavily based on the work of Jane Tournois and Pierre Alliez during the PhD of Jane advised by Pierre. The optimization phase was imported in the mesh generation package by Stéphane Tayeb and appeared first in release 3.6 of CGAL.</para>
<para>In collaboration with Laurent Rineau, Stéphane also added demos and examples. After some experiments on medical imaging data performed by Dobrina Boltcheva et al. <ref refid="citelist_1CITEREF_cgal:byb-mgmmi-09" kindref="member">[4]</ref>, <ref refid="citelist_1CITEREF_cgal:-byb-fpdmgmmi-09" kindref="member">[3]</ref>, the handling of 1-dimensional features was worked out by Laurent Rineau, Stéphane Tayeb and Mariette Yvinec. It appeared first in the release 3.8 of CGAL.</para>
<para>In 2013, Clément Jamin made the meshing and optimization algorithms parallel on multi-core shared-memory architectures. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="Mesh_3.txt"/>
  </compounddef>
</doxygen>
