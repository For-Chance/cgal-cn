<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="structCGAL_1_1Mesh__3_1_1Detect__features__in__image" kind="struct" language="C++" prot="public">
    <compoundname>CGAL::Mesh_3::Detect_features_in_image</compoundname>
    <includes local="no">CGAL/Mesh_3/Detect_features_in_image.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structCGAL_1_1Mesh__3_1_1Detect__features__in__image_1a515cd590309167175b7cee81666b627d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; Point &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Point &gt; &gt; CGAL::Mesh_3::Detect_features_in_image::operator()</definition>
        <argsstring>(const CGAL::Image_3 &amp;image) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Mesh_3::Detect_features_in_image::operator()</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>detects and constructs the polylines that lie at the intersection of three or more subdomains. </para>
        </briefdescription>
        <detaileddescription>
<para>Each subdomain inside the bounding box of the input labeled image is defined as the set of voxels with the same value. The outside of the bounding box of the image is considered as a subdomain with voxel value <computeroutput>value_outside</computeroutput> (see <ref refid="classCGAL_1_1Labeled__mesh__domain__3_1aec3f58e9883a8036a1b3e379df7d8fa9" kindref="member"><computeroutput>create_labeled_image_mesh_domain()</computeroutput> </ref> parameters description). Hence, this function also computes intersections with the image bounding box.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>class model of <computeroutput><ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel::Point_3</ref></computeroutput>. It must match the triangulation point type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>the input image</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput>std::vector&lt;std::vector&lt;Point&gt;&gt;</computeroutput> containing the constructed polylines for later feature protection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Mesh_3/Detect_features_in_image.h" line="287" column="3" bodyfile="CGAL/Mesh_3/Detect_features_in_image.h" bodystart="287" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="structCGAL_1_1Mesh__3_1_1Detect__features__in__image_1af91e8bdf9d1c3c9fb644fae30d726e5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; Point &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Point &gt; &gt; CGAL::Mesh_3::Detect_features_in_image::operator()</definition>
        <argsstring>(const CGAL::Image_3 &amp;image, CGAL::Image_3 &amp;weights) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Mesh_3::Detect_features_in_image::operator()</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Image__3" kindref="compound">CGAL::Image_3</ref> &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Similar to the above function, but modifies <computeroutput>weights</computeroutput> to set the voxels that are part of a polyline feature to 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Mesh_3/Detect_features_in_image.h" line="307" column="5" bodyfile="CGAL/Mesh_3/Detect_features_in_image.h" bodystart="307" bodyend="319"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functor for feature detection in labeled images. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Mesh_3/Detect_features_in_image.h" line="262" column="1" bodyfile="CGAL/Mesh_3/Detect_features_in_image.h" bodystart="263" bodyend="320"/>
    <listofallmembers>
      <member refid="structCGAL_1_1Mesh__3_1_1Detect__features__in__image_1a515cd590309167175b7cee81666b627d" prot="public" virt="non-virtual"><scope>CGAL::Mesh_3::Detect_features_in_image</scope><name>operator()</name></member>
      <member refid="structCGAL_1_1Mesh__3_1_1Detect__features__in__image_1af91e8bdf9d1c3c9fb644fae30d726e5c" prot="public" virt="non-virtual"><scope>CGAL::Mesh_3::Detect_features_in_image</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
