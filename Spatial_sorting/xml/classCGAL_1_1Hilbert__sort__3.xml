<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Hilbert__sort__3" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Hilbert_sort_3</compoundname>
    <includes local="no">CGAL/Hilbert_sort_3.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits</type>
      </param>
      <param>
        <type>typename PolicyTag</type>
      </param>
      <param>
        <type>typename ConcurrencyTag</type>
        <defval><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Hilbert__sort__3_1a23097c9f503d041a715968290a88e827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Hilbert_sort_3&lt; Traits, PolicyTag, ConcurrencyTag &gt;::Hilbert_sort_3</definition>
        <argsstring>(const Traits &amp;traits=Traits())</argsstring>
        <name>Hilbert_sort_3</name>
        <qualifiedname>CGAL::Hilbert_sort_3::Hilbert_sort_3</qualifiedname>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>constructs an instance with <computeroutput>traits</computeroutput> as traits class instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Hilbert_sort_3.h" line="32" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Hilbert__sort__3_1a684bca738136684fbe4c494fb756235c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputPointIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Hilbert_sort_3&lt; Traits, PolicyTag, ConcurrencyTag &gt;::operator()</definition>
        <argsstring>(InputPointIterator begin, InputPointIterator end) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Hilbert_sort_3::operator()</qualifiedname>
        <param>
          <type>InputPointIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputPointIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>It sorts the range <computeroutput>[begin, end)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputPointIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput> with value type <computeroutput>Traits::Point_3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Hilbert_sort_3.h" line="44" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The function object <computeroutput><ref refid="classCGAL_1_1Hilbert__sort__3" kindref="compound">Hilbert_sort_3</ref></computeroutput> sorts iterator ranges of <computeroutput>Traits::Point_3</computeroutput> along a Hilbert curve by recursively subdividing at the median or the middle, depending on the <computeroutput>PolicyTag</computeroutput>(see Section <ref refid="index_1sechilbert_sorting" kindref="member">Hilbert Sorting</ref> for more information on the policies). </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classSpatialSortingTraits__3" kindref="compound">SpatialSortingTraits_3</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolicyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>is used to specify the strategy policy. Possible values are <ref refid="group__PkgSpatialSortingUtils_1gabaa92ea6b71ca7eaaf9ddf8f8d1eb1c5" kindref="member"><computeroutput>Hilbert_sort_median_policy</computeroutput> </ref> (the default policy) or <ref refid="group__PkgSpatialSortingUtils_1gab7a1539ef63348072146e101074deca1" kindref="member"><computeroutput>Hilbert_sort_middle_policy</computeroutput> </ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConcurrencyTag</parametername>
</parameternamelist>
<parameterdescription>
<para>enables sequential versus parallel algorithm. Possible values are <computeroutput><ref refid="structCGAL_1_1Sequential__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Sequential_tag</ref></computeroutput>, <computeroutput><ref refid="structCGAL_1_1Parallel__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_tag</ref></computeroutput>, and <computeroutput><ref refid="structCGAL_1_1Parallel__if__available__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Parallel_if_available_tag</ref></computeroutput>. With parallelism enabled, sorting will be performed using up to eight threads. Parallel sorting is available only when the median strategy policy (the default policy) is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="CGAL/Hilbert_sort_3.h" line="23" column="1" bodyfile="CGAL/Hilbert_sort_3.h" bodystart="23" bodyend="48"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Hilbert__sort__3_1a23097c9f503d041a715968290a88e827" prot="public" virt="non-virtual"><scope>CGAL::Hilbert_sort_3</scope><name>Hilbert_sort_3</name></member>
      <member refid="classCGAL_1_1Hilbert__sort__3_1a684bca738136684fbe4c494fb756235c" prot="public" virt="non-virtual"><scope>CGAL::Hilbert_sort_3</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
