<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Combination__enumerator" prot="public">CGAL::Combination_enumerator</innerclass>
    <innerclass refid="classCGAL_1_1Points__on__segment__2" prot="public">CGAL::Points_on_segment_2</innerclass>
    <innerclass refid="classCGAL_1_1Random" prot="public">CGAL::Random</innerclass>
    <innerclass refid="structCGAL_1_1Random__convex__set__traits__2" prot="public">CGAL::Random_convex_set_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__ball__d" prot="public">CGAL::Random_points_in_ball_d</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__cube__3" prot="public">CGAL::Random_points_in_cube_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__cube__d" prot="public">CGAL::Random_points_in_cube_d</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__disc__2" prot="public">CGAL::Random_points_in_disc_2</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__sphere__3" prot="public">CGAL::Random_points_in_sphere_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__square__2" prot="public">CGAL::Random_points_in_square_2</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__tetrahedral__mesh__3" prot="public">CGAL::Random_points_in_tetrahedral_mesh_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__tetrahedral__mesh__boundary__3" prot="public">CGAL::Random_points_in_tetrahedral_mesh_boundary_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__tetrahedron__3" prot="public">CGAL::Random_points_in_tetrahedron_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__triangle__2" prot="public">CGAL::Random_points_in_triangle_2</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__triangle__3" prot="public">CGAL::Random_points_in_triangle_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__in__triangle__mesh__2" prot="public">CGAL::Random_points_in_triangle_mesh_2</innerclass>
    <innerclass refid="structCGAL_1_1Random__points__in__triangle__mesh__3" prot="public">CGAL::Random_points_in_triangle_mesh_3</innerclass>
    <innerclass refid="structCGAL_1_1Random__points__in__triangles__2" prot="public">CGAL::Random_points_in_triangles_2</innerclass>
    <innerclass refid="structCGAL_1_1Random__points__in__triangles__3" prot="public">CGAL::Random_points_in_triangles_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__on__circle__2" prot="public">CGAL::Random_points_on_circle_2</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__on__segment__2" prot="public">CGAL::Random_points_on_segment_2</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__on__segment__3" prot="public">CGAL::Random_points_on_segment_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__on__sphere__3" prot="public">CGAL::Random_points_on_sphere_3</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__on__sphere__d" prot="public">CGAL::Random_points_on_sphere_d</innerclass>
    <innerclass refid="classCGAL_1_1Random__points__on__square__2" prot="public">CGAL::Random_points_on_square_2</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__PkgGeneratorsRef_1ga0dcb49abc394c9ef3555cff471c0d391" prot="public" static="no" mutable="no">
        <type><ref refid="classCGAL_1_1Random" kindref="compound">CGAL::Random</ref></type>
        <definition>CGAL::Random CGAL::default_random</definition>
        <argsstring></argsstring>
        <name>default_random</name>
        <qualifiedname>CGAL::default_random</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>The variable <computeroutput>default_random</computeroutput> was the default random numbers generator used for the generator functions and classes. Deprecated. Use <computeroutput><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member">get_default_random()</ref></computeroutput> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="196" column="21" declfile="CGAL/Random.h" declline="196" declcolumn="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgGeneratorsRef_1gafacf70e214daa1206eb1e20b35bb8b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIterator</type>
          </param>
          <param>
            <type>class Creator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::perturb_points_2</definition>
        <argsstring>(ForwardIterator first, ForwardIterator last, double xeps, double yeps=xeps, Random &amp;rnd=get_default_random(), Creator creator=Creator_uniform_2&lt; Kernel_traits&lt; P &gt;::Kernel::RT, P &gt;)</argsstring>
        <name>perturb_points_2</name>
        <qualifiedname>CGAL::perturb_points_2</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xeps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yeps</declname>
          <defval>xeps</defval>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member">get_default_random</ref>()</defval>
        </param>
        <param>
          <type>Creator</type>
          <declname>creator</declname>
          <defval>Creator_uniform_2&lt; Kernel_traits&lt; P &gt;::Kernel::RT, P &gt;</defval>
        </param>
        <briefdescription>
<para>perturbs each point in a given range of points by a random amount. </para>
        </briefdescription>
        <detaileddescription>
<para>The function perturbs the points in the range <computeroutput>[first,last)</computeroutput> by replacing each point with a random point from the <computeroutput>xeps</computeroutput> <formula id="0">$ \times$</formula> <computeroutput>yeps</computeroutput> rectangle centered at the original point. Two random numbers are needed from <computeroutput>rnd</computeroutput> for each point.</para>
<para><bold>Requires</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem><para><computeroutput>Creator</computeroutput> must be a function object accepting two <computeroutput>double</computeroutput> values <formula id="1">$ x$</formula> and <formula id="2">$ y$</formula> and returning an initialized point <computeroutput>(x,y)</computeroutput> of type <computeroutput>P</computeroutput>. Predefined implementations for these creators like the default are described in Section STLCreators.</para>
</listitem><listitem><para>The <computeroutput>value_type</computeroutput> of the <computeroutput>ForwardIterator</computeroutput> must be assignable to <computeroutput>P</computeroutput>.</para>
</listitem><listitem><para><computeroutput>P</computeroutput> is equal to the <computeroutput>value_type</computeroutput> of the <computeroutput>ForwardIterator</computeroutput> when using the default initializer.</para>
</listitem><listitem><para>The expressions <computeroutput>to_double((*first).x())</computeroutput> and <computeroutput>to_double((*first).y())</computeroutput> must result in the respective coordinate values.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga58b8faf4c090fc9b367f51d9004cde4c" kindref="member">CGAL::points_on_segment_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gad5aec033ff62776826bd5b01be41b792" kindref="member">CGAL::points_on_square_grid_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga5931f8c3d40445dd776437d07a5058a1" kindref="member">CGAL::random_selection()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>std::random_shuffle()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/point_generators_2.h" line="37" column="6" declfile="CGAL/point_generators_2.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1ga58b8faf4c090fc9b367f51d9004cde4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::points_on_segment_2</definition>
        <argsstring>(const P &amp;p, const P &amp;q, std::size_t n, OutputIterator o)</argsstring>
        <name>points_on_segment_2</name>
        <qualifiedname>CGAL::points_on_segment_2</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>generates a set of points equally spaced on a segment given the endpoints of the segment. </para>
        </briefdescription>
        <detaileddescription>
<para>The function creates <formula id="3">$ n$</formula> points equally spaced on the segment from <formula id="4">$ p$</formula> to <formula id="5">$ q$</formula>, i.e.  <formula id="6">$ \forall i: 0 \le i &lt; n: o[i] := \frac{n-i-1}{n-1}\, p +
\frac{i}{n-1}\, q$</formula>. Returns the value of <formula id="7">$ o$</formula> after inserting the <formula id="3">$ n$</formula> points.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga58b8faf4c090fc9b367f51d9004cde4c" kindref="member">CGAL::points_on_segment_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gad5aec033ff62776826bd5b01be41b792" kindref="member">CGAL::points_on_square_grid_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gae02cceaf04ecd42a5996b6b1b88be798" kindref="member">CGAL::random_collinear_points_2()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/point_generators_2.h" line="60" column="16" declfile="CGAL/point_generators_2.h" declline="60" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1gad5aec033ff62776826bd5b01be41b792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Creator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::points_on_square_grid_2</definition>
        <argsstring>(double a, std::size_t n, OutputIterator o, Creator creator=Creator_uniform_2&lt; Kernel_traits&lt; P &gt;::Kernel::RT, P &gt;)</argsstring>
        <name>points_on_square_grid_2</name>
        <qualifiedname>CGAL::points_on_square_grid_2</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>o</declname>
        </param>
        <param>
          <type>Creator</type>
          <declname>creator</declname>
          <defval>Creator_uniform_2&lt; Kernel_traits&lt; P &gt;::Kernel::RT, P &gt;</defval>
        </param>
        <briefdescription>
<para>generates a given number of points on a square grid whose size is determined by the number of points to be generated. </para>
        </briefdescription>
        <detaileddescription>
<para>The function creates the first <formula id="3">$ n$</formula> points on the regular <formula id="8">$ \lceil\sqrt{n}\,\rceil\times\lceil\sqrt{n}\,\rceil$</formula> grid within the square <formula id="9">$ [-a,a]\times[-a,a]$</formula>. Returns the value of <formula id="7">$ o$</formula> after inserting the <formula id="3">$ n$</formula> points.</para>
<para><bold>Requires</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem><para><computeroutput>Creator</computeroutput> must be a function object accepting two <computeroutput>double</computeroutput> values <formula id="1">$ x$</formula> and <formula id="2">$ y$</formula> and returning an initialized point <computeroutput>(x,y)</computeroutput> of type <computeroutput>P</computeroutput>. Predefined implementations for these creators like the default can be found in Section STLCreators.</para>
</listitem><listitem><para>The <computeroutput>OutputIterator</computeroutput> must accept values of type <computeroutput>P</computeroutput>. If the <computeroutput>OutputIterator</computeroutput> has a <computeroutput>value_type</computeroutput> the default initializer of the <computeroutput>creator</computeroutput> can be used. <computeroutput>P</computeroutput> is set to the <computeroutput>value_type</computeroutput> in this case.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gafacf70e214daa1206eb1e20b35bb8b64" kindref="member">CGAL::perturb_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga58b8faf4c090fc9b367f51d9004cde4c" kindref="member">CGAL::points_on_segment_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga03437b3f68ee130c2438a0ab29511695" kindref="member">CGAL::points_on_cube_grid_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gae02cceaf04ecd42a5996b6b1b88be798" kindref="member">CGAL::random_collinear_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga5931f8c3d40445dd776437d07a5058a1" kindref="member">CGAL::random_selection()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>std::random_shuffle()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/point_generators_2.h" line="97" column="1" declfile="CGAL/point_generators_2.h" declline="97" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1gae02cceaf04ecd42a5996b6b1b88be798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomAccessIterator</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Creator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::random_collinear_points_2</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, std::size_t n, OutputIterator first2, Random &amp;rnd=get_default_random(), Creator creator=Creator_uniform_2&lt; Kernel_traits&lt; P &gt;::Kernel::RT, P &gt;)</argsstring>
        <name>random_collinear_points_2</name>
        <qualifiedname>CGAL::random_collinear_points_2</qualifiedname>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>first2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member">get_default_random</ref>()</defval>
        </param>
        <param>
          <type>Creator</type>
          <declname>creator</declname>
          <defval>Creator_uniform_2&lt; Kernel_traits&lt; P &gt;::Kernel::RT, P &gt;</defval>
        </param>
        <briefdescription>
<para>randomly chooses two points from the range <computeroutput>[first,last)</computeroutput>, creates a random third point on the segment connecting these two points, writes it to <computeroutput>first2</computeroutput>, and repeats this <formula id="3">$ n$</formula> times, thus writing <formula id="3">$ n$</formula> points to <computeroutput>first2</computeroutput> that are collinear with points in the range <computeroutput>[first,last)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Three random numbers are needed from <computeroutput>rnd</computeroutput> for each point. Returns the value of <computeroutput>first2</computeroutput> after inserting the <formula id="3">$ n$</formula> points.</para>
<para><bold>Requires</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem><para><computeroutput>Creator</computeroutput> must be a function object accepting two <computeroutput>double</computeroutput> values <formula id="1">$ x$</formula> and <formula id="2">$ y$</formula> and returning an initialized point <computeroutput>(x,y)</computeroutput> of type <computeroutput>P</computeroutput>. Predefined implementations for these creators like the default can be found in Section STLCreators.</para>
</listitem><listitem><para>The <computeroutput>value_type</computeroutput> of the <computeroutput>RandomAccessIterator</computeroutput> must be assignable to <computeroutput>P</computeroutput>. <computeroutput>P</computeroutput> is equal to the <computeroutput>value_type</computeroutput> of the <computeroutput>RandomAccessIterator</computeroutput> when using the default initializer.</para>
</listitem><listitem><para>The expressions <computeroutput>to_double((*first).x())</computeroutput> and <computeroutput>to_double((*first).y())</computeroutput> must result in the respective coordinate values.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gafacf70e214daa1206eb1e20b35bb8b64" kindref="member">CGAL::perturb_points_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga58b8faf4c090fc9b367f51d9004cde4c" kindref="member">CGAL::points_on_segment_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gad5aec033ff62776826bd5b01be41b792" kindref="member">CGAL::points_on_square_grid_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga5931f8c3d40445dd776437d07a5058a1" kindref="member">CGAL::random_selection()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>std::random_shuffle()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/point_generators_2.h" line="132" column="16" declfile="CGAL/point_generators_2.h" declline="132" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1ga03437b3f68ee130c2438a0ab29511695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Creator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::points_on_cube_grid_3</definition>
        <argsstring>(double a, std::size_t n, OutputIterator o, Creator creator=Creator_uniform_3&lt; Kernel_traits&lt; Point_3 &gt;::Kernel::RT, Point_3 &gt;)</argsstring>
        <name>points_on_cube_grid_3</name>
        <qualifiedname>CGAL::points_on_cube_grid_3</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>o</declname>
        </param>
        <param>
          <type>Creator</type>
          <declname>creator</declname>
          <defval>Creator_uniform_3&lt; Kernel_traits&lt; Point_3 &gt;::Kernel::RT, Point_3 &gt;</defval>
        </param>
        <briefdescription>
<para>generates a given number of points on a cubic grid whose size is determined by the number of points to be generated. </para>
        </briefdescription>
        <detaileddescription>
<para>The function creates the first <formula id="3">$ n$</formula> points on the regular <formula id="34">$ \lceil n^{1/3}\,\rceil\times\lceil n^{1/3}\,\rceil\times\lceil n^{1/3}\,\rceil$</formula> grid within the cube <formula id="35">$ [-a,a]\times[-a,a]\times[-a, a]$</formula>. Returns the value of <formula id="7">$ o$</formula> after inserting the <formula id="3">$ n$</formula> points.</para>
<para><bold>Requires</bold><linebreak/>
<itemizedlist>
<listitem><para><computeroutput>Creator</computeroutput> must be a function object accepting three <computeroutput>double</computeroutput> values <formula id="1">$ x$</formula>, <formula id="2">$ y$</formula>, and <formula id="36">$ z$</formula> and returning an initialized point <computeroutput>(x,y,z)</computeroutput> of type <computeroutput>P</computeroutput>. Predefined implementations for these creators like the default can be found in Section STLCreators.</para>
</listitem><listitem><para>The <computeroutput>OutputIterator</computeroutput> must accept values of type <computeroutput>P</computeroutput>. If the <computeroutput>OutputIterator</computeroutput> has a <computeroutput>value_type</computeroutput> the default initializer of the <computeroutput>creator</computeroutput> can be used. <computeroutput>P</computeroutput> is set to the <computeroutput>value_type</computeroutput> in this case.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gad5aec033ff62776826bd5b01be41b792" kindref="member">CGAL::points_on_square_grid_2()</ref></computeroutput></para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga5931f8c3d40445dd776437d07a5058a1" kindref="member">CGAL::random_selection()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/point_generators_3.h" line="33" column="1" declfile="CGAL/point_generators_3.h" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1ga3c1b105fd97be68c3331b397b6e6ebe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Creator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::points_on_cube_grid_d</definition>
        <argsstring>(int dim, double a, std::size_t n, OutputIterator o, Creator creator)</argsstring>
        <name>points_on_cube_grid_d</name>
        <qualifiedname>CGAL::points_on_cube_grid_d</qualifiedname>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>o</declname>
        </param>
        <param>
          <type>Creator</type>
          <declname>creator</declname>
        </param>
        <briefdescription>
<para>generates a given number of points on a cubic grid in any dimension whose size is determined by the number of points to be generated. </para>
        </briefdescription>
        <detaileddescription>
<para>It creates the first <formula id="3">$ n$</formula> points on the regular <formula id="43">$ \lceil
n^{1/dim}\,\rceil\times\lceil
n^{1/dim}\,\rceil\times\ldots\times\lceil n^{1/dim}\,\rceil$</formula> grid within the hypercube <formula id="44">$ [-a,a]^{dim}$</formula>.</para>
<para><simplesect kind="return"><para>the value of <formula id="7">$ o$</formula> after inserting the <formula id="3">$ n$</formula> points.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem>
<para><computeroutput>Creator</computeroutput> must be a functor accepting an integer (the dimension) and two iterators and returning an initialized point of type <computeroutput>P</computeroutput> whose coordinates are given by the iterator. For example: <computeroutput>Creator_uniform_d&lt;Kernel_traits&lt;Point_d&gt;::Kernel::RT, Point_d&gt;</computeroutput>. The dimension of <computeroutput>Creator</computeroutput> should be <formula id="45">$ dim$</formula>. </para>
</listitem>
<listitem>
<para>The <computeroutput>OutputIterator</computeroutput> must accept values of type <computeroutput>P</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gad5aec033ff62776826bd5b01be41b792" kindref="member">CGAL::points_on_square_grid_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga03437b3f68ee130c2438a0ab29511695" kindref="member">CGAL::points_on_cube_grid_3()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/point_generators_d.h" line="34" column="1" declfile="CGAL/point_generators_d.h" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref> &amp;</type>
        <definition>Random &amp; CGAL::get_default_random</definition>
        <argsstring>()</argsstring>
        <name>get_default_random</name>
        <qualifiedname>CGAL::get_default_random</qualifiedname>
        <briefdescription>
<para>The global function <computeroutput><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member">get_default_random()</ref></computeroutput> returns the default random numbers generator used for the generator functions and classes. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned generator is thread local. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="188" column="8" declfile="CGAL/Random.h" declline="188" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1ga55d4f2043b91c2870b5d4a6071d921f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class Generator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::random_convex_hull_in_disc_2</definition>
        <argsstring>(std::size_t n, double radius, Generator &amp;gen, OutputIterator it, const Traits &amp;traits, bool fast=true)</argsstring>
        <name>random_convex_hull_in_disc_2</name>
        <qualifiedname>CGAL::random_convex_hull_in_disc_2</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>Generator &amp;</type>
          <declname>gen</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fast</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Computes a random convex polygon as the convex hull of <formula id="53">$ n $</formula> random points in a disc centered at the origin with radius <computeroutput>radius</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The vertices are stored counterclockwise in <computeroutput>it</computeroutput>. The generated polygon will have an average number of vertices <formula id="54">$ n^\frac{1}{3}(1+o(1))$</formula>.</para>
<para><simplesect kind="pre"><para><formula id="55">$n \geq 3 $</formula></para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem><para><computeroutput>Generator</computeroutput> has to be a Boost random generator, such as <computeroutput>boost::random::mt19937</computeroutput>.</para>
</listitem><listitem><para><computeroutput>fast</computeroutput> is a Boolean , set to <computeroutput>true</computeroutput> for time efficiency and to <computeroutput>false</computeroutput> for memory efficiency.</para>
</listitem><listitem><para><computeroutput>Traits</computeroutput> is a model of the concept <computeroutput><ref refid="classRandomConvexHullTraits__2" kindref="compound">RandomConvexHullTraits_2</ref></computeroutput>.</para>
</listitem><listitem><para>The <computeroutput>OutputIterator</computeroutput> must accept values of type <computeroutput>Traits::Point_2</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gaa8cb58e4cc9ab9e225808799b1a61174" kindref="member">CGAL::random_polygon_2()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1ga48fe050c898078e688376009dc60b232" kindref="member">CGAL::random_convex_set_2()</ref></computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>The implementation is based on an incremental construction of a convex hull. At each step, we choose a number of points to pick uniformly at random in the disc. Then, a subset of these points, that won&apos;t change the convex hull, is evaluated using a Binomial law. As these points won&apos;t be generated, the time and size complexities are reduced <ref refid="citelist_1CITEREF_Devillers2014Generator" kindref="member">[1]</ref>. A tradeoff between time and memory is provided with the option <computeroutput>fast</computeroutput>, true by default. Using the <computeroutput>fast</computeroutput> option, both time and size expected complexities are <formula id="56">$O\left(n^\frac{1}{3}\log^\frac{2}{3}n\right)$</formula>. If this option is disabled, the expected size complexity becomes <formula id="57">$O\left(n^\frac{1}{3}\right)$</formula> but the expected time complexity becomes <formula id="58">$O\left(n^\frac{1}{3}\log^2 n\right)$</formula>.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>The following program computes a random polygon defined as the convex hull of <formula id="59">$10000$</formula> points uniformly generated in the disc of radius <formula id="60">$1$</formula> centered in <formula id="61">$0$</formula>.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Generator_2random_convex_hull_2_8cpp-example" kindref="compound">Generator/random_convex_hull_2.cpp</ref> <programlisting filename="Generator/random_convex_hull_2.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/random_convex_hull_in_disc_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polygon_2_algorithms.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/random.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCGAL" kindref="compound">CGAL</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Exact_predicates_inexact_constructions_kernel<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::FT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FT;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RADIUS=1.0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10000;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;Point&gt;<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>boost::mt19937<sp/>gen;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>gen.seed(0u);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="group__PkgGeneratorsRef_1ga55d4f2043b91c2870b5d4a6071d921f6" kindref="member">random_convex_hull_in_disc_2</ref>(N,RADIUS,gen,std::back_inserter(v),K());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>v.size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>FT<sp/>area=polygon_area_2(v.begin(),v.end(),K());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;A<sp/>random<sp/>convex<sp/>polygon<sp/>inscribed<sp/>in<sp/>a<sp/>disc<sp/>with<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;size&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>vertices<sp/>and<sp/>area<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;area&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>been<sp/>generated.&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/random_convex_hull_in_disc_2.h" line="43" column="6" declfile="CGAL/random_convex_hull_in_disc_2.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1ga48fe050c898078e688376009dc60b232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class <ref refid="classPointGenerator" kindref="compound">PointGenerator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::random_convex_set_2</definition>
        <argsstring>(std::size_t n, OutputIterator o, const PointGenerator &amp;pg, Traits t=Random_convex_set_traits_2)</argsstring>
        <name>random_convex_set_2</name>
        <qualifiedname>CGAL::random_convex_set_2</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classPointGenerator" kindref="compound">PointGenerator</ref> &amp;</type>
          <declname>pg</declname>
        </param>
        <param>
          <type>Traits</type>
          <declname>t</declname>
          <defval><ref refid="structCGAL_1_1Random__convex__set__traits__2" kindref="compound">Random_convex_set_traits_2</ref></defval>
        </param>
        <briefdescription>
<para>computes a random convex planar point set of given size where the points are drawn from a specific domain. </para>
        </briefdescription>
        <detaileddescription>
<para>The function computes a random convex <computeroutput>n</computeroutput>-gon by writing its vertices (oriented counterclockwise) to <computeroutput>o</computeroutput>. The resulting polygon is scaled such that it fits into the bounding box as specified by <computeroutput>pg</computeroutput>. Therefore we cannot easily describe the resulting distribution. <simplesect kind="pre"><para><formula id="62">$ n \ge3$</formula>.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classPointGenerator" kindref="compound">PointGenerator</ref></computeroutput> is a model of the concept <ref refid="classPointGenerator" kindref="compound">PointGenerator</ref></para>
</listitem><listitem><para><computeroutput>Traits</computeroutput> is a model of the concept <ref refid="classRandomConvexSetTraits__2" kindref="compound">RandomConvexSetTraits_2</ref></para>
</listitem><listitem><para><computeroutput>Point_generator::value_type</computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput> and <computeroutput>OutputIterator::value_type</computeroutput>.</para>
</listitem><listitem><para>if <computeroutput>Traits</computeroutput> is not specified, <computeroutput>Point_generator::value_type</computeroutput> must be <computeroutput>Point_2&lt; R &gt;</computeroutput> for some representation class <computeroutput>R</computeroutput>,</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Random__points__in__square__2" kindref="compound">CGAL::Random_points_in_square_2</ref>&lt;Point_2, Creator&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Random__points__in__disc__2" kindref="compound">CGAL::Random_points_in_disc_2</ref>&lt;Point_2, Creator&gt;</computeroutput></para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>The implementation uses the centroid method described in <ref refid="citelist_1CITEREF_cgal:s-zkm-96" kindref="member">[2]</ref> and has a worst case running time of <formula id="63">$O(r
\cdot n + n \cdot \log n)$</formula>, where <formula id="10">$ r$</formula> is the time needed by <computeroutput>pg</computeroutput> to generate a random point.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>The following program displays a random convex 500-gon where the points are drawn uniformly from the unit square centered at the origin.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Generator_2random_convex_set_8cpp-example" kindref="compound">Generator/random_convex_set.cpp</ref> <programlisting filename="Generator/random_convex_set.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Exact_predicates_inexact_constructions_kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/random_convex_set_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Exact_predicates_inexact_constructions_kernel<sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Random__points__in__square__2" kindref="compound">CGAL::Random_points_in_square_2</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Point_2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>CGAL::Creator_uniform_2&lt;<sp/>double,<sp/>Point_2<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_generator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>500-gon<sp/>and<sp/>write<sp/>it<sp/>into<sp/>a<sp/>window:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="group__PkgGeneratorsRef_1ga48fe050c898078e688376009dc60b232" kindref="member">CGAL::random_convex_set_2</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>500,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;Point_2&gt;(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_generator(<sp/>0.5));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/random_convex_set_2.h" line="48" column="16" declfile="CGAL/random_convex_set_2.h" declline="48" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1gaa8cb58e4cc9ab9e225808799b1a61174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class <ref refid="classPointGenerator" kindref="compound">PointGenerator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::random_polygon_2</definition>
        <argsstring>(std::size_t n, OutputIterator result, const PointGenerator &amp;pg, Traits t=Default_traits)</argsstring>
        <name>random_polygon_2</name>
        <qualifiedname>CGAL::random_polygon_2</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="classPointGenerator" kindref="compound">PointGenerator</ref> &amp;</type>
          <declname>pg</declname>
        </param>
        <param>
          <type>Traits</type>
          <declname>t</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes a random simple polygon by writing its vertices (oriented counterclockwise) to <computeroutput>result</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The polygon generated will have a number of vertices equal to the number of unique points in the first <formula id="3">$ n$</formula> points generated by <computeroutput>pg</computeroutput>.</para>
<para>Constructs a random simple polygon from points that are drawn from a specific domain. Though each simple polygon defined on this set of points has a non-zero probability of being constructed, some polygons may have higher probabilities than others. The overall distribution of the generated polygons is not known since it depends on the generated points.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem><para><computeroutput>Traits</computeroutput> is a model of the concept <ref refid="classRandomPolygonTraits__2" kindref="compound">RandomPolygonTraits_2</ref></para>
</listitem><listitem><para><computeroutput><ref refid="classPointGenerator_1a011169ebc00b5ac07cfb81158f88b469" kindref="member">PointGenerator::value_type</ref></computeroutput> is equivalent to <computeroutput>Traits::Point_2</computeroutput> and <computeroutput>OutputIterator::value_type</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>The default traits class <computeroutput>Default_traits</computeroutput> is the kernel in which <computeroutput>Traits::Point_2</computeroutput> is defined.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Random__points__in__disc__2" kindref="compound">CGAL::Random_points_in_disc_2</ref>&lt;Point_2, Creator&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Random__points__in__square__2" kindref="compound">CGAL::Random_points_in_square_2</ref>&lt;Point_2, Creator&gt;</computeroutput></para>
</simplesect>
<bold>Preconditions</bold><linebreak/>
</para>
<para><itemizedlist>
<listitem><para>The number of unique points in the first <formula id="3">$ n$</formula> points generated by <computeroutput>pg</computeroutput> is at least <computeroutput>3</computeroutput>.</para>
</listitem><listitem><para>The unique points in the first <formula id="3">$ n$</formula> points generated by <computeroutput>pg</computeroutput> do not all lie on the same line.</para>
<para><bold>Implementation</bold><linebreak/>
</para>
</listitem></itemizedlist>
</para>
<para>The implementation is based on the method of eliminating self-intersections in a polygon by using so-called &quot;2-opt&quot; moves. Such a move eliminates an intersection between two edges by reversing the order of the vertices between the edges. No more than <formula id="64">$O(n^3)$</formula> such moves are required to simplify a polygon defined on <formula id="3">$ n$</formula> points <ref refid="citelist_1CITEREF_ls-utstp-82" kindref="member">[3]</ref>. Intersecting edges are detected using a simple sweep through the vertices and then one intersection is chosen at random to eliminate after each sweep. The worse-case running time is therefore <formula id="65">$O(n^4 \log n)$</formula>.</para>
<para><bold>Example</bold><linebreak/>
</para>
<para>The following program displays a random simple polygon with up to 100 vertices, where the vertex coordinates are drawn uniformly from the unit square centered at the origin.</para>
<para><linebreak/>
<bold>File</bold> <ref refid="Generator_2random_polygon_8cpp-example" kindref="compound">Generator/random_polygon.cpp</ref> <programlisting filename="Generator/random_polygon.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;CGAL/Simple_cartesian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Polygon_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/point_generators_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/random_polygon_2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Random.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/algorithm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CGAL_USE_GMP</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/Gmpz.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Gmpz<sp/>RT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>the<sp/>choice<sp/>of<sp/>double<sp/>here<sp/>for<sp/>a<sp/>number<sp/>type<sp/>may<sp/>cause<sp/>problems</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>degenerate<sp/>point<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CGAL/double.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RT;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Simple_cartesian&lt;RT&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K::Point_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;Point_2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Container;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Polygon_2&lt;K,<sp/>Container&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polygon_2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CGAL::Creator_uniform_2&lt;int,<sp/>Point_2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Creator;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Random__points__in__square__2" kindref="compound">CGAL::Random_points_in_square_2&lt;Point_2, Creator&gt;</ref><sp/>Point_generator;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RADIUS<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_POLY_SIZE<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Polygon_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polygon;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::list&lt;Point_2&gt;<sp/><sp/><sp/>point_set;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="classCGAL_1_1Random" kindref="compound">CGAL::Random</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Seed<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>rand.<ref refid="classCGAL_1_1Random_1aacb79d281a3b7b5cb74d677f7efc1772" kindref="member">get_seed</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>rand.<ref refid="classCGAL_1_1Random_1ab90e876cee4ff7d98f587dac411f7fcb" kindref="member">get_int</ref>(4,<sp/>MAX_POLY_SIZE);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>size<sp/>points<sp/>from<sp/>the<sp/>generator,<sp/>eliminating<sp/>duplicates,<sp/>so<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>polygon<sp/>will<sp/>have<sp/>&lt;=<sp/>size<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>CGAL::copy_n_unique(Point_generator(RADIUS),<sp/>size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(point_set));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::ostream_iterator&lt;<sp/>Point_2<sp/>&gt;<sp/><sp/>out(<sp/>std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;From<sp/>the<sp/>following<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point_set.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>points<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::copy(point_set.begin(),<sp/>point_set.end(),<sp/>out);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="group__PkgGeneratorsRef_1gaa8cb58e4cc9ab9e225808799b1a61174" kindref="member">CGAL::random_polygon_2</ref>(point_set.size(),<sp/>std::back_inserter(polygon),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_set.begin());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>following<sp/>simple<sp/>polygon<sp/>was<sp/>made:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>polygon<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/random_polygon_2.h" line="57" column="16" declfile="CGAL/random_polygon_2.h" declline="57" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgGeneratorsRef_1ga5931f8c3d40445dd776437d07a5058a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomAccessIterator</type>
          </param>
          <param>
            <type>class Size</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>class Random</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::random_selection</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, Size n, OutputIterator result, Random &amp;rnd=get_default_random())</argsstring>
        <name>random_selection</name>
        <qualifiedname>CGAL::random_selection</qualifiedname>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>n</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>result</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref> &amp;</type>
          <declname>rnd</declname>
          <defval><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member">get_default_random</ref>()</defval>
        </param>
        <briefdescription>
<para>chooses <computeroutput>n</computeroutput> items at random from a random access iterator range which is useful to produce degenerate input data sets with multiple entries of identical items. </para>
        </briefdescription>
        <detaileddescription>
<para>The function chooses a random item from the range <computeroutput>[first,last)</computeroutput> and writes it to <computeroutput>result</computeroutput>, each item from the range with equal probability, and repeats this <formula id="3">$ n$</formula> times, thus writing <computeroutput>n</computeroutput> items to <computeroutput>result</computeroutput>. A single random number is needed from <computeroutput>rnd</computeroutput> for each item. Returns the value of <computeroutput>result</computeroutput> after inserting the <computeroutput>n</computeroutput> items. <simplesect kind="pre"><para><computeroutput><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref></computeroutput> is a random number generator type as provided by the STL or by <computeroutput><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref></computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gafacf70e214daa1206eb1e20b35bb8b64" kindref="member">CGAL::perturb_points_2()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/random_selection.h" line="23" column="16" declfile="CGAL/random_selection.h" declline="23" declcolumn="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Combination_enumerator.h" line="1" column="1"/>
  </compounddef>
</doxygen>
