<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Random" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Random</compoundname>
    <includes local="no">CGAL/Random.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Random_1a2d7179ef0578c569d1d2a733d2f82c65" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Random::State</definition>
        <argsstring></argsstring>
        <name>State</name>
        <qualifiedname>CGAL::Random::State</qualifiedname>
        <briefdescription>
<para>The State type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="42" column="26" bodyfile="CGAL/Random.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Random_1aa200d349235965500be514f6d6a566e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Random::Random</definition>
        <argsstring>()</argsstring>
        <name>Random</name>
        <qualifiedname>CGAL::Random::Random</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The seed is chosen based on the system time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1a824a9a1030ef627f9f7b1f6c1ec80d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Random::Random</definition>
        <argsstring>(unsigned int seed)</argsstring>
        <name>Random</name>
        <qualifiedname>CGAL::Random::Random</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Constructor initializing its internal state using <computeroutput>seed</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Equal values for <computeroutput>seed</computeroutput> result in equal sequences of random numbers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="62" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classCGAL_1_1Random_1a5987af5f2c9fc253b5fdbbceef4eff16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Random::get_bool</definition>
        <argsstring>()</argsstring>
        <name>get_bool</name>
        <qualifiedname>CGAL::Random::get_bool</qualifiedname>
        <briefdescription>
<para>returns a random <computeroutput>bool</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="73" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1a4e84acc95d2c9fcf90b2c4fe3f86039c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>b</declname>
            <defname>b</defname>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::Random::get_bits</definition>
        <argsstring>()</argsstring>
        <name>get_bits</name>
        <qualifiedname>CGAL::Random::get_bits</qualifiedname>
        <briefdescription>
<para>returns a random <computeroutput>int</computeroutput> value from the interval <formula id="52">$[0,2^b)$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is supposed to be efficient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="81" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1ab90e876cee4ff7d98f587dac411f7fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Random::get_int</definition>
        <argsstring>(int lower, int upper)</argsstring>
        <name>get_int</name>
        <qualifiedname>CGAL::Random::get_int</qualifiedname>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
<para>returns a random <computeroutput>int</computeroutput> from the interval <computeroutput>[lower,upper)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="88" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1a1893e417ca12d510857eda65d8b39115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CGAL::Random::get_double</definition>
        <argsstring>(double lower=0.0, double upper=1.0)</argsstring>
        <name>get_double</name>
        <qualifiedname>CGAL::Random::get_double</qualifiedname>
        <param>
          <type>double</type>
          <declname>lower</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>upper</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>returns a random <computeroutput>double</computeroutput> from the interval <computeroutput>[lower,upper)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="95" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Distributions</header>
      <description><para>The following member functions are a 1-to-1 correspondence to some distributions from the boost random library. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Random_1a2087fe917d265bb3b6c95c369ded6962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>IntType</type>
        <definition>IntType CGAL::Random::uniform_smallint</definition>
        <argsstring>(IntType lower=0, IntType upper=9)</argsstring>
        <name>uniform_smallint</name>
        <qualifiedname>CGAL::Random::uniform_smallint</qualifiedname>
        <param>
          <type>IntType</type>
          <declname>lower</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>IntType</type>
          <declname>upper</declname>
          <defval>9</defval>
        </param>
        <briefdescription>
<para>returns a random <computeroutput>IntType</computeroutput> from the interval <computeroutput>[lower,upper)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>IntType</computeroutput> can be an integral type as <computeroutput>int</computeroutput>, <computeroutput>std::ptrdiff_t</computeroutput>, <computeroutput>std::size_t</computeroutput>,etc. <simplesect kind="warning"><para>In contrast to <computeroutput>get_int</computeroutput> this function may return <computeroutput>upper</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="111" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1abd650eef0561afe44556ec0e5ac78f5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>IntType</type>
        <definition>IntType CGAL::Random::uniform_int</definition>
        <argsstring>(IntType lower=0, IntType upper=9)</argsstring>
        <name>uniform_int</name>
        <qualifiedname>CGAL::Random::uniform_int</qualifiedname>
        <param>
          <type>IntType</type>
          <declname>lower</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>IntType</type>
          <declname>upper</declname>
          <defval>9</defval>
        </param>
        <briefdescription>
<para>returns a random <computeroutput>IntType</computeroutput> from the interval <computeroutput>[lower,upper)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>IntType</computeroutput> can be an integral type as <computeroutput>int</computeroutput>, <computeroutput>std::ptrdiff_t</computeroutput>, <computeroutput>std::size_t</computeroutput>,etc. <simplesect kind="warning"><para>In contrast to <computeroutput>get_int</computeroutput> this function may return <computeroutput>upper</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="120" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1aeb059eaa4898e8e2331c85b4722016d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RealType</type>
          </param>
        </templateparamlist>
        <type>Realtype</type>
        <definition>Realtype CGAL::Random::uniform_real</definition>
        <argsstring>(RealType lower=0.0, RealType upper=1.0)</argsstring>
        <name>uniform_real</name>
        <qualifiedname>CGAL::Random::uniform_real</qualifiedname>
        <param>
          <type>RealType</type>
          <declname>lower</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>RealType</type>
          <declname>upper</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>returns a random <computeroutput>RealType</computeroutput> from the interval <computeroutput>[lower,upper)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>RealType</computeroutput> can be <computeroutput>float</computeroutput>, <computeroutput>double</computeroutput>, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="127" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1a96120b3c0ac741c927e4730d9119fab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RealType</type>
          </param>
        </templateparamlist>
        <type>RealType</type>
        <definition>RealType CGAL::Random::uniform_01</definition>
        <argsstring>()</argsstring>
        <name>uniform_01</name>
        <qualifiedname>CGAL::Random::uniform_01</qualifiedname>
        <briefdescription>
<para>returns a random <computeroutput>RealType</computeroutput> from the interval <computeroutput>[0,1)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>RealType</computeroutput> can be <computeroutput>float</computeroutput>, <computeroutput>double</computeroutput>, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="135" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1ab7edb1b7c741ab56d3596ebe77c3b90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>IntType</type>
        <definition>IntType CGAL::Random::operator()</definition>
        <argsstring>(IntType upper)</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Random::operator()</qualifiedname>
        <param>
          <type>IntType</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>random</computeroutput><computeroutput>uniform_int&lt;IntType&gt;( 0, upper-1)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="141" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Seed and State Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Random_1aacb79d281a3b7b5cb74d677f7efc1772" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CGAL::Random::get_seed</definition>
        <argsstring>() const</argsstring>
        <name>get_seed</name>
        <qualifiedname>CGAL::Random::get_seed</qualifiedname>
        <briefdescription>
<para>returns the seed used for initialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="152" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1a8c9ad05c69e4fa4333b872a1c6a523b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Random::save_state</definition>
        <argsstring>(State &amp;state) const</argsstring>
        <name>save_state</name>
        <qualifiedname>CGAL::Random::save_state</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Random_1a2d7179ef0578c569d1d2a733d2f82c65" kindref="member">State</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>saves the current internal state in <computeroutput>state</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="158" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Random_1a076897a55380e0abc2b2eb02dd22f42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Random::restore_state</definition>
        <argsstring>(State const &amp;state)</argsstring>
        <name>restore_state</name>
        <qualifiedname>CGAL::Random::restore_state</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Random_1a2d7179ef0578c569d1d2a733d2f82c65" kindref="member">State</ref> const &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>restores the internal state from <computeroutput>state</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="164" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Equality Test</header>
      <memberdef kind="function" id="classCGAL_1_1Random_1a347e8c5cec9b15608fd286c83af17109" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Random::operator==</definition>
        <argsstring>(Random const &amp;random2) const</argsstring>
        <name>operator==</name>
        <qualifiedname>CGAL::Random::operator==</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref> const &amp;</type>
          <declname>random2</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>true</computeroutput>, iff the random object and <computeroutput>random2</computeroutput> have equal internal states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Random.h" line="176" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref></computeroutput> is a random numbers generator. </para>
    </briefdescription>
    <detaileddescription>
<para>It generates uniformly distributed random <computeroutput>bool</computeroutput>, <computeroutput>int</computeroutput> and <computeroutput>double</computeroutput>. It can be used as the random number generating function object in the STL algorithm <computeroutput>std::random_shuffle()</computeroutput>.</para>
<para>Instances of <computeroutput><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref></computeroutput> can be seen as input streams. Different streams are <emphasis>independent</emphasis> of each other, i.e. the sequence of numbers from one stream does <emphasis>not</emphasis> depend upon how many numbers were extracted from the other streams. At each time, an instance has a <emphasis>state</emphasis> that uniquely determines the subsequent numbers being produced.</para>
<para>It can be very useful, e.g. for debugging, to reproduce a sequence of random numbers. This can be done by either initializing with a fixed seed, or by using the state functions as described below.</para>
<para><simplesect kind="note"><para>A <computeroutput><ref refid="classCGAL_1_1Random" kindref="compound">Random</ref></computeroutput> object is not deterministic when used by several threads at the same time, even if a fixed seed has been chosen.</para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>We use the boost random library function <computeroutput>boost::rand48()</computeroutput> to generate the random numbers.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgGeneratorsRef_1gaaf28146567a47f590c4ee036527f1706" kindref="member">CGAL::get_default_random()</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="CGAL/Random.h" line="33" column="1" bodyfile="CGAL/Random.h" bodystart="33" bodyend="180"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Random_1a4e84acc95d2c9fcf90b2c4fe3f86039c" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>get_bits</name></member>
      <member refid="classCGAL_1_1Random_1a5987af5f2c9fc253b5fdbbceef4eff16" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>get_bool</name></member>
      <member refid="classCGAL_1_1Random_1a1893e417ca12d510857eda65d8b39115" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>get_double</name></member>
      <member refid="classCGAL_1_1Random_1ab90e876cee4ff7d98f587dac411f7fcb" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>get_int</name></member>
      <member refid="classCGAL_1_1Random_1aacb79d281a3b7b5cb74d677f7efc1772" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>get_seed</name></member>
      <member refid="classCGAL_1_1Random_1ab7edb1b7c741ab56d3596ebe77c3b90c" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>operator()</name></member>
      <member refid="classCGAL_1_1Random_1a347e8c5cec9b15608fd286c83af17109" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>operator==</name></member>
      <member refid="classCGAL_1_1Random_1aa200d349235965500be514f6d6a566e1" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>Random</name></member>
      <member refid="classCGAL_1_1Random_1a824a9a1030ef627f9f7b1f6c1ec80d9c" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>Random</name></member>
      <member refid="classCGAL_1_1Random_1a076897a55380e0abc2b2eb02dd22f42a" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>restore_state</name></member>
      <member refid="classCGAL_1_1Random_1a8c9ad05c69e4fa4333b872a1c6a523b0" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>save_state</name></member>
      <member refid="classCGAL_1_1Random_1a2d7179ef0578c569d1d2a733d2f82c65" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>State</name></member>
      <member refid="classCGAL_1_1Random_1a96120b3c0ac741c927e4730d9119fab5" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>uniform_01</name></member>
      <member refid="classCGAL_1_1Random_1abd650eef0561afe44556ec0e5ac78f5c" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>uniform_int</name></member>
      <member refid="classCGAL_1_1Random_1aeb059eaa4898e8e2331c85b4722016d9" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>uniform_real</name></member>
      <member refid="classCGAL_1_1Random_1a2087fe917d265bb3b6c95c369ded6962" prot="public" virt="non-virtual"><scope>CGAL::Random</scope><name>uniform_smallint</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
