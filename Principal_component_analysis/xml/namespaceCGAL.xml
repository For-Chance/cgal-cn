<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDbb_1ga7674a40dcf2ee64bebc89d97bf801c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>Deduced</type>
        <definition>Deduced CGAL::bounding_box</definition>
        <argsstring>(InputIterator first, InputIterator beyond)</argsstring>
        <name>bounding_box</name>
        <qualifiedname>CGAL::bounding_box</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPrincipalComponentAnalysisDbb_1ga7674a40dcf2ee64bebc89d97bf801c1d" kindref="member">bounding_box()</ref></computeroutput> computes the axis-aligned bounding box of a set of 2D or 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para>The bounding box is returned either as an iso rectangle in 2D or as an iso cuboid in 3D, the type being deduced automatically from the value type of the iterator range.</para>
<para>There is a set of overloaded bounding_box functions for 2D and 3D points. The user can also optionally pass an explicit kernel, in case the default, based on <computeroutput>Kernel_traits</computeroutput> is not sufficient. The dimension is also deduced automatically.</para>
<para>computes the bounding box of a non-empty set of 2D or 3D points.</para>
<para><simplesect kind="return"><para>The return type is either <computeroutput>K::Iso_rectangle_2</computeroutput> or <computeroutput>K::Iso_cuboid_3</computeroutput>, depending on the dimension of the input values, where <computeroutput>K</computeroutput> is <programlisting><codeline><highlight class="normal">CGAL::Kernel_traits&lt;std::iterator_traits&lt;InputIterator&gt;::value_type&gt;::Kernel</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="pre"><para>first != beyond. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/bounding_box.h" line="32" column="1" declfile="CGAL/bounding_box.h" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDbb_1ga899a938a74fe066cc73ee30ca081b534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type>Deduced</type>
        <definition>Deduced CGAL::bounding_box</definition>
        <argsstring>(InputIterator first, InputIterator beyond, const K &amp;k)</argsstring>
        <name>bounding_box</name>
        <qualifiedname>CGAL::bounding_box</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>computes the bounding box of a non-empty set of 2D or 3D points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The return type is either <computeroutput>K::Iso_rectangle_2</computeroutput> or <computeroutput>K::Iso_cuboid_3</computeroutput>, depending on the dimension of the input values.</para>
</simplesect>
<simplesect kind="pre"><para>first != beyond. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/bounding_box.h" line="44" column="1" declfile="CGAL/bounding_box.h" declline="44" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDLLSF3_1gadcf556c115c6bac30a54bf7fdd0d32e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
          <param>
            <type>typename DiagonalizeTraits_</type>
          </param>
        </templateparamlist>
        <type>K::FT</type>
        <definition>K::FT CGAL::linear_least_squares_fitting_3</definition>
        <argsstring>(InputIterator first, InputIterator beyond, typename K::Line_3 &amp;line, typename K::Point_3 &amp;centroid, const Tag &amp;tag, const K &amp;k, const DiagonalizeTraits_ &amp;diagonalize_traits)</argsstring>
        <name>linear_least_squares_fitting_3</name>
        <qualifiedname>CGAL::linear_least_squares_fitting_3</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>typename K::Line_3 &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>typename K::Point_3 &amp;</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const DiagonalizeTraits_ &amp;</type>
          <declname>diagonalize_traits</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput><ref refid="group__PkgPrincipalComponentAnalysisDLLSF3_1gadcf556c115c6bac30a54bf7fdd0d32e3" kindref="member">linear_least_squares_fitting_3()</ref></computeroutput> computes the best fitting 3D line or plane (in the least squares sense) of a set of 3D objects such as points, segments, triangles, spheres, balls, iso cuboids or tetrahedra. </para>
        </briefdescription>
        <detaileddescription>
<para>The best fitting linear sub-space (here line or plane) minimizes the sum of squared distances from all points comprising these objects to their orthogonal projections onto this linear subspace. It can be shown that the best line or plane goes through the centroid of the set. This problem is equivalent to search for the linear sub-space which maximizes the variance of projected points (sum of squared distances to the centroid). Internally we solve this problem by eigen decomposition of the covariance matrix of the whole set. Note that the <formula id="3">$ 3 \times 3$</formula> covariance matrix is computed internally in closed form and not by point sampling the objects. Eigenvectors corresponding to large eigenvalues are the directions in which the data has strong component, or equivalently large variance.</para>
<para>The fitting quality property is characterized by the values of the three eigenvalues. When all three values are distinct the best linear subspace is uniquely determined, be it a line or a plane. When all three eigenvalues are equal there is no preferable sub-space and any line or plane going through the centroid share the same fitting property (a horizontal plane or a line along the x axis are returned by default). A best fitting line is uniquely determined as soon as the largest eigenvalue is different from the two others, otherwise all lines contained in the best fitting plane share the same fitting property. A best fitting plane is uniquely determined as soon as the smallest eigenvalue is different from the two others, otherwise all planes going through the best fitting line share the same fitting property.</para>
<para>computes the best fitting 3D line of a 3D object set in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). The value returned is a fitting quality between <formula id="0">$ 0$</formula> and <formula id="1">$ 1$</formula>, where <formula id="0">$ 0$</formula> means that the variance is the same along any line contained within the best fitting plane, and <formula id="1">$ 1$</formula> means that the variance is null orthogonally to the best fitting line (hence the fit is perfect).</para>
<para>The tag <computeroutput>tag</computeroutput> identifies the dimension to be considered from the objects. For point sets it should be 0. For segment sets it could be 1 or 0 according to whether one wants to fit the entire segments or just the end points. For triangle sets it can range from 0 to 2 according to whether one wants to fit either the corner points, the segments or the whole triangles. For iso cuboid sets it can range from 0 to 3 according to whether one wants to fit either the corners, the segments, the faces or the whole solid iso cuboids. For sphere sets it can be 2 or 3 according to whether one wants to fit either the surface of the spheres or the whole solid balls. For tetrahedron sets it can range from 0 to 3 according to whether one wants to fit either the points, the segments, the surface triangles or the whole solid tetrahedra.</para>
<para>The class <computeroutput>K</computeroutput> is the kernel in which the value type of <computeroutput>InputIterator</computeroutput> is defined. It can be omitted and deduced automatically from the value type.</para>
<para>The class <computeroutput>DiagonalizeTraits_</computeroutput> is a model of <computeroutput>DiagonalizeTraits</computeroutput>. It can be omitted if Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined: in that case, an overload using <computeroutput>Eigen_diagonalize_traits</computeroutput> is provided.</para>
<para><simplesect kind="note"><para>This function is significantly faster when using <computeroutput>Eigen_diagonalize_traits</computeroutput> and it is strongly advised to use this model.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para><computeroutput>InputIterator</computeroutput> must have a value type equivalent to <computeroutput>K::Point_3</computeroutput>, <computeroutput>K::Segment_3</computeroutput>, <computeroutput>K::Triangle_3</computeroutput>, <computeroutput>K::Iso_cuboid_3</computeroutput>, <computeroutput>K::Sphere_3</computeroutput> or <computeroutput>K::Tetrahedron_3</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>line</computeroutput> is the best fitting line computed. </para>
</listitem>
<listitem>
<para><computeroutput>centroid</computeroutput> is the centroid computed. This parameter is optional and can be omitted. </para>
</listitem>
<listitem>
<para><computeroutput>tag</computeroutput> is the tag identifying the dimension to be considered from the objects. It should range from <computeroutput>Dimension_tag&lt;0&gt;</computeroutput> to <computeroutput>Dimension_tag&lt;3&gt;</computeroutput>. Also, it should not be of a dimension greater nor smaller than the geometry of the object. For example, a <computeroutput>Triangle</computeroutput> can not have a <computeroutput>Dimension_tag&lt;3&gt;</computeroutput> tag. A <computeroutput>Segment</computeroutput> can not have a <computeroutput>Dimension_tag&lt;2&gt;</computeroutput> nor a <computeroutput>Dimension_tag&lt;3&gt;</computeroutput> tag. A <computeroutput>Sphere</computeroutput> can not have a <computeroutput>Dimension_tag&lt;0&gt;</computeroutput> nor a <computeroutput>Dimension_tag&lt;1&gt;</computeroutput> tag. </para>
</listitem>
</orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/linear_least_squares_fitting_3.h" line="91" column="1" declfile="CGAL/linear_least_squares_fitting_3.h" declline="91" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDLLSF3_1gad39edb9f84ea2c280317e6c6c6146911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
          <param>
            <type>typename DiagonalizeTraits_</type>
          </param>
        </templateparamlist>
        <type>K::FT</type>
        <definition>K::FT CGAL::linear_least_squares_fitting_3</definition>
        <argsstring>(InputIterator first, InputIterator beyond, typename K::Plane_3 &amp;plane, typename K::Point_3 &amp;centroid, const Tag &amp;tag, const K &amp;k, const DiagonalizeTraits_ &amp;diagonalize_traits)</argsstring>
        <name>linear_least_squares_fitting_3</name>
        <qualifiedname>CGAL::linear_least_squares_fitting_3</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>typename K::Plane_3 &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>typename K::Point_3 &amp;</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const DiagonalizeTraits_ &amp;</type>
          <declname>diagonalize_traits</declname>
        </param>
        <briefdescription>
<para>computes the best fitting 3D plane of a 3D object set in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is a fitting quality between <formula id="0">$ 0$</formula> and <formula id="1">$ 1$</formula>, where <formula id="0">$ 0$</formula> means that the variance is the same along any plane going through the best fitting line, and <formula id="1">$ 1$</formula> means that the variance is null orthogonally to the best fitting plane (hence the fit is perfect).</para>
<para>The class <computeroutput>K</computeroutput> is the kernel in which the value type of <computeroutput>InputIterator</computeroutput> is defined. It can be omitted and deduced automatically from the value type. The tag <computeroutput>tag</computeroutput> identifies the dimension to be considered from the objects (see above).</para>
<para>The class <computeroutput>DiagonalizeTraits_</computeroutput> is a model of <computeroutput>DiagonalizeTraits</computeroutput>. It can be omitted: if Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined then an overload using <computeroutput>Eigen_diagonalize_traits</computeroutput> is provided. Otherwise, the internal implementation <computeroutput>Diagonalize_traits</computeroutput> is used.</para>
<para><simplesect kind="note"><para>This function is significantly faster when using <computeroutput>Eigen_diagonalize_traits</computeroutput> and it is strongly advised to use this model.</para>
</simplesect>
<bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para><computeroutput>InputIterator</computeroutput> has a value type equivalent to <computeroutput>K::Point_3</computeroutput>, <computeroutput>K::Segment_3</computeroutput>, <computeroutput>K::Triangle_3</computeroutput>, <computeroutput>K::Iso_cuboid_3</computeroutput>, <computeroutput>K::Sphere_3</computeroutput> or <computeroutput>K::Tetrahedron_3</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>plane</computeroutput> is the best fitting plane computed. </para>
</listitem>
<listitem>
<para><computeroutput>centroid</computeroutput> is the centroid computed. This parameter is optional and can be omitted. </para>
</listitem>
<listitem>
<para><computeroutput>tag</computeroutput> is the tag identifying the dimension to be considered from the objects. It should range from <computeroutput>Dimension_tag&lt;0&gt;</computeroutput> to <computeroutput>Dimension_tag&lt;3&gt;</computeroutput>. Also, it should not be of a dimension greater nor smaller than the geometry of the object. For example, a <computeroutput>Triangle</computeroutput> can not have a <computeroutput>Dimension_tag&lt;3&gt;</computeroutput> tag. A <computeroutput>Segment</computeroutput> can not have a <computeroutput>Dimension_tag&lt;2&gt;</computeroutput> nor a <computeroutput>Dimension_tag&lt;3&gt;</computeroutput> tag. A <computeroutput>Sphere</computeroutput> can not have a <computeroutput>Dimension_tag&lt;0&gt;</computeroutput> nor a <computeroutput>Dimension_tag&lt;1&gt;</computeroutput> tag. </para>
</listitem>
</orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/linear_least_squares_fitting_3.h" line="137" column="1" declfile="CGAL/linear_least_squares_fitting_3.h" declline="137" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDBary_1gaad211a4b1883802b618672ea6c528fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>Deduced</type>
        <definition>Deduced CGAL::barycenter</definition>
        <argsstring>(InputIterator first, InputIterator beyond)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>computes the barycenter of a non-empty set of 2D or 3D weighted points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>K::Point_2</computeroutput> or <computeroutput>K::Point_3</computeroutput> depending on the dimension of the input values, where <computeroutput>K</computeroutput> is <programlisting><codeline><highlight class="normal">CGAL::Kernel_traits&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::iterator_traits&lt;InputIterator&gt;::value_type::first_type</highlight></codeline>
<codeline><highlight class="normal">&gt;::Kernel</highlight></codeline>
</programlisting></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>std::pair&lt;K::Point_2, K::FT&gt;</computeroutput> or <computeroutput>std::pair&lt;K::Point_3, K::FT&gt; as value type</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>first != beyond, and the sum of the weights is non-zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/barycenter.h" line="44" column="1" declfile="CGAL/barycenter.h" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDBary_1ga3b1756a7e6851e809a96323536a71f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type>Deduced</type>
        <definition>Deduced CGAL::barycenter</definition>
        <argsstring>(InputIterator first, InputIterator beyond, const K &amp;k)</argsstring>
        <name>barycenter</name>
        <qualifiedname>CGAL::barycenter</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>computes the barycenter of a non-empty set of 2D or 3D weighted points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>K::Point_2</computeroutput> or <computeroutput>K::Point_3</computeroutput> depending on the dimension of the input values.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must have <computeroutput>std::pair&lt;K::Point_2, K::FT&gt;</computeroutput> or <computeroutput>std::pair&lt;K::Point_3, K::FT&gt;</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>first != beyond, and the sum of the weights is non-zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/barycenter.h" line="61" column="1" declfile="CGAL/barycenter.h" declline="61" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDCentroid_1ga7ebdcd3bc99932bcca01bdab53b28391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
        </templateparamlist>
        <type>Deduced</type>
        <definition>Deduced CGAL::centroid</definition>
        <argsstring>(InputIterator first, InputIterator beyond, const Tag &amp;t)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>computes the centroid of a non-empty set of 2D or 3D objects. </para>
        </briefdescription>
        <detaileddescription>
<para>The tag is used to specify the dimension to be considered from the objects.</para>
<para><simplesect kind="pre"><para>first != beyond.</para>
</simplesect>
<simplesect kind="return"><para>The return type is either <computeroutput>K::Point_2</computeroutput> or <computeroutput>K::Point_3</computeroutput>, depending on the dimension of the input objects, where <computeroutput>K</computeroutput> is <programlisting><codeline><highlight class="normal">CGAL::Kernel_traits&lt;std::iterator_traits&lt;InputIterator&gt;::value_type&gt;::Kernel</highlight></codeline>
</programlisting></para>
</simplesect>
<bold>Two Dimensional Input</bold><linebreak/>
</para>
<para>The value type must be either <computeroutput>K::Point_2</computeroutput>, <computeroutput>K::Segment_2</computeroutput>, <computeroutput>K::Triangle_2</computeroutput>, <computeroutput>K::Rectangle_2</computeroutput> or <computeroutput>K::Circle_2</computeroutput>. To fit a set of disks the user must call the function with value type <computeroutput>K::Circle_2</computeroutput> and with dimension tag of 2. The tag must range between <computeroutput>Dimension_tag&lt;0&gt;</computeroutput> and <computeroutput>Dimension_tag&lt;2&gt;</computeroutput>.</para>
<para><bold>Three Dimensional Input</bold><linebreak/>
</para>
<para>The value type must be either <computeroutput>K::Point_3</computeroutput>, <computeroutput>K::Segment_3</computeroutput>, <computeroutput>K::Triangle_3</computeroutput>, <computeroutput>K::Cuboid_3</computeroutput>, <computeroutput>K::Sphere_3</computeroutput> or <computeroutput>K::Tetrahedron_3</computeroutput>. To fit a set of balls the user must call the function with value type <computeroutput>K::Sphere_3</computeroutput> and with dimension tag of 3. The tag must range between <computeroutput>Dimension_tag&lt;0&gt;</computeroutput> and <computeroutput>Dimension_tag&lt;3&gt;</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/centroid.h" line="62" column="1" declfile="CGAL/centroid.h" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDCentroid_1ga424a49b3f176d176786ef7b22432b682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
        </templateparamlist>
        <type>Deduced</type>
        <definition>Deduced CGAL::centroid</definition>
        <argsstring>(InputIterator first, InputIterator beyond, const K &amp;k, const Tag &amp;t)</argsstring>
        <name>centroid</name>
        <qualifiedname>CGAL::centroid</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>computes the centroid of a non-empty set of 2D or 3D objects. </para>
        </briefdescription>
        <detaileddescription>
<para>The tag is used to specify the dimension to be considered from the objects.</para>
<para><simplesect kind="pre"><para>first != beyond.</para>
</simplesect>
<simplesect kind="return"><para>The return type is either <computeroutput>K::Point_2</computeroutput> or <computeroutput>K::Point_3</computeroutput>, depending on the dimension of the input objects.</para>
</simplesect>
<bold>Two Dimensional Input</bold><linebreak/>
</para>
<para>The value type must be either <computeroutput>K::Point_2</computeroutput>, <computeroutput>K::Segment_2</computeroutput>, <computeroutput>K::Triangle_2</computeroutput>, <computeroutput>K::Rectangle_2</computeroutput> or <computeroutput>K::Circle_2</computeroutput>. To fit a set of disks the user must call the function with value type <computeroutput>K::Circle_2</computeroutput> and with dimension tag of 2. The tag must range between <computeroutput>Dimension_tag&lt;0&gt;</computeroutput> and <computeroutput>Dimension_tag&lt;2&gt;</computeroutput>.</para>
<para><bold>Three Dimensional Input</bold><linebreak/>
</para>
<para>The value type must be either <computeroutput>K::Point_3</computeroutput>, <computeroutput>K::Segment_3</computeroutput>, <computeroutput>K::Triangle_3</computeroutput>, <computeroutput>K::Cuboid_3</computeroutput>, <computeroutput>K::Sphere_3</computeroutput> or <computeroutput>K::Tetrahedron_3</computeroutput>. To fit a set of balls the user must call the function with value type <computeroutput>K::Sphere_3</computeroutput> and with dimension tag of 3. The tag must range between <computeroutput>Dimension_tag&lt;0&gt;</computeroutput> and <computeroutput>Dimension_tag&lt;3&gt;</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/centroid.h" line="92" column="1" declfile="CGAL/centroid.h" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPrincipalComponentAnalysisDLLSF2_1gaf0d4435db5901ebe10cafd7de7c077f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
          <param>
            <type>typename DiagonalizeTraits_</type>
          </param>
        </templateparamlist>
        <type>K::FT</type>
        <definition>K::FT CGAL::linear_least_squares_fitting_2</definition>
        <argsstring>(InputIterator first, InputIterator beyond, typename K::Line_2 &amp;line, typename K::Point_2 &amp;centroid, const Tag &amp;tag, const K &amp;k, const DiagonalizeTraits_ &amp;diagonalize_traits)</argsstring>
        <name>linear_least_squares_fitting_2</name>
        <qualifiedname>CGAL::linear_least_squares_fitting_2</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>typename K::Line_2 &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>typename K::Point_2 &amp;</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>const Tag &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const DiagonalizeTraits_ &amp;</type>
          <declname>diagonalize_traits</declname>
        </param>
        <briefdescription>
<para>computes the best fitting 2D line of a 2D object set in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is a fitting quality between <formula id="0">$ 0$</formula> and <formula id="1">$ 1$</formula>, where <formula id="0">$ 0$</formula> means that the variance is the same along any line (a horizontal line going through the centroid is output by default), and <formula id="1">$ 1$</formula> means that the variance is null orthogonally to the best fitting line (hence the fit is perfect).</para>
<para>It computes the 2D best fitting line (in the least squares sense) of a set of 2D objects such as points, segments, triangles, iso rectangles, circles or disks.</para>
<para>The best fitting line minimizes the sum of squared distances from all points comprising these objects to their orthogonal projections onto the line. It can be shown that this line goes through the centroid of the set. This problem is equivalent to search for the linear sub-space which maximizes the variance of projected points (sum of squared distances to the centroid). Internally we solve this problem by eigen decomposition of the covariance matrix of the whole set. Note that the <formula id="2">$ 2 \times 2$</formula> covariance matrix is computed internally in closed form and not by point sampling the objects. Eigenvectors corresponding to large eigenvalues are the directions in which the data has strong component, or equivalently large variance. If one eigenvalue is null the fit is perfect as the sum of squared distance from all points to their projection onto the best line is null. If the two eigenvalues are the same there is no preferable sub-space and all lines going through the centroid share the same fitting property.</para>
<para>The tag <computeroutput>tag</computeroutput> identifies the dimension to be considered from the objects. For point sets it should be 0. For segments it can be 1 or 0 according to whether one wants to fit the whole segment or just their end points. For triangles it can range from 0 to 2 according to whether one wants to fit either the triangle points, the segments or the whole triangles. For rectangles it can range from 0 to 2 according to whether one wants to fit either the corner points, the segments, or the whole rectangles. For circles it can be 1 or 2 according to whether one wants to fit either the circles or the whole discs. For triangles it ranges from 0 to 2 according to whether one wants to fit either the points, the segments or the whole triangles.</para>
<para>The class <computeroutput>K</computeroutput> is the kernel in which the value type of the <computeroutput>InputIterator</computeroutput> is defined. It can be omitted and deduced automatically from the value type.</para>
<para>The class <computeroutput>DiagonalizeTraits_</computeroutput> is a model of <computeroutput>DiagonalizeTraits</computeroutput>. It can be omitted if Eigen 3 (or greater) is available and <computeroutput>CGAL_EIGEN3_ENABLED</computeroutput> is defined: in that case, an overload using <computeroutput>Eigen_diagonalize_traits</computeroutput> is provided.</para>
<para><bold>Requirements</bold><linebreak/>
</para>
<para><orderedlist>
<listitem>
<para><computeroutput>InputIterator</computeroutput> must have a value type equivalent to <computeroutput>K::Point_2</computeroutput> or <computeroutput>K::Segment_2</computeroutput> or <computeroutput>K::Triangle_2</computeroutput> or <computeroutput>K::Rectangle_2</computeroutput> or <computeroutput>K::Circle_2</computeroutput>. </para>
</listitem>
<listitem>
<para><computeroutput>line</computeroutput> is the best fitting line computed. </para>
</listitem>
<listitem>
<para><computeroutput>centroid</computeroutput> is the centroid computed. This parameter is optional and can be omitted. </para>
</listitem>
<listitem>
<para><computeroutput>tag</computeroutput> is the tag identifying the dimension to be considered from the objects. It should be one of <computeroutput>Dimension_tag&lt;0&gt;</computeroutput>, <computeroutput>Dimension_tag&lt;1&gt;</computeroutput> or <computeroutput>Dimension_tag&lt;2&gt;</computeroutput>. Also, it should not be of dimension greater than the geometry of the object. For example, a <computeroutput>Segment</computeroutput> can not have a <computeroutput>Dimension_tag&lt;2&gt;</computeroutput> tag. </para>
</listitem>
</orderedlist>
</para>
<para><simplesect kind="pre"><para>first != beyond. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/linear_least_squares_fitting_2.h" line="35" column="1" declfile="CGAL/linear_least_squares_fitting_2.h" declline="35" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/barycenter.h" line="1" column="1"/>
  </compounddef>
</doxygen>
