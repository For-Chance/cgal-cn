<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Exponent__vector" prot="public">CGAL::Exponent_vector</innerclass>
    <innerclass refid="classCGAL_1_1Polynomial" prot="public">CGAL::Polynomial</innerclass>
    <innerclass refid="classCGAL_1_1Polynomial__traits__d" prot="public">CGAL::Polynomial_traits_d</innerclass>
    <innerclass refid="structCGAL_1_1Polynomial__type__generator" prot="public">CGAL::Polynomial_type_generator</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga3b8b5ea0d228a45fd8491f55e233551d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Canonicalize::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Canonicalize::result_type CGAL::canonicalize</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>canonicalize</name>
        <qualifiedname>CGAL::canonicalize</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Canonicalize</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Canonicalize" kindref="compound">PolynomialTraits_d::Canonicalize</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Canonicalize" kindref="compound">PolynomialTraits_d::Canonicalize</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="22" column="1" declfile="CGAL/polynomial_utils.h" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga57d24cae683abec20a77f26e6aa1dc97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Compare::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Compare::result_type CGAL::compare</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>compare</name>
        <qualifiedname>CGAL::compare</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Compare</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Compare" kindref="compound">PolynomialTraits_d::Compare</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Compare" kindref="compound">PolynomialTraits_d::Compare</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="41" column="1" declfile="CGAL/polynomial_utils.h" declline="41" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf98b5536fa88dbf058ac4f46223ed870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Degree::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Degree::result_type CGAL::degree</definition>
        <argsstring>(const Polynomial_d &amp;p, int i, index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>degree</name>
        <qualifiedname>CGAL::degree</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>index</type>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Degree</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Degree" kindref="compound">PolynomialTraits_d::Degree</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Degree" kindref="compound">PolynomialTraits_d::Degree</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="62" column="1" declfile="CGAL/polynomial_utils.h" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga8281f6beeaf6cdd634336ee01abaffc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Degree_vector::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Degree_vector::result_type CGAL::degree_vector</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>degree_vector</name>
        <qualifiedname>CGAL::degree_vector</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::DegreeVector</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1DegreeVector" kindref="compound">PolynomialTraits_d::DegreeVector</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1a86de73158bf1c121a88f86d7637ed6ea" kindref="member">PolynomialTraits_d::Degree_vector</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="86" column="1" declfile="CGAL/polynomial_utils.h" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaca2f53d7f69b47d670f36c614a474aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Differentiate::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Differentiate::result_type CGAL::differentiate</definition>
        <argsstring>(const Polynomial_d &amp;p, index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>differentiate</name>
        <qualifiedname>CGAL::differentiate</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>index</type>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Differentiate</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Differentiate" kindref="compound">PolynomialTraits_d::Differentiate</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Differentiate" kindref="compound">PolynomialTraits_d::Differentiate</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="108" column="1" declfile="CGAL/polynomial_utils.h" declline="108" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga3310edb22c42654ae715b7b98ff95a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Evaluate_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Evaluate_homogeneous::result_type CGAL::evaluate_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, Polynomial_traits_d&lt; Polynomial_d &gt;::Coefficient_type u, Polynomial_traits_d&lt; Polynomial_d &gt;::Coefficient_type v)</argsstring>
        <name>evaluate_homogeneous</name>
        <qualifiedname>CGAL::evaluate_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Coefficient_type</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Coefficient_type</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Evaluate_homogeneous</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1EvaluateHomogeneous" kindref="compound">PolynomialTraits_d::EvaluateHomogeneous</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1EvaluateHomogeneous" kindref="compound">PolynomialTraits_d::EvaluateHomogeneous</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="131" column="1" declfile="CGAL/polynomial_utils.h" declline="131" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaa35e3147d1971810230bc1632bf0b3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Evaluate::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Evaluate::result_type CGAL::evaluate</definition>
        <argsstring>(const Polynomial_d &amp;p, Polynomial_traits_d&lt; Polynomial_d &gt;::Coefficient_type x)</argsstring>
        <name>evaluate</name>
        <qualifiedname>CGAL::evaluate</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Coefficient_type</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Evaluate</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Evaluate" kindref="compound">PolynomialTraits_d::Evaluate</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Evaluate" kindref="compound">PolynomialTraits_d::Evaluate</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="156" column="1" declfile="CGAL/polynomial_utils.h" declline="156" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaeb1676316060ebe50f76c6413a8c658f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Gcd_up_to_constant_factor::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Gcd_up_to_constant_factor::result_type CGAL::gcd_up_to_constant_factor</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>gcd_up_to_constant_factor</name>
        <qualifiedname>CGAL::gcd_up_to_constant_factor</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Gcd_up_to_constant_factor</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1GcdUpToConstantFactor" kindref="compound">PolynomialTraits_d::GcdUpToConstantFactor</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GcdUpToConstantFactor" kindref="compound">PolynomialTraits_d::GcdUpToConstantFactor</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="179" column="1" declfile="CGAL/polynomial_utils.h" declline="179" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga8803637196a44763d39fe3a264141699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::get_coefficient::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::get_coefficient::result_type CGAL::get_coefficient</definition>
        <argsstring>(const Polynomial_d &amp;p, int i)</argsstring>
        <name>get_coefficient</name>
        <qualifiedname>CGAL::get_coefficient</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::GetCoefficient</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1GetCoefficient" kindref="compound">PolynomialTraits_d::GetCoefficient</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GetCoefficient" kindref="compound">PolynomialTraits_d::GetCoefficient</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GetInnermostCoefficient" kindref="compound">PolynomialTraits_d::GetInnermostCoefficient</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="202" column="1" declfile="CGAL/polynomial_utils.h" declline="202" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga529bd150219c59d155186f230e9f875f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::get_innermost_coefficient::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::get_innermost_coefficient::result_type CGAL::get_innermost_coefficient</definition>
        <argsstring>(const Polynomial_d &amp;p, Exponent_vector ev)</argsstring>
        <name>get_innermost_coefficient</name>
        <qualifiedname>CGAL::get_innermost_coefficient</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Exponent__vector" kindref="compound">Exponent_vector</ref></type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::GetInnermostCoefficient</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1GetInnermostCoefficient" kindref="compound">PolynomialTraits_d::GetInnermostCoefficient</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GetCoefficient" kindref="compound">PolynomialTraits_d::GetCoefficient</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1GetInnermostCoefficient" kindref="compound">PolynomialTraits_d::GetInnermostCoefficient</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="225" column="1" declfile="CGAL/polynomial_utils.h" declline="225" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga4a7c4e889f0ed44b30f90b88f9d79134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_leading_coefficient::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_leading_coefficient::result_type CGAL::innermost_leading_coefficient</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>innermost_leading_coefficient</name>
        <qualifiedname>CGAL::innermost_leading_coefficient</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::InnermostLeadingCoefficient</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1InnermostLeadingCoefficient" kindref="compound">PolynomialTraits_d::InnermostLeadingCoefficient</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1InnermostLeadingCoefficient" kindref="compound">PolynomialTraits_d::InnermostLeadingCoefficient</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="248" column="1" declfile="CGAL/polynomial_utils.h" declline="248" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gac5423a4eb6319cd2450c24e2dddf8bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Integral_division_up_to_constant_factor::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Integral_division_up_to_constant_factor::result_type CGAL::integral_division_up_to_constant_factor</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>integral_division_up_to_constant_factor</name>
        <qualifiedname>CGAL::integral_division_up_to_constant_factor</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Integral_division_up_to_constant_factor</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1IntegralDivisionUpToConstantFactor" kindref="compound">PolynomialTraits_d::IntegralDivisionUpToConstantFactor</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1IntegralDivisionUpToConstantFactor" kindref="compound">PolynomialTraits_d::IntegralDivisionUpToConstantFactor</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="270" column="1" declfile="CGAL/polynomial_utils.h" declline="270" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga84f85b1d41c6c3867f78dd5d9f286d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Invert::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Invert::result_type CGAL::invert</definition>
        <argsstring>(const Polynomial_d &amp;p, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>invert</name>
        <qualifiedname>CGAL::invert</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Invert</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Invert" kindref="compound">PolynomialTraits_d::Invert</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Invert" kindref="compound">PolynomialTraits_d::Invert</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="292" column="1" declfile="CGAL/polynomial_utils.h" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga5dffafc7ba775c5324b807eaab0b7260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Is_square_free::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Is_square_free::result_type CGAL::is_square_free</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>is_square_free</name>
        <qualifiedname>CGAL::is_square_free</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Is_square_free</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1IsSquareFree" kindref="compound">PolynomialTraits_d::IsSquareFree</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1IsSquareFree" kindref="compound">PolynomialTraits_d::IsSquareFree</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="314" column="1" declfile="CGAL/polynomial_utils.h" declline="314" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga49bb8035fa32cc1cbb36ff01ddefcd65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Is_zero_at_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Is_zero_at_homogeneous::result_type CGAL::is_zero_at_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>is_zero_at_homogeneous</name>
        <qualifiedname>CGAL::is_zero_at_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Is_zero_at_homogeneous</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1IsZeroAtHomogeneous" kindref="compound">PolynomialTraits_d::IsZeroAtHomogeneous</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1IsZeroAtHomogeneous" kindref="compound">PolynomialTraits_d::IsZeroAtHomogeneous</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="336" column="1" declfile="CGAL/polynomial_utils.h" declline="336" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga05520f66752f070b750869489c0b8883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Is_zero_at::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Is_zero_at::result_type CGAL::is_zero_at</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>is_zero_at</name>
        <qualifiedname>CGAL::is_zero_at</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Is_zero_at</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1IsZeroAt" kindref="compound">PolynomialTraits_d::IsZeroAt</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1IsZeroAt" kindref="compound">PolynomialTraits_d::IsZeroAt</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="359" column="1" declfile="CGAL/polynomial_utils.h" declline="359" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gad93c092e83d5478ed6c641cefd16258a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Leading_coefficient::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Leading_coefficient::result_type CGAL::leading_coefficient</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>leading_coefficient</name>
        <qualifiedname>CGAL::leading_coefficient</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Leading_coefficient</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1LeadingCoefficient" kindref="compound">PolynomialTraits_d::LeadingCoefficient</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1LeadingCoefficient" kindref="compound">PolynomialTraits_d::LeadingCoefficient</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="382" column="1" declfile="CGAL/polynomial_utils.h" declline="382" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gae133df07f196c167258d6a1711febf02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Make_square_free::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Make_square_free::result_type CGAL::make_square_free</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>make_square_free</name>
        <qualifiedname>CGAL::make_square_free</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Make_square_free</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1MakeSquareFree" kindref="compound">PolynomialTraits_d::MakeSquareFree</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1MakeSquareFree" kindref="compound">PolynomialTraits_d::MakeSquareFree</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="404" column="1" declfile="CGAL/polynomial_utils.h" declline="404" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga3c9844416f0d3ed43923d2a4892b5813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Move::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Move::result_type CGAL::move</definition>
        <argsstring>(const Polynomial_d &amp;p, int i, int j)</argsstring>
        <name>move</name>
        <qualifiedname>CGAL::move</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Move</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Move" kindref="compound">PolynomialTraits_d::Move</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Move" kindref="compound">PolynomialTraits_d::Move</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="426" column="1" declfile="CGAL/polynomial_utils.h" declline="426" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga79ce50dbcf3ca762b24bb84528ea7e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Multivariate_content::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Multivariate_content::result_type CGAL::multivariate_content</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>multivariate_content</name>
        <qualifiedname>CGAL::multivariate_content</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Multivariate_content</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1MultivariateContent" kindref="compound">PolynomialTraits_d::MultivariateContent</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1MultivariateContent" kindref="compound">PolynomialTraits_d::MultivariateContent</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="448" column="1" declfile="CGAL/polynomial_utils.h" declline="448" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gad443c279cc75d08a58b362f23438a255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Negate::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Negate::result_type CGAL::negate</definition>
        <argsstring>(const Polynomial_d &amp;p, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>negate</name>
        <qualifiedname>CGAL::negate</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Negate</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Negate" kindref="compound">PolynomialTraits_d::Negate</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Negate" kindref="compound">PolynomialTraits_d::Negate</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="470" column="1" declfile="CGAL/polynomial_utils.h" declline="470" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga0148f1612807b08b433f96c3ce07f2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::number_of_real_roots</definition>
        <argsstring>(Polynomial_d f)</argsstring>
        <name>number_of_real_roots</name>
        <qualifiedname>CGAL::number_of_real_roots</qualifiedname>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>computes the number of distinct real roots of <formula id="6">$f$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a polynomial <formula id="7">$ f$</formula>, or a range of values that is interpreted as the principal Sturm-Habicht coefficients of <formula id="7">$ f$</formula>, the function computes <formula id="8">\[ m:=\# \{\alpha\in\mathbb{R}\mid f(\alpha)=0\} \]</formula> that is, the number of distinct real roots of <formula id="7">$ f$</formula>.</para>
<para>The coefficient type of the polynomial, or the value type of the iterator range, respectively must be a model of <computeroutput>RealEmbeddable</computeroutput>. In the second version, it is not required to pass the exact princiapl Sturm-Habicht coefficients to the functions; it is only required that the sign of each element corresponds to the sign of the actual principal Sturm-Habicht coefficient.</para>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>We explain the internals of this function. For a sequence <formula id="9">$ I:=(a_0,\ldots,a_n)$</formula> of real numbers with <formula id="10">$ a_0\neq 0$</formula>, define <formula id="11">\[ C(I)=\ccSum{i=1}{s}\epsilon_i \]</formula> where <formula id="12">$ s$</formula> is the number of subsequences of <formula id="13">$ I$</formula> of the form</para>
<para><formula id="14">\[ (a,\underbrace{0, \dots,0}_{k},b) \]</formula></para>
<para>with <formula id="15">$ a\neq 0,b\neq 0, k\geq 0$</formula>.</para>
<para>For the <formula id="16">$ i$</formula>-th subsequence of <formula id="13">$ I$</formula>, define</para>
<para><formula id="17">\[
\epsilon_i:=\begin{array}{cc}
0 &amp; \mbox{if $k$ is odd},\\
(-1)^{k/2}\mathrm{sign}(ab) &amp; \mbox{if $k$ is even}.
\end{array}
\]</formula></para>
<para>For <formula id="18">$ f\in\mathbb{R}[x]$</formula> with <formula id="19">$ \deg f=n$</formula>, we have: <formula id="20">\[ C(\mathrm{stha}_n(f),\ldots,\mathrm{stha}_0(f)) = \#\{\alpha\in\R\mid f(\alpha)=0\} \]</formula> In other words, the signs of the principal Sturm-Habicht coefficients determine the number of distinct real roots of <formula id="7">$ f$</formula>. <htmlonly block="yes"> &lt;/div&gt; </htmlonly></para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSturmHabichtSequence" kindref="compound">PolynomialTraits_d::PrincipalSturmHabichtSequence</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="521" column="5" declfile="CGAL/polynomial_utils.h" declline="521" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gae838e680fe5c167b28d39d76684e7abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CGAL::number_of_real_roots</definition>
        <argsstring>(InputIterator start, InputIterator end)</argsstring>
        <name>number_of_real_roots</name>
        <qualifiedname>CGAL::number_of_real_roots</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>start</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>computes the number of distinct real roots of <formula id="7">$ f$</formula> whose principal Sturm-Habicht coefficients are passed by the iterator range. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a polynomial <formula id="7">$ f$</formula>, or a range of values that is interpreted as the principal Sturm-Habicht coefficients of <formula id="7">$ f$</formula>, the function computes <formula id="8">\[ m:=\# \{\alpha\in\mathbb{R}\mid f(\alpha)=0\} \]</formula> that is, the number of distinct real roots of <formula id="7">$ f$</formula>.</para>
<para>The coefficient type of the polynomial, or the value type of the iterator range, respectively must be a model of <computeroutput>RealEmbeddable</computeroutput>. In the second version, it is not required to pass the exact princiapl Sturm-Habicht coefficients to the functions; it is only required that the sign of each element corresponds to the sign of the actual principal Sturm-Habicht coefficient.</para>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>We explain the internals of this function. For a sequence <formula id="9">$ I:=(a_0,\ldots,a_n)$</formula> of real numbers with <formula id="10">$ a_0\neq 0$</formula>, define <formula id="11">\[ C(I)=\ccSum{i=1}{s}\epsilon_i \]</formula> where <formula id="12">$ s$</formula> is the number of subsequences of <formula id="13">$ I$</formula> of the form</para>
<para><formula id="14">\[ (a,\underbrace{0, \dots,0}_{k},b) \]</formula></para>
<para>with <formula id="15">$ a\neq 0,b\neq 0, k\geq 0$</formula>.</para>
<para>For the <formula id="16">$ i$</formula>-th subsequence of <formula id="13">$ I$</formula>, define</para>
<para><formula id="17">\[
\epsilon_i:=\begin{array}{cc}
0 &amp; \mbox{if $k$ is odd},\\
(-1)^{k/2}\mathrm{sign}(ab) &amp; \mbox{if $k$ is even}.
\end{array}
\]</formula></para>
<para>For <formula id="18">$ f\in\mathbb{R}[x]$</formula> with <formula id="19">$ \deg f=n$</formula>, we have: <formula id="20">\[ C(\mathrm{stha}_n(f),\ldots,\mathrm{stha}_0(f)) = \#\{\alpha\in\R\mid f(\alpha)=0\} \]</formula> In other words, the signs of the principal Sturm-Habicht coefficients determine the number of distinct real roots of <formula id="7">$ f$</formula>. <htmlonly block="yes"> &lt;/div&gt; </htmlonly></para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSturmHabichtSequence" kindref="compound">PolynomialTraits_d::PrincipalSturmHabichtSequence</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="572" column="5" declfile="CGAL/polynomial_utils.h" declline="572" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf50ef88b24f772d61eefbab49015aeb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Permute::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Permute::result_type CGAL::permute</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>permute</name>
        <qualifiedname>CGAL::permute</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Permute</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Permute" kindref="compound">PolynomialTraits_d::Permute</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Permute" kindref="compound">PolynomialTraits_d::Permute</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="592" column="1" declfile="CGAL/polynomial_utils.h" declline="592" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga53bc65cafc49799ed8896fe2a8a4861f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::polynomial_subresultants</definition>
        <argsstring>(Polynomial_d p, Polynomial_d q, OutputIterator out)</argsstring>
        <name>polynomial_subresultants</name>
        <qualifiedname>CGAL::polynomial_subresultants</qualifiedname>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>q</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>computes the polynomial subresultants of <formula id="21">$ p$</formula> and <formula id="22">$ q$</formula>, with respect to the outermost variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Each element is of type <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>.</para>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PolynomialSubresultants" kindref="compound">PolynomialTraits_d::PolynomialSubresultants</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PolynomialSubresultants" kindref="compound">PolynomialTraits_d::PolynomialSubresultants</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="614" column="16" declfile="CGAL/polynomial_utils.h" declline="614" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf4322cdb76c362dc6a76522a169f0402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename OutputIterator1</type>
          </param>
          <param>
            <type>typename OutputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator3</type>
          </param>
        </templateparamlist>
        <type>OutputIterator1</type>
        <definition>OutputIterator1 CGAL::polynomial_subresultants_with_cofactors</definition>
        <argsstring>(Polynomial_d p, Polynomial_d q, OutputIterator1 sres_out, OutputIterator2 coP_out, OutputIterator3 coQ_out)</argsstring>
        <name>polynomial_subresultants_with_cofactors</name>
        <qualifiedname>CGAL::polynomial_subresultants_with_cofactors</qualifiedname>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>q</declname>
        </param>
        <param>
          <type>OutputIterator1</type>
          <declname>sres_out</declname>
        </param>
        <param>
          <type>OutputIterator2</type>
          <declname>coP_out</declname>
        </param>
        <param>
          <type>OutputIterator3</type>
          <declname>coQ_out</declname>
        </param>
        <briefdescription>
<para>computes the polynomial subresultants of <formula id="21">$ p$</formula> and <formula id="22">$ q$</formula>, <computeroutput>sres_out</computeroutput>, with respect to the outermost variable, and the cofactors for <formula id="23">$ P$</formula>, <computeroutput>coP_out</computeroutput> and <formula id="24">$ Q$</formula>, <computeroutput>coQ_out</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The elements of each output range are of type <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>.</para>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PolynomialSubresultantsWithCofactors" kindref="compound">PolynomialTraits_d::PolynomialSubresultantsWithCofactors</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PolynomialSubresultantsWithCofactors" kindref="compound">PolynomialTraits_d::PolynomialSubresultantsWithCofactors</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="644" column="17" declfile="CGAL/polynomial_utils.h" declline="644" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga070e1d5407391e7105bb031ec556bff5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::principal_sturm_habicht_sequence</definition>
        <argsstring>(typename Polynomial_d f, OutputIterator out)</argsstring>
        <name>principal_sturm_habicht_sequence</name>
        <qualifiedname>CGAL::principal_sturm_habicht_sequence</qualifiedname>
        <param>
          <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>computes the principal Sturm-Habicht coefficients of <formula id="7">$ f$</formula> with respect to the outermost variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Each element is of type <computeroutput>Polynomial_traits_d::Coefficient_type</computeroutput>b.</para>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSturmHabichtSequence" kindref="compound">PolynomialTraits_d::PrincipalSturmHabichtSequence</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSturmHabichtSequence" kindref="compound">PolynomialTraits_d::PrincipalSturmHabichtSequence</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="672" column="1" declfile="CGAL/polynomial_utils.h" declline="672" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga5152759065025a30768f213f9a715e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::principal_subresultants</definition>
        <argsstring>(Polynomial_d p, Polynomial_d q, OutputIterator out)</argsstring>
        <name>principal_subresultants</name>
        <qualifiedname>CGAL::principal_subresultants</qualifiedname>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>q</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>computes the principal subresultants of <formula id="21">$ p$</formula> and <formula id="22">$ q$</formula>, with respect to the outermost variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Each element is of type <computeroutput>Polynomial_traits_d::Coefficient_type</computeroutput>.</para>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSubresultants" kindref="compound">PolynomialTraits_d::PrincipalSubresultants</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PrincipalSubresultants" kindref="compound">PolynomialTraits_d::PrincipalSubresultants</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="696" column="16" declfile="CGAL/polynomial_utils.h" declline="696" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf4ca3b27f40196a63298a6b9f158e979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::pseudo_division</definition>
        <argsstring>(const Polynomial_d &amp;f, const Polynomial_d &amp;g, Polynomial_d &amp;q, Polynomial_d &amp;r, Polynomial_traits_d&lt; Polynomial_d &gt;::Coefficient_type &amp;D)</argsstring>
        <name>pseudo_division</name>
        <qualifiedname>CGAL::pseudo_division</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Coefficient_type &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Pseudo_division</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivision" kindref="compound">PolynomialTraits_d::PseudoDivision</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivision" kindref="compound">PolynomialTraits_d::PseudoDivision</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="719" column="1" declfile="CGAL/polynomial_utils.h" declline="719" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga69f27ec7b01498ad09f9922d8065ff40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Pseudo_division_quotient::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Pseudo_division_quotient::result_type CGAL::pseudo_division_quotient</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>pseudo_division_quotient</name>
        <qualifiedname>CGAL::pseudo_division_quotient</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Pseudo_division_quotient</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivisionQuotient" kindref="compound">PolynomialTraits_d::PseudoDivisionQuotient</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivisionQuotient" kindref="compound">PolynomialTraits_d::PseudoDivisionQuotient</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="744" column="1" declfile="CGAL/polynomial_utils.h" declline="744" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gacb157c5bb592905a67c75cd63be3f039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Pseudo_division_remainder::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Pseudo_division_remainder::result_type CGAL::pseudo_division_remainder</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>pseudo_division_remainder</name>
        <qualifiedname>CGAL::pseudo_division_remainder</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Pseudo_division_remainder</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivisionRemainder" kindref="compound">PolynomialTraits_d::PseudoDivisionRemainder</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1PseudoDivisionRemainder" kindref="compound">PolynomialTraits_d::PseudoDivisionRemainder</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="765" column="1" declfile="CGAL/polynomial_utils.h" declline="765" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga85e20cee59433ba452ab0a97e3b83e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Resultant::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Resultant::result_type CGAL::resultant</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_d &amp;q)</argsstring>
        <name>resultant</name>
        <qualifiedname>CGAL::resultant</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Resultant</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Resultant" kindref="compound">PolynomialTraits_d::Resultant</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Resultant" kindref="compound">PolynomialTraits_d::Resultant</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="786" column="1" declfile="CGAL/polynomial_utils.h" declline="786" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gafabc1727904144ea47b3309110740f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Scale_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Scale_homogeneous::result_type CGAL::scale_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;u, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;v, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>scale_homogeneous</name>
        <qualifiedname>CGAL::scale_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Scale_homogeneous</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1ScaleHomogeneous" kindref="compound">PolynomialTraits_d::ScaleHomogeneous</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1ScaleHomogeneous" kindref="compound">PolynomialTraits_d::ScaleHomogeneous</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="807" column="1" declfile="CGAL/polynomial_utils.h" declline="807" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gada825dfb72b5fbb8e2daad4d00b766cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Scale::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Scale::result_type CGAL::scale</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;a, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>scale</name>
        <qualifiedname>CGAL::scale</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Scale</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Scale" kindref="compound">PolynomialTraits_d::Scale</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Scale" kindref="compound">PolynomialTraits_d::Scale</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="832" column="1" declfile="CGAL/polynomial_utils.h" declline="832" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaea3cc897abde3d46a502aeff8aae4c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Shift::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Shift::result_type CGAL::shift</definition>
        <argsstring>(const Polynomial_d &amp;p, int i, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>shift</name>
        <qualifiedname>CGAL::shift</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Shift</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Shift" kindref="compound">PolynomialTraits_d::Shift</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Shift" kindref="compound">PolynomialTraits_d::Shift</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="855" column="1" declfile="CGAL/polynomial_utils.h" declline="855" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga3ae5c55e0bdb253576bbc4ea947946b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Sign_at_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Sign_at_homogeneous::result_type CGAL::sign_at_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>sign_at_homogeneous</name>
        <qualifiedname>CGAL::sign_at_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Sign_at_homogeneous</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SignAtHomogeneous" kindref="compound">PolynomialTraits_d::SignAtHomogeneous</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SignAtHomogeneous" kindref="compound">PolynomialTraits_d::SignAtHomogeneous</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="877" column="1" declfile="CGAL/polynomial_utils.h" declline="877" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gae94e8cabe4f274ded8ddf71708b0c358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Sign_at::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Sign_at::result_type CGAL::sign_at</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>sign_at</name>
        <qualifiedname>CGAL::sign_at</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Sign_at</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SignAt" kindref="compound">PolynomialTraits_d::SignAt</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SignAt" kindref="compound">PolynomialTraits_d::SignAt</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="900" column="1" declfile="CGAL/polynomial_utils.h" declline="900" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga58d5d7c20cbbe6bddf320483f44fb53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::square_free_factorize</definition>
        <argsstring>(const Polynomial_d &amp;p, OutputIterator it, Polynomial_traits_d&lt; Polynomial &gt;::Innermost_coefficient &amp;a)</argsstring>
        <name>square_free_factorize</name>
        <qualifiedname>CGAL::square_free_factorize</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classCGAL_1_1Polynomial" kindref="compound">Polynomial</ref> &gt;::Innermost_coefficient &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Square_free_factorize</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorize" kindref="compound">PolynomialTraits_d::SquareFreeFactorize</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorize" kindref="compound">PolynomialTraits_d::SquareFreeFactorize</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="923" column="1" declfile="CGAL/polynomial_utils.h" declline="923" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga102be1c2899b1ae965b165d7a1c5a481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::square_free_factorize</definition>
        <argsstring>(const Polynomial_d &amp;p, OutputIterator it)</argsstring>
        <name>square_free_factorize</name>
        <qualifiedname>CGAL::square_free_factorize</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Square_free_factorize</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorize" kindref="compound">PolynomialTraits_d::SquareFreeFactorize</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorize" kindref="compound">PolynomialTraits_d::SquareFreeFactorize</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="947" column="1" declfile="CGAL/polynomial_utils.h" declline="947" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga12371bd1188ab9853a10715738d57e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::square_free_factorize_up_to_constant_factor</definition>
        <argsstring>(const Polynomial_d &amp;p, OutputIterator it)</argsstring>
        <name>square_free_factorize_up_to_constant_factor</name>
        <qualifiedname>CGAL::square_free_factorize_up_to_constant_factor</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Square_free_factorize_up_to_constant_factor</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorizeUpToConstantFactor" kindref="compound">PolynomialTraits_d::SquareFreeFactorizeUpToConstantFactor</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SquareFreeFactorizeUpToConstantFactor" kindref="compound">PolynomialTraits_d::SquareFreeFactorizeUpToConstantFactor</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="969" column="1" declfile="CGAL/polynomial_utils.h" declline="969" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gadbcadbf6f98613eac77b422cdfcbce64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::sturm_habicht_sequence</definition>
        <argsstring>(Polynomial_d f, OutputIterator out)</argsstring>
        <name>sturm_habicht_sequence</name>
        <qualifiedname>CGAL::sturm_habicht_sequence</qualifiedname>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>computes the Sturm-Habicht-sequence of <formula id="7">$ f$</formula> with respect to the outermost variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Each element is of type <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>.</para>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SturmHabichtSequence" kindref="compound">PolynomialTraits_d::SturmHabichtSequence</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SturmHabichtSequence" kindref="compound">PolynomialTraits_d::SturmHabichtSequence</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="991" column="1" declfile="CGAL/polynomial_utils.h" declline="991" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga5e5bd2891071ccd2d103e45d22fee496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>typename OutputIterator1</type>
          </param>
          <param>
            <type>typename OutputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator3</type>
          </param>
        </templateparamlist>
        <type>OutputIterator1</type>
        <definition>OutputIterator1 CGAL::sturm_habicht_sequence_with_cofactors</definition>
        <argsstring>(Polynomial_d f, OutputIterator1 stha_out, OutputIterator2 cof_out, OutputIterator3 cofx_out)</argsstring>
        <name>sturm_habicht_sequence_with_cofactors</name>
        <qualifiedname>CGAL::sturm_habicht_sequence_with_cofactors</qualifiedname>
        <param>
          <type><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>OutputIterator1</type>
          <declname>stha_out</declname>
        </param>
        <param>
          <type>OutputIterator2</type>
          <declname>cof_out</declname>
        </param>
        <param>
          <type>OutputIterator3</type>
          <declname>cofx_out</declname>
        </param>
        <briefdescription>
<para>computes the Sturm-Habicht sequence of <formula id="7">$ f$</formula> <computeroutput>stha_out</computeroutput>, with respect to the outermost variable, and the cofactors for <formula id="7">$ f$</formula>, <computeroutput>cof_out</computeroutput> and <formula id="25">$ f&apos;$</formula>, <computeroutput>cofx_out</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The elements of each output range are of type <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>.</para>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SturmHabichtSequenceWithCofactors" kindref="compound">PolynomialTraits_d::SturmHabichtSequenceWithCofactors</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SturmHabichtSequenceWithCofactors" kindref="compound">PolynomialTraits_d::SturmHabichtSequenceWithCofactors</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1019" column="1" declfile="CGAL/polynomial_utils.h" declline="1019" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf583f7261eb41a9770bc19f8301b6489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>CGAL::Coercion_traits&lt; <ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient, std::iterator_traits&lt; Input_iterator &gt;::value_type &gt;::Type</type>
        <definition>CGAL::Coercion_traits&lt; Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient, std::iterator_traits&lt; Input_iterator &gt;::value_type &gt;::Type CGAL::substitute_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>substitute_homogeneous</name>
        <qualifiedname>CGAL::substitute_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Substitute_homogeneous</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1SubstituteHomogeneous" kindref="compound">PolynomialTraits_d::SubstituteHomogeneous</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1SubstituteHomogeneous" kindref="compound">PolynomialTraits_d::SubstituteHomogeneous</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1047" column="1" declfile="CGAL/polynomial_utils.h" declline="1047" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga044098c95c086454aae0a3285ad88318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>CGAL::Coercion_traits&lt; <ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient, std::iterator_traits&lt; Input_iterator &gt;::value_type &gt;::Type</type>
        <definition>CGAL::Coercion_traits&lt; Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient, std::iterator_traits&lt; Input_iterator &gt;::value_type &gt;::Type CGAL::substitute</definition>
        <argsstring>(const Polynomial_d &amp;p, InputIterator begin, InputIterator end)</argsstring>
        <name>substitute</name>
        <qualifiedname>CGAL::substitute</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Substitute</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Substitute" kindref="compound">PolynomialTraits_d::Substitute</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Substitute" kindref="compound">PolynomialTraits_d::Substitute</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1073" column="1" declfile="CGAL/polynomial_utils.h" declline="1073" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf14eb69ab0be30e7ecec826374296279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Swap::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Swap::result_type CGAL::swap</definition>
        <argsstring>(const Polynomial_d &amp;p, int i, int j)</argsstring>
        <name>swap</name>
        <qualifiedname>CGAL::swap</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Swap</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Swap" kindref="compound">PolynomialTraits_d::Swap</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Swap" kindref="compound">PolynomialTraits_d::Swap</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1096" column="1" declfile="CGAL/polynomial_utils.h" declline="1096" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gac20ebd2ea6b68c5e19225ddc6e9a0e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Total_degree::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Total_degree::result_type CGAL::total_degree</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>total_degree</name>
        <qualifiedname>CGAL::total_degree</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Total_degree</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1TotalDegree" kindref="compound">PolynomialTraits_d::TotalDegree</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1TotalDegree" kindref="compound">PolynomialTraits_d::TotalDegree</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1118" column="1" declfile="CGAL/polynomial_utils.h" declline="1118" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gac028af7e08296697be74efc78448a499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Translate_homogeneous::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Translate_homogeneous::result_type CGAL::translate_homogeneous</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;u, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;v, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>translate_homogeneous</name>
        <qualifiedname>CGAL::translate_homogeneous</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Translate_homogeneous</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1TranslateHomogeneous" kindref="compound">PolynomialTraits_d::TranslateHomogeneous</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1TranslateHomogeneous" kindref="compound">PolynomialTraits_d::TranslateHomogeneous</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1140" column="1" declfile="CGAL/polynomial_utils.h" declline="1140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga4f4b3f7795009d2cc79784ff1393dfdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Translate::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Translate::result_type CGAL::translate</definition>
        <argsstring>(const Polynomial_d &amp;p, const Polynomial_traits_d&lt; Polynomial_d &gt;::Innermost_coefficient_type &amp;a, int index=Polynomial_traits_d&lt; Polynomial_d &gt;::d-1)</argsstring>
        <name>translate</name>
        <qualifiedname>CGAL::translate</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Innermost_coefficient_type &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::d-1</defval>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Translate</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1Translate" kindref="compound">PolynomialTraits_d::Translate</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1Translate" kindref="compound">PolynomialTraits_d::Translate</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1166" column="1" declfile="CGAL/polynomial_utils.h" declline="1166" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1ga286bafda2a228368104e065bde3da7ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Univariate_content::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Univariate_content::result_type CGAL::univariate_content</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>univariate_content</name>
        <qualifiedname>CGAL::univariate_content</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::UnivariateContent</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1UnivariateContent" kindref="compound">PolynomialTraits_d::UnivariateContent</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>PolynomialTraits_d::Univariate_Content</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1191" column="1" declfile="CGAL/polynomial_utils.h" declline="1191" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgPolynomialFunctions_1gaf93f55d1ddfb2b04a5d3c05e5014cebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt; <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &gt;::Univariate_content_up_to_constant_factor::result_type</type>
        <definition>Polynomial_traits_d&lt; Polynomial_d &gt;::Univariate_content_up_to_constant_factor::result_type CGAL::univariate_content_up_to_constant_factor</definition>
        <argsstring>(const Polynomial_d &amp;p)</argsstring>
        <name>univariate_content_up_to_constant_factor</name>
        <qualifiedname>CGAL::univariate_content_up_to_constant_factor</qualifiedname>
        <param>
          <type>const <ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>For a given <computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput>, adapts the according functor in <computeroutput><ref refid="classCGAL_1_1Polynomial__traits__d" kindref="compound">Polynomial_traits_d</ref>&lt;<ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref>&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapts <computeroutput>Polynomial_traits_d::Univariate_content_up_to_constant_factor</computeroutput>.</para>
<para>For more details see the concept <computeroutput><ref refid="classPolynomialTraits__d_1_1UnivariateContentUpToConstantFactor" kindref="compound">PolynomialTraits_d::UnivariateContentUpToConstantFactor</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classPolynomial__d" kindref="compound">Polynomial_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d" kindref="compound">PolynomialTraits_d</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classPolynomialTraits__d_1_1UnivariateContentUpToConstantFactor" kindref="compound">PolynomialTraits_d::UnivariateContentUpToConstantFactor</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/polynomial_utils.h" line="1211" column="1" declfile="CGAL/polynomial_utils.h" declline="1211" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Exponent_vector.h" line="2" column="1"/>
  </compounddef>
</doxygen>
