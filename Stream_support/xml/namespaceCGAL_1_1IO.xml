<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL_1_1IO" kind="namespace" language="C++">
    <compoundname>CGAL::IO</compoundname>
    <innerclass refid="classCGAL_1_1IO_1_1Color" prot="public">CGAL::IO::Color</innerclass>
    <innerclass refid="classCGAL_1_1IO_1_1Static" prot="public">CGAL::IO::Static</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__PkgStreamSupportEnumRef_1gac0c882c273b950eb9efca32420e2bef0" prot="public" static="no" strong="no">
        <type></type>
        <name>Mode</name>
        <qualifiedname>CGAL::IO::Mode</qualifiedname>
        <enumvalue id="group__PkgStreamSupportEnumRef_1ggac0c882c273b950eb9efca32420e2bef0a13a67787bf1f5275048052d9001e1bee" prot="public">
          <name>ASCII</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgStreamSupportEnumRef_1ggac0c882c273b950eb9efca32420e2bef0a5d045c18474dfd381b1c2b1dd1e612c5" prot="public">
          <name>PRETTY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PkgStreamSupportEnumRef_1ggac0c882c273b950eb9efca32420e2bef0aa83308e9472ea595943a6b76af054e98" prot="public">
          <name>BINARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>All classes in the CGAL <computeroutput>Kernel</computeroutput> provide input and output operators for IOStreams. </para>
        </briefdescription>
        <detaileddescription>
<para>The basic task of such an operator is to produce a representation of an object that can be written as a sequence of characters on devices as a console, a file, or a pipe. The enum <computeroutput>Mode</computeroutput> distinguish between three different printing formats.</para>
<para>In <computeroutput>ASCII</computeroutput> mode, numbers e.g. the coordinates of a point or the coefficients of a line, are written in a machine independent format. In <computeroutput>BINARY</computeroutput> mode, data are written in a binary format, e.g. a double is represented as a sequence of four byte. The format depends on the machine. The mode <computeroutput>PRETTY</computeroutput> serves mainly for debugging as the type of the geometric object is written, as well as the data defining the object. For example for a point at the origin with Cartesian double coordinates, the output would be <computeroutput>PointC2(0.0, 0.0)</computeroutput>. At the moment CGAL does not provide input operations for pretty printed data. By default a stream is in <computeroutput>ASCII</computeroutput> mode.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" kindref="member">CGAL::IO::set_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" kindref="member">CGAL::IO::set_ascii_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" kindref="member">CGAL::IO::set_binary_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member">CGAL::IO::set_pretty_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member">CGAL::IO::get_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" kindref="member">CGAL::IO::is_ascii()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" kindref="member">CGAL::IO::is_binary()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" kindref="member">CGAL::IO::is_pretty()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="83" column="1" bodyfile="CGAL/IO/io.h" bodystart="83" bodyend="83"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncs3MF_1ga552559a5dd2a463d4d8c3a3fa71e9969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRanges</type>
          </param>
          <param>
            <type>typename TriangleRanges</type>
          </param>
          <param>
            <type>typename ColorRanges</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_3MF</definition>
        <argsstring>(const std::string &amp;fname, PointRanges &amp;all_points, TriangleRanges &amp;all_triangles, ColorRanges &amp;all_colors, std::vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>read_3MF</name>
        <qualifiedname>CGAL::IO::read_3MF</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRanges &amp;</type>
          <declname>all_points</declname>
        </param>
        <param>
          <type>TriangleRanges &amp;</type>
          <declname>all_triangles</declname>
        </param>
        <param>
          <type>ColorRanges &amp;</type>
          <declname>all_colors</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>reads ranges of points and triangles from an input file, using the <ref refid="IOStreamSupportedFileFormats_1IOStream3MF" kindref="member">3D Manufacturing Format (3MF)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The ranges not cleared, and the data from the file are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRanges</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRanges</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ColorRanges</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput><ref refid="classCGAL_1_1IO_1_1Color" kindref="compound">CGAL::IO::Color</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the 3mf file to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all_points</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>PointRanges</computeroutput> that will contain the points of the meshes in <computeroutput>fname</computeroutput>. Each of these meshes will add a range of its points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all_triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>TriangleRanges</computeroutput> that will contain the triangles of the meshes in <computeroutput>fname</computeroutput>. Each of these meshes will add a range of its triangles. A <computeroutput>triangle</computeroutput> of <computeroutput>all_triangles[i]</computeroutput> contains the indices of its points in <computeroutput>all_points[i]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all_colors</parametername>
</parameternamelist>
<parameterdescription>
<para>will contain the color of each triangle for each soup. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para>will contain the name of each mesh in <computeroutput>fname</computeroutput> if any. If the i-th mesh has no name, it will be called &quot;Unknown Mesh&quot; in <computeroutput>names</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/3MF.h" line="416" column="6" bodyfile="CGAL/IO/3MF.h" bodystart="416" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncs3MF_1gaef5213df361aca6eb758616164a80667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRanges</type>
          </param>
          <param>
            <type>typename TriangleRanges</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_3MF</definition>
        <argsstring>(const std::string &amp;fname, const PointRanges &amp;all_points, const TriangleRanges &amp;all_triangles, const std::vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>write_3MF</name>
        <qualifiedname>CGAL::IO::write_3MF</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRanges &amp;</type>
          <declname>all_points</declname>
        </param>
        <param>
          <type>const TriangleRanges &amp;</type>
          <declname>all_triangles</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>writes the triangle soups contained in <computeroutput>all_points</computeroutput> and <computeroutput>all_triangles</computeroutput> into the file <computeroutput>fname</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStream3MF" kindref="member">3D Manufacturing Format (3MF)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRanges</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRanges</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the 3mf file to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all_points</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>PointRanges</computeroutput> that contains the points of the soups to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all_triangles</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>TriangleRanges</computeroutput> that contains the triangles of the soups in <computeroutput>fname</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>std::string</computeroutput> associating a name to each soup, which will appear in the output</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing is successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/3MF.h" line="455" column="6" bodyfile="CGAL/IO/3MF.h" bodystart="455" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsGOCAD_1ga60b134738aab815bb75bb6c6d9dafa7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_GOCAD</definition>
        <argsstring>(std::istream &amp;is, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_GOCAD</name>
        <qualifiedname>CGAL::IO::read_GOCAD</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of <computeroutput>is</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamGocad" kindref="member">GOCAD (TS) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the stream are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/GOCAD.h" line="193" column="6" bodyfile="CGAL/IO/GOCAD.h" bodystart="193" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsGOCAD_1ga62baef4bfd1c772fbd63a2dcd2de52bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_GOCAD</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_GOCAD</name>
        <qualifiedname>CGAL::IO::read_GOCAD</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of the file <computeroutput>fname</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamGocad" kindref="member">GOCAD (TS) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the file are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/GOCAD.h" line="238" column="6" bodyfile="CGAL/IO/GOCAD.h" bodystart="238" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsGOCAD_1ga38e242e978c249babb08a311fcdeb21d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_GOCAD</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_GOCAD</name>
        <qualifiedname>CGAL::IO::write_GOCAD</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in <computeroutput>os</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamGocad" kindref="member">GOCAD (TS) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/GOCAD.h" line="346" column="6" bodyfile="CGAL/IO/GOCAD.h" bodystart="346" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsGOCAD_1ga31a93a0820edb34c15449f1fe2e43128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_GOCAD</definition>
        <argsstring>(const std::string &amp;fname, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_GOCAD</name>
        <qualifiedname>CGAL::IO::write_GOCAD</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in <computeroutput>fname</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamGocad" kindref="member">GOCAD (TS) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/GOCAD.h" line="388" column="6" bodyfile="CGAL/IO/GOCAD.h" bodystart="388" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1gaef04729ed020e200594efd0f0f26004f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref>&lt; T &gt;</type>
        <definition>Output_rep&lt; T &gt; CGAL::IO::oformat</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>oformat</name>
        <qualifiedname>CGAL::IO::oformat</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Convenience function to construct an output representation (<computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput>) for type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Generic IO for type <computeroutput>T</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="241" column="12" bodyfile="CGAL/IO/io.h" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga6b9c3742007c1eadb4767d1704938eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref>&lt; T, F &gt;</type>
        <definition>Output_rep&lt; T, F &gt; CGAL::IO::oformat</definition>
        <argsstring>(const T &amp;t, F format)</argsstring>
        <name>oformat</name>
        <qualifiedname>CGAL::IO::oformat</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>F</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Convenience function to construct an output representation (<computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput>) for type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Generic IO for type <computeroutput>T</computeroutput> with formatting tag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="251" column="12" bodyfile="CGAL/IO/io.h" bodystart="251" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga8c599d03756553b8a17389aee4c433c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Input__rep" kindref="compound">Input_rep</ref>&lt; T &gt;</type>
        <definition>Input_rep&lt; T &gt; CGAL::IO::iformat</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>iformat</name>
        <qualifiedname>CGAL::IO::iformat</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>The definition of this function is completely symmetric to <computeroutput>oformat()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="460" column="11" bodyfile="CGAL/IO/io.h" bodystart="460" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a68f292fc4606daa85e42847e92ea424b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>Benchmark_rep&lt; T &gt;</type>
        <definition>Benchmark_rep&lt; T &gt; CGAL::IO::bmformat</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>bmformat</name>
        <qualifiedname>CGAL::IO::bmformat</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="485" column="15" bodyfile="CGAL/IO/io.h" bodystart="485" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a64aa64f9a3da92b8179f92de8e47dffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>Benchmark_rep&lt; T, F &gt;</type>
        <definition>Benchmark_rep&lt; T, F &gt; CGAL::IO::bmformat</definition>
        <argsstring>(const T &amp;t, F)</argsstring>
        <name>bmformat</name>
        <qualifiedname>CGAL::IO::bmformat</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>F</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="488" column="15" bodyfile="CGAL/IO/io.h" bodystart="488" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__PkgStreamSupportEnumRef_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">Mode</ref></type>
        <definition>Mode CGAL::IO::get_mode</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>get_mode</name>
        <qualifiedname>CGAL::IO::get_mode</qualifiedname>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>returns the printing mode of the IO stream <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>CGAL::IO::Mode</computeroutput></ref> <simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" kindref="member">CGAL::IO::set_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" kindref="member">CGAL::IO::set_ascii_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" kindref="member">CGAL::IO::set_binary_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member">CGAL::IO::set_pretty_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" kindref="member">CGAL::IO::is_ascii()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" kindref="member">CGAL::IO::is_binary()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" kindref="member">CGAL::IO::is_pretty()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="504" column="13" bodyfile="CGAL/IO/io.h" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__PkgStreamSupportEnumRef_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">Mode</ref></type>
        <definition>Mode CGAL::IO::set_ascii_mode</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>set_ascii_mode</name>
        <qualifiedname>CGAL::IO::set_ascii_mode</qualifiedname>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sets the mode of the IO stream <computeroutput>s</computeroutput> to be the <computeroutput>ASCII</computeroutput> mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the previous mode of <computeroutput>s</computeroutput>.</para>
<para><ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>CGAL::IO::Mode</computeroutput></ref> <simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" kindref="member">CGAL::IO::set_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" kindref="member">CGAL::IO::set_binary_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member">CGAL::IO::set_pretty_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member">CGAL::IO::get_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" kindref="member">CGAL::IO::is_ascii()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" kindref="member">CGAL::IO::is_binary()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" kindref="member">CGAL::IO::is_pretty()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="524" column="13" bodyfile="CGAL/IO/io.h" bodystart="524" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__PkgStreamSupportEnumRef_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">Mode</ref></type>
        <definition>Mode CGAL::IO::set_binary_mode</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>set_binary_mode</name>
        <qualifiedname>CGAL::IO::set_binary_mode</qualifiedname>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sets the mode of the IO stream <computeroutput>s</computeroutput> to be the <computeroutput>BINARY</computeroutput> mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the previous mode of <computeroutput>s</computeroutput>.</para>
<para><ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>CGAL::IO::Mode</computeroutput></ref> <simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" kindref="member">CGAL::IO::set_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" kindref="member">CGAL::IO::set_ascii_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member">CGAL::IO::set_pretty_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member">CGAL::IO::get_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" kindref="member">CGAL::IO::is_ascii()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" kindref="member">CGAL::IO::is_binary()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" kindref="member">CGAL::IO::is_pretty()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="546" column="13" bodyfile="CGAL/IO/io.h" bodystart="546" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__PkgStreamSupportEnumRef_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">Mode</ref></type>
        <definition>Mode CGAL::IO::set_pretty_mode</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>set_pretty_mode</name>
        <qualifiedname>CGAL::IO::set_pretty_mode</qualifiedname>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>sets the mode of the IO stream <computeroutput>s</computeroutput> to be the <computeroutput>PRETTY</computeroutput> mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the previous mode of <computeroutput>s</computeroutput>.</para>
<para><ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>CGAL::IO::Mode</computeroutput></ref> <simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" kindref="member">CGAL::IO::set_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" kindref="member">CGAL::IO::set_ascii_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" kindref="member">CGAL::IO::set_binary_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member">CGAL::IO::get_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" kindref="member">CGAL::IO::is_ascii()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" kindref="member">CGAL::IO::is_binary()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" kindref="member">CGAL::IO::is_pretty()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="568" column="13" bodyfile="CGAL/IO/io.h" bodystart="568" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__PkgStreamSupportEnumRef_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">Mode</ref></type>
        <definition>Mode CGAL::IO::set_mode</definition>
        <argsstring>(std::ios &amp;s, Mode m)</argsstring>
        <name>set_mode</name>
        <qualifiedname>CGAL::IO::set_mode</qualifiedname>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="group__PkgStreamSupportEnumRef_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">Mode</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>sets the printing mode of the IO stream <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>CGAL::IO::Mode</computeroutput></ref> <simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" kindref="member">CGAL::IO::set_ascii_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" kindref="member">CGAL::IO::set_binary_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member">CGAL::IO::set_pretty_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member">CGAL::IO::get_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" kindref="member">CGAL::IO::is_ascii()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" kindref="member">CGAL::IO::is_binary()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" kindref="member">CGAL::IO::is_pretty()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="589" column="13" bodyfile="CGAL/IO/io.h" bodystart="589" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::IO::is_pretty</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>is_pretty</name>
        <qualifiedname>CGAL::IO::is_pretty</qualifiedname>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>checks if the IO stream <computeroutput>s</computeroutput> is in <computeroutput>PRETTY</computeroutput> mode. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>CGAL::IO::Mode</computeroutput></ref> <simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" kindref="member">CGAL::IO::set_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" kindref="member">CGAL::IO::set_ascii_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" kindref="member">CGAL::IO::set_binary_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member">CGAL::IO::set_pretty_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member">CGAL::IO::get_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" kindref="member">CGAL::IO::is_ascii()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" kindref="member">CGAL::IO::is_binary()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="610" column="13" bodyfile="CGAL/IO/io.h" bodystart="610" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::IO::is_ascii</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>is_ascii</name>
        <qualifiedname>CGAL::IO::is_ascii</qualifiedname>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>checks if the IO stream <computeroutput>s</computeroutput> is in <computeroutput>ASCII</computeroutput> mode. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>CGAL::IO::Mode</computeroutput></ref> <simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" kindref="member">CGAL::IO::set_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" kindref="member">CGAL::IO::set_ascii_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" kindref="member">CGAL::IO::set_binary_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member">CGAL::IO::set_pretty_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member">CGAL::IO::get_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" kindref="member">CGAL::IO::is_binary()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" kindref="member">CGAL::IO::is_pretty()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="626" column="13" bodyfile="CGAL/IO/io.h" bodystart="626" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportRef_1ga423ff820f482065303852111a2e9f14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::IO::is_binary</definition>
        <argsstring>(std::ios &amp;s)</argsstring>
        <name>is_binary</name>
        <qualifiedname>CGAL::IO::is_binary</qualifiedname>
        <param>
          <type>std::ios &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>checks if the IO stream <computeroutput>s</computeroutput> is in <computeroutput>BINARY</computeroutput> mode. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>CGAL::IO::Mode</computeroutput></ref> <simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga137e30a6116e8be505077d3a22b373d9" kindref="member">CGAL::IO::set_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7d51c854b865a7eb367e21fc43bd37b8" kindref="member">CGAL::IO::set_ascii_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga7eb5683e79d8aa69059a453dc44cbaa7" kindref="member">CGAL::IO::set_binary_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga2cbb865dd83eedd780f4a452635b1d28" kindref="member">CGAL::IO::set_pretty_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga3bf176fc0f57ebc0d35e30489967f9dd" kindref="member">CGAL::IO::get_mode()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1gaf145cf5cbf5e27ebb907a8260002a5f3" kindref="member">CGAL::IO::is_ascii()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportRef_1ga6713a01742201ddbddc3410a4e1f3467" kindref="member">CGAL::IO::is_pretty()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="642" column="13" bodyfile="CGAL/IO/io.h" bodystart="642" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a8811636b4be9850365c77f35e06c7d81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::IO::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Color &amp;col)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::IO::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1IO_1_1Color" kindref="compound">Color</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="696" column="8" bodyfile="CGAL/IO/io.h" bodystart="696" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a445d101556658315c3c90cba166c75bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; CGAL::IO::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Color &amp;col)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::IO::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1IO_1_1Color" kindref="compound">Color</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="716" column="21" bodyfile="CGAL/IO/io.h" bodystart="716" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a788c531493b50dd7d10f09a7e15b6fe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * CGAL::IO::mode_name</definition>
        <argsstring>(IO::Mode m)</argsstring>
        <name>mode_name</name>
        <qualifiedname>CGAL::IO::mode_name</qualifiedname>
        <param>
          <type><ref refid="group__PkgStreamSupportEnumRef_1gac0c882c273b950eb9efca32420e2bef0" kindref="member">IO::Mode</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="746" column="19" bodyfile="CGAL/IO/io.h" bodystart="746" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1ad12fb61d5fba1b9f4904b1e20dec803a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto CGAL::IO::serialize</definition>
        <argsstring>(const P &amp;p)</argsstring>
        <name>serialize</name>
        <qualifiedname>CGAL::IO::serialize</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="762" column="1" bodyfile="CGAL/IO/io.h" bodystart="762" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsOBJ_1gaa86dabc1e8eaaeb439a11b8066bdae8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_OBJ</definition>
        <argsstring>(std::istream &amp;is, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_OBJ</name>
        <qualifiedname>CGAL::IO::read_OBJ</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of <computeroutput>is</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamOBJ" kindref="member">Wavefront Advanced Visualizer Object Format (OBJ)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the stream are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/OBJ.h" line="236" column="6" bodyfile="CGAL/IO/OBJ.h" bodystart="236" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsOBJ_1ga08ffa7fa60128d6097a37322405bfc73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_OBJ</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_OBJ</name>
        <qualifiedname>CGAL::IO::read_OBJ</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of the file <computeroutput>fname</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamOBJ" kindref="member">Wavefront Advanced Visualizer Object Format (OBJ)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the file are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/OBJ.h" line="281" column="6" bodyfile="CGAL/IO/OBJ.h" bodystart="281" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsOBJ_1ga346fc0f82c51aeaea1ecda8d1c240d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_OBJ</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_OBJ</name>
        <qualifiedname>CGAL::IO::write_OBJ</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in <computeroutput>os</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamOBJ" kindref="member">Wavefront Advanced Visualizer Object Format (OBJ)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/OBJ.h" line="329" column="6" bodyfile="CGAL/IO/OBJ.h" bodystart="329" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsOBJ_1gaf97380b1905d7a8e3452060099daa830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_OBJ</definition>
        <argsstring>(const std::string &amp;fname, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_OBJ</name>
        <qualifiedname>CGAL::IO::write_OBJ</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in a file named <computeroutput>fname</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamOBJ" kindref="member">Wavefront Advanced Visualizer Object Format (OBJ)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/OBJ.h" line="373" column="6" bodyfile="CGAL/IO/OBJ.h" bodystart="373" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsOFF_1ga7396bef8d41fe287d52d19ddbb83a3e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_OFF</definition>
        <argsstring>(std::istream &amp;is, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_OFF</name>
        <qualifiedname>CGAL::IO::read_OFF</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of <computeroutput>is</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamOFF" kindref="member">Object File Format (OFF)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/OFF.h" line="182" column="6" bodyfile="CGAL/IO/OFF.h" bodystart="182" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsOFF_1ga65c94da97f9e0dcdb07c7fc1d7e41b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_OFF</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_OFF</name>
        <qualifiedname>CGAL::IO::read_OFF</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of the file <computeroutput>fname</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamOFF" kindref="member">Object File Format (OFF)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/OFF.h" line="235" column="6" bodyfile="CGAL/IO/OFF.h" bodystart="235" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsOFF_1ga9682021a1047600910151826eaa75a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_OFF</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_OFF</name>
        <qualifiedname>CGAL::IO::write_OFF</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in <computeroutput>os</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamOFF" kindref="member">Object File Format (OFF)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/OFF.h" line="280" column="6" bodyfile="CGAL/IO/OFF.h" bodystart="280" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsOFF_1ga17264971b88dedb71a40073ff4c3cc0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_OFF</definition>
        <argsstring>(const std::string &amp;fname, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_OFF</name>
        <qualifiedname>CGAL::IO::write_OFF</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in the file <computeroutput>fname</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamOFF" kindref="member">Object File Format (OFF)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/OFF.h" line="321" column="6" bodyfile="CGAL/IO/OFF.h" bodystart="321" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsPLY_1gae46c2df145f4328d11e1d55017d6487b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_PLY</definition>
        <argsstring>(std::istream &amp;is, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_PLY</name>
        <qualifiedname>CGAL::IO::read_PLY</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of <computeroutput>is</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the stream are appended.</para>
</simplesect>
<simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be read in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/PLY.h" line="307" column="6" bodyfile="CGAL/IO/PLY.h" bodystart="307" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsPLY_1ga4b3d3200a4a536b9efe3733af2e1899e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_PLY</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_PLY</name>
        <qualifiedname>CGAL::IO::read_PLY</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of <computeroutput>fname</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the file are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an integer type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be read in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/PLY.h" line="367" column="6" bodyfile="CGAL/IO/PLY.h" bodystart="367" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsPLY_1ga62510f84cfdb4ba91996702fc4b1d3ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_PLY</definition>
        <argsstring>(std::ostream &amp;out, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_PLY</name>
        <qualifiedname>CGAL::IO::write_PLY</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in <computeroutput>out</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>, and the <ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>IO::Mode</computeroutput> </ref> of the stream must be set to <computeroutput>BINARY</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/PLY.h" line="430" column="6" bodyfile="CGAL/IO/PLY.h" bodystart="430" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsPLY_1gae8117cb351a9f8b960ec711fece23117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_PLY</definition>
        <argsstring>(const std::string &amp;fname, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_PLY</name>
        <qualifiedname>CGAL::IO::write_PLY</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in the file <computeroutput>fname</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member">Polygon File Format (PLY)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be written in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/PLY.h" line="509" column="6" bodyfile="CGAL/IO/PLY.h" bodystart="509" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="group__IOstreamFunctions_1gaafb0e02f4669802c727709743065804c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_polygon_soup</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_polygon_soup</name>
        <qualifiedname>CGAL::IO::read_polygon_soup</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads a polygon soup from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported file formats are the following:<itemizedlist>
<listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamOFF" kindref="member">Object File Format (OFF)</ref> (<computeroutput>.off</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamOBJ" kindref="member">Wavefront Advanced Visualizer Object Format (OBJ)</ref> (<computeroutput>.obj</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamSTL" kindref="member">STereoLithography (STL) File Format</ref> (<computeroutput>.stl</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member">Polygon File Format (PLY)</ref> (<computeroutput>.ply</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamGocad" kindref="member">GOCAD (TS) File Format</ref> (<computeroutput>.ts</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamVTK" kindref="member">VTK (VTU / VTP / legacy) File Formats</ref> (<computeroutput>.vtp</computeroutput>)</para>
</listitem></itemizedlist>
</para>
<para>The format is detected from the filename extension (letter case is not important).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a polygon using the indices of the vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/polygon_soup_io.h" line="77" column="6" bodyfile="CGAL/IO/polygon_soup_io.h" bodystart="77" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__IOstreamFunctions_1ga030115449f48c379b0c080328fd730b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_polygon_soup</definition>
        <argsstring>(const std::string &amp;fname, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_polygon_soup</name>
        <qualifiedname>CGAL::IO::write_polygon_soup</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported file formats are the following:<itemizedlist>
<listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamOFF" kindref="member">Object File Format (OFF)</ref> (<computeroutput>.off</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamOBJ" kindref="member">Wavefront Advanced Visualizer Object Format (OBJ)</ref> (<computeroutput>.obj</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamSTL" kindref="member">STereoLithography (STL) File Format</ref> (<computeroutput>.stl</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member">Polygon File Format (PLY)</ref> (<computeroutput>.ply</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamGocad" kindref="member">GOCAD (TS) File Format</ref> (<computeroutput>.ts</computeroutput>)</para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamVTK" kindref="member">VTK (VTU / VTP / legacy) File Formats</ref> (<computeroutput>.vtp</computeroutput>)</para>
</listitem></itemizedlist>
</para>
<para>The format is detected from the filename extension (letter case is not important).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>each element in the range describes a polygon using the indices of the vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/polygon_soup_io.h" line="157" column="6" bodyfile="CGAL/IO/polygon_soup_io.h" bodystart="157" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsSTL_1ga67051094a325cef4fbf56b7009b1b852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename TriangleRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_STL</definition>
        <argsstring>(std::istream &amp;is, PointRange &amp;points, TriangleRange &amp;facets, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_STL</name>
        <qualifiedname>CGAL::IO::read_STL</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>TriangleRange &amp;</type>
          <declname>facets</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of <computeroutput>is</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>facets</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamSTL" kindref="member">STereoLithography (STL) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the stream are appended.</para>
</simplesect>
<simplesect kind="attention"><para>To read a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ifstream</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose value type is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of triangles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>facets</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of triangles; each triangle uses the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/STL.h" line="72" column="6" bodyfile="CGAL/IO/STL.h" bodystart="72" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsSTL_1ga975e77000dc8f3885e81d91f81a0a3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename TriangleRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_STL</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, TriangleRange &amp;facets, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>read_STL</name>
        <qualifiedname>CGAL::IO::read_STL</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>TriangleRange &amp;</type>
          <declname>facets</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>reads the content of a file named <computeroutput>fname</computeroutput> into <computeroutput>points</computeroutput> and <computeroutput>facets</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamSTL" kindref="member">STereoLithography (STL) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>use_binary_mode</computeroutput> is <computeroutput>true</computeroutput>, but the reading fails, ASCII reading will be automatically tested. <simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the file are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of triangles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>facets</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of triangles; each triangle uses the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional Named Parameters described below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be read in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>verbose</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether output warnings and error messages should be printed or not. </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>false</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/STL.h" line="191" column="6" bodyfile="CGAL/IO/STL.h" bodystart="191" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsSTL_1ga9564b55bbf78dff22fb7d41164769bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename TriangleRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_STL</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const TriangleRange &amp;facets, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_STL</name>
        <qualifiedname>CGAL::IO::write_STL</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>facets</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>facets</computeroutput> in <computeroutput>os</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamSTL" kindref="member">STereoLithography (STL) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>To write to a binary file, the flag <computeroutput>std::ios::binary</computeroutput> must be set during the creation of the <computeroutput>ofstream</computeroutput>, and the <ref refid="group__PkgStreamSupportEnumRef" kindref="compound"><computeroutput>IO::Mode</computeroutput> </ref> of the stream must be set to <computeroutput>BINARY</computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of triangles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>facets</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of triangles; each triangle uses the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/STL.h" line="280" column="6" bodyfile="CGAL/IO/STL.h" bodystart="280" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsSTL_1gaf9514d2aa0fb8d71a04c2db20cc09bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename TriangleRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_STL</definition>
        <argsstring>(const std::string &amp;fname, const PointRange &amp;points, const TriangleRange &amp;facets, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_STL</name>
        <qualifiedname>CGAL::IO::write_STL</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const TriangleRange &amp;</type>
          <declname>facets</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>facets</computeroutput> in a file named <computeroutput>fname</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamSTL" kindref="member">STereoLithography (STL) File Format</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the file are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TriangleRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of triangles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>facets</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of triangles; each triangle uses the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be written in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>This parameter is only meaningful while using ASCII encoding. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/STL.h" line="390" column="6" bodyfile="CGAL/IO/STL.h" bodystart="390" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="VTK_8h_1ab775bb6fe601176279396685f791eaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_VTP</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np)</argsstring>
        <name>read_VTP</name>
        <qualifiedname>CGAL::IO::read_VTP</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/VTK.h" line="95" column="6" bodyfile="CGAL/IO/VTK.h" bodystart="95" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsVTK_1ga854dcb9145bcb42b370d7f80fa9cc5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_VTP</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons)</argsstring>
        <name>read_VTP</name>
        <qualifiedname>CGAL::IO::read_VTP</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>reads the content of the input file into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamVTK" kindref="member">VTK (VTU / VTP / legacy) File Formats</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the file are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/VTK.h" line="140" column="6" bodyfile="CGAL/IO/VTK.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="VTK_8h_1a329cb830700cfd23f5debfc69bb6b4f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_VTK</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons, const NamedParameters &amp;np)</argsstring>
        <name>read_VTK</name>
        <qualifiedname>CGAL::IO::read_VTK</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/VTK.h" line="147" column="6" bodyfile="CGAL/IO/VTK.h" bodystart="147" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsVTK_1gaad7f1c5c10e8700a4a6de88294c5a620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_VTK</definition>
        <argsstring>(const std::string &amp;fname, PointRange &amp;points, PolygonRange &amp;polygons)</argsstring>
        <name>read_VTK</name>
        <qualifiedname>CGAL::IO::read_VTK</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>reads the content of the input file into <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput>, using the legacy file format of the <ref refid="IOStreamSupportedFileFormats_1IOStreamVTK" kindref="member">VTK (VTU / VTP / legacy) File Formats</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>The polygon soup is not cleared, and the data from the file are appended.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>RandomAccessContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> and <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the reading was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/VTK.h" line="196" column="6" bodyfile="CGAL/IO/VTK.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsVTK_1ga7915b06d84ee93206fded645d238a722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_VTP</definition>
        <argsstring>(std::ostream &amp;os, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_VTP</name>
        <qualifiedname>CGAL::IO::write_VTP</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in <computeroutput>out</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamVTK" kindref="member">VTK (VTU / VTP / legacy) File Formats</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be written in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold>the precision of the stream <computeroutput>os</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/VTK.h" line="436" column="6" bodyfile="CGAL/IO/VTK.h" bodystart="436" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsVTK_1ga7565a6ed6a7774c3c1aacb76987e1632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointRange</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>CGAL::parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::write_VTP</definition>
        <argsstring>(const std::string &amp;fname, const PointRange &amp;points, const PolygonRange &amp;polygons, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>write_VTP</name>
        <qualifiedname>CGAL::IO::write_VTP</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>points</computeroutput> and <computeroutput>polygons</computeroutput> in a file named <computeroutput>fname</computeroutput>, using the <ref refid="IOStreamSupportedFileFormats_1IOStreamVTK" kindref="member">VTK (VTU / VTP / legacy) File Formats</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>RandomAccessContainer</computeroutput> whose <computeroutput>valuetype</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concept <computeroutput>SequenceContainer</computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of Named Parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points of the soup of polygons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of polygons. Each element in it describes a polygon using the indices of the points in <computeroutput>points</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>optional sequence of Named Parameters among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="2" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>use_binary_mode</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether data should be written in binary (<computeroutput>true</computeroutput>) or in ASCII (<computeroutput>false</computeroutput>) </para>
</listitem>
<listitem>
<para><bold>Type: </bold>Boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>true</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>stream_precision</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a parameter used to set the precision (i.e. how many digits are generated) of the output stream </para>
</listitem>
<listitem>
<para><bold>Type: </bold>int </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>6</computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the writing was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/VTK.h" line="522" column="6" bodyfile="CGAL/IO/VTK.h" bodystart="522" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1ga146a8ad6682cf17ecb008994364284ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_point_WKT</definition>
        <argsstring>(std::istream &amp;in, Point &amp;point)</argsstring>
        <name>read_point_WKT</name>
        <qualifiedname>CGAL::IO::read_point_WKT</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Point &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>fills a <computeroutput>Point</computeroutput> from a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para>The first line starting with POINT in the stream will be used.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>can be a <computeroutput>CGAL::Point_2</computeroutput> or <computeroutput>CGAL::Point_3</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_2</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_3</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="76" column="6" bodyfile="CGAL/IO/WKT.h" bodystart="76" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1gac41ebb86e6ca704a703bc7fa73bc1cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MultiPoint</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_multi_point_WKT</definition>
        <argsstring>(std::istream &amp;in, MultiPoint &amp;mp)</argsstring>
        <name>read_multi_point_WKT</name>
        <qualifiedname>CGAL::IO::read_multi_point_WKT</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>MultiPoint &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
<para>overwrites the content of a <computeroutput>MultiPoint</computeroutput> with the first line starting with MULTIPOINT in the stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MultiPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>CGAL::Point_2</computeroutput> or <computeroutput>CGAL::Point_3</computeroutput>, and have:<itemizedlist>
<listitem><para>a function <computeroutput>push_back()</computeroutput> that takes the same point type,</para>
</listitem><listitem><para>a function <computeroutput>clear()</computeroutput>,</para>
</listitem><listitem><para>a function <computeroutput>resize()</computeroutput> that takes a <computeroutput>size_type</computeroutput></para>
</listitem><listitem><para>an <computeroutput>operator[]()</computeroutput> that takes a <computeroutput>size_type</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_2</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_3</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="124" column="6" bodyfile="CGAL/IO/WKT.h" bodystart="124" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1gaa8555eff6ee952cbbbbad9dc6f2d4649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LineString</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_linestring_WKT</definition>
        <argsstring>(std::istream &amp;in, LineString &amp;polyline)</argsstring>
        <name>read_linestring_WKT</name>
        <qualifiedname>CGAL::IO::read_linestring_WKT</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>LineString &amp;</type>
          <declname>polyline</declname>
        </param>
        <briefdescription>
<para>fills a <computeroutput>Linestring</computeroutput> from a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para>The first line starting with LINESTRING in the stream will be used.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Linestring</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>CGAL::Point_2</computeroutput>, and have:<itemizedlist>
<listitem><para>a function <computeroutput>push_back()</computeroutput> that takes a <computeroutput>CGAL::Point_2</computeroutput>.</para>
</listitem><listitem><para>a function <computeroutput>clear()</computeroutput>,</para>
</listitem><listitem><para>a function <computeroutput>resize()</computeroutput> that takes a <computeroutput>size_type</computeroutput></para>
</listitem><listitem><para>an <computeroutput>operator[]()</computeroutput> that takes a <computeroutput>size_type</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="170" column="6" bodyfile="CGAL/IO/WKT.h" bodystart="170" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1gadfbdad1b3362b91368d112ac7484f009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MultiLineString</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_multi_linestring_WKT</definition>
        <argsstring>(std::istream &amp;in, MultiLineString &amp;mls)</argsstring>
        <name>read_multi_linestring_WKT</name>
        <qualifiedname>CGAL::IO::read_multi_linestring_WKT</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>MultiLineString &amp;</type>
          <declname>mls</declname>
        </param>
        <briefdescription>
<para>overwrites the content of a <computeroutput>MultiLineString</computeroutput> with the first line starting with MULTILINESTRING in the stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MultiLineString</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>Linestring</computeroutput>, and have:<itemizedlist>
<listitem><para>a function <computeroutput>push_back()</computeroutput> that takes a <computeroutput>Linestring</computeroutput>,</para>
</listitem><listitem><para>a function <computeroutput>clear()</computeroutput>,</para>
</listitem><listitem><para>a function <computeroutput>resize()</computeroutput> that takes a <computeroutput>size_type</computeroutput></para>
</listitem><listitem><para>an <computeroutput>operator[]()</computeroutput> that takes a <computeroutput>size_type</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="214" column="6" bodyfile="CGAL/IO/WKT.h" bodystart="214" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1ga0bf10061c888cb9be8e2c6e12be48110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_polygon_WKT</definition>
        <argsstring>(std::istream &amp;in, Polygon &amp;polygon)</argsstring>
        <name>read_polygon_WKT</name>
        <qualifiedname>CGAL::IO::read_polygon_WKT</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Polygon &amp;</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
<para>fills <computeroutput>polygon</computeroutput> from a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para>The first line starting with POLYGON in the stream will be used.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <computeroutput>CGAL::General_polygon_with_holes_2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::General_polygon_with_holes_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="266" column="6" bodyfile="CGAL/IO/WKT.h" bodystart="266" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1gab00420bb054eb7aa139a74910ab9fbd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MultiPolygon</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_multi_polygon_WKT</definition>
        <argsstring>(std::istream &amp;in, MultiPolygon &amp;polygons)</argsstring>
        <name>read_multi_polygon_WKT</name>
        <qualifiedname>CGAL::IO::read_multi_polygon_WKT</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>MultiPolygon &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>overwrites the content of a <computeroutput>MultiPolygon</computeroutput> with the first line starting with MULTIPOLYGON in the stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MultiPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>CGAL::General_polygon_with_holes_2</computeroutput>, and have:<itemizedlist>
<listitem><para>a function <computeroutput>push_back()</computeroutput> that takes a <computeroutput>CGAL::General_polygon_with_holes_2</computeroutput>,</para>
</listitem><listitem><para>a function <computeroutput>clear()</computeroutput>,</para>
</listitem><listitem><para>a function <computeroutput>resize()</computeroutput> that takes a <computeroutput>size_type</computeroutput></para>
</listitem><listitem><para>an <computeroutput>operator[]()</computeroutput> that takes a <computeroutput>size_type</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::General_polygon_with_holes_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="313" column="6" bodyfile="CGAL/IO/WKT.h" bodystart="313" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="WKT_8h_1a654a927728a36e51c9073e9bea2fb6d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_multi_polygon_WKT</definition>
        <argsstring>(std::istream &amp;in, Multipolygon_with_holes_2&lt; Kernel, Container &gt; &amp;mp)</argsstring>
        <name>read_multi_polygon_WKT</name>
        <qualifiedname>CGAL::IO::read_multi_polygon_WKT</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Multipolygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="351" column="6" bodyfile="CGAL/IO/WKT.h" bodystart="351" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1gaa359cf97c9c2088e3965838ca047f192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Point</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::IO::write_point_WKT</definition>
        <argsstring>(std::ostream &amp;out, const Point &amp;point)</argsstring>
        <name>write_point_WKT</name>
        <qualifiedname>CGAL::IO::write_point_WKT</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Point &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>writes <computeroutput>point</computeroutput> into a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Point</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <computeroutput>CGAL::Point_2</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="368" column="14" bodyfile="CGAL/IO/WKT.h" bodystart="368" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1ga11a7d9adde86643a19b8635e83cc3956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::IO::write_polygon_WKT</definition>
        <argsstring>(std::ostream &amp;out, const Polygon &amp;poly)</argsstring>
        <name>write_polygon_WKT</name>
        <qualifiedname>CGAL::IO::write_polygon_WKT</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Polygon &amp;</type>
          <declname>poly</declname>
        </param>
        <briefdescription>
<para>writes <computeroutput>poly</computeroutput> into a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a <computeroutput>CGAL::General_polygon_with_holes_2</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::General_polygon_with_holes_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="388" column="14" bodyfile="CGAL/IO/WKT.h" bodystart="388" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1ga9a0cc0e749b686833f12d94a45173258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LineString</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::IO::write_linestring_WKT</definition>
        <argsstring>(std::ostream &amp;out, LineString ls)</argsstring>
        <name>write_linestring_WKT</name>
        <qualifiedname>CGAL::IO::write_linestring_WKT</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>LineString</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>ls</computeroutput> into a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LineString</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>CGAL::Point_2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="408" column="14" bodyfile="CGAL/IO/WKT.h" bodystart="408" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1gaafca9701184dfc1f147ef3771f348209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MultiPoint</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::IO::write_multi_point_WKT</definition>
        <argsstring>(std::ostream &amp;out, MultiPoint &amp;mp)</argsstring>
        <name>write_multi_point_WKT</name>
        <qualifiedname>CGAL::IO::write_multi_point_WKT</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>MultiPoint &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>mp</computeroutput> into a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MultiPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>CGAL::Point_2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::Point_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="429" column="14" bodyfile="CGAL/IO/WKT.h" bodystart="429" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1ga56eb9fc151c6a52af723d65612f4d2ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MultiPolygon</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::IO::write_multi_polygon_WKT</definition>
        <argsstring>(std::ostream &amp;out, MultiPolygon &amp;polygons)</argsstring>
        <name>write_multi_polygon_WKT</name>
        <qualifiedname>CGAL::IO::write_multi_polygon_WKT</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>MultiPolygon &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>polygons</computeroutput> into a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MultiPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>CGAL::General_polygon_with_holes_2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput>CGAL::General_polygon_with_holes_2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="450" column="14" bodyfile="CGAL/IO/WKT.h" bodystart="450" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="WKT_8h_1a3298839500276a011fdf505bd2f47e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::IO::write_multi_polygon_WKT</definition>
        <argsstring>(std::ostream &amp;out, Multipolygon_with_holes_2&lt; Kernel, Container &gt; &amp;mp)</argsstring>
        <name>write_multi_polygon_WKT</name>
        <qualifiedname>CGAL::IO::write_multi_polygon_WKT</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Multipolygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="462" column="14" bodyfile="CGAL/IO/WKT.h" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1ga4c077a50b5782e54133d27ea11c0c3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MultiLineString</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::IO::write_multi_linestring_WKT</definition>
        <argsstring>(std::ostream &amp;out, MultiLineString &amp;mls)</argsstring>
        <name>write_multi_linestring_WKT</name>
        <qualifiedname>CGAL::IO::write_multi_linestring_WKT</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>MultiLineString &amp;</type>
          <declname>mls</declname>
        </param>
        <briefdescription>
<para>writes the content of <computeroutput>mls</computeroutput> into a WKT stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MultiLineString</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>LineString</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportIoFuncsWKT_1ga9a0cc0e749b686833f12d94a45173258" kindref="member">CGAL::IO::write_linestring_WKT()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="478" column="14" bodyfile="CGAL/IO/WKT.h" bodystart="478" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgStreamSupportIoFuncsWKT_1ga774fb181cf36889b2d4da65f4c72bdf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MultiPoint</type>
          </param>
          <param>
            <type>typename MultiLineString</type>
          </param>
          <param>
            <type>typename MultiPolygon</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::IO::read_WKT</definition>
        <argsstring>(std::istream &amp;is, MultiPoint &amp;points, MultiLineString &amp;polylines, MultiPolygon &amp;polygons)</argsstring>
        <name>read_WKT</name>
        <qualifiedname>CGAL::IO::read_WKT</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>MultiPoint &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>MultiLineString &amp;</type>
          <declname>polylines</declname>
        </param>
        <param>
          <type>MultiPolygon &amp;</type>
          <declname>polygons</declname>
        </param>
        <briefdescription>
<para>reads the content of a WKT stream and fills <computeroutput>points</computeroutput>, <computeroutput>polylines</computeroutput> and <computeroutput>polygons</computeroutput> with all the POINT, MULTIPOINT, LINESTRING, MULTILINESTRING, POLYGON and MULTIPOLYGON it finds in <computeroutput>input</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MultiPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>CGAL::Point_2</computeroutput> or <computeroutput>CGAL::Point_3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MultiLineString</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>Linestring</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MultiPolygon</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput>RandomAccessRange</computeroutput> of <computeroutput>CGAL::General_polygon_with_holes_2</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Only Cartesian Kernels with double or float as <computeroutput>FT</computeroutput> are supported.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgStreamSupportIoFuncsWKT_1gaa8555eff6ee952cbbbbad9dc6f2d4649" kindref="member">CGAL::IO::read_linestring_WKT()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/WKT.h" line="515" column="6" bodyfile="CGAL/IO/WKT.h" bodystart="515" bodyend="593"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/IO/3MF.h" line="37" column="1"/>
  </compounddef>
</doxygen>
