<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Output__rep" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Output_rep</compoundname>
    <basecompoundref prot="public" virt="non-virtual">CGAL::IO_rep_is_not_specialized_aux&lt; void &gt;</basecompoundref>
    <includes local="no">CGAL/IO/io.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class F</type>
        <defval><ref refid="structCGAL_1_1Null__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">::CGAL::Null_tag</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1Output__rep_1ac4d55f49523777cfae92a010b6883f85" prot="private" static="no" mutable="no">
        <type>const T &amp;</type>
        <definition>const T&amp; CGAL::Output_rep&lt; T, F &gt;::t</definition>
        <argsstring></argsstring>
        <name>t</name>
        <qualifiedname>CGAL::Output_rep::t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="182" column="11" bodyfile="CGAL/IO/io.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Output__rep_1a8d73c7a06884031fb3de55534f8931b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Output_rep&lt; T, F &gt;::Output_rep</definition>
        <argsstring>(const T &amp;tt, F={})</argsstring>
        <name>Output_rep</name>
        <qualifiedname>CGAL::Output_rep::Output_rep</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>tt</declname>
        </param>
        <param>
          <type>F</type>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>initialize with a const reference to <emphasis>t</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="186" column="3" bodyfile="CGAL/IO/io.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Output__rep_1a1b1b7fadac7aa87e1db910a70a5fc240" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::Output_rep&lt; T, F &gt;::operator()</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CGAL::Output_rep::operator()</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>perform the output, calls <computeroutput>operator&lt;&lt;</computeroutput> by default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="188" column="16" bodyfile="CGAL/IO/io.h" bodystart="188" bodyend="188"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Output__rep_1a1275c3023697f42737c7ccc5ac246c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Output_rep&lt; T, F &gt; rep)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::Output_rep::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref>&lt; T, F &gt;</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
<para>stream output of the <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput> calls its <computeroutput>operator()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>CGAL defines output operators for classes that are derived from the class <computeroutput>ostream</computeroutput>. This enables to write to ostreams as <computeroutput>cout</computeroutput> or <computeroutput>cerr</computeroutput>, as well as to <computeroutput>std::ostringstream</computeroutput> and <computeroutput>std::ofstream</computeroutput>. The output operator is defined for all classes in the CGAL <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> and for the class <computeroutput>Color</computeroutput> as well. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/io.h" line="229" column="1" bodyfile="CGAL/IO/io.h" bodystart="229" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The purpose of <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput> is to provide a way to control output formatting that works independently of the object&apos;s stream output operator. </para>
    </briefdescription>
    <detaileddescription>
<para>If you dont specialize <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput> for <computeroutput>T</computeroutput>, <computeroutput>T</computeroutput>&apos;s stream output operator is called from within <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput>, by default. If you want another behavior for your type <computeroutput>T</computeroutput>, you have to provide a specialization for that type. Furthermore, you can provide specializations with a second template parameter (a formatting tag). The second template parameter defaults to <computeroutput><ref refid="structCGAL_1_1Null__tag" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Null_tag</ref></computeroutput> and means <emphasis>default behavior</emphasis>.</para>
<para>Specializations of <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput> should provide the following features:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classCGAL_1_1Output__rep_1a8d73c7a06884031fb3de55534f8931b1" kindref="member">Output_rep</ref>&lt;<sp/>Some_type,<sp/>F<sp/>&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_specialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Output_rep(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Some_type&amp;<sp/>t<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ostream&amp;<sp/><ref refid="classCGAL_1_1Output__rep_1a1b1b7fadac7aa87e1db910a70a5fc240" kindref="member">operator()</ref>(<sp/>std::ostream&amp;<sp/>os<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>You can also specialize for a formatting tag <computeroutput>F</computeroutput>.</para>
<para>The constant <computeroutput>is_specialized</computeroutput> can be tested by meta-programming tools to verify that a given type can be used with <computeroutput>oformat()</computeroutput>. Its value has to be <computeroutput>true</computeroutput> in a specialization of <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput>. When there is no specialization for a type, the class template <computeroutput><ref refid="classCGAL_1_1Output__rep" kindref="compound">Output_rep</ref></computeroutput> defines <computeroutput>is_specialized</computeroutput> to the default value <computeroutput>false</computeroutput>. </para>
    </detaileddescription>
    <location file="CGAL/IO/io.h" line="179" column="1" bodyfile="CGAL/IO/io.h" bodystart="181" bodyend="189"/>
    <listofallmembers>
      <member refid="structCGAL_1_1IO__rep__is__not__specialized__aux_1ab4df0f8aff903f91cd2d2512bf0a9ec2" prot="public" virt="non-virtual"><scope>CGAL::Output_rep</scope><name>is_specialized</name></member>
      <member refid="classCGAL_1_1Output__rep_1a1b1b7fadac7aa87e1db910a70a5fc240" prot="public" virt="non-virtual"><scope>CGAL::Output_rep</scope><name>operator()</name></member>
      <member refid="classCGAL_1_1Output__rep_1a1275c3023697f42737c7ccc5ac246c84" prot="public" virt="non-virtual"><scope>CGAL::Output_rep</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Output__rep_1a8d73c7a06884031fb3de55534f8931b1" prot="public" virt="non-virtual"><scope>CGAL::Output_rep</scope><name>Output_rep</name></member>
      <member refid="classCGAL_1_1Output__rep_1ac4d55f49523777cfae92a010b6883f85" prot="private" virt="non-virtual"><scope>CGAL::Output_rep</scope><name>t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
