<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="IOStreamSupportedFileFormats" kind="page">
    <compoundname>IOStreamSupportedFileFormats</compoundname>
    <title>Supported File Formats</title>
    <briefdescription>
<para>CGAL provides a large number of data structures and algorithms dedicated to various applications. </para>
    </briefdescription>
    <detaileddescription>
<para>This page lists the various supported file formats and the data structures offered by CGAL that may be used to read and write files of each specific format.</para>
<para><itemizedlist>
<listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamOFF" kindref="member">Object File Format (OFF)</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamOBJ" kindref="member">Wavefront Advanced Visualizer Object Format (OBJ)</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamSTL" kindref="member">STereoLithography (STL) File Format</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member">Polygon File Format (PLY)</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamXYZ" kindref="member">XYZ File Format</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamVTK" kindref="member">VTK (VTU / VTP / legacy) File Formats</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamGocad" kindref="member">GOCAD (TS) File Format</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStream3MF" kindref="member">3D Manufacturing Format (3MF)</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamWRL" kindref="member">Virtual Reality Modeling Language (VRML) File Format</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamLAS" kindref="member">LAS (Lidar) File Format</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamAvizo" kindref="member">Avizo File Format</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamMedit" kindref="member">Medit File Format</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamTetgen" kindref="member">Tetgen File Format</ref></para>
</listitem><listitem><para><ref refid="IOStreamSupportedFileFormats_1IOStreamWKT" kindref="member">Well-Known Text (WKT) File Format</ref></para>
</listitem></itemizedlist>
</para>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamOFF">
<title>Object File Format (OFF)</title>
<para>The <computeroutput>OFF</computeroutput> file format, using the file extension <computeroutput>.off</computeroutput>, can be used to represent collections of planar polygons with possibly shared vertices. Although it can be as light as providing points and faces described by IDs, the format also allows users to provide more properties such as associating normals or colors to vertices.</para>
<para>A precise specification of the format is available at <ulink url="http://www.geomview.org/docs/html/OFF.html">geomview.org</ulink>.</para>
<para>Note that the format defines both ASCII and binary OFF formats, but only the ASCII OFF format is supported in CGAL.</para>
<para>The following table lists some CGAL data structures that have I/O functions compatible with this file format.</para>
<para><table rows="13" cols="4"><row>
<entry thead="yes" colspan="4"><para>Object File Format (OFF)  </para>
</entry></row>
<row>
<entry thead="no" rowspan="6" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="3" width="175"><para>Polygon Mesh </para>
</entry><entry thead="no" width="250"><para><computeroutput><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgSurfaceMeshIOFuncOFF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::IO::read_OFF(const std::string&amp;, CGAL::Surface_mesh&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgPolyhedronIOFunc" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polyhedron.tag">CGAL::IO::read_OFF(const std::string&amp;, CGAL::Polyhedron_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncsOFF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::read_OFF(const std::string&amp;, Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Point Set </para>
</entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::Point_set_3</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSet3IOOFF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::IO::read_OFF(const std::string&amp;, CGAL::Point_set_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any point range </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSetProcessing3IOOff" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">CGAL::IO::read_OFF(const std::string&amp;, PointOutputIterator)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsOFF" kindref="compound">CGAL::IO::read_OFF(const std::string&amp;, PointRange&amp;, PolygonRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="6"><para>Output </para>
</entry><entry thead="no" rowspan="3"><para>Polygon Mesh </para>
</entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgSurfaceMeshIOFuncOFF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::IO::write_OFF(const std::string, CGAL::Surface_mesh&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Polyhedron__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polyhedron.tag">CGAL::Polyhedron_3</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgPolyhedronIOFunc" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polyhedron.tag">CGAL::IO::write_OFF(const std::string&amp;, const CGAL::Polyhedron_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncsOFF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::write_OFF(const std::string&amp;, const Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Point Set </para>
</entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::Point_set_3</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSet3IOOFF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::IO::write_OFF(const std::string&amp;, const CGAL::Point_set_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any point range </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSetProcessing3IOOff" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">CGAL::IO::write_OFF(const std::string&amp;, const PointRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsOFF" kindref="compound">CGAL::IO::write_OFF(const std::string&amp;, const PointRange&amp;, const PolygonRange&amp;)</ref>  </para>
</entry></row>
</table>
</para>
<para>If the data of a polygon mesh cannot be read in a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> due to bad orientation or manifoldness issues, consider using <ref refid="group__PMP__IO__grp" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag"><computeroutput>CGAL::Polygon_mesh_processing::IO::read_polygon_mesh()</computeroutput> </ref>, which offers combinatorial repairing while reading bad inputs.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamOBJ">
<title>Wavefront Advanced Visualizer Object Format (OBJ)</title>
<para>The <computeroutput>OBJ</computeroutput> file format, using the file extension <computeroutput>.obj</computeroutput>, is a simple ASCII data format that represents 3D geometry. Vertices are stored in a counter-clockwise order by default, making explicit declaration of face normals unnecessary.</para>
<para>A precise specification of the format is available <ulink url="https://www.martinreddy.net/gfx/3d/OBJ.spec">here</ulink>.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" colspan="4"><para>Wavefront Advanced Visualizer Object Format (OBJ)  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="1" width="175"><para>Polygon Mesh </para>
</entry><entry thead="no" width="250"><para>Any model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgBGLIoFuncsOBJ" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::read_OBJ(const std::string&amp;, Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsOBJ" kindref="compound">CGAL::IO::read_OBJ(const std::string&amp;, PointRange&amp;, PolygonRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Output </para>
</entry><entry thead="no" rowspan="1"><para>Polygon Mesh </para>
</entry><entry thead="no"><para>Any model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncsOBJ" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::write_OBJ(const std::string&amp;, const Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsOBJ" kindref="compound">CGAL::IO::write_OBJ(const std::string&amp;, const PointRange&amp;, const PolygonRange&amp;)</ref>  </para>
</entry></row>
</table>
</para>
<para>If the data of a polygon mesh cannot be read in a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> due to bad orientation or manifoldness issues, consider using <ref refid="group__PMP__IO__grp" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag"><computeroutput>CGAL::Polygon_mesh_processing::IO::read_polygon_mesh()</computeroutput> </ref>, which offers combinatorial repairing while reading bad inputs.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamSTL">
<title>STereoLithography (STL) File Format</title>
<para>The <computeroutput>STL</computeroutput> file format, using the file extension <computeroutput>.stl</computeroutput>, is an ASCII or binary format native to the stereolithography CAD software created by 3D Systems. STL files describe the surface geometry of a three-dimensional object.</para>
<para>A precise specification of those formats is available <ulink url="https://www.fabbers.com/tech/STL_Format">here</ulink>.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" colspan="4"><para>STereoLithography (STL)  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="1" width="175"><para>Polygon Mesh </para>
</entry><entry thead="no" width="250"><para>Any model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgBGLIoFuncsSTL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::read_STL(const std::string&amp;, Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsSTL" kindref="compound">CGAL::IO::read_STL(const std::string&amp;, PointRange&amp;, TriangleRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Output </para>
</entry><entry thead="no" rowspan="1"><para>Polygon Mesh </para>
</entry><entry thead="no"><para>Any model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncsSTL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::write_STL(const std::string&amp;, const Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsSTL" kindref="compound">CGAL::IO::write_STL(const std::string&amp;, const PointRange&amp;, const TriangleRange&amp;)</ref>  </para>
</entry></row>
</table>
</para>
<para>Note that the STL file format exports triangular faces as geometric triangles and thus combinatorial information is lost.</para>
<para>If the data of a polygon mesh cannot be read in a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> due to bad orientation or manifoldness issues, consider using <ref refid="group__PMP__IO__grp" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag"><computeroutput>CGAL::Polygon_mesh_processing::IO::read_polygon_mesh()</computeroutput> </ref>, which offers combinatorial repairing while reading bad inputs.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamPLY">
<title>Polygon File Format (PLY)</title>
<para>The <computeroutput>PLY</computeroutput> file format, using the file extension <computeroutput>.ply</computeroutput>, is an ASCII or binary format conceived to store the data obtained during 3D scans. Objects are stored as a simple list of polygons and external properties can be stored.</para>
<para>A precise specification of those formats is available <ulink url="https://paulbourke.net/dataformats/ply/">here</ulink>.</para>
<para><table rows="11" cols="4"><row>
<entry thead="yes" colspan="4"><para>Polygon File Format (PLY)  </para>
</entry></row>
<row>
<entry thead="no" rowspan="5" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="2" width="175"><para>Polygon Mesh </para>
</entry><entry thead="no" width="250"><para><computeroutput><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgSurfaceMeshIOFuncPLY" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::IO::read_PLY(const std::string&amp;, CGAL::Surface_mesh&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncsPLY" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::read_PLY(const std::string&amp;, Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Point Set </para>
</entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::Point_set_3</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSet3IOPLY" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::IO::read_PLY(const std::string&amp;, CGAL::Point_set_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any point range </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSetProcessing3IOPly" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">CGAL::IO::read_PLY(const std::string&amp;, PointRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsPLY" kindref="compound">CGAL::IO::read_PLY(const std::string&amp;, PointRange&amp;, PolygonRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="5"><para>Output </para>
</entry><entry thead="no" rowspan="2"><para>Polygon Mesh </para>
</entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgSurfaceMeshIOFuncPLY" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::IO::write_PLY(const std::string&amp;, const CGAL::Surface_mesh&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncsPLY" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::write_PLY(const std::string&amp;, const Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Point Set </para>
</entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::Point_set_3</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSet3IOPLY" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::IO::write_PLY(const std::string&amp;, const CGAL::Point_set_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any point range </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSetProcessing3IOPly" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">CGAL::IO::write_PLY(const std::string&amp;, const PointRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsPLY" kindref="compound">CGAL::IO::write_PLY(const std::string&amp;, const PointRange&amp;, PolygonRange&amp;)</ref>  </para>
</entry></row>
</table>
</para>
<para>If the data of a polygon mesh cannot be read in a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> due to bad orientation or manifoldness issues, consider using <ref refid="group__PMP__IO__grp" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag"><computeroutput>CGAL::Polygon_mesh_processing::IO::read_polygon_mesh()</computeroutput> </ref>, which offers combinatorial repairing while reading bad inputs.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamLAS">
<title>LAS (Lidar) File Format</title>
<para>The <computeroutput>LAS</computeroutput> file format, using the file extension <computeroutput>.las</computeroutput>, is similar to the <ref refid="IOStreamSupportedFileFormats_1IOStreamPLY" kindref="member">Polygon File Format (PLY)</ref>, except for some characteristics: this format is binary-only and does not handle normals. The <ref refid="thirdparty_1thirdpartyLASlib" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LASlib</ref> library is required to read or write using this format.</para>
<para>A precise specification of those formats is available <ulink url="https://www.loc.gov/preservation/digital/formats/fdd/fdd000418.shtml">here</ulink>.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" colspan="4"><para>LAS (Lidar) File Format  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="2" width="175"><para>Point Set </para>
</entry><entry thead="no" width="250"><para><computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::Point_set_3</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgPointSet3IOLAS" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::IO::read_LAS(const std::string&amp;, CGAL::Point_set_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any point range </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSetProcessing3IOLas" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">CGAL::IO::read_LAS(const std::string&amp;, PointRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Output </para>
</entry><entry thead="no" rowspan="2"><para>Point Set </para>
</entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::Point_set_3</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSet3IOLAS" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::IO::write_LAS(const std::string&amp;, const CGAL::Point_set_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any point range </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSetProcessing3IOLas" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">CGAL::IO::write_LAS(const std::string&amp;, const PointRange&amp;)</ref>  </para>
</entry></row>
</table>
</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamXYZ">
<title>XYZ File Format</title>
<para>The <computeroutput>XYZ</computeroutput> format, using the file extension <computeroutput>.xyz</computeroutput>, is a non-standard ASCII data format regularly used to describe point sets. Each line represent a point, and is composed of its coordinates and other properties. Only coordinates and normals are currently supported in CGAL.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" colspan="4"><para>XYZ File Format  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="2" width="175"><para>Point Set </para>
</entry><entry thead="no" width="250"><para><computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::Point_set_3</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgPointSet3IOXYZ" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::IO::read_XYZ(const std::string&amp;, CGAL::Point_set_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any point range </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSetProcessing3IOXyz" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">CGAL::IO::read_XYZ(const std::string&amp;, PointRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Output </para>
</entry><entry thead="no" rowspan="2"><para>Point Set </para>
</entry><entry thead="no"><para><computeroutput><ref refid="classCGAL_1_1Point__set__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::Point_set_3</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSet3IOXYZ" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_3.tag">CGAL::IO::write_XYZ(const std::string&amp;, const CGAL::Point_set_3&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Any point range </para>
</entry><entry thead="no"><para><ref refid="group__PkgPointSetProcessing3IOXyz" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Point_set_processing_3.tag">CGAL::IO::write_XYZ(const std::string&amp;, const PointRange&amp;)</ref>  </para>
</entry></row>
</table>
</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamGocad">
<title>GOCAD (TS) File Format</title>
<para>The <computeroutput>GOCAD</computeroutput> format, using the file extension <computeroutput>.ts</computeroutput>, is an ASCII file format that enables a range of primitive types to be imported into the GOCAD package.</para>
<para>A precise specification of the format is available <ulink url="https://paulbourke.net/dataformats/gocad/gocad.pdf">here</ulink>.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" colspan="4"><para>GOCAD (TS) File Format  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="1" width="175"><para>Polygon Mesh </para>
</entry><entry thead="no" width="250"><para>Any model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgBGLIoFuncsGOCAD" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::read_GOCAD(const std::string&amp;, Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsGOCAD" kindref="compound">CGAL::IO::read_GOCAD(const std::string&amp;, PointRange&amp;, PolygonRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Output </para>
</entry><entry thead="no" rowspan="1"><para>Polygon Mesh </para>
</entry><entry thead="no"><para>Any model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncsGOCAD" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::write_GOCAD(const std::string&amp;, const Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsGOCAD" kindref="compound">CGAL::IO::write_GOCAD(const std::string&amp;, const PointRange&amp;, const PolygonRange&amp;)</ref>  </para>
</entry></row>
</table>
</para>
<para>If the data of a polygon mesh cannot be read in a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> due to bad orientation or manifoldness issues, consider using <ref refid="group__PMP__IO__grp" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag"><computeroutput>CGAL::Polygon_mesh_processing::IO::read_polygon_mesh()</computeroutput> </ref>, which offers combinatorial repairing while reading bad inputs.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStream3MF">
<title>3D Manufacturing Format (3MF)</title>
<para><simplesect kind="attention"><para>CGAL needs to be configured with the 3MF Libraries for this function to be available.</para>
</simplesect>
The <computeroutput>3MF</computeroutput>, using the file extension <computeroutput>.3mf</computeroutput>, is an open source file format created by the 3MF Consortium. It is an XML-based format that aims to enhance the <ref refid="IOStreamSupportedFileFormats_1IOStreamSTL" kindref="member">STereoLithography (STL) File Format</ref> by adding means to include extra information such as colors.</para>
<para>A precise specification of the format is available at <ulink url="https://3mf.io/3mf-specification/">3mf.io</ulink>; note that only versions <computeroutput>1.x</computeroutput> are currently supported in CGAL.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" colspan="4"><para>3D Manufacturing Format (3MF)  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="1" width="175"><para>Polygon Mesh </para>
</entry><entry thead="no" width="250"><para><computeroutput><ref refid="classCGAL_1_1Surface__mesh" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::Surface_mesh</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgSurfaceMeshIOFunc3MF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Surface_mesh.tag">CGAL::IO::read_3MF(const std::string&amp;, Surface_meshRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncs3MF" kindref="compound">CGAL::IO::read_3MF(const std::string&amp;, PointRanges&amp;, PolygonRanges&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Output </para>
</entry><entry thead="no" rowspan="1"><para>Polygon Mesh </para>
</entry><entry thead="no"><para>Any model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncs3MF" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::write_3MF(const std::string&amp;, const GraphRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncs3MF" kindref="compound">CGAL::IO::write_3MF(const std::string&amp;, const PointRanges&amp;, const PolygonRanges&amp;)</ref>  </para>
</entry></row>
</table>
</para>
<para>If the data of a polygon mesh cannot be read in a <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> due to bad orientation or manifoldness issues, consider using <ref refid="group__PMP__IO__grp" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Polygon_mesh_processing.tag"><computeroutput>CGAL::Polygon_mesh_processing::IO::read_polygon_mesh()</computeroutput> </ref>, which offers combinatorial repairing while reading bad inputs.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamWRL">
<title>Virtual Reality Modeling Language (VRML) File Format</title>
<para>The <computeroutput>VRML</computeroutput> format, using the file extension <computeroutput>.wrl</computeroutput>, is an ASCII format often used by browser plug-ins to display virtual reality environments. VRML files are known as “worlds,” which is what &quot;WRL&quot; stands for. A WRL file includes data specifying 3-D details such as vertices, edges for a 3-D polygon, surface color, ...</para>
<para>A precise specification of the format is available <ulink url="http://gun.teipir.gr/VRML-amgem/spec/">here</ulink>.</para>
<para><table rows="2" cols="4"><row>
<entry thead="yes" colspan="4"><para>3D VRML Format (WRL)  </para>
</entry></row>
<row>
<entry thead="no" rowspan="1" width="75"><para>Output </para>
</entry><entry thead="no" rowspan="1" width="175"><para>Polygon Mesh </para>
</entry><entry thead="no" width="250"><para>Any model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</entry><entry thead="no" width="500"><para><ref refid="group__PkgBGLIoFuncsWRL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::write_WRL(const std::string&amp;, const Graph&amp;)</ref>  </para>
</entry></row>
</table>
</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamVTK">
<title>VTK (VTU / VTP / legacy) File Formats</title>
<para><simplesect kind="attention"><para>CGAL needs to be configured with the VTK Libraries for this function to be available.</para>
</simplesect>
The VTK libraries use different file formats to handle data structures, but we only support two:<itemizedlist>
<listitem><para>The <computeroutput>VTU</computeroutput> format can be used to store a collection of 3D cells, like tetrahedra, but also points, triangles, lines, etc. In the <ulink url="https://vtk.org/">VTK Libraries</ulink>. It is the format reserved to store <ulink url="https://kitware.github.io/vtk-examples/site/VTKFileFormats/#unstructuredgrid"><computeroutput>Unstructured Grids</computeroutput></ulink>, and in CGAL, we use it to store triangulations (2D and 3D).</para>
</listitem><listitem><para>The <computeroutput>VTP</computeroutput> format can be used to store collections of points, lines, and triangles. In the <ulink url="https://vtk.org/">VTK Libraries</ulink>, it is the format reserved to store <computeroutput>PolyData</computeroutput>, and in CGAL, we use it to store polygon meshes.</para>
</listitem></itemizedlist>
</para>
<para>We additionally provide a read function for the legacy non-XML <computeroutput>VTK</computeroutput> file format for polygon meshes.</para>
<para>A precise specification of those formats is available at <ulink url="https://vtk.org/wp-content/uploads/2015/04/file-formats.pdf">vtk.org</ulink>.</para>
<para><table rows="5" cols="4"><row>
<entry thead="yes" colspan="4"><para>VTK (VTU / VTP / legacy) File Formats  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2" width="75"><para>Input </para>
</entry><entry thead="no" rowspan="1" width="175"><para>Polygon Mesh </para>
</entry><entry thead="no" width="250"><para>Any model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput> </para>
</entry><entry thead="no" width="800"><para><ref refid="group__PkgBGLIoFuncsVTP" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::read_VTP(const std::string&amp;, Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsVTK" kindref="compound">CGAL::IO::read_VTP(const std::string&amp;, PointRange&amp;, PolygonRange&amp;)</ref>, <linebreak/>
 <ref refid="group__PkgStreamSupportIoFuncsVTK" kindref="compound">CGAL::IO::read_VTK(const std::string&amp;, PointRange&amp;, PolygonRange&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no" rowspan="2"><para>Output </para>
</entry><entry thead="no" rowspan="1"><para>Polygon Mesh </para>
</entry><entry thead="no"><para>Any model of <computeroutput><ref refid="classFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">FaceGraph</ref></computeroutput> </para>
</entry><entry thead="no"><para><ref refid="group__PkgBGLIoFuncsVTP" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::IO::write_VTP(const std::string&amp;, const Graph&amp;)</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>Polygon Soup </para>
</entry><entry thead="no"><para>Any point + polygon range </para>
</entry><entry thead="no"><para><ref refid="group__PkgStreamSupportIoFuncsVTK" kindref="compound">CGAL::IO::write_VTP(const std::string&amp;, const PointRange&amp;, const PolygonRange&amp;)</ref>  </para>
</entry></row>
</table>
</para>
<para>The following CGAL data structures can be exported into the <computeroutput>.VTU</computeroutput> file format:</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref></computeroutput>, using <ref refid="group__PkgSMDS3ExportFunctions_1gae43fbd7adc8ca9598471575c96a44a3a" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag"><computeroutput>CGAL::IO::output_to_vtu()</computeroutput> </ref></para>
</listitem><listitem><para><computeroutput><ref refid="classCGAL_1_1Constrained__Delaunay__triangulation__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_2.tag">CGAL::Constrained_Delaunay_triangulation_2</ref></computeroutput>, using the function <ref refid="group__PkgMesh2IO_1ga938b5d46b0dcff1b56f7342926e9f564" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Mesh_2.tag"><computeroutput>CGAL::IO::write_VTU()</computeroutput> </ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamAvizo">
<title>Avizo File Format</title>
<para>The AmiraMesh format, using file extension <computeroutput>.am</computeroutput>, is used by the <ulink url="https://www.fei.com/software/avizo3d">Avizo</ulink> software to read 3D geometry.</para>
<para>A single CGAL data structure, <computeroutput><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref></computeroutput>, can be exported into <computeroutput>.am</computeroutput> files. This can be done using the function <ref refid="group__PkgSMDS3ExportFunctions_1ga94b54be4b5bd58928241f9d389a222f0" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag"><computeroutput>CGAL::IO::output_to_avizo()</computeroutput></ref>.</para>
<para>A precise specification of the format is available <ulink url="https://assets.thermofisher.com/TFS-Assets/MSD/Product-Guides/users-guide-avizo-software-2019.pdf">in this guide</ulink>.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamMedit">
<title>Medit File Format</title>
<para>The Medit format, using file extension <computeroutput>.mesh</computeroutput>, is a format used by the Medit software. In CGAL, it is used to represent 3D meshes.</para>
<para>A precise specification of the format is available <ulink url="https://inria.hal.science/inria-00069921/document">in this report</ulink>, in the appendices (section 7.2.1, page 36).</para>
<para>Only the <computeroutput><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref></computeroutput> CGAL data structure can be exported into <computeroutput>.mesh</computeroutput> This can be done using the function <ref refid="group__PkgSMDS3IOFunctions_1ga9e9fc0fac6919241501c228e438fa2b2" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag"><computeroutput>CGAL::IO::write_MEDIT()</computeroutput></ref>.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamTetgen">
<title>Tetgen File Format</title>
<para>The <computeroutput>Tetgen</computeroutput> file formats can be used to represent lists of nodes, edges, faces, ... A precise specification of the format is available at <ulink url="https://wias-berlin.de/software/tetgen/fformats.html">wias-berlin.de</ulink>.</para>
<para>Only the <computeroutput><ref refid="classCGAL_1_1Mesh__complex__3__in__triangulation__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag">CGAL::Mesh_complex_3_in_triangulation_3</ref></computeroutput> CGAL data structure can be exported into some of the Tetgen file formats, namely <computeroutput>.node</computeroutput>, <computeroutput>.ele</computeroutput> and <computeroutput>.face</computeroutput>. This can be done using the function <ref refid="group__PkgSMDS3ExportFunctions_1gaad775f6b0b4a36dfcab35c8d005fdca3" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/SMDS_3.tag"><computeroutput>CGAL::IO::output_to_tetgen()</computeroutput></ref>.</para>
</sect1>
<sect1 id="IOStreamSupportedFileFormats_1IOStreamWKT">
<title>Well-Known Text (WKT) File Format</title>
<para>The <computeroutput>WKT</computeroutput> format, using the file extension <computeroutput>.wkt</computeroutput>, is a text markup language for representing vector geometry objects on a geographical map.</para>
<para>A precise specification of the format is available on <ulink url="https://en.wikipedia.org/wiki/Well-known_text">wikipedia</ulink>.</para>
<para>See Section <ref refid="index_1IOstream2DGeo" kindref="member">Simple 2D Geometry IO</ref> for a list of available functions. </para>
</sect1>
    </detaileddescription>
    <location file="File_formats/Supported_file_formats.txt"/>
  </compounddef>
</doxygen>
