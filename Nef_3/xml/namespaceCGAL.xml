<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Nef__nary__union__3" prot="public">CGAL::Nef_nary_union_3</innerclass>
    <innerclass refid="classCGAL_1_1Nef__polyhedron__3" prot="public">CGAL::Nef_polyhedron_3</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgNef3IOFunctions_1ga2e47f1a21e5b35af36c7ef665c66e848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Nef_polyhedron</type>
          </param>
          <param>
            <type>class Polygon_mesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convert_nef_polyhedron_to_polygon_mesh</definition>
        <argsstring>(const Nef_polyhedron &amp;nef, Polygon_mesh &amp;pm, bool triangulate_all_faces=false)</argsstring>
        <name>convert_nef_polyhedron_to_polygon_mesh</name>
        <qualifiedname>CGAL::convert_nef_polyhedron_to_polygon_mesh</qualifiedname>
        <param>
          <type>const Nef_polyhedron &amp;</type>
          <declname>nef</declname>
        </param>
        <param>
          <type>Polygon_mesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>triangulate_all_faces</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Converts an object of type <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref></computeroutput> into a polygon mesh model of <computeroutput>MutableFaceGraph</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that contrary to <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3_1ae1caa4106dbeaa8e59ff48c5e02260c6" kindref="member">Nef_polyhedron_3::convert_to_polyhedron()</ref></computeroutput>, the output is not triangulated (but faces with more than one connected component of the boundary). The polygon mesh can be triangulated by setting <computeroutput>triangulate_all_faces</computeroutput> to <computeroutput>true</computeroutput> or by calling the function <computeroutput>triangulate_faces()</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Nef_polyhedron</parametername>
</parameternamelist>
<parameterdescription>
<para>an object of type <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Polygon_mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>MutableFaceGraph</computeroutput> with an internal property map for <computeroutput>CGAL::vertex_point_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The points from <computeroutput>nef</computeroutput> to <computeroutput>pm</computeroutput> are converted using <computeroutput>CGAL::Cartesian_converter&lt;NefKernel, TargetKernel&gt;</computeroutput>. <computeroutput>NefKernel</computeroutput> and <computeroutput>TargetKernel</computeroutput> are deduced using <computeroutput>CGAL::Kernel_traits</computeroutput> from the point type of <computeroutput>nef</computeroutput> and the value type of the vertex_point_map of <computeroutput>tm</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nef</parametername>
</parameternamelist>
<parameterdescription>
<para>the input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangulate_all_faces</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates whether all the faces must be triangulated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>Polygon_mesh</computeroutput> must have an internal point property map with value type being <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3_1afc9ae4754ea1d424b3e9a46a387d52f0" kindref="member">Nef_polyhedron_3::Point_3</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>nef.simple()</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/convert_nef_polyhedron_to_polygon_mesh.h" line="24" column="8" declfile="CGAL/boost/graph/convert_nef_polyhedron_to_polygon_mesh.h" declline="24" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgNef3IOFunctions_1ga28a9eb4da0cd6153f0c16f7f9eaf6665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Nef_polyhedron</type>
          </param>
          <param>
            <type>typename PolygonRange</type>
          </param>
          <param>
            <type>typename PointRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convert_nef_polyhedron_to_polygon_soup</definition>
        <argsstring>(const Nef_polyhedron &amp;nef, PointRange &amp;points, PolygonRange &amp;polygons, bool triangulate_all_faces=false)</argsstring>
        <name>convert_nef_polyhedron_to_polygon_soup</name>
        <qualifiedname>CGAL::convert_nef_polyhedron_to_polygon_soup</qualifiedname>
        <param>
          <type>const Nef_polyhedron &amp;</type>
          <declname>nef</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>polygons</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>triangulate_all_faces</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Converts an object of type <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref></computeroutput> into a polygon soup. </para>
        </briefdescription>
        <detaileddescription>
<para>The polygons can be triangulated by setting <computeroutput>triangulate_all_faces</computeroutput> to <computeroutput>true</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Nef_polyhedron</parametername>
</parameternamelist>
<parameterdescription>
<para>an object of type <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is the point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is a model of the concept <computeroutput>BackInsertionSequence</computeroutput> whose <computeroutput>value_type</computeroutput> is <computeroutput>std::size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The points from <computeroutput>nef</computeroutput> to <computeroutput>points</computeroutput> are converted using <computeroutput>CGAL::Cartesian_converter&lt;NefKernel, OutputKernel&gt;</computeroutput>. <computeroutput>NefKernel</computeroutput> and <computeroutput>OutputKernel</computeroutput> are deduced using <computeroutput>CGAL::Kernel_traits</computeroutput> from the point types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nef</parametername>
</parameternamelist>
<parameterdescription>
<para>the input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the output points of the soup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polygons</parametername>
</parameternamelist>
<parameterdescription>
<para>the output polygons of the soup. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>triangulate_all_faces</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates whether all polygons must be triangulated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/boost/graph/convert_nef_polyhedron_to_polygon_mesh.h" line="47" column="8" declfile="CGAL/boost/graph/convert_nef_polyhedron_to_polygon_mesh.h" declline="47" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawNef3_1ga388ae4e24548eeebc4c6a18132025825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NP3</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const NP3 &amp;np3, const GSOptions &amp;gso)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const NP3 &amp;</type>
          <declname>np3</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>opens a new window and draws a nef polyhedron. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the drawing are taken from the optional graphics scene options parameter.</para>
<para>A call to this function blocks the execution of the program until the drawing window is closed. This function requires <computeroutput>CGAL_Qt6</computeroutput>, and is only available if the macro <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput> is defined. Linking with the cmake target <computeroutput>CGAL::CGAL_Basic_viewer</computeroutput> will link with <computeroutput>CGAL_Qt6</computeroutput> and add the definition <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NP3</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">CGAL::Nef_polyhedron_3</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>GraphicsSceneOptions</computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np3</parametername>
</parameternamelist>
<parameterdescription>
<para>the nef polyhedron to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class K, class I, class M, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::draw(const CGAL::Nef_polyhedron_3&lt;K, I, M&gt;&amp; np3, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_nef_3.h" line="28" column="8" declfile="CGAL/draw_nef_3.h" declline="28" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawNef3_1gaa725304fbbb238131d901f514c2426a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NP3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const NP3 &amp;np3)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const NP3 &amp;</type>
          <declname>np3</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawNef3_1ga388ae4e24548eeebc4c6a18132025825" kindref="member">CGAL::draw</ref>(np3, Graphics_scene_options{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_nef_3.h" line="36" column="8" declfile="CGAL/draw_nef_3.h" declline="36" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawNef3_1ga0f7f1d95c312e85658472b80f50af160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NP3</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const NP3 &amp;np3, CGAL::Graphics_scene &amp;gs, const GSOptions &amp;gso)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const NP3 &amp;</type>
          <declname>np3</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>adds the vertices, edges and faces of <computeroutput>np3</computeroutput> into the given graphic scene <computeroutput>gs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the cells are taken from the optional graphics scene options parameter <computeroutput>gso</computeroutput>. Note that <computeroutput>gs</computeroutput> is not cleared before being filled (to enable to draw several data structures in the same basic viewer).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NP3</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">CGAL::Nef_polyhedron_3</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>GraphicsSceneOptions</computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>np3</parametername>
</parameternamelist>
<parameterdescription>
<para>the nef polyhedron to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gs</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphic scene to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class K, class I, class M, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::add_to_graphics_scene(const CGAL::Nef_polyhedron_3&lt;K, I, M&gt;&amp; np3, CGAL::Graphics_scene&amp; gs, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_nef_3.h" line="61" column="6" declfile="CGAL/draw_nef_3.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawNef3_1ga3652a7cfbeadeb51cfd857dcb9e4c8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NP3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const NP3 &amp;np3, CGAL::Graphics_scene &amp;gs)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const NP3 &amp;</type>
          <declname>np3</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawNef3_1ga0f7f1d95c312e85658472b80f50af160" kindref="member">CGAL::add_to_graphics_scene</ref>(np3, gs, Graphics_scene_options{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_nef_3.h" line="71" column="6" declfile="CGAL/draw_nef_3.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgNef3IOFunctions_1gaf35d6aeb83886b4c84068aad3a2e66d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>istream &amp;</type>
        <definition>istream &amp; CGAL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;in, CGAL::Nef_polyhedron_3&lt; Traits &gt; &amp;N)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">CGAL::Nef_polyhedron_3</ref>&lt; Traits &gt; &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>This operator reads a Nef polyhedron, which is given in the proprietary file format written by the input operator <emphasis>in</emphasis> and assigns it to <emphasis>N</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>It includes the complete incidence structure, the geometric data, and the marks of each item.</para>
<para>It is recommended to use the CGAL kernels <computeroutput>Homogeneous</computeroutput>, <computeroutput>Simple_homogeneous</computeroutput>, or <computeroutput>Extended_homogeneous</computeroutput> parametrized with any exact number type that models <formula id="0">$ \mathbb{Z}$</formula> (e.g.<computeroutput>Gmpz</computeroutput> or <computeroutput>leda_integer</computeroutput>). The input and output iterators of Nef polyhedra parametrized with either of these kernels are compatible as long as the Nef polyhedron is bounded. An unbounded Nef polyhedron can only be read by a Nef polyhedron parametrized with an extended kernel. It is also recommended to use the CGAL stream modifier <computeroutput>set_ascii_mode()</computeroutput>.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">CGAL::Nef_polyhedron_3</ref>&lt;Traits&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/Nef_polyhedron_iostream_3.h" line="24" column="9" declfile="CGAL/IO/Nef_polyhedron_iostream_3.h" declline="24" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgNef3IOFunctions_1ga1a2f710b0de656d242dfecc2cfbdb28a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream &amp; CGAL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, CGAL::Nef_polyhedron_3&lt; Traits &gt; &amp;N)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">CGAL::Nef_polyhedron_3</ref>&lt; Traits &gt; &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>This operator writes the Nef polyhedron <computeroutput>N</computeroutput> to the output stream <computeroutput>out</computeroutput> using a proprietary file format. </para>
        </briefdescription>
        <detaileddescription>
<para>It includes the complete incidence structure, the geometric data, and the marks of each item.</para>
<para>Using CGAL stream modifiers the following output formats can be chosen: ASCII (<computeroutput>set_ascii_mode()</computeroutput>), binary (<computeroutput>set_binary_mode()</computeroutput>) or pretty (<computeroutput>set_pretty_mode()</computeroutput>). The mandatory format is the ASCII format. It is recommended to use this format for file input and output.</para>
<para>As the output depends on the output operators of the geometric primitives provided by the traits class, it might not be possible that the input operator and output operators of different traits classes are not compatible. We recommend to use the CGAL kernels <computeroutput>Homogeneous</computeroutput>, <computeroutput>Simple_homogeneous</computeroutput>, or <computeroutput>Extended_homogeneous</computeroutput> parametrized with any exact number type that models <formula id="1">$\mathbb{Z}$</formula> (e.g. <computeroutput>Gmpz</computeroutput> or <computeroutput>leda_integer</computeroutput>).</para>
<para>A bounded <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref>&lt;Extended_homogeneous&gt;</computeroutput> is automatically written as though <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref>&lt;Homogeneous&gt;</computeroutput> or <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref>&lt;Simple_homogeneous&gt;</computeroutput> is used. As a result, the input operator of each of these types can read the output.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">CGAL::Nef_polyhedron_3</ref>&lt;Traits&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/IO/Nef_polyhedron_iostream_3.h" line="57" column="1" declfile="CGAL/IO/Nef_polyhedron_iostream_3.h" declline="57" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgNef3IOFunctions_1gaeb31b20d2824c500c4a12e284667dfce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Nef_polyhedron_3</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t CGAL::OFF_to_nef_3</definition>
        <argsstring>(std::istream &amp;in, Nef_polyhedron_3 &amp;N)</argsstring>
        <name>OFF_to_nef_3</name>
        <qualifiedname>CGAL::OFF_to_nef_3</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref> &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>This function creates a 3D Nef polyhedron from an OFF file which is read from input stream <computeroutput>in</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The purpose of <computeroutput>OFF_to_nef_3</computeroutput> is to create a Nef polyhedron from an OFF file that cannot be handled by the <computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">Nef_polyhedron_3</ref></computeroutput> constructors. It handles double coordinates while using a homogeneous kernel, non-coplanar facets, surfaces with boundaries, self-intersecting surfaces, and single facets. Every closed volume gets marked. The function returns the number of facets it could not handle.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Nef__polyhedron__3" kindref="compound">CGAL::Nef_polyhedron_3</ref>&lt;Traits&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/OFF_to_nef_3.h" line="19" column="13" declfile="CGAL/OFF_to_nef_3.h" declline="19" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/boost/graph/convert_nef_polyhedron_to_polygon_mesh.h" line="1" column="1"/>
  </compounddef>
</doxygen>
