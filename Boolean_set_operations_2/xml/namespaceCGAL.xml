<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1General__polygon__2" prot="public">CGAL::General_polygon_2</innerclass>
    <innerclass refid="classCGAL_1_1General__polygon__set__2" prot="public">CGAL::General_polygon_set_2</innerclass>
    <innerclass refid="classCGAL_1_1Gps__circle__segment__traits__2" prot="public">CGAL::Gps_circle_segment_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Gps__default__dcel" prot="public">CGAL::Gps_default_dcel</innerclass>
    <innerclass refid="classCGAL_1_1Gps__face__base" prot="public">CGAL::Gps_face_base</innerclass>
    <innerclass refid="classCGAL_1_1Gps__halfedge__base" prot="public">CGAL::Gps_halfedge_base</innerclass>
    <innerclass refid="classCGAL_1_1Gps__segment__traits__2" prot="public">CGAL::Gps_segment_traits_2</innerclass>
    <innerclass refid="classCGAL_1_1Gps__traits__2" prot="public">CGAL::Gps_traits_2</innerclass>
    <innerclass refid="structCGAL_1_1Graphics__scene__options__polygon__set__2" prot="public">CGAL::Graphics_scene_options_polygon_set_2</innerclass>
    <innerclass refid="classCGAL_1_1Polygon__set__2" prot="public">CGAL::Polygon_set_2</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__boolean__complement_1ga45629253bda87736f21251bfee532665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::complement</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn, Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;res)</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the complement of a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting complement of <computeroutput>pgn</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="68" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1gae5b22437518e5cce7d23b93d9971187b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::complement</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn, Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;res, UsePolylines=Tag_true())</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the complement of a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundary of <computeroutput>pgn</computeroutput> is treated as a cyclic sequence of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequence of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn</computeroutput> is converted to a general polygon bounded by polylines before the operation is actually performed. Then, the resulting general polygon with holes is converted back to a standard polygon. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn</computeroutput> is used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting complement of <computeroutput>pgn</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="85" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1ga76f005a9be0986ddb28009efabef5ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::complement</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn, General_polygon_with_holes_2&lt; General_polygon_2&lt; Arr_traits &gt; &gt; &amp;res)</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; Arr_traits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the complement of a general polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the complement of <computeroutput>pgn</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="97" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="97" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1ga067ea834c072d8c3fdcd4b752861310f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::complement</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn, OutputIterator oi)</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the complement of a polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="108" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="108" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1ga0c53208fd8a6c0b277d32f26488e1686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Traits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::complement</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the complement of a polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn</computeroutput> is treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn</computeroutput> is converted to a general polygon with holes bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to a standard polygon with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn</computeroutput> is used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="128" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="128" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1ga3b61c1555b4a63aac0c695d2dd357b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::complement</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn, OutputIterator oi)</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the complement of a general polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="143" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1ga9600ad166a38cfc4be070d35041ff5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::complement</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn, Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the complement of a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting complement of <computeroutput>pgn</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="155" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="155" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1gac1a470ea0e369a9a5f7bf0911edc86d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::complement</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn, General_polygon_with_holes_2&lt; General_polygon_2&lt; Arr_traits &gt; &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; Arr_traits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the complement of a general polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting complement of <computeroutput>pgn</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="169" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="169" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1ga26b69b2b88a637d3e0ea01bd5087e0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::complement</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the complement of a polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="184" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="184" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__complement_1ga1fba4bb395af1556b59cc6d2f6d1c2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename OutputIterato</type>
          </param>
          <param>
            <type>typename GpsTraitsr</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::complement</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>complement</name>
        <qualifiedname>CGAL::complement</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the complement of the general polygon with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="200" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="200" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga261debbed91d173658244642dffbcb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="283" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="283" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga5edf64167f79ab37f80e0568a6781e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygons bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="308" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="308" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga195f947f711bb7f77a827aa7d2eada8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="323" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="323" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga7572c53b7b2af9c5a0b73a5bc542c358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon and a general polygon with holes, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="348" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="348" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1gada461352891344b389572edea2b2cb77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="363" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="363" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga0c2f271e73693231ac7176d7a2e5c6e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon with holes and a general polygon, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="388" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="388" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1gae62fd767e805095fc79d6fce319f2764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="403" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="403" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1gabe6eb8cc6be88d354c809ea729031afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to general polygons with holes, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="428" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="428" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1gaad09d58c2daf9b5c823ebc6b07e6c67f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the difference of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="444" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="444" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga503dbd4124f52fd06d3f9f07c77227f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the difference of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="461" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="461" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1gabe0c3adb2ede260678487eb57b3e0e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="478" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="478" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1gafd39046000768bcda4d4824ea5aebc11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the difference of two general polygons with holes and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>General_polygon_with_holes_2&lt;Polygon&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="493" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="493" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1gae06f930ed133b9eb876ca1fcd407340b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="512" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="512" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga515ed8aa7e48fcf570a33dbd7e94d89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="530" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="530" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga052bf2179f0bfb044cf5701396d3c8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="548" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="548" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga5665ee87f6120f6afdc922f4efa6bddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the difference of two polygons with holes and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="566" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="566" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga7effc7f4302cfd2d9c331f448a394805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the difference of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="585" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="585" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga85e8919ac5202e328d394ed21f02958a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the difference of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="605" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="605" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga2cb205944bed443d957d8294b6a82e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the difference of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="625" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="625" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__difference_1ga652551cbb4eacfd4bc7b9467d6b725d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::difference</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>difference</name>
        <qualifiedname>CGAL::difference</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the difference of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertibe to <computeroutput>General_polygon_with_holes_2&lt;Polygon&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="642" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="642" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga908af873a4b13a618bdc045c8365c2c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="744" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="744" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga7c6fd3409aae6c84fa5ffe022cb41e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, UsePolylines=Tag_true())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to general polygons, bounded by polylines before the operation is actually performed. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="762" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="762" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gac0dd819320a2f80900e07809e2eb3e81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="773" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="773" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga59e69e186188ee951ae092c66b0fa697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, UsePolylines=Tag_true())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon and a general polygon with holes, respectively, bounded by polylines before the operation is actually performed. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="792" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="792" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga101934ce0a053b5d309ac6e2bcf070a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="803" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="803" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga9f18568668ac51d487a9284e282f6c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, UsePolylines=Tag_true())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon with holes and a general polygon, respectively, bounded by polylines before the operation is actually performed. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="822" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="822" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga98915fb1374be1cb82744952e0c7fbfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>determines whether two polygons with holes intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="833" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="833" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga409ec40beeadbf237fb3e041585abdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, UsePolylines=Tag_true())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>determines whether two polygons with holes intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to general polygon with holes , bounded by polylines before the operation is actually performed. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="851" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="851" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gab6d7fc757dc3503ea034f37db7aee5b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>determines whether two general polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="864" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="864" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gabb7cb2710314cc30f9a6a22cf8f6e53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>determines whether two general polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="877" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="877" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga229ca9bbee66a870d022e31f5941dea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>determines whether two general polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="889" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="889" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga1e9c3901f9c7e3168b8bfdb09d01fdc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>determines whether two general polygons with holes intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="900" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="900" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga04fab69fdfe2f3578bcbc62996adc04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(InputIterator begin, InputIterator end)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons or a range of polygons with holes (respectively a range of general polygons or a range of general polygons with holes) determines whether the open polygons (respectively general polygons) in the range have a common point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the pairwise intersections of all open polygons or polygons with holes (respectively general polygons or general polygons with holes) in the range [*begin,*end) overlap, and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="918" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="918" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga84c826277e41f444dc4f32818bbbd178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(InputIterator begin, InputIterator end, UsePolylines=Tag_true())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>Given a range of polygons or a range of polygons with holes (respectively a range of general polygons or a range of general polygons with holes) determines whether the open polygons (respectively general polygons) in the range have a common point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of the polygons in the input range are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, the input polygons are converted to general polygon with holes , bounded by polylines before the operation is actually performed. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the pairwise intersections of all open polygons or polygons with holes (respectively general polygons or general polygons with holes) in the range [*begin,*end) overlap, and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="944" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="944" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga1bd35113abd947ac462b5d338ffcc0ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) determines whether the open polygons (respectively general polygons) in the two ranges have a common point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the pairwise intersections of all open polygons (respectively general polygons) and polygons with holes (respectively general polygons with holes) in the ranges [*begin1,*end1) and [*begin2,*end2), respectively, overlap, and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="964" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="964" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gabddfb44123eb80d6ddee4e3cf18d39ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, UsePolylines=Tag_true())</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) determines whether the open polygons (respectively general polygons) in the two ranges have a common point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of the polygons in the input ranges are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, the input polygons are converted to general polygon with holes , bounded by polylines before the operation is actually performed. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the pairwise intersections of all open polygons (respectively general polygons) and polygons with holes (respectively general polygons with holes) in the ranges [*begin1,*end1) and [*begin2,*end2), respectively, overlap, and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="994" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="994" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gad003aabaa07bd93090ca827785a0f8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1009" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1009" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gaa3476c1ad65cd3c742a52a9b5574499b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, const GpsTraits &amp;traits, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1022" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1022" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga8255959915dc17b5064c14641d768ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>determines whether two polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1036" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1036" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga581533d4c15b23cc9ce7dfa7eec6bc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>determines whether two polygons with holes intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1049" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1049" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga8b09dbbe610821a4a186f6d4de9a7f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>determines whether two general polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1064" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1064" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga62509b4d07bd4c9f686f0400e8d923b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>determines whether two general polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1080" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1080" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gafba2c15fe9d73648b10bcafa60886a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>determines whether two general polygons intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1096" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1096" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1ga7b0c4d2c7905afcf08a97577b18012eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>determines whether two general polygons with holes intersect in their interior. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> intersect in their interior and <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1111" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gaa7cd339cba1f0c8eb0d337fe9f98790b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(InputIterator begin, InputIterator end, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons or a range of polygons with holes (respectively a range of general polygons or a range of general polygons with holes) determines whether the open polygons (respectively general polygons) in the range have a common point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the pairwise intersections of all open polygons or polygons with holes (respectively general polygons or general polygons with holes) in the range [*begin,*end) overlap, and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1132" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__do__intersect_1gab4896fefa1edd0bdd518623cd7696754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::do_intersect</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, const GpsTraits &amp;traits)</argsstring>
        <name>do_intersect</name>
        <qualifiedname>CGAL::do_intersect</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) determines whether the open polygons (respectively general polygons) in the two ranges have a common point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the pairwise intersections of all open polygons (respectively general polygons) and polygons with holes (respectively general polygons with holes) in the ranges [*begin1,*end1) and [*begin2,*end2), respectively, overlap, and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1153" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gabb75638564c1c3549418fdd661ad8a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the intersection of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1261" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1261" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gac5b1e086db2bbc977df878c07d19abb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the intersection of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundary of <computeroutput>pgn</computeroutput> is treated as a cyclic sequence of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequence of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn</computeroutput> is converted to a general polygon bounded by polylines before the operation is actually performed. Then, the resulting general polygon with holes is converted back to a standard polygon. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn</computeroutput> is used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1285" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1285" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gae916b3ce4ff4f34909c19bd67be6ca0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the intersection of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1300" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1300" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gae3b8f6db76c6b741313016e6aab94e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the intersection of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn</computeroutput> is treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn</computeroutput> is converted to a general polygon with holes bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to a standard polygon with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn</computeroutput> is used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1324" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1324" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gaaa41ece7c8b9000e891cba45eb2cef40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the intersection of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1339" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1339" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga24b18dfe78f8480ae03b9580f85aae4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ctypename</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
          <param>
            <type>ctypename</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>ctypename</type>
            <declname>OutputIterator</declname>
            <defname>OutputIterator</defname>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the intersection of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygons bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1364" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1364" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga13fed3218250b9171f43a0d15fb19fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the intersection of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1379" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1379" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga29fce40369867c424dca950a3fbfdd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the intersection of two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon and a general polygon with holes, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1404" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1404" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gaa2f0ee8ff5c2c8b3576b0c97b1543de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the intersection of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1421" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1421" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gad90719fd1bde6858d7502c1ef6eab96c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the intersection of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1438" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1438" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga00686ff9801e75a7a4889a36e904c18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the intersection of two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1455" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1455" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gac82dfa95eac6bf38b4bd54ea67c7d5ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the intersection of two general polygons with holes and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;Polygon&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1469" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1469" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga7cf52368a2182232b0c86cfa448ec9fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the intersection of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1491" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1491" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga5deedf4ded78a0ed796ef3efaab46b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the intersection of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of the polygons in the input range are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, the input polygons are converted to general polygon with holes , bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1522" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1522" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gad73c25fae144c3187112d6b0749c80b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the intersection of all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1546" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1546" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gabcfd78aa775c495bdf9142e9a6cd0a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the intersection of all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of the polygons in the input ranges are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, the input polygons are converted to general polygon with holes , bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1580" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1580" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga09c55e60dd0e46999efe828964c4d132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the intersection between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1600" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1600" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga5deed25e21150a6524a5aa3e553dc7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the intersection between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1619" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1619" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gaad84f33097c0508e10c219512e3d7513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the intersection between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1638" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1638" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga61a1c9c9ce1393eb84ee1199e8d95a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the intersection between two polygons with holes and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1659" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1659" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gaaaf345b0c8d2ff2fa129f33e446ac92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the intersection between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1679" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1679" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga563341003db39158e0debffb5124cde5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the intersection between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1701" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1701" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1ga810bdbc7a642f259f7ae696485bdbbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the intersection between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1723" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1723" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gaa40356459919791c4f87187458fbd10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the intersection between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;Polygon&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1742" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="1742" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gaf041f057fa244ed9302e0f3d4bb6bd8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the intersection of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1766" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1766" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__intersection_1gab59bf58e434a48f00f1053db84922449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::intersection</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>intersection</name>
        <qualifiedname>CGAL::intersection</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the intersection between all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1792" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="1792" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga8aa9e697fd682c3ced53c1edd7923784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1898" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1898" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga334e7c5fd8e8e4a53136e467ef18f7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res, UsePolylines=Tag_true())</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted into a general polygons bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1919" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1919" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga855f2037b62e27d56c21ec92b3f033ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1931" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1931" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gaea95a5050a7443c28739122d3ac59cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res, UsePolylines=Tag_true())</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted into a general polygon and a general polygon with holes, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1952" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1952" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga163347210ea259c6df0347eb1e82463e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1964" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1964" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gab03b8c93d6bc929c8d3a9f333e937350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res, UsePolylines=Tag_true())</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted into a general polygon with holes and a general polygon, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1985" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1985" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gaab980cc68cb2757faff4e5326df11bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the union of two polygons with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="1997" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="1997" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga02d14be307da585d8171ded4751a27b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res, UsePolylines=Tag_true())</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the union of two polygons with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted into general polygons with holes, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2018" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2018" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gaea940a3165b44c4e5f0c736f8cbddd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the union of two general polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2032" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2032" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gabb13a0ed958cda84ea0e4d2857c9d67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the union of two general polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2046" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2046" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga04b2495f1ca82be730de48e6ccbffe0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;res)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the union of two general polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2060" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2060" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga700b27a94bc6b4cbe6d1a777329a4622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon &gt; &amp;res)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>computes the union of two general polygons with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2071" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2071" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gad52000fb393e22aefbe29eb2842af527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::join</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the union of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2092" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="2092" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gaa3a385b6c8f466cc51b6ac3b41952cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::join</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the union of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of the polygons in the input range are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, the input polygons are converted into general polygon with holes , bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2123" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="2123" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga0bbf6aab7709870294ef349b4079fb02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::join</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the union of all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2147" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="2147" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga440fb77b271ccea5e8d9ae22e6f4af43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2162" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gac70049c0eb9c464c147af6afebd84918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2177" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2177" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gad127768be7599e575e434e6254d9266a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the union of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2192" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2192" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga275f050ff34874d265697a419850e440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon_2&lt; Kernel, Container &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the union of two polygons with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2207" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2207" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga65487c1a2352f3c1cabd43e87a99236a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the union of two general polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2224" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2224" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga3840dc3722ac05eda286e8a9a312be62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the union of two general polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2242" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2242" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gadf31a89eda23b994d3493ef61f4cfd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the union of two general polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2259" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2259" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga8e161db3d1ca8bbd5adb4f76ad2d2ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CGAL::join</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, General_polygon_with_holes_2&lt; Polygon &gt; &amp;res, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the union of two general polygons with holes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting union of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the two input polygons overlap. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2274" column="6" declfile="CGAL/Boolean_set_operations_2.h" declline="2274" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga7a04e91d075a1ed5bdc1593ed15291f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::join</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the union of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2298" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="2298" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1ga64762dd09b09ae2a871a40336354b754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::join</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the union of all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2324" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="2324" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__join_1gaf197dca2f9a0d97e20c22cdc5e18b615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::join</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>join</name>
        <qualifiedname>CGAL::join</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the union of all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of the polygons in the input ranges are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, the input polygons are converted into general polygon with holes , bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2360" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="2360" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gac6162f4d4e8db605d73b5fdb38dbf9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2460" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2460" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gadeda62937eaafcd77aa01d28e319e60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, UsePolylines=Tag_true())</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygons bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2478" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2478" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gaf7907ce485fcbdf49cee892c05eb6ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2488" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2488" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga55460de2f3036bc89af6b01c8658790b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, UsePolylines=Tag_true())</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon and a general polygon with holes, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2507" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2507" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gad9c557e1648d40716b9abde027708784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2516" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2516" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga0f7634119a856871d3fc2d3ffbce3811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, UsePolylines=Tag_true())</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon with holes and a general polygon, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2534" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2534" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga958dd0458d5f10aa115ff69688b58848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2544" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2544" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga81ab5ed55a78dfd3d0aa42373a08aba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, UsePolylines=Tag_true())</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to general polygons with holes, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2563" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2563" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gaf1330835f3c52d47697cc3e5eb60ee92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2574" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2574" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga61106129c24f66f7e77547bc7ed3e009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2585" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2585" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga510d42f9b3c2736653b79e2279464d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2596" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2596" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gace74c04b0a13a369d1ab9182ab347fbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2604" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2604" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gae16559a048d2b5a5221543a28556eb14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2616" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2616" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gafa9dd6e6e93e33359608e7e5d3ff541a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2627" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2627" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga67a05fc6cb5ca5629abfe9462102924d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2638" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2638" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga5a00674bf0c793634b856cfb623a5457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2649" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2649" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gad5c3fff7a78ae422dd323fcaf0410f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2663" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2663" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga6c70fe5e7e2893bea79e627812b64739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2678" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2678" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga330c1a320871c1a88fefc3ae6d1810e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2693" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2693" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gaf97662919e95a45f6ec2033a8a392ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of two polygons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2704" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2704" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga587095916b470ab34916aa43a8ef9046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Point_2 &amp;p, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Point_2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <briefdescription>
<para>computes the relative position of a point and a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the input point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2715" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2715" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gaaaadc38264b92e390f5cd17c89630d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Point_2 &amp;p, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Point_2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <briefdescription>
<para>computes the relative position of a point and a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the input point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2723" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2723" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gab672810feef2a815ff6d20fd8904008c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Point_2 &amp;p, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Point_2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <briefdescription>
<para>computes the relative position of a point and a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the input point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2733" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2733" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga74f660d057ea4c67a1ea6dc12fd141c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Point_2 &amp;p, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Point_2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <briefdescription>
<para>computes the relative position of a point and a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the input point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2741" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2741" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga1de1de1aa06e694353f797bb5d2c0485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Point_2 &amp;p, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Point_2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of a point and a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the input point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2753" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2753" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1gaf7df014dbc4407da83d2a6bb35097f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Point_2 &amp;p, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Point_2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of a point and a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the input point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2764" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2764" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga177523e3bce988fed922d1feb537a8c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Point_2 &amp;p, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Point_2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of a point and a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the input point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2777" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2777" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__oriented__side_1ga6b0ce2a27bfb03f037590c03666805fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>Oriented_side</type>
        <definition>Oriented_side CGAL::oriented_side</definition>
        <argsstring>(const Point_2 &amp;p, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn, const GpsTraits &amp;traits)</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::oriented_side</qualifiedname>
        <param>
          <type>const Point_2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the relative position of a point and a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the input point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn</parametername>
</parameternamelist>
<parameterdescription>
<para>the input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>GpsTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2788" column="15" declfile="CGAL/Boolean_set_operations_2.h" declline="2788" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga6e38c60b6162e8668db48143ed306dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2898" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="2898" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga478f3b112b249ef116474372c723887f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygons bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2923" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="2923" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga252934d81a198c814af7785c07cb91ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2939" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2939" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gabda9901b98cb6e8bc100f3c27d5b1149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon and a general polygon with holes, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2965" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2965" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga01b09dd4cee00db5fae63f1228bfa824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="2981" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="2981" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gabe9535df226d2bd32191ea98f46ee6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to a general polygon with holes and a general polygon, respectively, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3007" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3007" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gaeea0a745895e20b3d3e814a9c821aaa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons with holes and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3024" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3024" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga0f58152c9f24cabd82f2dc6495ca0a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons with holes and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are converted to general polygons with holes, bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3051" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3051" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gab20ccf0a17d45eb5bef0868c69bff723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3069" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3069" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga4aa6bc2fae9799ab688273046bbb11f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3088" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3088" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gad4c3f3fe3bcffa003175ed97431c9156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3107" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3107" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga14e5d9b2215af45f37d2a4469da7ea30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;Polygon&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3123" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga01cc59d8da1f95d9edfd7a550bf7f34b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the symmetric difference of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>A point is contained in the symmetric difference, if and only if it is contained in an odd number of input polygons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3145" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3145" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga6585e27b6fbb9c52bdc589bdd2ee3074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the symmetric difference of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>A point is contained in the symmetric difference, if and only if it is contained in an odd number of input polygons. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of the polygons in the input range are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, the input polygons are converted to general polygon with holes , bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3177" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3177" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gaa3428a73d4d5171afef4f682cd656229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the symmetric difference between all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>A point is contained in the symmetric difference, if and only if it is contained in an odd number of input polygons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3203" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3203" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga5945e932322470a49ce34076ef1645bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename UsePolylines</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi, UsePolylines=Tag_true())</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>UsePolylines</type>
          <defval>Tag_true()</defval>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the symmetric difference between all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>A point is contained in the symmetric difference, if and only if it is contained in an odd number of input polygons. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>UsePolylines</parametername>
</parameternamelist>
<parameterdescription>
<para>determines whether the boundaries of the polygons in the input ranges are treated as cyclic sequences of single ( <formula id="34">$x$</formula>-monotone) segments or as a cyclic sequences of ( <formula id="34">$x$</formula>-monotone) polylines. If substituted with <computeroutput>CGAL::Tag_true</computeroutput>, which is the default, the input polygons are converted to general polygon with holes , bounded by polylines before the operation is actually performed. Then, the resulting general polygons with holes are converted back to standard polygons with holes. If substituted with <computeroutput>CGAL::Tag_false</computeroutput>, <computeroutput>pgn1</computeroutput> and <computeroutput>pgn2</computeroutput> are used as is. Refer to <ref refid="index_1bso_ssectraits_sel" kindref="member">Traits Selection</ref> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3240" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3240" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga43090738e4cc6131b05846a435fa2119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3260" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3260" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga57cd333bb8d34208523329f67fafadaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3279" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gaacb86c2704e14c6ac0be11bcc166dbd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3298" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3298" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gaafcab2613d53302c2d6953805f8de668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn1, const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two polygons with holes and inserts the resulting polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2&lt;Kernel, Container&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3319" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3319" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga077f52402ca65f6152ba895ba7731b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3339" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3339" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga4fb662243e221c248584d04c1f754e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn1, const General_polygon_2&lt; ArrTraits &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3361" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3361" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga5a0297877d0c6db278d9e2594fe204e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrTraits</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const General_polygon_2&lt; ArrTraits &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; General_polygon_2&lt; ArrTraits &gt; &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; <ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt; ArrTraits &gt; &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;<ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref>&lt;ArrTraits&gt;&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>ArrTraits</computeroutput> must be a model of the concept <computeroutput><ref refid="classArrangementDirectionalXMonotoneTraits__2" kindref="compound">ArrangementDirectionalXMonotoneTraits_2</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3383" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3383" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gac9b3e391b2ca3e52396a9ac52378a24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Polygon</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn1, const General_polygon_with_holes_2&lt; Polygon &gt; &amp;pgn2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn1</declname>
        </param>
        <param>
          <type>const General_polygon_with_holes_2&lt; Polygon &gt; &amp;</type>
          <declname>pgn2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>computes the symmetric difference between two general polygons and inserts the resulting general polygons with holes into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pgn1</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1st input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgn2</parametername>
</parameternamelist>
<parameterdescription>
<para>the 2nd input polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>General_polygon_with_holes_2&lt;Polygon&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3402" column="1" declfile="CGAL/Boolean_set_operations_2.h" declline="3402" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1ga38f650438e5dcdc9dfda7ff6bdb2b35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(InputIterator begin, InputIterator end, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) or a range of polygons with holes (respectively general polygons with holes) computes the symmetric difference of all polygons in the range and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>A point is contained in the symmetric difference, if and only if it is contained in an odd number of input polygons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the input range. Its value type is either <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>) or <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3427" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3427" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__symmetric__difference_1gac2646824c981f478e287f6f08ca26c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
          <param>
            <type>typename GpsTraits</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::symmetric_difference</definition>
        <argsstring>(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, InputIterator2 end2, OutputIterator oi, const GpsTraits &amp;traits)</argsstring>
        <name>symmetric_difference</name>
        <qualifiedname>CGAL::symmetric_difference</qualifiedname>
        <param>
          <type>InputIterator1</type>
          <declname>begin1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>end1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>begin2</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>end2</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <param>
          <type>const GpsTraits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Given a range of polygons (respectively general polygons) and a range of polygons with holes (respectively general polygons with holes) computes the symmetric difference between all polygons in the two ranges and inserts the resulting polygons with holes (respectively general polygons with holes) into a container via an output iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>A point is contained in the symmetric difference, if and only if it is contained in an odd number of input polygons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end1</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 1st input range. Its value type is <computeroutput>Polygon_2</computeroutput> (respectively <computeroutput><ref refid="classCGAL_1_1General__polygon__2" kindref="compound">General_polygon_2</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end2</parametername>
</parameternamelist>
<parameterdescription>
<para>the past-the-end iterator of the 2nd input range. Its value type is <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oi</parametername>
</parameternamelist>
<parameterdescription>
<para>the output iterator for the result. Its dereference type must be convertible to <computeroutput>Polygon_with_holes_2</computeroutput> (respectively <computeroutput>General_polygon_with_holes_2</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>a traits object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the past-the-end iterator of the output container. </para>
</simplesect>
<simplesect kind="pre"><para>GpsTraits must be a model of <computeroutput><ref refid="classGeneralPolygonSetTraits__2" kindref="compound">GeneralPolygonSetTraits_2</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Boolean_set_operations_2.h" line="3455" column="16" declfile="CGAL/Boolean_set_operations_2.h" declline="3455" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__boolean__connect__holes_1ga0c649fa14a7f93957b231d9a6bee29ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Kernel</type>
          </param>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator CGAL::connect_holes</definition>
        <argsstring>(const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;pwh, OutputIterator oi)</argsstring>
        <name>connect_holes</name>
        <qualifiedname>CGAL::connect_holes</qualifiedname>
        <param>
          <type>const Polygon_with_holes_2&lt; Kernel, Container &gt; &amp;</type>
          <declname>pwh</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>Connects the holes of <computeroutput>pwh</computeroutput> with its outer boundary. </para>
        </briefdescription>
        <detaileddescription>
<para>This is done by locating the topmost vertex in each hole in the polygon with holes <computeroutput>pwh</computeroutput>, and connecting it by a vertical segment to the polygon feature located directly above it (a vertex or an edge of the outer boundary, or of another hole). The function produces an output sequence of points, which corresponds to the traversal of the vertices of the input polygon; this traversal starts from the outer boundary and moves to the holes using the auxiliary vertical segments that were added to connect the polygon with its holes. The value-type of <computeroutput>oi</computeroutput> is <computeroutput>Kernel::Point_2</computeroutput>. <simplesect kind="pre"><para>The input polygon with holes <computeroutput>pwh</computeroutput> is bounded (namely it has a valid outer boundary). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/connect_holes.h" line="28" column="1" declfile="CGAL/connect_holes.h" declline="28" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygonSet2_1gac5ad1c3be15e88df46b096885a023ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PS2</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const PS2 &amp;ps2, const GSOptions &amp;gso)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const PS2 &amp;</type>
          <declname>ps2</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>opens a new window and draws a 2D polygon set. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the drawing are taken from the optional graphics scene options parameter.</para>
<para>A call to this function blocks the execution of the program until the drawing window is closed. This function requires <computeroutput>CGAL_Qt6</computeroutput>, and is only available if the macro <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput> is defined. Linking with the cmake target <computeroutput>CGAL::CGAL_Basic_viewer</computeroutput> will link with <computeroutput>CGAL_Qt6</computeroutput> and add the definition <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PS2</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Polygon__set__2" kindref="compound">CGAL::Polygon_set_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classGraphicsSceneOptionsPolygonSet2" kindref="compound">GraphicsSceneOptionsPolygonSet2</ref></computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps2</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon set to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class T, class C, class D, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::draw(const CGAL::Polygon_set_2&lt;T, C, D&gt;&amp; ps2, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_set_2.h" line="50" column="6" declfile="CGAL/draw_polygon_set_2.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygonSet2_1ga027a46492fc3797d8beb712ccacc5237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PS2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const PS2 &amp;ps2)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const PS2 &amp;</type>
          <declname>ps2</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawPolygonSet2_1gac5ad1c3be15e88df46b096885a023ff4" kindref="member">CGAL::draw</ref>(ps2, <ref refid="structCGAL_1_1Graphics__scene__options__polygon__set__2" kindref="compound">Graphics_scene_options_polygon_set_2</ref>{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_set_2.h" line="58" column="6" declfile="CGAL/draw_polygon_set_2.h" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygonSet2_1ga32083adbc962ea8ff36bd79f325f2cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PS2</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const PS2 &amp;ps2, CGAL::Graphics_scene &amp;gs, const GSOptions &amp;gso)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const PS2 &amp;</type>
          <declname>ps2</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>adds the vertices, edges and faces of <computeroutput>ps2</computeroutput> into the given graphic scene <computeroutput>gs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the cells are taken from the optional graphics scene options parameter <computeroutput>gso</computeroutput>. Note that <computeroutput>gs</computeroutput> is not cleared before being filled (to enable to draw several data structures in the same basic viewer).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PS2</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Polygon__set__2" kindref="compound">CGAL::Polygon_set_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classGraphicsSceneOptionsPolygonSet2" kindref="compound">GraphicsSceneOptionsPolygonSet2</ref></computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps2</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon set to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gs</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphic scene to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class T, class C, class D, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::add_to_graphics_scene(const CGAL::Polygon_set_2&lt;T, C, D&gt;&amp; ps2, CGAL::Graphics_scene&amp; gs, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_set_2.h" line="83" column="6" declfile="CGAL/draw_polygon_set_2.h" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawPolygonSet2_1gad72ab78fd7b7e504dd1c55082ddd4454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PS2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const PS2 &amp;ps2, CGAL::Graphics_scene &amp;gs)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const PS2 &amp;</type>
          <declname>ps2</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawPolygonSet2_1ga32083adbc962ea8ff36bd79f325f2cdb" kindref="member">CGAL::add_to_graphics_scene</ref>(ps2, gs, <ref refid="structCGAL_1_1Graphics__scene__options__polygon__set__2" kindref="compound">Graphics_scene_options_polygon_set_2</ref>{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_polygon_set_2.h" line="93" column="6" declfile="CGAL/draw_polygon_set_2.h" declline="93" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Boolean_set_operations_2.txt" line="1" column="1"/>
  </compounddef>
</doxygen>
