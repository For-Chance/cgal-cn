<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgConvexHull3Functions" kind="group">
    <compoundname>PkgConvexHull3Functions</compoundname>
    <title>Convex Hull Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3</definition>
        <argsstring>(InputIterator first, InputIterator last, PolygonMesh &amp;pm, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>convex_hull_3</name>
        <qualifiedname>CGAL::convex_hull_3</qualifiedname>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes the convex hull of the set of points in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The polygon mesh <computeroutput>pm</computeroutput> is cleared, then the convex hull is stored in <computeroutput>pm</computeroutput>. Note that the convex hull will be triangulated, that is <computeroutput>pm</computeroutput> will contain only triangular facets. if the convex hull is a point or a segment, endpoints will be added in <computeroutput>pm</computeroutput> as isolated vertices.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with a value type equivalent to <computeroutput>Traits::Point_3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>. For the purposes of checking the postcondition that the convex hull is valid, <computeroutput>Traits</computeroutput> must also be a model of the concept <computeroutput><ref refid="classIsStronglyConvexTraits__3" kindref="compound">IsStronglyConvexTraits_3</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If the kernel <computeroutput>R</computeroutput> of the points determined by the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is a kernel with exact predicates but inexact constructions (in practice we check <computeroutput>R::Has_filtered_predicates_tag</computeroutput> is <computeroutput>Tag_true</computeroutput> and <computeroutput>R::FT</computeroutput> is a floating point type), then the default traits class of <computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> is <computeroutput><ref refid="classCGAL_1_1Convex__hull__traits__3" kindref="compound">Convex_hull_traits_3</ref>&lt;R&gt;</computeroutput>, and <computeroutput>R</computeroutput> otherwise.</para>
<para><simplesect kind="attention"><para>The user must include the header file of the <computeroutput>PolygonMesh</computeroutput> type.</para>
</simplesect>
<bold>Implementation</bold><linebreak/>
</para>
<para>The algorithm implemented by these functions is the quickhull algorithm of Barber <emphasis>et al.</emphasis> <ref refid="citelist_1CITEREF_bdh-qach-96" kindref="member">[1]</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3.h" line="35" column="6" declfile="CGAL/convex_hull_3.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga5ef81d9628c5e3826537d181f50c1121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3</definition>
        <argsstring>(const VertexListGraph &amp;g, PolygonMesh &amp;pm, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>convex_hull_3</name>
        <qualifiedname>CGAL::convex_hull_3</qualifiedname>
        <param>
          <type>const <ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>computes the convex hull of the points associated to the vertices of <computeroutput>g</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The polygon mesh <computeroutput>pm</computeroutput> is cleared, then the convex hull is stored in <computeroutput>pm</computeroutput>. Note that the convex hull will be triangulated, that is <computeroutput>pm</computeroutput> will contain only triangular faces. if the convex hull is a point or a segment, endpoints will be added in <computeroutput>pm</computeroutput> as isolated vertices.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of named parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>PolygonMesh</computeroutput> that will contain the convex hull </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>vertex_point_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map associating points to the vertices of <computeroutput>g</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a class model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>boost::graph_traits&lt;<ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref>&gt;::vertex_descriptor</computeroutput> as key type and <computeroutput>Point_3</computeroutput> as value type </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput>boost::get(CGAL::vertex_point, g)</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Extra: </bold>If this parameter is omitted, an internal property map for <computeroutput><ref refid="group__PkgBGLProperties_1ga247337f62916ade681347fa6f07251e1" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">CGAL::vertex_point_t</ref></computeroutput> must be available in <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput>. </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
<simplesect kind="attention"><para>The user must include the header file of the <computeroutput>PolygonMesh</computeroutput> and <computeroutput><ref refid="classVertexListGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">VertexListGraph</ref></computeroutput> types. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3.h" line="67" column="6" declfile="CGAL/convex_hull_3.h" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga189d9e14a897cace42f0952b0a698455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3</definition>
        <argsstring>(InputIterator first, InputIterator last, Object &amp;ch_object, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>convex_hull_3</name>
        <qualifiedname>CGAL::convex_hull_3</qualifiedname>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>Object &amp;</type>
          <declname>ch_object</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes the convex hull of the set of points in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The result, which may be a point, a segment, a triangle, or a polygon mesh, is stored in <computeroutput>ch_object</computeroutput>. In the case the result is a polygon mesh, the convex hull will be triangulated, that is the polygon mesh will contain only triangular facets.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with a value type equivalent to <computeroutput>Traits::Point_3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>. For the purposes of checking the postcondition that the convex hull is valid, <computeroutput>Traits</computeroutput> must also be a model of the concept <computeroutput><ref refid="classIsStronglyConvexTraits__3" kindref="compound">IsStronglyConvexTraits_3</ref></computeroutput>. Furthermore, <computeroutput>Traits</computeroutput> must define a type <computeroutput>PolygonMesh</computeroutput> that is a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If the kernel <computeroutput>R</computeroutput> of the points determined by the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is a kernel with exact predicates but inexact constructions (in practice we check <computeroutput>R::Has_filtered_predicates_tag</computeroutput> is <computeroutput>Tag_true</computeroutput> and <computeroutput>R::FT</computeroutput> is a floating point type), then the default traits class of <computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> is <computeroutput><ref refid="classCGAL_1_1Convex__hull__traits__3" kindref="compound">Convex_hull_traits_3</ref>&lt;R&gt;</computeroutput>, and <computeroutput>R</computeroutput> otherwise.</para>
<para><simplesect kind="attention"><para>The user must include the header file of the <computeroutput>PolygonMesh</computeroutput> type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3.h" line="96" column="6" declfile="CGAL/convex_hull_3.h" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga52fca4745c2ef0351063fbe66b035fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
          <param>
            <type>class PointRange</type>
          </param>
          <param>
            <type>class PolygonRange class</type>
            <declname>Traits</declname>
            <defname>Traits</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3</definition>
        <argsstring>(InputIterator first, InputIterator last, PointRange &amp;vertices, PolygonRange &amp;faces, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>convex_hull_3</name>
        <qualifiedname>CGAL::convex_hull_3</qualifiedname>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>PointRange &amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>PolygonRange &amp;</type>
          <declname>faces</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes the convex hull of the set of points in the range [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The result, which may be a point, a segment, a triangle, or a triangle mesh, is stored as an indexed triangle soup in a vector of points and a vector of index triples.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with a value type equivalent to <computeroutput>Traits::Point_3</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PointRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concept <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> whose value type is the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is itself a model of the concepts <computeroutput><ref refid="classRandomAccessContainer" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessContainer</ref></computeroutput> and <computeroutput><ref refid="classBackInsertionSequence" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">BackInsertionSequence</ref></computeroutput> whose <computeroutput>value_type</computeroutput> is an unsigned integer type convertible to <computeroutput>std::size_t</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>. For the purposes of checking the postcondition that the convex hull is valid, <computeroutput>Traits</computeroutput> must also be a model of the concept <computeroutput><ref refid="classIsStronglyConvexTraits__3" kindref="compound">IsStronglyConvexTraits_3</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If the kernel <computeroutput>R</computeroutput> of the points determined by the value type of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> is a kernel with exact predicates but inexact constructions (in practice we check <computeroutput>R::Has_filtered_predicates_tag</computeroutput> is <computeroutput>Tag_true</computeroutput> and <computeroutput>R::FT</computeroutput> is a floating point type), then the default traits class of <computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> is <computeroutput><ref refid="classCGAL_1_1Convex__hull__traits__3" kindref="compound">Convex_hull_traits_3</ref>&lt;R&gt;</computeroutput>, and <computeroutput>R</computeroutput> otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3.h" line="129" column="6" declfile="CGAL/convex_hull_3.h" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga3d3caeb206adf06814821c0a066f6a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputRange</type>
          </param>
          <param>
            <type>class <ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
        <definition>OutputIterator CGAL::extreme_points_3</definition>
        <argsstring>(InputRange range, OutputIterator out, const Traits &amp;traits)</argsstring>
        <name>extreme_points_3</name>
        <qualifiedname>CGAL::extreme_points_3</qualifiedname>
        <param>
          <type>InputRange</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>copies in <computeroutput>out</computeroutput> the points on the convex hull of the points in <computeroutput>range</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of <computeroutput>Traits::Point_3</computeroutput>, model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput>. Its iterator type is <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>must be an output iterator where points of type <computeroutput>Traits::Point_3</computeroutput> can be put. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If the kernel <computeroutput>R</computeroutput> of the points from <computeroutput>InputRange</computeroutput> is a kernel with exact predicates but inexact constructions (in practice we check <computeroutput>R::Has_filtered_predicates_tag</computeroutput> is <computeroutput>Tag_true</computeroutput> and <computeroutput>R::FT</computeroutput> is a floating point type), then the default traits class used is <computeroutput><ref refid="classCGAL_1_1Convex__hull__traits__3" kindref="compound">Convex_hull_traits_3</ref>&lt;R&gt;</computeroutput>, and <computeroutput>R</computeroutput> otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of input points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator where the extreme points will be put. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>Traits</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Extreme__points__traits__adapter__3" kindref="compound">CGAL::Extreme_points_traits_adapter_3</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3.h" line="157" column="1" declfile="CGAL/convex_hull_3.h" declline="157" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga4b128ef18382c727ab9072cadac72ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PlaneIterator</type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::halfspace_intersection_3</definition>
        <argsstring>(PlaneIterator begin, PlaneIterator end, PolygonMesh &amp;pm, std::optional&lt; Kernel_traits&lt; std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;::Kernel::Point_3 &gt; &gt; origin=std::nullopt)</argsstring>
        <name>halfspace_intersection_3</name>
        <qualifiedname>CGAL::halfspace_intersection_3</qualifiedname>
        <param>
          <type>PlaneIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>PlaneIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>std::optional&lt; Kernel_traits&lt; std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;<ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">::Kernel::Point_3</ref> &gt;</type>
        </param>
        <param>
          <type>origin</type>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>computes robustly the intersection of the halfspaces defined by the planes contained in the range [<computeroutput>begin</computeroutput>, <computeroutput>end</computeroutput>) without constructing the dual points. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is stored in the polyhedron <computeroutput>pm</computeroutput>. If <computeroutput>origin</computeroutput> is given then it must be a point strictly inside the polyhedron. If an interior point is not given then it is computed using the function <computeroutput><ref refid="group__PkgConvexHull3Functions_1ga52f2f25a8970711508ab905898cdda16" kindref="member">halfspace_intersection_interior_point_3()</ref></computeroutput> based on solving a linear program and thus is slower.</para>
<para>This version does not construct the dual points explicitly but uses a special traits class for the function <computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">CGAL::convex_hull_3()</ref></computeroutput> to handle predicates on dual points without constructing them.</para>
<para>Halfspaces are considered as lower halfspaces, that is if the plane equation is <formula id="0">$ a\, x +b\, y +c\, z + d = 0 $</formula> then the corresponding halfspace is defined by <formula id="1">$ a\, x +b\, y +c\, z + d \le 0 $</formula> .</para>
<para><simplesect kind="pre"><para>The point type of <computeroutput>origin</computeroutput> and the point type of the vertices of <computeroutput>PolygonMesh</computeroutput> must come from the same CGAL Kernel.</para>
</simplesect>
<simplesect kind="pre"><para>if provided, <computeroutput>origin</computeroutput> is inside the intersection of halfspaces defined by the range <computeroutput>[begin, end)</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>The computed intersection must be a bounded convex polyhedron.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PlaneIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator where the value type is a model of the concept <computeroutput><ref refid="classKernel_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel::Plane_3</ref></computeroutput> and this plane type must come from the same kernel as the point type.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull3Functions_1ga46c3a2c8bbfc38f92096a6d818edaf14" kindref="member">halfspace_intersection_with_constructions_3()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_3/dual/halfspace_intersection_3.h" line="27" column="6" declfile="CGAL/Convex_hull_3/dual/halfspace_intersection_3.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga46c3a2c8bbfc38f92096a6d818edaf14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PlaneIterator</type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::halfspace_intersection_with_constructions_3</definition>
        <argsstring>(PlaneIterator pbegin, PlaneIterator pend, PolygonMesh &amp;pm, std::optional&lt; Kernel_traits&lt; std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;::Kernel::Point_3 &gt; &gt; origin=std::nullopt, const Traits &amp;ch_traits=Default_traits)</argsstring>
        <name>halfspace_intersection_with_constructions_3</name>
        <qualifiedname>CGAL::halfspace_intersection_with_constructions_3</qualifiedname>
        <param>
          <type>PlaneIterator</type>
          <declname>pbegin</declname>
        </param>
        <param>
          <type>PlaneIterator</type>
          <declname>pend</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>std::optional&lt; Kernel_traits&lt; std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;<ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">::Kernel::Point_3</ref> &gt;</type>
        </param>
        <param>
          <type>origin</type>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>ch_traits</declname>
          <defval>Default_traits</defval>
        </param>
        <briefdescription>
<para>computes the intersection of the halfspaces defined by the planes contained in the range [<computeroutput>begin</computeroutput>, <computeroutput>end</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The result is stored in the polyhedron <computeroutput>pm</computeroutput>. If <computeroutput>origin</computeroutput> is given then it must be a point strictly inside the polyhedron. If an interior point is not given then it is computed using the function <computeroutput><ref refid="group__PkgConvexHull3Functions_1ga52f2f25a8970711508ab905898cdda16" kindref="member">halfspace_intersection_interior_point_3()</ref></computeroutput> based on solving a linear program and thus is slower. This version constructs explicitly the dual points using the convex hull algorithm parametrized with the given traits class.</para>
<para>Halfspaces are considered as lower halfspaces, that is if the plane equation is <formula id="0">$ a\, x +b\, y +c\, z + d = 0 $</formula> then the corresponding halfspace is defined by <formula id="1">$ a\, x +b\, y +c\, z + d \le 0 $</formula> .</para>
<para><simplesect kind="pre"><para>The value type of <computeroutput>PlaneIterator</computeroutput> and the point type of <computeroutput>origin</computeroutput> must come from the same CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref>. </para>
</simplesect>
<simplesect kind="pre"><para>if provided, <computeroutput>origin</computeroutput> is inside the intersection of halfspaces defined by the range <computeroutput>[begin, end)</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>The computed intersection must be a bounded convex polyhedron.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PlaneIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator where the value type is a model of the concept <computeroutput><ref refid="classKernel_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel::Plane_3</ref></computeroutput> and this plane type must come from the same kernel as the point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classConvexHullTraits__3" kindref="compound">ConvexHullTraits_3</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull3Functions_1ga4b128ef18382c727ab9072cadac72ff6" kindref="member">halfspace_intersection_3()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_3/dual/halfspace_intersection_with_constructions_3.h" line="25" column="6" declfile="CGAL/Convex_hull_3/dual/halfspace_intersection_with_constructions_3.h" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga2750f7f197588ed643679835c748c671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Triangulation</type>
          </param>
          <param>
            <type>class PolygonMesh</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::convex_hull_3_to_face_graph</definition>
        <argsstring>(const Triangulation &amp;T, PolygonMesh &amp;pm)</argsstring>
        <name>convex_hull_3_to_face_graph</name>
        <qualifiedname>CGAL::convex_hull_3_to_face_graph</qualifiedname>
        <param>
          <type>const Triangulation &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>PolygonMesh &amp;</type>
          <declname>pm</declname>
        </param>
        <briefdescription>
<para>fills a polyhedron with the convex hull of a set of 3D points contained in a 3D triangulation of CGAL. </para>
        </briefdescription>
        <detaileddescription>
<para>The polyhedron <computeroutput>pm</computeroutput> is cleared and the convex hull of the set of 3D points is stored in <computeroutput>pm</computeroutput>.</para>
<para><simplesect kind="pre"><para><computeroutput>T.dimension()</computeroutput>==3.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Triangulation</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a CGAL 3D triangulation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolygonMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a model of the concept <computeroutput><ref refid="classMutableFaceGraph" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">MutableFaceGraph</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgConvexHull3Functions_1gadc8318947c2133e56b2e56171b2ecd7d" kindref="member">convex_hull_3()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgTriangulation3Ref_1ga53546af7121912bb59adcb8801a3e663" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_3.tag">link_to_face_graph()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/convex_hull_3_to_face_graph.h" line="20" column="6" declfile="CGAL/convex_hull_3_to_face_graph.h" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga82c9bd5f0954c464adc86a8490a7b172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointPropertyMap</type>
          </param>
          <param>
            <type>class Base_traits</type>
          </param>
        </templateparamlist>
        <type>Extreme_points_traits_adapter_3&lt; PointPropertyMap, Base_traits &gt;</type>
        <definition>Extreme_points_traits_adapter_3&lt; PointPropertyMap, Base_traits &gt; CGAL::make_extreme_points_traits_adapter</definition>
        <argsstring>(const PointPropertyMap &amp;pmap, Base_traits traits)</argsstring>
        <name>make_extreme_points_traits_adapter</name>
        <qualifiedname>CGAL::make_extreme_points_traits_adapter</qualifiedname>
        <param>
          <type>const PointPropertyMap &amp;</type>
          <declname>pmap</declname>
        </param>
        <param>
          <type>Base_traits</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput><ref refid="classCGAL_1_1Extreme__points__traits__adapter__3" kindref="compound">Extreme_points_traits_adapter_3</ref>&lt;PointPropertyMap, Base_traits&gt;(pmap, traits)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Extreme_points_traits_adapter_3.h" line="52" column="1" declfile="CGAL/Extreme_points_traits_adapter_3.h" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgConvexHull3Functions_1ga52f2f25a8970711508ab905898cdda16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PlaneIterator</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; typename Kernel_traits&lt; typename std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;<ref refid="classKernel_1_1Point__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">::Kernel::Point_3</ref> &gt;</type>
        <definition>std::optional&lt; typename Kernel_traits&lt; typename std::iterator_traits&lt; PlaneIterator &gt;::value_type &gt;::Kernel::Point_3 &gt; CGAL::halfspace_intersection_interior_point_3</definition>
        <argsstring>(PlaneIterator begin, PlaneIterator end)</argsstring>
        <name>halfspace_intersection_interior_point_3</name>
        <qualifiedname>CGAL::halfspace_intersection_interior_point_3</qualifiedname>
        <param>
          <type>PlaneIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>PlaneIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>computes a point belonging to the intersection of the halfspaces defined by the planes contained in the range <computeroutput>[begin, end)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the intersection is empty, <computeroutput>std::nullopt</computeroutput> is returned.</para>
<para><simplesect kind="attention"><para>Halfspaces are considered as lower halfspaces that is to say if the plane&apos;s equation is <formula id="0">$ a\, x +b\, y +c\, z + d = 0 $</formula> then the corresponding halfspace is defined by <formula id="1">$ a\, x +b\, y +c\, z + d \le 0 $</formula> .</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PlaneIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type being a <computeroutput><ref refid="classCGAL_1_1Plane__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Plane_3</ref></computeroutput> object from CGAL <ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Convex_hull_3/dual/halfspace_intersection_interior_point_3.h" line="177" column="1" bodyfile="CGAL/Convex_hull_3/dual/halfspace_intersection_interior_point_3.h" bodystart="177" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The function <computeroutput>convex_hull_3()</computeroutput> computes the convex hull of a given set of three-dimensional points. </para>
    </briefdescription>
    <detaileddescription>
<para>Two versions of this function are available. The first can be used when it is known that the result will be a polyhedron and the second when a degenerate hull may also be possible. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
