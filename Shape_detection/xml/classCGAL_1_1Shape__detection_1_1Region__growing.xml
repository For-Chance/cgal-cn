<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Shape__detection_1_1Region__growing" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Shape_detection::Region_growing</compoundname>
    <includes local="no">CGAL/Shape_detection/Region_growing/Region_growing.h</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classRegionType" kindref="compound">RegionType</ref></type>
      </param>
      <param>
        <type>typename RegionMap</type>
        <defval>typename <ref refid="classRegionType_1af7195f02b818765137fe39bba8ac2e77" kindref="member">RegionType::Region_index_map</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a083c6d9fb07db13f3a773d1d72168c07" prot="public" static="no">
        <type>typename <ref refid="classRegionType_1af6081991e34006bdd86912c7c7279c91" kindref="member">RegionType::Item</ref></type>
        <definition>using CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Item =  typename RegionType::Item</definition>
        <argsstring></argsstring>
        <name>Item</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Item</qualifiedname>
        <briefdescription>
<para>Item type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="82" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a6bd50b59bd9e0a7bcd7f604ca6940c3b" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a083c6d9fb07db13f3a773d1d72168c07" kindref="member">Item</ref> &gt;</type>
        <definition>using CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Region =  std::vector&lt;Item&gt;</definition>
        <argsstring></argsstring>
        <name>Region</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Region</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="83" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Region__growing_1aaa400105272ad8b86340ee027b375ac8" prot="public" static="no">
        <type>std::pair&lt; typename Region_type::Primitive, Region &gt;</type>
        <definition>using CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Primitive_and_region =  std::pair&lt;typename Region_type::Primitive, Region&gt;</definition>
        <argsstring></argsstring>
        <name>Primitive_and_region</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Primitive_and_region</qualifiedname>
        <briefdescription>
<para>Primitive and region type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="86" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Region__growing_1ac90f3d02c68c3f4037fc98ba1c38ba74" prot="public" static="no">
        <type>RegionMap</type>
        <definition>using CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Region_map =  RegionMap</definition>
        <argsstring></argsstring>
        <name>Region_map</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Region_map</qualifiedname>
        <briefdescription>
<para>Item to region property map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="89" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a257fa6a7eb4b59c37cc25ce55c9c8455" prot="private" static="no">
        <type>std::queue&lt; <ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a083c6d9fb07db13f3a773d1d72168c07" kindref="member">Item</ref> &gt;</type>
        <definition>using CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Running_queue =  std::queue&lt;Item&gt;</definition>
        <argsstring></argsstring>
        <name>Running_queue</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Running_queue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="92" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Initialization (RegionMap is the default type)</header>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1aea396deb6bddf0dec9b8a76ad21b2feb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename ItemMap</type>
            <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Region_growing</definition>
        <argsstring>(const InputRange &amp;input_range, NeighborQuery &amp;neighbor_query, RegionType &amp;region_type, ItemMap item_map=ItemMap())</argsstring>
        <name>Region_growing</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Region_growing</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref> &amp;</type>
          <declname>neighbor_query</declname>
        </param>
        <param>
          <type><ref refid="classRegionType" kindref="compound">RegionType</ref> &amp;</type>
          <declname>region_type</declname>
        </param>
        <param>
          <type>ItemMap</type>
          <declname>item_map</declname>
          <defval>ItemMap()</defval>
        </param>
        <briefdescription>
<para>initializes the region growing algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>InputRange::const_iterator</computeroutput> as key type and <computeroutput>Item</computeroutput> as value type. A default can be deduced using the value type of <computeroutput>InputRange</computeroutput> and <computeroutput>Item</computeroutput> to be either <computeroutput><ref refid="structCGAL_1_1Dereference__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Dereference_property_map</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of input items for region growing.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbor_query</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput> that is used internally to access item&apos;s neighbors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_type</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput><ref refid="classRegionType" kindref="compound">RegionType</ref></computeroutput> that is used internally to control if items form a valid region type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of the property map to retrieve items from input values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>input_range.size() &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="126" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="126" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1ada2352e820bebcebdbcc89001359da15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename SeedRange</type>
          </param>
          <param>
            <type>typename ItemMap</type>
            <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Region_growing</definition>
        <argsstring>(const InputRange &amp;input_range, SeedRange &amp;seed_range, NeighborQuery &amp;neighbor_query, RegionType &amp;region_type, ItemMap item_map=ItemMap())</argsstring>
        <name>Region_growing</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Region_growing</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>SeedRange &amp;</type>
          <declname>seed_range</declname>
        </param>
        <param>
          <type><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref> &amp;</type>
          <declname>neighbor_query</declname>
        </param>
        <param>
          <type><ref refid="classRegionType" kindref="compound">RegionType</ref> &amp;</type>
          <declname>region_type</declname>
        </param>
        <param>
          <type>ItemMap</type>
          <declname>item_map</declname>
          <defval>ItemMap()</defval>
        </param>
        <briefdescription>
<para>initializes the region growing algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SeedRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>Item</computeroutput> as value type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>InputRange::const_iterator</computeroutput> as key type and <computeroutput>Item</computeroutput> as value type. A default can be deduced using the value type of <computeroutput>InputRange</computeroutput> and <computeroutput>Item</computeroutput> to be either <computeroutput><ref refid="structCGAL_1_1Dereference__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Dereference_property_map</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of input items for region growing</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbor_query</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput> that is used internally to access item&apos;s neighbors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_type</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput><ref refid="classRegionType" kindref="compound">RegionType</ref></computeroutput> that is used internally to control if items form a valid region type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of <computeroutput>Item</computeroutput> that is used as seeds for the region growing. Defaults to the full input_range.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of the property map to retrieve items from input values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>input_range.size() &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="189" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="189" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Initialization (RegionMap is a user provided type)</header>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a3e77892d6cd08c57b042ca67c421b6b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename ItemMap</type>
            <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Region_growing</definition>
        <argsstring>(const InputRange &amp;input_range, NeighborQuery &amp;neighbor_query, RegionType &amp;region_type, Region_map rm, ItemMap item_map=ItemMap())</argsstring>
        <name>Region_growing</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Region_growing</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref> &amp;</type>
          <declname>neighbor_query</declname>
        </param>
        <param>
          <type><ref refid="classRegionType" kindref="compound">RegionType</ref> &amp;</type>
          <declname>region_type</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1ac90f3d02c68c3f4037fc98ba1c38ba74" kindref="member">Region_map</ref></type>
          <declname>rm</declname>
        </param>
        <param>
          <type>ItemMap</type>
          <declname>item_map</declname>
          <defval>ItemMap()</defval>
        </param>
        <briefdescription>
<para>initializes the region growing algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>InputRange::const_iterator</computeroutput> as key type and <computeroutput>Item</computeroutput> as value type. A default can be deduced using the value type of <computeroutput>InputRange</computeroutput> and <computeroutput>Item</computeroutput> to be either <computeroutput><ref refid="structCGAL_1_1Dereference__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Dereference_property_map</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of input items for region growing.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbor_query</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput> that is used internally to access item&apos;s neighbors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_type</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput><ref refid="classRegionType" kindref="compound">RegionType</ref></computeroutput> that is used internally to control if items form a valid region type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of the property map to retrieve items from input values</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>external property map that will be filled when calling <computeroutput><ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a4b057b385a249d3bef2ceef7ed2bb8df" kindref="member">detect()</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>input_range.size() &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="253" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="253" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a14afc8100c9ffad4c736b6f77d878307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename SeedRange</type>
          </param>
          <param>
            <type>typename ItemMap</type>
            <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::Region_growing</definition>
        <argsstring>(const InputRange &amp;input_range, SeedRange &amp;seed_range, NeighborQuery &amp;neighbor_query, RegionType &amp;region_type, Region_map rm, ItemMap item_map=ItemMap())</argsstring>
        <name>Region_growing</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::Region_growing</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>SeedRange &amp;</type>
          <declname>seed_range</declname>
        </param>
        <param>
          <type><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref> &amp;</type>
          <declname>neighbor_query</declname>
        </param>
        <param>
          <type><ref refid="classRegionType" kindref="compound">RegionType</ref> &amp;</type>
          <declname>region_type</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1ac90f3d02c68c3f4037fc98ba1c38ba74" kindref="member">Region_map</ref></type>
          <declname>rm</declname>
        </param>
        <param>
          <type>ItemMap</type>
          <declname>item_map</declname>
          <defval>ItemMap()</defval>
        </param>
        <briefdescription>
<para>initializes the region growing algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SeedRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> with <computeroutput>Item</computeroutput> as value type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>InputRange::const_iterator</computeroutput> as key type and <computeroutput>Item</computeroutput> as value type. A default can be deduced using the value type of <computeroutput>InputRange</computeroutput> and <computeroutput>Item</computeroutput> to be either <computeroutput><ref refid="structCGAL_1_1Dereference__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Dereference_property_map</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of input items for region growing</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbor_query</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput> that is used internally to access item&apos;s neighbors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region_type</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput><ref refid="classRegionType" kindref="compound">RegionType</ref></computeroutput> that is used internally to control if items form a valid region type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of <computeroutput>Item</computeroutput> that is used as seeds for the region growing. Defaults to the full input_range.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of the property map to retrieve items from input values</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>external property map that will be filled when calling <computeroutput><ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a4b057b385a249d3bef2ceef7ed2bb8df" kindref="member">detect()</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>input_range.size() &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="315" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="315" bodyend="340"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Detection</header>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a4b057b385a249d3bef2ceef7ed2bb8df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PrimitiveAndRegionOutputIterator</type>
            <defval><ref refid="structCGAL_1_1Emptyset__iterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Emptyset_iterator</ref></defval>
          </param>
        </templateparamlist>
        <type>PrimitiveAndRegionOutputIterator</type>
        <definition>PrimitiveAndRegionOutputIterator CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::detect</definition>
        <argsstring>(PrimitiveAndRegionOutputIterator region_out=PrimitiveAndRegionOutputIterator())</argsstring>
        <name>detect</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::detect</qualifiedname>
        <param>
          <type>PrimitiveAndRegionOutputIterator</type>
          <declname>region_out</declname>
          <defval>PrimitiveAndRegionOutputIterator()</defval>
        </param>
        <briefdescription>
<para>runs the region growing algorithm and fills an output iterator with the fitted primitive and their region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PrimitiveAndRegionOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> whose value type is <computeroutput>Primitive_and_region</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region_out</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator of type <computeroutput>PrimitiveAndRegionOutputIterator</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>past-the-end position in the output sequence </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="360" column="38" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="360" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a4390e718e2b4684550381c5d3e70fdaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1ac90f3d02c68c3f4037fc98ba1c38ba74" kindref="member">Region_map</ref> &amp;</type>
        <definition>const Region_map &amp; CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::region_map</definition>
        <argsstring>()</argsstring>
        <name>region_map</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::region_map</qualifiedname>
        <briefdescription>
<para>provides a property map that provides the region index (or std::size_t(-1)) for each input element. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Property map that maps each iterator of the input range to a region index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="395" column="22" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="395" bodyend="397"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Unassigned Items</header>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1ae45cf530de67838b19ee26ab37879132" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename ItemOutputIterator</type>
          </param>
          <param>
            <type>typename ItemMap</type>
            <defval><ref refid="structCGAL_1_1Default" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Default</ref></defval>
          </param>
        </templateparamlist>
        <type>ItemOutputIterator</type>
        <definition>ItemOutputIterator CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::unassigned_items</definition>
        <argsstring>(const InputRange &amp;input_range, ItemOutputIterator output, ItemMap item_map=ItemMap()) const</argsstring>
        <name>unassigned_items</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::unassigned_items</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>ItemOutputIterator</type>
          <declname>output</declname>
        </param>
        <param>
          <type>ItemMap</type>
          <declname>item_map</declname>
          <defval>ItemMap()</defval>
        </param>
        <briefdescription>
<para>fills an output iterator with all unassigned items. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ItemOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> whose value type is <computeroutput>Item</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ItemMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> with <computeroutput>InputRange::const_iterator</computeroutput> as key type and <computeroutput>Item</computeroutput> as value type. A default can be deduced using the value type of <computeroutput>InputRange</computeroutput> and <computeroutput>Item</computeroutput> to be either <computeroutput><ref refid="structCGAL_1_1Dereference__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Dereference_property_map</ref></computeroutput> or <computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of input items for region growing</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator of type <computeroutput>PrimitiveAndRegionOutputIterator</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_map</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of the property map to retrieve items from input values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>past-the-end position in the output sequence </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="430" column="24" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="430" bodyend="442"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Region__growing_1ab2b5cfba88fb4aef17289177ba7327d0" prot="private" static="no">
        <type>std::unordered_set&lt; typename Region_type::Item, internal::hash_item&lt; typename Region_type::Item &gt; &gt;</type>
        <definition>using CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::VisitedMap =  std::unordered_set&lt;typename Region_type::Item, internal::hash_item&lt;typename Region_type::Item&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>VisitedMap</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::VisitedMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="478" column="5" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a4b61801f729bab9ca247f474d1e8d206" prot="private" static="no" mutable="no">
        <type>Neighbor_query &amp;</type>
        <definition>Neighbor_query&amp; CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::m_neighbor_query</definition>
        <argsstring></argsstring>
        <name>m_neighbor_query</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::m_neighbor_query</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="471" column="20" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a877127bca78f5c62f8f73c10bed3476b" prot="private" static="no" mutable="no">
        <type>Region_type &amp;</type>
        <definition>Region_type&amp; CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::m_region_type</definition>
        <argsstring></argsstring>
        <name>m_region_type</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::m_region_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="472" column="17" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a8f002494447896032df7c5500a12daa9" prot="private" static="no" mutable="no">
        <type><ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1ac90f3d02c68c3f4037fc98ba1c38ba74" kindref="member">Region_map</ref></type>
        <definition>Region_map CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::m_region_map</definition>
        <argsstring></argsstring>
        <name>m_region_map</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::m_region_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="473" column="16" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Shape__detection_1_1Region__growing_1aee22f9fad65a17100cbdd53c51ae06c4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a083c6d9fb07db13f3a773d1d72168c07" kindref="member">Item</ref> &gt;</type>
        <definition>std::vector&lt;Item&gt; CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::m_seed_range</definition>
        <argsstring></argsstring>
        <name>m_seed_range</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::m_seed_range</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="475" column="17" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Shape__detection_1_1Region__growing_1af2db8a1ad4ba25e546cba62cc95bf84a" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::m_nb_regions</definition>
        <argsstring></argsstring>
        <name>m_nb_regions</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::m_nb_regions</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="476" column="17" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Shape__detection_1_1Region__growing_1aa8a970e92d7834919d2e117a03e73b12" prot="private" static="no" mutable="no">
        <type>VisitedMap</type>
        <definition>VisitedMap CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::m_visited_map</definition>
        <argsstring></argsstring>
        <name>m_visited_map</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::m_visited_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="479" column="16" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a3bcd8229bcb0bc4c4374a4c22ff43451" prot="private" static="no" mutable="no">
        <type><ref refid="structCGAL_1_1Boolean__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">Boolean_property_map</ref>&lt; VisitedMap &gt;</type>
        <definition>Boolean_property_map&lt;VisitedMap&gt; CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::m_visited</definition>
        <argsstring></argsstring>
        <name>m_visited</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::m_visited</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="480" column="26" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a114b90f2b3bd27a7c55aed65859e5c25" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::fill_region_map</definition>
        <argsstring>(std::size_t idx, const Region &amp;region)</argsstring>
        <name>fill_region_map</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::fill_region_map</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const Region &amp;</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="482" column="10" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="482" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a62a8fb311efc6719845e49cc4f179f29" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::propagate</definition>
        <argsstring>(const Item &amp;seed, Region &amp;region)</argsstring>
        <name>propagate</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::propagate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a083c6d9fb07db13f3a773d1d72168c07" kindref="member">Item</ref> &amp;</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>Region &amp;</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="489" column="10" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="489" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Region__growing_1a3852e5a2367a4985058b5b9a699cd910" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Shape_detection::Region_growing&lt; NeighborQuery, RegionType, RegionMap &gt;::revert</definition>
        <argsstring>(const Region &amp;region)</argsstring>
        <name>revert</name>
        <qualifiedname>CGAL::Shape_detection::Region_growing::revert</qualifiedname>
        <param>
          <type>const Region &amp;</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="596" column="10" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="596" bodyend="599"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main class/entry point for running the region growing algorithm. </para>
    </briefdescription>
    <detaileddescription>
<para>This version of the region growing algorithm enables to detect regions in a set of user-defined items<itemizedlist>
<listitem><para>given a way to access neighbors of each item via the <computeroutput><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput> parameter class and</para>
</listitem><listitem><para>control if items form a valid region type via the <computeroutput><ref refid="classRegionType" kindref="compound">RegionType</ref></computeroutput> parameter class,</para>
</listitem><listitem><para>optional <computeroutput>SeedRange</computeroutput> defining the seeding order of items and skipping unnecessary items.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classNeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classRegionType" kindref="compound">RegionType</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classRegionType" kindref="compound">RegionType</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RegionMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classReadWritePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadWritePropertyMap</ref></computeroutput> whose key type is <computeroutput>Item</computeroutput> and value type is <computeroutput>std::size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="CGAL/Shape_detection/Region_growing/Region_growing.h" line="72" column="3" bodyfile="CGAL/Shape_detection/Region_growing/Region_growing.h" bodystart="72" bodyend="600"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a4b057b385a249d3bef2ceef7ed2bb8df" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>detect</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a114b90f2b3bd27a7c55aed65859e5c25" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>fill_region_map</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a083c6d9fb07db13f3a773d1d72168c07" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Item</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1af2db8a1ad4ba25e546cba62cc95bf84a" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>m_nb_regions</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a4b61801f729bab9ca247f474d1e8d206" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>m_neighbor_query</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a8f002494447896032df7c5500a12daa9" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>m_region_map</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a877127bca78f5c62f8f73c10bed3476b" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>m_region_type</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1aee22f9fad65a17100cbdd53c51ae06c4" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>m_seed_range</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a3bcd8229bcb0bc4c4374a4c22ff43451" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>m_visited</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1aa8a970e92d7834919d2e117a03e73b12" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>m_visited_map</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1aaa400105272ad8b86340ee027b375ac8" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Primitive_and_region</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a62a8fb311efc6719845e49cc4f179f29" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>propagate</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a6bd50b59bd9e0a7bcd7f604ca6940c3b" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Region</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1aea396deb6bddf0dec9b8a76ad21b2feb" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Region_growing</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1ada2352e820bebcebdbcc89001359da15" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Region_growing</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a3e77892d6cd08c57b042ca67c421b6b2" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Region_growing</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a14afc8100c9ffad4c736b6f77d878307" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Region_growing</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a4390e718e2b4684550381c5d3e70fdaf" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>region_map</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1ac90f3d02c68c3f4037fc98ba1c38ba74" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Region_map</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a3852e5a2367a4985058b5b9a699cd910" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>revert</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1a257fa6a7eb4b59c37cc25ce55c9c8455" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>Running_queue</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1ae45cf530de67838b19ee26ab37879132" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>unassigned_items</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Region__growing_1ab2b5cfba88fb4aef17289177ba7327d0" prot="private" virt="non-virtual"><scope>CGAL::Shape_detection::Region_growing</scope><name>VisitedMap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
