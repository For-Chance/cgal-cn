<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Shape__detection_1_1Shape__base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>CGAL::Shape_detection::Shape_base</compoundname>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection_1_1Cone" prot="public" virt="non-virtual">CGAL::Shape_detection::Cone&lt; Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection_1_1Cylinder" prot="public" virt="non-virtual">CGAL::Shape_detection::Cylinder&lt; Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection_1_1Plane" prot="public" virt="non-virtual">CGAL::Shape_detection::Plane&lt; Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection_1_1Sphere" prot="public" virt="non-virtual">CGAL::Shape_detection::Sphere&lt; Traits &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Shape__detection_1_1Torus" prot="public" virt="non-virtual">CGAL::Shape_detection::Torus&lt; Traits &gt;</derivedcompoundref>
    <includes local="no">CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h</includes>
    <templateparamlist>
      <param>
        <type>class Traits</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a951b6ff1055dbb841e6795de62ba7317" prot="public" static="no">
        <type>Traits::FT</type>
        <definition>typedef Traits::FT CGAL::Shape_detection::Shape_base&lt; Traits &gt;::FT</definition>
        <argsstring></argsstring>
        <name>FT</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::FT</qualifiedname>
        <briefdescription>
<para>Number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="69" column="33" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a6ebc83fd591b472714eebfb420b1e4b5" prot="public" static="no">
        <type>Traits::Point_3</type>
        <definition>typedef Traits::Point_3 CGAL::Shape_detection::Shape_base&lt; Traits &gt;::Point_3</definition>
        <argsstring></argsstring>
        <name>Point_3</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::Point_3</qualifiedname>
        <briefdescription>
<para>Point type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="70" column="38" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Shape__detection_1_1Shape__base_1ac3191429dc84ca1d4dd2385f77242d7e" prot="public" static="no">
        <type>Traits::Vector_3</type>
        <definition>typedef Traits::Vector_3 CGAL::Shape_detection::Shape_base&lt; Traits &gt;::Vector_3</definition>
        <argsstring></argsstring>
        <name>Vector_3</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::Vector_3</qualifiedname>
        <briefdescription>
<para>Vector type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="71" column="39" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1ae59d77f8af2e00e2ed99a301c67e693d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CGAL::Shape_detection::Shape_base&lt; Traits &gt;::Shape_base</definition>
        <argsstring>()</argsstring>
        <name>Shape_base</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::Shape_base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="74" column="5" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a1c6bd3ac67a56b1c4b1913fa302d0539" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual CGAL::Shape_detection::Shape_base&lt; Traits &gt;::~Shape_base</definition>
        <argsstring>()</argsstring>
        <name>~Shape_base</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::~Shape_base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="83" column="13" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1ad8e6fa8c2ace2bf8835abdccacb50782" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::size_t &gt; &amp;</type>
        <definition>const std::vector&lt; std::size_t &gt; &amp; CGAL::Shape_detection::Shape_base&lt; Traits &gt;::indices_of_assigned_points</definition>
        <argsstring>() const</argsstring>
        <name>indices_of_assigned_points</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::indices_of_assigned_points</qualifiedname>
        <briefdescription>
<para>Returns the indices of the points in the input range assigned to this shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="88" column="24" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1ac1bbd0a749fbc118fe266039fcb88b09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string CGAL::Shape_detection::Shape_base&lt; Traits &gt;::info</definition>
        <argsstring>() const</argsstring>
        <name>info</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::info</qualifiedname>
        <briefdescription>
<para>Returns a string containing the shape type and the numerical parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="96" column="25" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1ab04f03619adb9bee6112f074ba2508ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a951b6ff1055dbb841e6795de62ba7317" kindref="member">FT</ref></type>
        <definition>virtual FT CGAL::Shape_detection::Shape_base&lt; Traits &gt;::squared_distance</definition>
        <argsstring>(const Point_3 &amp;p) const =0</argsstring>
        <name>squared_distance</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::squared_distance</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a6ebc83fd591b472714eebfb420b1e4b5" kindref="member">Point_3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Computes the squared Euclidean distance from the query point <computeroutput>p</computeroutput> to the shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="103" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a4f4e29f440b04dccebd9597f98bb3b2e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CGAL::Shape_detection::Shape_base&lt; Traits &gt;::create_shape</definition>
        <argsstring>(const std::vector&lt; std::size_t &gt; &amp;indices)=0</argsstring>
        <name>create_shape</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::create_shape</qualifiedname>
        <param>
          <type>const std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Constructs the shape based on a minimal set of samples from the input data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="111" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a48186a53453c9a0c11cfebc8dcd399eb" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t CGAL::Shape_detection::Shape_base&lt; Traits &gt;::connected_component</definition>
        <argsstring>(std::vector&lt; std::size_t &gt; &amp;indices, FT cluster_epsilon)</argsstring>
        <name>connected_component</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::connected_component</qualifiedname>
        <param>
          <type>std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a951b6ff1055dbb841e6795de62ba7317" kindref="member">FT</ref></type>
          <declname>cluster_epsilon</declname>
        </param>
        <briefdescription>
<para>Determines the largest cluster of inlier points. </para>
        </briefdescription>
        <detaileddescription>
<para>A point belongs to a cluster if there is a point in the cluster closer than <computeroutput>cluster_epsilon</computeroutput> distance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="117" column="25" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="117" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a5f4db26dacafe017f1cb1b79c456e6be" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t CGAL::Shape_detection::Shape_base&lt; Traits &gt;::connected_component_kdTree</definition>
        <argsstring>(std::vector&lt; std::size_t &gt; &amp;indices, FT cluster_epsilon)</argsstring>
        <name>connected_component_kdTree</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::connected_component_kdTree</qualifiedname>
        <param>
          <type>std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a951b6ff1055dbb841e6795de62ba7317" kindref="member">FT</ref></type>
          <declname>cluster_epsilon</declname>
        </param>
        <briefdescription>
<para>Determines the largest cluster with a point-to-point distance not larger than <computeroutput>cluster_epsilon</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This general version performs a region growing within the inliers using a Kd-tree. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="269" column="17" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="269" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1acd85efee7ba4de1539c379cc0aef7aed" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CGAL::Shape_detection::Shape_base&lt; Traits &gt;::squared_distance</definition>
        <argsstring>(const std::vector&lt; std::size_t &gt; &amp;indices, std::vector&lt; FT &gt; &amp;distances) const =0</argsstring>
        <name>squared_distance</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::squared_distance</qualifiedname>
        <param>
          <type>const std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a951b6ff1055dbb841e6795de62ba7317" kindref="member">FT</ref> &gt; &amp;</type>
          <declname>distances</declname>
        </param>
        <briefdescription>
<para>Computes the squared Euclidean distance from a set of points to the shape. </para>
        </briefdescription>
        <detaileddescription>
<para>The distances will be stored in the so called parameter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="356" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a07f487f782693af3fa42a29f9ad14a97" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CGAL::Shape_detection::Shape_base&lt; Traits &gt;::cos_to_normal</definition>
        <argsstring>(const std::vector&lt; std::size_t &gt; &amp;indices, std::vector&lt; FT &gt; &amp;angles) const =0</argsstring>
        <name>cos_to_normal</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::cos_to_normal</qualifiedname>
        <param>
          <type>const std::vector&lt; std::size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a951b6ff1055dbb841e6795de62ba7317" kindref="member">FT</ref> &gt; &amp;</type>
          <declname>angles</declname>
        </param>
        <briefdescription>
<para>Computes the deviation of the point normal from the surface normal at the projected point in form of the dot product and writes the result into the provided <computeroutput>angles</computeroutput> vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="364" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1afba75428e79da4371347314858440a41" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t CGAL::Shape_detection::Shape_base&lt; Traits &gt;::minimum_sample_size</definition>
        <argsstring>() const =0</argsstring>
        <name>minimum_sample_size</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::minimum_sample_size</qualifiedname>
        <briefdescription>
<para>Returns minimal number of sample points required for construction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="370" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a06b467e120347afe63016a0cc951b370" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::property_traits&lt; typenameTraits::Point_map &gt;::reference</type>
        <definition>boost::property_traits&lt; typenameTraits::Point_map &gt;::reference CGAL::Shape_detection::Shape_base&lt; Traits &gt;::point</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>point</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::point</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves the point location from its index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="376" column="5" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="376" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1a0e27838859722e7cf42bdce04942b53d" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::property_traits&lt; typenameTraits::Normal_map &gt;::reference</type>
        <definition>boost::property_traits&lt; typenameTraits::Normal_map &gt;::reference CGAL::Shape_detection::Shape_base&lt; Traits &gt;::normal</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>normal</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::normal</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves the normal vector from its index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="384" column="5" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="384" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__detection_1_1Shape__base_1ad90f27aef6585a6e5c67aa01bf11feee" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Traits &amp;</type>
        <definition>const Traits &amp; CGAL::Shape_detection::Shape_base&lt; Traits &gt;::traits</definition>
        <argsstring>() const</argsstring>
        <name>traits</name>
        <qualifiedname>CGAL::Shape_detection::Shape_base::traits</qualifiedname>
        <briefdescription>
<para>Retrieves the traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="392" column="5" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="392" bodyend="395"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for shape types that defines an interface to construct a shape from a set of points and to compute the point distance and normal deviation from the surface normal. </para>
    </briefdescription>
    <detaileddescription>
<para>It is used during detection to identify the inliers from the input data and to extract the largest connected component in the inlier points. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CGAL::Shape_detection::Cone&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection_1_1Cone"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>CGAL::Shape_detection::Cylinder&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection_1_1Cylinder"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>CGAL::Shape_detection::Plane&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection_1_1Plane"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>CGAL::Shape_detection::Shape_base&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection_1_1Shape__base"/>
      </node>
      <node id="5">
        <label>CGAL::Shape_detection::Sphere&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection_1_1Sphere"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>CGAL::Shape_detection::Torus&lt; Traits &gt;</label>
        <link refid="classCGAL_1_1Shape__detection_1_1Torus"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" line="49" column="3" bodyfile="CGAL/Shape_detection/Efficient_RANSAC/Shape_base.h" bodystart="49" bodyend="700"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a48186a53453c9a0c11cfebc8dcd399eb" prot="protected" virt="virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>connected_component</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a5f4db26dacafe017f1cb1b79c456e6be" prot="protected" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>connected_component_kdTree</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a07f487f782693af3fa42a29f9ad14a97" prot="protected" virt="pure-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>cos_to_normal</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a4f4e29f440b04dccebd9597f98bb3b2e" prot="protected" virt="pure-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>create_shape</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a951b6ff1055dbb841e6795de62ba7317" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>FT</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1ad8e6fa8c2ace2bf8835abdccacb50782" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>indices_of_assigned_points</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1ac1bbd0a749fbc118fe266039fcb88b09" prot="public" virt="virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>info</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1afba75428e79da4371347314858440a41" prot="protected" virt="pure-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>minimum_sample_size</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a0e27838859722e7cf42bdce04942b53d" prot="protected" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>normal</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a06b467e120347afe63016a0cc951b370" prot="protected" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>point</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a6ebc83fd591b472714eebfb420b1e4b5" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>Point_3</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1ae59d77f8af2e00e2ed99a301c67e693d" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>Shape_base</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1ab04f03619adb9bee6112f074ba2508ff" prot="public" virt="pure-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>squared_distance</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1acd85efee7ba4de1539c379cc0aef7aed" prot="protected" virt="pure-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>squared_distance</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1ad90f27aef6585a6e5c67aa01bf11feee" prot="protected" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>traits</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1ac3191429dc84ca1d4dd2385f77242d7e" prot="public" virt="non-virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>Vector_3</name></member>
      <member refid="classCGAL_1_1Shape__detection_1_1Shape__base_1a1c6bd3ac67a56b1c4b1913fa302d0539" prot="public" virt="virtual"><scope>CGAL::Shape_detection::Shape_base</scope><name>~Shape_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
