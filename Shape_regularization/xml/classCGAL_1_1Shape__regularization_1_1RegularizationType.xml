<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Shape__regularization_1_1RegularizationType" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Shape_regularization::RegularizationType</compoundname>
    <includes local="no">Concepts/RegularizationType.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCGAL_1_1Shape__regularization_1_1RegularizationType_1a6425688d6368960b0aa5bfd0e6e13541" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></type>
        <definition>FieldNumberType CGAL::Shape_regularization::RegularizationType::bound</definition>
        <argsstring>(const std::size_t query_index) const</argsstring>
        <name>bound</name>
        <qualifiedname>CGAL::Shape_regularization::RegularizationType::bound</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>query_index</declname>
        </param>
        <briefdescription>
<para>returns the maximum bound on a regularization characteristic (angle-orientation/ distance-offset/etc.) with respect to which a geometric object with the index <computeroutput>query_index</computeroutput> is being regularized. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1QP__regularization" kindref="compound">QP_regularization</ref></computeroutput> calls this method once for each object from the input range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/RegularizationType.h" line="29" column="19" bodyfile="Concepts/RegularizationType.h" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__regularization_1_1RegularizationType_1ac5bd68e930f080c0b619b3541c5fad9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref></type>
        <definition>FieldNumberType CGAL::Shape_regularization::RegularizationType::target</definition>
        <argsstring>(const std::size_t i, const std::size_t j)</argsstring>
        <name>target</name>
        <qualifiedname>CGAL::Shape_regularization::RegularizationType::target</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>returns an objective function value between two geometric objects, which are direct neighbors, that is they form a neighbor pair <computeroutput>i &lt;-&gt; j</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Neighbors are provided by the concept <computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1NeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput>.</para>
<para><computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1QP__regularization" kindref="compound">QP_regularization</ref></computeroutput> calls this method once for each neighbor pair being regularized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/RegularizationType.h" line="42" column="19" bodyfile="Concepts/RegularizationType.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Shape__regularization_1_1RegularizationType_1a5fa1b89221a8d2515acff817ceeb6946" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Shape_regularization::RegularizationType::update</definition>
        <argsstring>(const std::vector&lt; FieldNumberType &gt; &amp;solution)</argsstring>
        <name>update</name>
        <qualifiedname>CGAL::Shape_regularization::RegularizationType::update</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classFieldNumberType" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Algebraic_foundations.tag">FieldNumberType</ref> &gt; &amp;</type>
          <declname>solution</declname>
        </param>
        <briefdescription>
<para>updates regularization characteristics (angle-orientation/distance-offset/etc.) of the geometric objects being regularized using values from <computeroutput>solution</computeroutput>, one value per one regularized object. </para>
        </briefdescription>
        <detaileddescription>
<para>These values depend on what is being regularized, they could be angle or offset differences for example. The solution vector is computed by the <computeroutput><ref refid="classQuadraticProgramTraits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">QuadraticProgramTraits</ref></computeroutput>.</para>
<para>Number of values in <computeroutput>solution</computeroutput> equals to the number n of geometric objects being regularized + the number m of neighbor pairs between these objects. The first n values are the values that should be used.</para>
<para><computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1QP__regularization" kindref="compound">QP_regularization</ref></computeroutput> calls this method once after the global regularization QP problem has been solved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/RegularizationType.h" line="61" column="8" bodyfile="Concepts/RegularizationType.h" bodystart="61" bodyend="64"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A concept that describes the set of methods used by the class <computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1QP__regularization" kindref="compound">QP_regularization</ref></computeroutput> to access various data required for setting up the the global regularization problem. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1Segments_1_1Angle__regularization__2" kindref="compound">Segments::Angle_regularization_2</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1Segments_1_1Offset__regularization__2" kindref="compound">Segments::Offset_regularization_2</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="Concepts/RegularizationType.h" line="17" column="1" bodyfile="Concepts/RegularizationType.h" bodystart="17" bodyend="65"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Shape__regularization_1_1RegularizationType_1a6425688d6368960b0aa5bfd0e6e13541" prot="public" virt="non-virtual"><scope>CGAL::Shape_regularization::RegularizationType</scope><name>bound</name></member>
      <member refid="classCGAL_1_1Shape__regularization_1_1RegularizationType_1ac5bd68e930f080c0b619b3541c5fad9c" prot="public" virt="non-virtual"><scope>CGAL::Shape_regularization::RegularizationType</scope><name>target</name></member>
      <member refid="classCGAL_1_1Shape__regularization_1_1RegularizationType_1a5fa1b89221a8d2515acff817ceeb6946" prot="public" virt="non-virtual"><scope>CGAL::Shape_regularization::RegularizationType</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
