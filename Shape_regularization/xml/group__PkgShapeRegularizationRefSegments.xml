<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__PkgShapeRegularizationRefSegments" kind="group">
    <compoundname>PkgShapeRegularizationRefSegments</compoundname>
    <title>Segments</title>
    <innerclass refid="classCGAL_1_1Shape__regularization_1_1Segments_1_1Angle__regularization__2" prot="public">CGAL::Shape_regularization::Segments::Angle_regularization_2</innerclass>
    <innerclass refid="classCGAL_1_1Shape__regularization_1_1Segments_1_1Delaunay__neighbor__query__2" prot="public">CGAL::Shape_regularization::Segments::Delaunay_neighbor_query_2</innerclass>
    <innerclass refid="classCGAL_1_1Shape__regularization_1_1Segments_1_1Offset__regularization__2" prot="public">CGAL::Shape_regularization::Segments::Offset_regularization_2</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgShapeRegularizationRefSegments_1ga3cde2421ff91530c13c9e8f1feaeae1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename NeighQuery</type>
          </param>
          <param>
            <type>typename RegType</type>
          </param>
          <param>
            <type>typename QPSolver</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Shape_regularization::Segments::regularize_segments</definition>
        <argsstring>(InputRange &amp;input_range, NeighQuery &amp;neighbor_query, RegType &amp;regularization_type, QPSolver &amp;quadratic_program, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>regularize_segments</name>
        <qualifiedname>CGAL::Shape_regularization::Segments::regularize_segments</qualifiedname>
        <param>
          <type>InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>NeighQuery &amp;</type>
          <declname>neighbor_query</declname>
        </param>
        <param>
          <type>RegType &amp;</type>
          <declname>regularization_type</declname>
        </param>
        <param>
          <type>QPSolver &amp;</type>
          <declname>quadratic_program</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>regularizes a set of 2D segments. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a set of unordered 2D segments, this function enables to reinforce three types of regularities among these segments:<itemizedlist>
<listitem><para><emphasis>Parallelism</emphasis>: segments, which are detected as near parallel, are made exactly parallel.</para>
</listitem><listitem><para><emphasis>Orthogonality</emphasis>: segments, which are detected as near orthogonal, are made exactly orthogonal.</para>
</listitem><listitem><para><emphasis>Collinearity</emphasis>: parallel segments, which are detected as near collinear, are made exactly collinear.</para>
</listitem></itemizedlist>
</para>
<para>The user has to provide a <computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1NeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput> model to access local neighbors of a segment and a <computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1RegularizationType" kindref="compound">RegularizationType</ref></computeroutput> model to define the type of regularities that should be addressed. The function is based on the class <computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1QP__regularization" kindref="compound">QP_regularization</ref></computeroutput>. Please refer to that class and these concepts for more information.</para>
<para>This class requires a <computeroutput>QPSolver</computeroutput> model which defaults to the <ref refid="thirdparty_1thirdpartyOSQP" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OSQP</ref> library, which must be available on the system.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NeighQuery</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1NeighborQuery" kindref="compound">NeighborQuery</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RegType</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classCGAL_1_1Shape__regularization_1_1RegularizationType" kindref="compound">RegularizationType</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>QPSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classQuadraticProgramTraits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">QuadraticProgramTraits</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a const range of input segments for shape regularization</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbor_query</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>NeighQuery</computeroutput> that is used internally to access neighbors of a segment; this parameter can be omitted together with the <computeroutput>regularization_type</computeroutput> parameter, in this case, all types of regularities will be reinforced on the whole input range and the default solver will be used (see below)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regularization_type</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>RegType</computeroutput> that is used internally to obtain bounds and target values required by the regularization; this parameter can be omitted together with the <computeroutput>neighbor_query</computeroutput> parameter, in this case, all types of regularities will be reinforced on the whole input range and the default solver will be used (see below)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quadratic_program</parametername>
</parameternamelist>
<parameterdescription>
<para>an instance of <computeroutput>QPSolver</computeroutput> to solve the quadratic programming problem; this parameter can be omitted, the default solver is <computeroutput><ref refid="classCGAL_1_1OSQP__quadratic__program__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Solver_interface.tag">CGAL::OSQP_quadratic_program_traits</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below; this parameter can be omitted, the default values are then used</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="1" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="pre"><para>input_range.size() &gt;= 2</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga0d6acc6431d79b38a7938c821e00a0c3" kindref="member">regularize_angles()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga4b3211181f059dc7985aa50f7dfe63c8" kindref="member">regularize_offsets()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_regularization/regularize_segments.h" line="136" column="8" bodyfile="CGAL/Shape_regularization/regularize_segments.h" bodystart="136" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgShapeRegularizationRefSegments_1ga0d6acc6431d79b38a7938c821e00a0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Shape_regularization::Segments::regularize_angles</definition>
        <argsstring>(InputRange &amp;input_range)</argsstring>
        <name>regularize_angles</name>
        <qualifiedname>CGAL::Shape_regularization::Segments::regularize_angles</qualifiedname>
        <param>
          <type>InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <briefdescription>
<para>regularizes angles in a set of 2D segments. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a set of unordered 2D segments, this function enables to reinforce two types of regularities among these segments:<itemizedlist>
<listitem><para><emphasis>Parallelism</emphasis>: segments, which are detected as near parallel, are made exactly parallel.</para>
</listitem><listitem><para><emphasis>Orthogonality</emphasis>: segments, which are detected as near orthogonal, are made exactly orthogonal.</para>
</listitem></itemizedlist>
</para>
<para>This is an utility function based on <computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga3cde2421ff91530c13c9e8f1feaeae1c" kindref="member">regularize_segments()</ref></computeroutput> that is using default parameters.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a const range of input segments for angle regularization</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>input_range.size() &gt;= 2</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga3cde2421ff91530c13c9e8f1feaeae1c" kindref="member">regularize_segments()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga4b3211181f059dc7985aa50f7dfe63c8" kindref="member">regularize_offsets()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_regularization/regularize_segments.h" line="243" column="8" bodyfile="CGAL/Shape_regularization/regularize_segments.h" bodystart="243" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgShapeRegularizationRefSegments_1ga4b3211181f059dc7985aa50f7dfe63c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::Shape_regularization::Segments::regularize_offsets</definition>
        <argsstring>(InputRange &amp;input_range)</argsstring>
        <name>regularize_offsets</name>
        <qualifiedname>CGAL::Shape_regularization::Segments::regularize_offsets</qualifiedname>
        <param>
          <type>InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <briefdescription>
<para>regularizes offsets in a set of 2D segments. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a set of parallel 2D segments, this function enables to reinforce the collinearity property among these segments that is all parallel segments, which are detected as near collinear, are made exactly collinear.</para>
<para>This is an utility function based on <computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga3cde2421ff91530c13c9e8f1feaeae1c" kindref="member">regularize_segments()</ref></computeroutput> that is using default parameters.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a const range of input segments for offset regularization</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>input_range.size() &gt;= 2</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga3cde2421ff91530c13c9e8f1feaeae1c" kindref="member">regularize_segments()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga0d6acc6431d79b38a7938c821e00a0c3" kindref="member">regularize_angles()</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_regularization/regularize_segments.h" line="283" column="8" bodyfile="CGAL/Shape_regularization/regularize_segments.h" bodystart="283" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgShapeRegularizationRefSegments_1gac72eca9b32b73a3713edffd2da5609f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Shape_regularization::Segments::parallel_groups</definition>
        <argsstring>(const InputRange &amp;input_range, OutIterator groups, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>parallel_groups</name>
        <qualifiedname>CGAL::Shape_regularization::Segments::parallel_groups</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>groups</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>finds groups of parallel segments in a set of 2D segments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables to find groups of near parallel segments in a set of 2D segments. The groups are returned as vectors of indices. Note that two segments may be included at the same group even if they are far away from each other. This algorithm concerns only the angle relationship among segments, but not the distance.</para>
<para>This function does not regularize input segments, but only groups them.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts elements of type <computeroutput>std::vector&lt;std::size_t&gt;</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a const range of input segments</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groups</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator with groups of segment indices</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below; this parameter can be omitted, the default values are then used</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>maximum allowed angle deviation in degrees between two segments such that they are considered to be parallel </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>5 degrees </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>preserve_order</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether the order of input segments should be preserved or not </para>
</listitem>
<listitem>
<para><bold>Type: </bold>boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold>false </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>segment_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that maps an item from <computeroutput>input_range</computeroutput> to <computeroutput>GeomTraits::Segment_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the input range and value type is <computeroutput>GeomTraits::Segment_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last group stored</para>
</simplesect>
<simplesect kind="pre"><para>input_range.size() &gt;= 1 </para>
</simplesect>
<simplesect kind="pre"><para>maximum_angle &gt;= 0 &amp;&amp; maximum_angle &lt;= 90 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_regularization/regularize_segments.h" line="373" column="15" bodyfile="CGAL/Shape_regularization/regularize_segments.h" bodystart="373" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgShapeRegularizationRefSegments_1ga7ade7f4682f9953fcf36669b2079f4d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Shape_regularization::Segments::collinear_groups</definition>
        <argsstring>(const InputRange &amp;input_range, OutIterator groups, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>collinear_groups</name>
        <qualifiedname>CGAL::Shape_regularization::Segments::collinear_groups</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>groups</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>finds groups of collinear segments in a set of 2D segments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables to find groups of near collinear segments in a set of 2D segments. The groups are returned as vectors of indices. This algorithm first finds the groups of parallel segments using the function <computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1gac72eca9b32b73a3713edffd2da5609f2" kindref="member">Segments::parallel_groups()</ref></computeroutput> and then splits these groups into groups of collinear segments.</para>
<para>This function does not regularize input segments, but only groups them.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts elements of type <computeroutput>std::vector&lt;std::size_t&gt;</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a const range of input segments</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groups</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator with groups of segment indices</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below; this parameter can be omitted, the default values are then used</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_offset</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>maximum allowed orthogonal distance between two parallel segments such that they are considered to be collinear </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0.2 unit length </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>preserve_order</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether the order of input segments should be preserved or not </para>
</listitem>
<listitem>
<para><bold>Type: </bold>boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold>false </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>segment_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that maps an item from <computeroutput>input_range</computeroutput> to <computeroutput>GeomTraits::Segment_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the input range and value type is <computeroutput>GeomTraits::Segment_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last group stored</para>
</simplesect>
<simplesect kind="pre"><para>input_range.size() &gt;= 1 </para>
</simplesect>
<simplesect kind="pre"><para>maximum_offset &gt;= 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_regularization/regularize_segments.h" line="466" column="15" bodyfile="CGAL/Shape_regularization/regularize_segments.h" bodystart="466" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgShapeRegularizationRefSegments_1ga7fe1c4b39b16dee49ba9c41dc3c0b0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Shape_regularization::Segments::orthogonal_groups</definition>
        <argsstring>(const InputRange &amp;input_range, OutIterator groups, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>orthogonal_groups</name>
        <qualifiedname>CGAL::Shape_regularization::Segments::orthogonal_groups</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>groups</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>finds groups of orthogonal segments in a set of 2D segments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables to find groups of near orthogonal segments in a set of 2D segments. The groups are returned as vectors of indices. This algorithm first finds the groups of parallel segments using the function <computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1gac72eca9b32b73a3713edffd2da5609f2" kindref="member">Segments::parallel_groups()</ref></computeroutput> and then merges these groups into groups of orthogonal segments.</para>
<para>This function does not regularize input segments, but only groups them.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts elements of type <computeroutput>std::vector&lt;std::size_t&gt;</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a const range of input segments</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groups</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator with groups of segment indices</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below; this parameter can be omitted, the default values are then used</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_angle</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>maximum allowed angle deviation in degrees between two segments such that they are considered to be parallel or orthogonal </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>5 degrees </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>preserve_order</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether the order of input segments should be preserved or not </para>
</listitem>
<listitem>
<para><bold>Type: </bold>boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold>false </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>segment_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that maps an item from <computeroutput>input_range</computeroutput> to <computeroutput>GeomTraits::Segment_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the input range and value type is <computeroutput>GeomTraits::Segment_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last group stored</para>
</simplesect>
<simplesect kind="pre"><para>input_range.size() &gt;= 1 </para>
</simplesect>
<simplesect kind="pre"><para>maximum_angle &gt;= 0 &amp;&amp; maximum_angle &lt;= 90 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_regularization/regularize_segments.h" line="559" column="15" bodyfile="CGAL/Shape_regularization/regularize_segments.h" bodystart="559" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgShapeRegularizationRefSegments_1ga9312b7fea9ddc4beae7b166ccc4607df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputRange</type>
          </param>
          <param>
            <type>typename OutIterator</type>
          </param>
          <param>
            <type>typename NamedParameters</type>
            <defval>parameters::Default_named_parameters</defval>
          </param>
        </templateparamlist>
        <type>OutIterator</type>
        <definition>OutIterator CGAL::Shape_regularization::Segments::unique_segments</definition>
        <argsstring>(const InputRange &amp;input_range, OutIterator segments, const NamedParameters &amp;np=parameters::default_values())</argsstring>
        <name>unique_segments</name>
        <qualifiedname>CGAL::Shape_regularization::Segments::unique_segments</qualifiedname>
        <param>
          <type>const InputRange &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type>OutIterator</type>
          <declname>segments</declname>
        </param>
        <param>
          <type>const NamedParameters &amp;</type>
          <declname>np</declname>
          <defval>parameters::default_values()</defval>
        </param>
        <briefdescription>
<para>substitutes groups of 2D collinear segments by average segments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function first calls <computeroutput><ref refid="group__PkgShapeRegularizationRefSegments_1ga7ade7f4682f9953fcf36669b2079f4d9" kindref="member">Segments::collinear_groups()</ref></computeroutput> and then substitutes each group of collinear segments by an average segment. The number of returned segments is the number of detected collinear groups.</para>
<para>This function does not regularize input segments, but only groups and then simplifies them.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputRange</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classConstRange" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">ConstRange</ref></computeroutput> whose iterator type is <computeroutput><ref refid="classRandomAccessIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">RandomAccessIterator</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput><ref refid="classOutputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">OutputIterator</ref></computeroutput> that accepts segments of type <computeroutput>GeomTraits::Segment_2</computeroutput></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NamedParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>a const range of input segments</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segments</parametername>
</parameternamelist>
<parameterdescription>
<para>an output iterator with the simplified segments</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of <ref refid="group__bgl__namedparameters" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/BGL.tag">Named Parameters</ref> among the ones listed below; this parameter can be omitted, the default values are then used</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<variablelist>
<varlistentry><term>Optional Named Parameters</term></varlistentry>
<listitem><para><table rows="4" cols="2"><row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>maximum_offset</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>maximum allowed orthogonal distance between two parallel segments such that they are considered to be collinear </para>
</listitem>
<listitem>
<para><bold>Type: </bold><computeroutput>GeomTraits::FT</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>0.2 unit length </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>preserve_order</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>indicates whether the order of input segments should be preserved or not </para>
</listitem>
<listitem>
<para><bold>Type: </bold>boolean </para>
</listitem>
<listitem>
<para><bold>Default: </bold>false </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>segment_map</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>a property map that maps an item from <computeroutput>input_range</computeroutput> to <computeroutput>GeomTraits::Segment_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classReadablePropertyMap" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">ReadablePropertyMap</ref></computeroutput> whose key type is the value type of the input range and value type is <computeroutput>GeomTraits::Segment_2</computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold><computeroutput><ref refid="structCGAL_1_1Identity__property__map" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Property_map.tag">CGAL::Identity_property_map</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><htmlonly block="yes"> &lt;button class=&quot;collapsible&quot;&gt;</htmlonly> <bold>geom_traits</bold> <htmlonly block="yes">&lt;/button&gt; &lt;div class=&quot;content&quot;&gt;</htmlonly><itemizedlist>
<listitem>
<para>an instance of geometric traits class </para>
</listitem>
<listitem>
<para><bold>Type: </bold>a model of <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<listitem>
<para><bold>Default: </bold>a <ref refid="namespaceCGAL" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">CGAL</ref> <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> deduced from the point type, using <computeroutput><ref refid="structCGAL_1_1Kernel__traits" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Kernel_traits</ref></computeroutput> </para>
</listitem>
</itemizedlist>
<htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="return"><para>an output iterator to the element in the destination range, one past the last segment stored</para>
</simplesect>
<simplesect kind="pre"><para>input_range.size() &gt;= 1 </para>
</simplesect>
<simplesect kind="pre"><para>maximum_offset &gt;= 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Shape_regularization/regularize_segments.h" line="651" column="15" bodyfile="CGAL/Shape_regularization/regularize_segments.h" bodystart="651" bodyend="672"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Models and functions that can be used when regularizing segments. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
