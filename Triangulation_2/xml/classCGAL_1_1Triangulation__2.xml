<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Triangulation__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Triangulation_2</compoundname>
    <basecompoundref refid="classCGAL_1_1Triangulation__cw__ccw__2" prot="public" virt="non-virtual">CGAL::Triangulation_cw_ccw_2</basecompoundref>
    <derivedcompoundref refid="classCGAL_1_1Constrained__triangulation__2" prot="public" virt="non-virtual">CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Delaunay__triangulation__2" prot="public" virt="non-virtual">CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;</derivedcompoundref>
    <derivedcompoundref refid="classCGAL_1_1Regular__triangulation__2" prot="public" virt="non-virtual">CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;</derivedcompoundref>
    <includes local="no">CGAL/Triangulation_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Traits</type>
      </param>
      <param>
        <type>typename Tds</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Handles, Iterators, and Circulators</header>
      <description><para>The vertices and faces of the triangulations are accessed through handles, iterators and circulators.</para>
<para>The handles are models of the concept <computeroutput><ref refid="classHandle" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Circulator.tag">Handle</ref></computeroutput> which basically offers the two dereference operators and <computeroutput>-&gt;</computeroutput>. The handles are also model of the concepts <computeroutput><ref refid="classLessThanComparable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">LessThanComparable</ref></computeroutput> and <computeroutput><ref refid="classHashable" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Hashable</ref></computeroutput>, that is they can be used as keys in containers such as <computeroutput>std::map</computeroutput> and <computeroutput>boost::unordered_map</computeroutput>. The iterators and circulators are all bidirectional and non-mutable. The circulators and iterators are convertible to handles with the same value type, so that whenever a handle appear in the parameter list of a function, an appropriate iterator or circulator can be passed as well.</para>
<para>The edges of the triangulation can also be visited through iterators and circulators, the edge circulators and iterators are also bidirectional and non mutable.</para>
<para>In the following, we called <emphasis>infinite</emphasis> any face or edge incident to the infinite vertex and the infinite vertex itself. Any other feature (face, edge or vertex) of the triangulation is said to be <emphasis>finite</emphasis>. Some iterators (the <computeroutput>All</computeroutput> iterators ) allows to visit finite or infinite feature while others (the <computeroutput>Finite</computeroutput> iterators) visit only finite features. Circulators visit infinite features as well as finite ones. The triangulation class also defines the following enum type to specify which case occurs when locating a point in the triangulation.</para>
<para>In order to write C++ 11 <computeroutput>for</computeroutput>-loops we provide range types. </para>
</description>
      <memberdef kind="enum" id="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" prot="public" static="no" strong="no">
        <type></type>
        <name>Locate_type</name>
        <qualifiedname>CGAL::Triangulation_2::Locate_type</qualifiedname>
        <enumvalue id="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a4fc5b644a7c38197036955ba1662afe5" prot="public">
          <name>VERTEX</name>
          <initializer>=0</initializer>
          <briefdescription>
<para>when the located point coincides with a vertex of the triangulation </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a5111882933f6615f618c8900e2bc6acf" prot="public">
          <name>EDGE</name>
          <briefdescription>
<para>when the point is in the relative interior of an edge </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a937da59ce47b08cfc0d452901e6c3625" prot="public">
          <name>FACE</name>
          <briefdescription>
<para>when the point is in the interior of a facet </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6afd690e18b1d2857068085d771fc354d4" prot="public">
          <name>OUTSIDE_CONVEX_HULL</name>
          <briefdescription>
<para>when the point is outside the convex hull but in the affine hull of the current triangulation </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6ae8b775f120094d9b0a6871f53446184f" prot="public">
          <name>OUTSIDE_AFFINE_HULL</name>
          <briefdescription>
<para>when the point is outside the affine hull of the current triangulation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>specifies which case occurs when locating a point in the triangulation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">CGAL::Triangulation_2</ref>&lt;Traits,Tds&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="374" column="3" bodyfile="CGAL/Triangulation_2.h" bodystart="374" bodyend="379"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" prot="public" static="no">
        <type>Tds::Vertex_handle</type>
        <definition>typedef Tds::Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <qualifiedname>CGAL::Triangulation_2::Vertex_handle</qualifiedname>
        <briefdescription>
<para>handle to a vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="261" column="28" bodyfile="CGAL/Triangulation_2.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" prot="public" static="no">
        <type>Tds::Face_handle</type>
        <definition>typedef Tds::Face_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::Face_handle</definition>
        <argsstring></argsstring>
        <name>Face_handle</name>
        <qualifiedname>CGAL::Triangulation_2::Face_handle</qualifiedname>
        <briefdescription>
<para>handle to a face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="266" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1ae5363996414e60613b556b14a9f87891" prot="public" static="no">
        <type>Tds::Face_iterator</type>
        <definition>typedef Tds::Face_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::All_faces_iterator</definition>
        <argsstring></argsstring>
        <name>All_faces_iterator</name>
        <qualifiedname>CGAL::Triangulation_2::All_faces_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="271" column="28" bodyfile="CGAL/Triangulation_2.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" prot="public" static="no">
        <type>Tds::Edge_iterator</type>
        <definition>typedef Tds::Edge_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::All_edges_iterator</definition>
        <argsstring></argsstring>
        <name>All_edges_iterator</name>
        <qualifiedname>CGAL::Triangulation_2::All_edges_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="276" column="28" bodyfile="CGAL/Triangulation_2.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a1d4600a9428fed798c112964ba57d9f1" prot="public" static="no">
        <type>Tds::Vertex_iterator</type>
        <definition>typedef Tds::Vertex_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::All_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>All_vertices_iterator</name>
        <qualifiedname>CGAL::Triangulation_2::All_vertices_iterator</qualifiedname>
        <briefdescription>
<para>iterator over all vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="281" column="30" bodyfile="CGAL/Triangulation_2.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a84923815e1cfca537c93cee97c0ed24f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::Finite_faces_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_faces_iterator</name>
        <qualifiedname>CGAL::Triangulation_2::Finite_faces_iterator</qualifiedname>
        <briefdescription>
<para>iterator over finite faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="286" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::Finite_edges_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_edges_iterator</name>
        <qualifiedname>CGAL::Triangulation_2::Finite_edges_iterator</qualifiedname>
        <briefdescription>
<para>iterator over finite edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="291" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a3dfacc0bd86f726c637b7ff86f404f84" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::Finite_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_vertices_iterator</name>
        <qualifiedname>CGAL::Triangulation_2::Finite_vertices_iterator</qualifiedname>
        <briefdescription>
<para>iterator over finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="297" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::Point_iterator</definition>
        <argsstring></argsstring>
        <name>Point_iterator</name>
        <qualifiedname>CGAL::Triangulation_2::Point_iterator</qualifiedname>
        <briefdescription>
<para>iterator over the points corresponding to the finite vertices of the triangulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="303" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a40f06313bd485eed99b6ba119da98bb5" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_2&lt; Traits, Tds &gt;::All_face_handles</definition>
        <argsstring></argsstring>
        <name>All_face_handles</name>
        <qualifiedname>CGAL::Triangulation_2::All_face_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over all faces (including infinite faces), with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Face_handle</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="310" column="24" bodyfile="CGAL/Triangulation_2.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1aab68c0408fce72a3294d76f6ded2ea56" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" kindref="member">All_edges_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;All_edges_iterator&gt; CGAL::Triangulation_2&lt; Traits, Tds &gt;::All_edges</definition>
        <argsstring></argsstring>
        <name>All_edges</name>
        <qualifiedname>CGAL::Triangulation_2::All_edges</qualifiedname>
        <briefdescription>
<para>range type for iterating over all edges (including infinite ones). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="316" column="24" bodyfile="CGAL/Triangulation_2.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1aaed9fdd0b481d9ec138548fb243752ab" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_2&lt; Traits, Tds &gt;::All_vertex_handles</definition>
        <argsstring></argsstring>
        <name>All_vertex_handles</name>
        <qualifiedname>CGAL::Triangulation_2::All_vertex_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over all vertices (including the infinite vertex), with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Vertex_handle</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="322" column="24" bodyfile="CGAL/Triangulation_2.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1ae89fd1a46ae755c79ac650fc41f6d3dd" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_2&lt; Traits, Tds &gt;::Finite_face_handles</definition>
        <argsstring></argsstring>
        <name>Finite_face_handles</name>
        <qualifiedname>CGAL::Triangulation_2::Finite_face_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over finite faces, with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Face_handle</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="329" column="24" bodyfile="CGAL/Triangulation_2.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1af7f5d22e7244c73be90bec59a502e7aa" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" kindref="member">Finite_edges_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;Finite_edges_iterator&gt; CGAL::Triangulation_2&lt; Traits, Tds &gt;::Finite_edges</definition>
        <argsstring></argsstring>
        <name>Finite_edges</name>
        <qualifiedname>CGAL::Triangulation_2::Finite_edges</qualifiedname>
        <briefdescription>
<para>range type for iterating over finite edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="335" column="24" bodyfile="CGAL/Triangulation_2.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a07f0b236b51b0e8a69512561dc12734a" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;unspecified_type&gt; CGAL::Triangulation_2&lt; Traits, Tds &gt;::Finite_vertex_handles</definition>
        <argsstring></argsstring>
        <name>Finite_vertex_handles</name>
        <qualifiedname>CGAL::Triangulation_2::Finite_vertex_handles</qualifiedname>
        <briefdescription>
<para>range type for iterating over finite vertices, with a nested type <computeroutput>iterator</computeroutput> that has as value type <computeroutput>Vertex_handle</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="341" column="24" bodyfile="CGAL/Triangulation_2.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a55aff11c6b56078d7384374a898bc1b9" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Iterator__range" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Iterator_range</ref>&lt; <ref refid="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" kindref="member">Point_iterator</ref> &gt;</type>
        <definition>typedef Iterator_range&lt;Point_iterator&gt; CGAL::Triangulation_2&lt; Traits, Tds &gt;::Points</definition>
        <argsstring></argsstring>
        <name>Points</name>
        <qualifiedname>CGAL::Triangulation_2::Points</qualifiedname>
        <briefdescription>
<para>range type for iterating over the points of the finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="346" column="24" bodyfile="CGAL/Triangulation_2.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1ad720b1a9adc835ed1a27c228eea1e36c" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::Line_face_circulator</definition>
        <argsstring></argsstring>
        <name>Line_face_circulator</name>
        <qualifiedname>CGAL::Triangulation_2::Line_face_circulator</qualifiedname>
        <briefdescription>
<para>circulator over all faces intersected by a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="352" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::Face_circulator</definition>
        <argsstring></argsstring>
        <name>Face_circulator</name>
        <qualifiedname>CGAL::Triangulation_2::Face_circulator</qualifiedname>
        <briefdescription>
<para>circulator over all faces incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="357" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::Edge_circulator</definition>
        <argsstring></argsstring>
        <name>Edge_circulator</name>
        <qualifiedname>CGAL::Triangulation_2::Edge_circulator</qualifiedname>
        <briefdescription>
<para>circulator over all edges incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="362" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::Vertex_circulator</definition>
        <argsstring></argsstring>
        <name>Vertex_circulator</name>
        <qualifiedname>CGAL::Triangulation_2::Vertex_circulator</qualifiedname>
        <briefdescription>
<para>circulator over all vertices incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="367" column="26" bodyfile="CGAL/Triangulation_2.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a94f47e3c6bdf5e36ae51180bcd013ad6" prot="public" static="no">
        <type>Traits</type>
        <definition>typedef Traits CGAL::Triangulation_2&lt; Traits, Tds &gt;::Geom_traits</definition>
        <argsstring></argsstring>
        <name>Geom_traits</name>
        <qualifiedname>CGAL::Triangulation_2::Geom_traits</qualifiedname>
        <briefdescription>
<para>the traits class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="179" column="16" bodyfile="CGAL/Triangulation_2.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1addbcd86ae5679a10363f46080159d00d" prot="public" static="no">
        <type>Tds</type>
        <definition>typedef Tds CGAL::Triangulation_2&lt; Traits, Tds &gt;::Triangulation_data_structure</definition>
        <argsstring></argsstring>
        <name>Triangulation_data_structure</name>
        <qualifiedname>CGAL::Triangulation_2::Triangulation_data_structure</qualifiedname>
        <briefdescription>
<para>the triangulation data structure type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="184" column="13" bodyfile="CGAL/Triangulation_2.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" prot="public" static="no">
        <type>Traits::Point_2</type>
        <definition>typedef Traits::Point_2 CGAL::Triangulation_2&lt; Traits, Tds &gt;::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <qualifiedname>CGAL::Triangulation_2::Point</qualifiedname>
        <briefdescription>
<para>the point type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="189" column="25" bodyfile="CGAL/Triangulation_2.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" prot="public" static="no">
        <type>Traits::Segment_2</type>
        <definition>typedef Traits::Segment_2 CGAL::Triangulation_2&lt; Traits, Tds &gt;::Segment</definition>
        <argsstring></argsstring>
        <name>Segment</name>
        <qualifiedname>CGAL::Triangulation_2::Segment</qualifiedname>
        <briefdescription>
<para>the segment type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="194" column="27" bodyfile="CGAL/Triangulation_2.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a48984e6735c075b17d7a956cb396d1f5" prot="public" static="no">
        <type>Traits::Triangle_2</type>
        <definition>typedef Traits::Triangle_2 CGAL::Triangulation_2&lt; Traits, Tds &gt;::Triangle</definition>
        <argsstring></argsstring>
        <name>Triangle</name>
        <qualifiedname>CGAL::Triangulation_2::Triangle</qualifiedname>
        <briefdescription>
<para>the triangle type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="199" column="28" bodyfile="CGAL/Triangulation_2.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1af48b3f6c165d50c74fe67a75caec129a" prot="public" static="no">
        <type>Tds::Vertex</type>
        <definition>typedef Tds::Vertex CGAL::Triangulation_2&lt; Traits, Tds &gt;::Vertex</definition>
        <argsstring></argsstring>
        <name>Vertex</name>
        <qualifiedname>CGAL::Triangulation_2::Vertex</qualifiedname>
        <briefdescription>
<para>the vertex type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="204" column="21" bodyfile="CGAL/Triangulation_2.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1a6c6a38b0ce694a47c2323834107fa758" prot="public" static="no">
        <type>Tds::Face</type>
        <definition>typedef Tds::Face CGAL::Triangulation_2&lt; Traits, Tds &gt;::Face</definition>
        <argsstring></argsstring>
        <name>Face</name>
        <qualifiedname>CGAL::Triangulation_2::Face</qualifiedname>
        <briefdescription>
<para>the face type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="209" column="19" bodyfile="CGAL/Triangulation_2.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" prot="public" static="no">
        <type>Tds::Edge</type>
        <definition>typedef Tds::Edge CGAL::Triangulation_2&lt; Traits, Tds &gt;::Edge</definition>
        <argsstring></argsstring>
        <name>Edge</name>
        <qualifiedname>CGAL::Triangulation_2::Edge</qualifiedname>
        <briefdescription>
<para>the edge type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="214" column="19" bodyfile="CGAL/Triangulation_2.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1aa7b0b96c9ed11cab337313f34cd96a59" prot="public" static="no">
        <type>Tds::size_type</type>
        <definition>typedef Tds::size_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>CGAL::Triangulation_2::size_type</qualifiedname>
        <briefdescription>
<para>Size type (an unsigned integral type). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="219" column="24" bodyfile="CGAL/Triangulation_2.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Triangulation__2_1ae837aea43417f936cefb715765d332e1" prot="public" static="no">
        <type>Tds::difference_type</type>
        <definition>typedef Tds::difference_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>CGAL::Triangulation_2::difference_type</qualifiedname>
        <briefdescription>
<para>Difference type (a signed integral type). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="224" column="30" bodyfile="CGAL/Triangulation_2.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a97deb44f4edfb6baa30c12a22f928dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangulation_2&lt; Traits, Tds &gt;::Triangulation_2</definition>
        <argsstring>(const Traits &amp;gt=Traits())</argsstring>
        <name>Triangulation_2</name>
        <qualifiedname>CGAL::Triangulation_2::Triangulation_2</qualifiedname>
        <param>
          <type>const Traits &amp;</type>
          <declname>gt</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>Introduces an empty triangulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a6e43f49405b43057d1b911a9f6e39404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Triangulation_2&lt; Traits, Tds &gt;::Triangulation_2</definition>
        <argsstring>(const Triangulation_2 &amp;tr)</argsstring>
        <name>Triangulation_2</name>
        <qualifiedname>CGAL::Triangulation_2::Triangulation_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref> &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>All the vertices and faces are duplicated. After the copy, <computeroutput>*this</computeroutput> and <computeroutput>tr</computeroutput> refer to different triangulations: if <computeroutput>tr</computeroutput> is modified, <computeroutput>*this</computeroutput> is not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a6cfa7d3aaa375a25d217858b49e2eb07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Triangulation_2&lt; Traits, Tds &gt;::Triangulation_2</definition>
        <argsstring>(InputIterator first, InputIterator last, const Traits &amp;gt=Traits())</argsstring>
        <name>Triangulation_2</name>
        <qualifiedname>CGAL::Triangulation_2::Triangulation_2</qualifiedname>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Traits &amp;</type>
          <declname>gt</declname>
          <defval>Traits()</defval>
        </param>
        <briefdescription>
<para>Equivalent to constructing an empty triangulation with the optional traits class argument and calling insert(first,last). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a40701ad345813f8df044fd197d3c9d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref></type>
        <definition>Triangulation_2 CGAL::Triangulation_2&lt; Traits, Tds &gt;::operator=</definition>
        <argsstring>(const Triangulation_2&lt; Traits, Tds &gt; &amp;tr)</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Triangulation_2::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref>&lt; Traits, Tds &gt; &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>
        </briefdescription>
        <detaileddescription>
<para>All the vertices and faces are duplicated. After the assignment, <computeroutput>*this</computeroutput> and <computeroutput>tr</computeroutput> refer to different triangulations: if <computeroutput>tr</computeroutput> is modified, <computeroutput>*this</computeroutput> is not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="412" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a1788d6ffa3f5986b2b07e7e0b48a2ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_2&lt; Traits, Tds &gt;::swap</definition>
        <argsstring>(Triangulation_2 &amp;tr)</argsstring>
        <name>swap</name>
        <qualifiedname>CGAL::Triangulation_2::swap</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref> &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>The triangulations <computeroutput>tr</computeroutput> and <computeroutput>*this</computeroutput> are swapped. </para>
        </briefdescription>
        <detaileddescription>
<para>This method should be used instead of assignment of copy constructor. if <computeroutput>tr</computeroutput> is deleted after that. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="419" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a031db533d1f567a2c7b0e9736f85a4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_2&lt; Traits, Tds &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::Triangulation_2::clear</qualifiedname>
        <briefdescription>
<para>Deletes all faces and finite vertices resulting in an empty triangulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="425" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Triangulation_2&lt; Traits, Tds &gt;::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <qualifiedname>CGAL::Triangulation_2::dimension</qualifiedname>
        <briefdescription>
<para>Returns the dimension of the convex hull. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="435" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1abb274869c3eac8fb775702bf68c4e8f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7b0b96c9ed11cab337313f34cd96a59" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <qualifiedname>CGAL::Triangulation_2::number_of_vertices</qualifiedname>
        <briefdescription>
<para>Returns the number of finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="440" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ab18fcf7127c007253348fcfb37b67df4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7b0b96c9ed11cab337313f34cd96a59" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Triangulation_2&lt; Traits, Tds &gt;::number_of_faces</definition>
        <argsstring>() const</argsstring>
        <name>number_of_faces</name>
        <qualifiedname>CGAL::Triangulation_2::number_of_faces</qualifiedname>
        <briefdescription>
<para>Returns the number of finite faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="445" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a5758b4f843e2d884d759f278e154ed87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::infinite_face</definition>
        <argsstring>() const</argsstring>
        <name>infinite_face</name>
        <qualifiedname>CGAL::Triangulation_2::infinite_face</qualifiedname>
        <briefdescription>
<para>a face incident to the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="450" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ae146d68059cd9d1430bafba2cbe25461" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::infinite_vertex</definition>
        <argsstring>() const</argsstring>
        <name>infinite_vertex</name>
        <qualifiedname>CGAL::Triangulation_2::infinite_vertex</qualifiedname>
        <briefdescription>
<para>the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a78d0a3bd3637897ab1abe06389899b63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_vertex</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertex</name>
        <qualifiedname>CGAL::Triangulation_2::finite_vertex</qualifiedname>
        <briefdescription>
<para>a vertex distinct from the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="461" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a4e201a26ae4f2593c8dd2607b333ff48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Triangulation__2_1a94f47e3c6bdf5e36ae51180bcd013ad6" kindref="member">Geom_traits</ref> &amp;</type>
        <definition>const Geom_traits &amp; CGAL::Triangulation_2&lt; Traits, Tds &gt;::geom_traits</definition>
        <argsstring>() const</argsstring>
        <name>geom_traits</name>
        <qualifiedname>CGAL::Triangulation_2::geom_traits</qualifiedname>
        <briefdescription>
<para>Returns a const reference to the triangulation traits object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="466" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a6de738928cfecde1ae15bcbac16327ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref> &amp;</type>
        <definition>const TriangulationDataStructure_2 &amp; CGAL::Triangulation_2&lt; Traits, Tds &gt;::tds</definition>
        <argsstring>() const</argsstring>
        <name>tds</name>
        <qualifiedname>CGAL::Triangulation_2::tds</qualifiedname>
        <briefdescription>
<para>Returns a const reference to the triangulation data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="471" column="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Non const access</header>
      <description><para><simplesect kind="attention"><para>The responsibility of keeping a valid triangulation belongs to the user when using advanced operations allowing a direct manipulation of the <computeroutput>tds</computeroutput>. This method is mainly a help for users implementing their own triangulation algorithms. </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a9a215e702f4b5a03d77cc8c5e27a6b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref> &amp;</type>
        <definition>TriangulationDataStructure_2 &amp; CGAL::Triangulation_2&lt; Traits, Tds &gt;::tds</definition>
        <argsstring>()</argsstring>
        <name>tds</name>
        <qualifiedname>CGAL::Triangulation_2::tds</qualifiedname>
        <briefdescription>
<para>Returns a reference to the triangulation data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="485" column="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <description><para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref></computeroutput> provides methods to test the finite or infinite character of any feature, and also methods to test the presence in the triangulation of a particular feature (edge or face). </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1acf8596038ef09d0d3ffcba99e912d1da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_infinite</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff <computeroutput>v</computeroutput> is the infinite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1acf8e2ef548683138d8766b6c89794fbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_infinite</definition>
        <argsstring>(Face_handle f) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff face <computeroutput>f</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a8009eb06cbe50a3fa1358d203a1fa924" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_infinite</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff edge <computeroutput>(f,i)</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="511" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ac7519fb75001a53abba7e8d9127d22c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_infinite</definition>
        <argsstring>(Edge e) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff edge <computeroutput>e</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ae4becba370b2929508ec894aa2b0370d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_infinite</definition>
        <argsstring>(Edge_circulator ec) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" kindref="member">Edge_circulator</ref></type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff edge <computeroutput>*ec</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1aa9ca70cc8b0cb3e0b6c0bf062d710613" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_infinite</definition>
        <argsstring>(All_edges_iterator ei) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Triangulation_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" kindref="member">All_edges_iterator</ref></type>
          <declname>ei</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> iff edge <computeroutput>*ei</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a37b3896ab3a416fe4adff475ed625e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_edge</definition>
        <argsstring>(Vertex_handle va, Vertex_handle vb)</argsstring>
        <name>is_edge</name>
        <qualifiedname>CGAL::Triangulation_2::is_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>vb</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> if there is an edge having <computeroutput>va</computeroutput> and <computeroutput>vb</computeroutput> as vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="535" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1adbeb9736f9bfc588658316669cd7fb44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_edge</definition>
        <argsstring>(Vertex_handle va, Vertex_handle vb, Face_handle &amp;fr, int &amp;i)</argsstring>
        <name>is_edge</name>
        <qualifiedname>CGAL::Triangulation_2::is_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>as above. </para>
        </briefdescription>
        <detaileddescription>
<para>In addition, if <computeroutput>true</computeroutput> is returned, the edge with vertices <computeroutput>va</computeroutput> and <computeroutput>vb</computeroutput> is the edge <computeroutput>e=(fr,i)</computeroutput> where <computeroutput>fr</computeroutput> is a handle to the face incident to <computeroutput>e</computeroutput> and on the right side of <computeroutput>e</computeroutput> oriented from <computeroutput>va</computeroutput> to <computeroutput>vb</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="543" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a171d77fc26d48860fa8a5711000ee690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::includes_edge</definition>
        <argsstring>(Vertex_handle va, Vertex_handle vb, Vertex_handle &amp;vbb, Face_handle &amp;fr, int &amp;i)</argsstring>
        <name>includes_edge</name>
        <qualifiedname>CGAL::Triangulation_2::includes_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref> &amp;</type>
          <declname>vbb</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> if the line segment from <computeroutput>va</computeroutput> to <computeroutput>vb</computeroutput> includes an edge <computeroutput>e</computeroutput> incident to <computeroutput>va</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>true</computeroutput>, <computeroutput>vbb</computeroutput> becomes the other vertex of <computeroutput>e</computeroutput>, <computeroutput>e</computeroutput> is the edge <computeroutput>(fr,i)</computeroutput> where <computeroutput>fr</computeroutput> is a handle to the face incident to <computeroutput>e</computeroutput> and on the right side <computeroutput>e</computeroutput> oriented from <computeroutput>va</computeroutput> to <computeroutput>vb</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="553" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a7a94b10ae76a8d4d6e762c19e05b6343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_face</definition>
        <argsstring>(Vertex_handle v1, Vertex_handle v2, Vertex_handle v3)</argsstring>
        <name>is_face</name>
        <qualifiedname>CGAL::Triangulation_2::is_face</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput> if there is a face having <computeroutput>v1</computeroutput>, <computeroutput>v2</computeroutput> and <computeroutput>v3</computeroutput> as vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="560" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a4084823ee026d7a00a3991cd2b553fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_face</definition>
        <argsstring>(Vertex_handle v1, Vertex_handle v2, Vertex_handle v3, Face_handle &amp;fr)</argsstring>
        <name>is_face</name>
        <qualifiedname>CGAL::Triangulation_2::is_face</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v3</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref> &amp;</type>
          <declname>fr</declname>
        </param>
        <briefdescription>
<para>as above. </para>
        </briefdescription>
        <detaileddescription>
<para>In addition, if <computeroutput>true</computeroutput> is returned, fr is a handle to the face with <computeroutput>v1</computeroutput>, <computeroutput>v2</computeroutput> and <computeroutput>v3</computeroutput> as vertices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="567" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Queries</header>
      <description><para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref></computeroutput> provides methods to locate a given point with respect to a triangulation.</para>
<para>It also provides methods to locate a point with respect to a given finite face of the triangulation. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::locate</definition>
        <argsstring>(const Point &amp;query, Face_handle f=Face_handle()) const</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Triangulation_2::locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>If the point <computeroutput>query</computeroutput> lies inside the convex hull of the points, a face that contains the query in its interior or on its boundary is returned. </para>
        </briefdescription>
        <detaileddescription>
<para>If the point <computeroutput>query</computeroutput> lies outside the convex hull of the triangulation but in the affine hull, the returned face is an infinite face which is a proof of the point&apos;s location:</para>
<para><itemizedlist>
<listitem><para>for a two dimensional triangulation, it is a face <formula id="35">$ (\infty, p, q)$</formula> such that <computeroutput>query</computeroutput> lies to the left of the oriented line <formula id="36">$ pq$</formula> (the rest of the triangulation lying to the right of this line).</para>
</listitem><listitem><para>for a degenerate one dimensional triangulation it is the (degenerate one dimensional) face <formula id="37">$ (\infty, p, nullptr)$</formula> such that <computeroutput>query</computeroutput> and the triangulation lie on either side of <computeroutput>p</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>If the point <computeroutput>query</computeroutput> lies outside the affine hull, the returned <computeroutput>Face_handle</computeroutput> is <computeroutput>nullptr</computeroutput>.</para>
<para>The optional <computeroutput>Face_handle</computeroutput> argument, if provided, is used as a hint of where the locate process has to start its search. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a0d62215704e84f18ef9294b27f9e82b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::inexact_locate</definition>
        <argsstring>(const Point &amp;query, Face_handle start=Face_handle()) const</argsstring>
        <name>inexact_locate</name>
        <qualifiedname>CGAL::Triangulation_2::inexact_locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>start</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as <computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" kindref="member">locate()</ref></computeroutput> but uses inexact predicates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns a handle on a face that is a good approximation of the exact location of <computeroutput>query</computeroutput>, while being faster. Note that it may return a handle on a face whose interior does not contain <computeroutput>query</computeroutput>. When the triangulation has dimension smaller than 2, <computeroutput>start</computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1af61a05a0a53d009e111a3873c1796b52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::locate</definition>
        <argsstring>(const Point &amp;query, Locate_type &amp;lt, int &amp;li, Face_handle h=Face_handle()) const</argsstring>
        <name>locate</name>
        <qualifiedname>CGAL::Triangulation_2::locate</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" kindref="member">Locate_type</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>li</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>h</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Same as above. </para>
        </briefdescription>
        <detaileddescription>
<para>Additionally, the parameters <computeroutput>lt</computeroutput> and <computeroutput>li</computeroutput> describe where the query point is located. The variable <computeroutput>lt</computeroutput> is set to the locate type of the query. If <computeroutput>lt==VERTEX</computeroutput> the variable <computeroutput>li</computeroutput> is set to the index of the vertex, and if <computeroutput>lt==EDGE</computeroutput> <computeroutput>li</computeroutput> is set to the index of the vertex opposite to the edge. Be careful that <computeroutput>li</computeroutput> has no meaning when the query type is <computeroutput>FACE</computeroutput>, <computeroutput>OUTSIDE_CONVEX_HULL</computeroutput>, or <computeroutput>OUTSIDE_AFFINE_HULL</computeroutput> or when the triangulation is <formula id="38">$ 0$</formula>-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a01fbafc011677846a729a809b4b21a99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Triangulation_2&lt; Traits, Tds &gt;::oriented_side</definition>
        <argsstring>(Face_handle f, const Point &amp;p) const</argsstring>
        <name>oriented_side</name>
        <qualifiedname>CGAL::Triangulation_2::oriented_side</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns on which side of the oriented boundary of <computeroutput>f</computeroutput> lies the point <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>f</computeroutput> is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1abc885b3d116e1d0b6943b211e750e472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__kernel__enums_1ga5006dd2552d97fa577d81bd819c0f979" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Oriented_side</ref></type>
        <definition>Oriented_side CGAL::Triangulation_2&lt; Traits, Tds &gt;::side_of_oriented_circle</definition>
        <argsstring>(Face_handle f, const Point &amp;p)</argsstring>
        <name>side_of_oriented_circle</name>
        <qualifiedname>CGAL::Triangulation_2::side_of_oriented_circle</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns on which side of the circumcircle of face <computeroutput>f</computeroutput> lies the point <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The circle is assumed to be counterclockwise oriented, so its positive side correspond to its bounded side. This predicate is available only if the corresponding predicates on points is provided in the geometric traits class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="660" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifiers</header>
      <description><para>The following operations are guaranteed to lead to a valid triangulation when they are applied on a valid triangulation.</para>
<para><anchor id="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_inser1t"/><image type="html" name="insert1.png">Insertion of a point on an edge.</image>
 <image type="latex" name="insert1.png">Insertion of a point on an edge.</image>
</para>
<para><anchor id="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_insert2"/><image type="html" name="insert2.png">Insertion in a face.</image>
 <image type="latex" name="insert2.png">Insertion in a face.</image>
 <anchor id="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_insert3"/><image type="html" name="insert3.png">Insertion outside the convex hull.</image>
 <image type="latex" name="insert3.png">Insertion outside the convex hull.</image>
 <anchor id="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_remove"/><image type="html" name="remove.png">Removal.</image>
 <image type="latex" name="remove.png">Removal.</image>
 </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1aa47a446fc11809d30146fbcdb689a396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_2&lt; Traits, Tds &gt;::flip</definition>
        <argsstring>(Face_handle f, int i)</argsstring>
        <name>flip</name>
        <qualifiedname>CGAL::Triangulation_2::flip</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Exchanges the edge incident to <computeroutput>f</computeroutput> and <computeroutput>f-&gt;neighbor(i)</computeroutput> with the other diagonal of the quadrilateral formed by <computeroutput>f</computeroutput> and <computeroutput>f-&gt;neighbor(i)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The faces <computeroutput>f</computeroutput> and <computeroutput>f-&gt;neighbor(i)</computeroutput> are finite faces and their union form a convex quadrilateral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="692" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a1025cd7e7226ccb44d82f0fb1d63ad4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Face_handle f=Face_handle())</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>Inserts point <computeroutput>p</computeroutput> in the triangulation and returns the corresponding vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>If point <computeroutput>p</computeroutput> coincides with an already existing vertex, this vertex is returned and the triangulation remains unchanged.</para>
<para>If point <computeroutput>p</computeroutput> is on an edge, the two incident faces are split in two.</para>
<para>If point <computeroutput>p</computeroutput> is strictly inside a face of the triangulation, the face is split in three.</para>
<para>If point <computeroutput>p</computeroutput> is strictly outside the convex hull, <computeroutput>p</computeroutput> is linked to all visible points on the convex hull to form the new triangulation.</para>
<para>At last, if <computeroutput>p</computeroutput> is outside the affine hull (in case of degenerate 1-dimensional or 0-dimensional triangulations), <computeroutput>p</computeroutput> is linked all the other vertices to form a triangulation whose dimension is increased by one. The last argument <computeroutput>f</computeroutput> is an indication to the underlying locate algorithm of where to start. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="719" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ab5282f769ba8445b872b4d32e8b38487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(const Point &amp;p, Locate_type lt, Face_handle loc, int li)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" kindref="member">Locate_type</ref></type>
          <declname>lt</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <briefdescription>
<para>Same as above except that the location of the point <computeroutput>p</computeroutput> to be inserted is assumed to be given by <computeroutput>(lt,loc,i)</computeroutput> (see the description of the <computeroutput>locate</computeroutput> method above.) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="728" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a21109eb748cd3800fe2ef92ff5f1e77e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::push_back</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>push_back</name>
        <qualifiedname>CGAL::Triangulation_2::push_back</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Equivalent to <computeroutput>insert(p)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="735" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a02f3c7c337f38cd9b534e6807856c106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointInputIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(PointInputIterator first, PointInputIterator last)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_2::insert</qualifiedname>
        <param>
          <type>PointInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointInputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Inserts the points in the range <computeroutput>[first,last)</computeroutput> in the given order, and returns the number of inserted points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with value type <computeroutput>Point</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="745" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ac5e9bc8adef80dc01a0b31c2d0234545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PointWithInfoInputIterator</type>
          </param>
        </templateparamlist>
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert</definition>
        <argsstring>(PointWithInfoInputIterator first, PointWithInfoInputIterator last)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Triangulation_2::insert</qualifiedname>
        <param>
          <type>PointWithInfoInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>PointWithInfoInputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts the points in the iterator range <computeroutput>[first,last)</computeroutput> in the given order, and returns the number of inserted points. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a pair <computeroutput>(p,i)</computeroutput>, the vertex <computeroutput>v</computeroutput> storing <computeroutput>p</computeroutput> also stores <computeroutput>i</computeroutput>, that is <computeroutput>v.point() == p</computeroutput> and <computeroutput>v.info() == i</computeroutput>. If several pairs have the same point, only one vertex is created, and one of the objects of type <computeroutput>Vertex::Info</computeroutput> will be stored in the vertex. <simplesect kind="pre"><para><computeroutput>Vertex</computeroutput> must be model of the concept <computeroutput><ref refid="classTriangulationVertexBaseWithInfo__2" kindref="compound">TriangulationVertexBaseWithInfo_2</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointWithInfoInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an input iterator with the value type <computeroutput>std::pair&lt;Point,Vertex::Info&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="762" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a9a5dc75ed6ce4a645a5b61e5a8e88974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_2&lt; Traits, Tds &gt;::remove</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove</name>
        <qualifiedname>CGAL::Triangulation_2::remove</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes the vertex from the triangulation. </para>
        </briefdescription>
        <detaileddescription>
<para>The created hole is re-triangulated. <simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> must be finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="769" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a433cff4ceaeaba390df1a968d93a4899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::move_if_no_collision</definition>
        <argsstring>(Vertex_handle v, const Point &amp;p)</argsstring>
        <name>move_if_no_collision</name>
        <qualifiedname>CGAL::Triangulation_2::move_if_no_collision</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>If there is not already another vertex placed on <computeroutput>p</computeroutput>, the triangulation is modified such that the new position of vertex <computeroutput>v</computeroutput> is <computeroutput>p</computeroutput>, and <computeroutput>v</computeroutput> is returned. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, the triangulation is not modified and the vertex at point <computeroutput>p</computeroutput> is returned. <simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> must be finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="778" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a62de40896ebe056bbf008eb4090eb76b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::move</definition>
        <argsstring>(Vertex_handle v, const Point &amp;p)</argsstring>
        <name>move</name>
        <qualifiedname>CGAL::Triangulation_2::move</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>If there is no collision during the move, this function is the same as <computeroutput>move_if_no_collision</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, <computeroutput>v</computeroutput> is removed and the vertex at point <computeroutput>p</computeroutput> is returned. <simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> must be finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="786" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Specialized Modifiers</header>
      <description><para>The following member functions offer more specialized versions of the insertion or removal operations to be used when one knows to be in the corresponding case. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a359b4c5e12af04f9235b5f2f42cae709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert_first</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>insert_first</name>
        <qualifiedname>CGAL::Triangulation_2::insert_first</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Inserts the first finite vertex . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="798" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a6a30184b0267dc1cdc9cc516440cbb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert_second</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>insert_second</name>
        <qualifiedname>CGAL::Triangulation_2::insert_second</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Inserts the second finite vertex . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="803" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a8f4a1ca36147ac331db5be089e17a2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert_in_face</definition>
        <argsstring>(const Point &amp;p, Face_handle f)</argsstring>
        <name>insert_in_face</name>
        <qualifiedname>CGAL::Triangulation_2::insert_in_face</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Inserts vertex <computeroutput>v</computeroutput> in face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Face <computeroutput>f</computeroutput> is modified, two new faces are created. <simplesect kind="pre"><para>The point in vertex <computeroutput>v</computeroutput> lies inside face <computeroutput>f</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="811" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1aefd64b3be7364535e808ed62faaa6a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert_in_edge</definition>
        <argsstring>(const Point &amp;p, Face_handle f, int i)</argsstring>
        <name>insert_in_edge</name>
        <qualifiedname>CGAL::Triangulation_2::insert_in_edge</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Inserts vertex v in edge <computeroutput>i</computeroutput> of <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The point in vertex <computeroutput>v</computeroutput> lies on the edge opposite to the vertex <computeroutput>i</computeroutput> of face <computeroutput>f</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="817" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a2c35ed5fa9ea46b55687c36a4755d592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert_outside_convex_hull</definition>
        <argsstring>(const Point &amp;p, Face_handle f)</argsstring>
        <name>insert_outside_convex_hull</name>
        <qualifiedname>CGAL::Triangulation_2::insert_outside_convex_hull</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Inserts a point which is outside the convex hull but in the affine hull. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The handle <computeroutput>f</computeroutput> points to a face which is a proof of the location of<computeroutput>p</computeroutput>, see the description of the <computeroutput>locate</computeroutput> method above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="824" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ad8a56f1fb051ce731a079671799010de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::insert_outside_affine_hull</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>insert_outside_affine_hull</name>
        <qualifiedname>CGAL::Triangulation_2::insert_outside_affine_hull</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Inserts a point which is outside the affine hull. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="830" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a4b3389b24fe7bfe703151375d15a745a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_2&lt; Traits, Tds &gt;::remove_degree_3</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_degree_3</name>
        <qualifiedname>CGAL::Triangulation_2::remove_degree_3</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes a vertex of degree three. </para>
        </briefdescription>
        <detaileddescription>
<para>Two of the incident faces are destroyed, the third one is modified. <simplesect kind="pre"><para>Vertex <computeroutput>v</computeroutput> is a finite vertex with degree three. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="837" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a44461f8dc31540c015f24ee3d36870ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_2&lt; Traits, Tds &gt;::remove_second</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_second</name>
        <qualifiedname>CGAL::Triangulation_2::remove_second</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes the before last finite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="842" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ac00496f74f7d05465407861f5a447768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_2&lt; Traits, Tds &gt;::remove_first</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove_first</name>
        <qualifiedname>CGAL::Triangulation_2::remove_first</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes the last finite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="847" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a8b058b055ef24a4b6fc25bf110e46638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EdgeIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::star_hole</definition>
        <argsstring>(Point p, EdgeIt edge_begin, EdgeIt edge_end)</argsstring>
        <name>star_hole</name>
        <qualifiedname>CGAL::Triangulation_2::star_hole</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_begin</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_end</declname>
        </param>
        <briefdescription>
<para>creates a new vertex <computeroutput>v</computeroutput> and use it to star the hole whose boundary is described by the sequence of edges <computeroutput>[edge_begin, edge_end)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a handle to the new vertex.</para>
<para>This function is intended to be used in conjunction with the <computeroutput>find_conflicts()</computeroutput> member functions of Delaunay and constrained Delaunay triangulations to perform insertions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="858" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a4511afae77c0c2978b6412d9411e4fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EdgeIt</type>
          </param>
          <param>
            <type>class FaceIt</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::star_hole</definition>
        <argsstring>(Point p, EdgeIt edge_begin, EdgeIt edge_end, FaceIt face_begin, FaceIt face_end)</argsstring>
        <name>star_hole</name>
        <qualifiedname>CGAL::Triangulation_2::star_hole</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_begin</declname>
        </param>
        <param>
          <type>EdgeIt</type>
          <declname>edge_end</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_begin</declname>
        </param>
        <param>
          <type>FaceIt</type>
          <declname>face_end</declname>
        </param>
        <briefdescription>
<para>same as above, except that the algorithm first recycles faces in the sequence <computeroutput>[face_begin, face_end)</computeroutput> and create new ones only when the sequence is exhausted. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is intended to be used in conjunction with the <computeroutput>find_conflicts()</computeroutput> member functions of Delaunay and constrained Delaunay triangulations to perform insertions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="872" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Finite Face, Edge and Vertex Iterators</header>
      <description><para>The following iterators allow respectively to visit finite faces, finite edges and finite vertices of the triangulation.</para>
<para>These iterators are non mutable, bidirectional and their value types are respectively <computeroutput>Face</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. They are all invalidated by any change in the triangulation. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1afec203a9cabc1700b76a3f7d4b388840" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a3dfacc0bd86f726c637b7ff86f404f84" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_begin</name>
        <qualifiedname>CGAL::Triangulation_2::finite_vertices_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="891" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a00acf9a6484acec989b945dca69cac0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a3dfacc0bd86f726c637b7ff86f404f84" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_end</name>
        <qualifiedname>CGAL::Triangulation_2::finite_vertices_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="896" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a3d7335c51c4c777fec2b9c2560f2635f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges_begin</name>
        <qualifiedname>CGAL::Triangulation_2::finite_edges_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="901" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a6bd40af3800321a0d0d43f489b37fc2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges_end</name>
        <qualifiedname>CGAL::Triangulation_2::finite_edges_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="906" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a66241217c984aa597d36d4ff6f0ff3f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a84923815e1cfca537c93cee97c0ed24f" kindref="member">Finite_faces_iterator</ref></type>
        <definition>Finite_faces_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_faces_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_faces_begin</name>
        <qualifiedname>CGAL::Triangulation_2::finite_faces_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="911" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a3df949e116750967bc46db9ba53da7c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a84923815e1cfca537c93cee97c0ed24f" kindref="member">Finite_faces_iterator</ref></type>
        <definition>Finite_faces_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_faces_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_faces_end</name>
        <qualifiedname>CGAL::Triangulation_2::finite_faces_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="916" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a048beaadce99c9bdfeaa69dd68701c32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" kindref="member">Point_iterator</ref></type>
        <definition>Point_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::points_begin</definition>
        <argsstring>() const</argsstring>
        <name>points_begin</name>
        <qualifiedname>CGAL::Triangulation_2::points_begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="922" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1adb17161924b6d2b6e7ac537d6b760728" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" kindref="member">Point_iterator</ref></type>
        <definition>Point_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::points_end</definition>
        <argsstring>() const</argsstring>
        <name>points_end</name>
        <qualifiedname>CGAL::Triangulation_2::points_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="927" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a742d528593275c1fe119979b4ce74a90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a07f0b236b51b0e8a69512561dc12734a" kindref="member">Finite_vertex_handles</ref></type>
        <definition>Finite_vertex_handles CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_vertex_handles</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertex_handles</name>
        <qualifiedname>CGAL::Triangulation_2::finite_vertex_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over finite vertices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>While the value type of <computeroutput>Finite_vertices_iterator</computeroutput> is <computeroutput>Vertex</computeroutput>, the value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Finite_vertex_handles::iterator</ref></computeroutput> is <computeroutput>Vertex_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="934" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a837c6fe6f8daaec60b0276e294daf5ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1af7f5d22e7244c73be90bec59a502e7aa" kindref="member">Finite_edges</ref></type>
        <definition>Finite_edges CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_edges</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges</name>
        <qualifiedname>CGAL::Triangulation_2::finite_edges</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over finite edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="939" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a01c421302be46c33fd6d8de75945a1ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ae89fd1a46ae755c79ac650fc41f6d3dd" kindref="member">Finite_face_handles</ref></type>
        <definition>Finite_face_handles CGAL::Triangulation_2&lt; Traits, Tds &gt;::finite_face_handles</definition>
        <argsstring>() const</argsstring>
        <name>finite_face_handles</name>
        <qualifiedname>CGAL::Triangulation_2::finite_face_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over finite faces. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>While the value type of <computeroutput>Finite_faces_iterator</computeroutput> is <computeroutput>Face</computeroutput>, the value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">Finite_face_handles::iterator</ref></computeroutput> is <computeroutput>Face_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="946" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1acae6c6bf678ec1a90b49498862bb7fa2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a55aff11c6b56078d7384374a898bc1b9" kindref="member">Points</ref></type>
        <definition>Points CGAL::Triangulation_2&lt; Traits, Tds &gt;::points</definition>
        <argsstring>() const</argsstring>
        <name>points</name>
        <qualifiedname>CGAL::Triangulation_2::points</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over the points of finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="951" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>All Face, Edge and Vertex Iterators</header>
      <description><para>The following iterators allow respectively to visit all (finite or infinite) faces, edges and vertices of the triangulation.</para>
<para>These iterators are non mutable, bidirectional and their value types are respectively <computeroutput>Face</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. They are all invalidated by any change in the triangulation. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1adb9bbf3918a8081d21fc0c1de20b157e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a1d4600a9428fed798c112964ba57d9f1" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_begin</name>
        <qualifiedname>CGAL::Triangulation_2::all_vertices_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="967" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a99d052d1f8a1f99c8defec48604192f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a1d4600a9428fed798c112964ba57d9f1" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_end</name>
        <qualifiedname>CGAL::Triangulation_2::all_vertices_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="972" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a83de89d7d1c6e306b331b7158728bb57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_edges_begin</name>
        <qualifiedname>CGAL::Triangulation_2::all_edges_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="977" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1aee85b73cb094f95603939be436e63438" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>all_edges_end</name>
        <qualifiedname>CGAL::Triangulation_2::all_edges_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="982" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a93f4b88a11e455e4af2f5442e5d4824d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ae5363996414e60613b556b14a9f87891" kindref="member">All_faces_iterator</ref></type>
        <definition>All_faces_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_faces_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_faces_begin</name>
        <qualifiedname>CGAL::Triangulation_2::all_faces_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="987" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a395ece5a58ae27040ccbbb9503899671" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ae5363996414e60613b556b14a9f87891" kindref="member">All_faces_iterator</ref></type>
        <definition>All_faces_iterator CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_faces_end</definition>
        <argsstring>() const</argsstring>
        <name>all_faces_end</name>
        <qualifiedname>CGAL::Triangulation_2::all_faces_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="992" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1abb3ae01ea08e705e49ced503e4a83026" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aaed9fdd0b481d9ec138548fb243752ab" kindref="member">All_vertex_handles</ref></type>
        <definition>All_vertex_handles CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_vertex_handles</definition>
        <argsstring>() const</argsstring>
        <name>all_vertex_handles</name>
        <qualifiedname>CGAL::Triangulation_2::all_vertex_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over all vertices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>While the value type of <computeroutput>All_vertices_iterator</computeroutput> is <computeroutput>Vertex</computeroutput>, the value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">All_vertex_handles::iterator</ref></computeroutput> is <computeroutput>Vertex_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1000" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a6126344554bd1af7dcd166a705e4e0ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aab68c0408fce72a3294d76f6ded2ea56" kindref="member">All_edges</ref></type>
        <definition>All_edges CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_edges</definition>
        <argsstring>() const</argsstring>
        <name>all_edges</name>
        <qualifiedname>CGAL::Triangulation_2::all_edges</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over all edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1005" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ae0bd242bbe0d505aa1f7c4c366d5d56f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a40f06313bd485eed99b6ba119da98bb5" kindref="member">All_face_handles</ref></type>
        <definition>All_face_handles CGAL::Triangulation_2&lt; Traits, Tds &gt;::all_face_handles</definition>
        <argsstring>() const</argsstring>
        <name>all_face_handles</name>
        <qualifiedname>CGAL::Triangulation_2::all_face_handles</qualifiedname>
        <briefdescription>
<para>returns a range of iterators over all faces. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>While the value type of <computeroutput>All_faces_iterator</computeroutput> is <computeroutput>Face</computeroutput>, the value type of <computeroutput><ref refid="classCGAL_1_1Iterator__range_1a1d3ce46c713f038f903619aff460f828" kindref="member" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/STL_Extension.tag">All_face_handles::iterator</ref></computeroutput> is <computeroutput>Face_handle</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1012" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Line Face Circulator</header>
      <description><para>The triangulation defines a circulator that allows to visit all faces that are intersected by a line.</para>
<para>A face <computeroutput>f</computeroutput> is considered has being intersected by the oriented line <computeroutput>l</computeroutput> if either:<itemizedlist>
<listitem><para><computeroutput>f</computeroutput> is a finite face whose interior intersects <computeroutput>l</computeroutput>, or</para>
</listitem><listitem><para><computeroutput>f</computeroutput> is a finite face with an edge collinear with <computeroutput>l</computeroutput> and lies to the left of <computeroutput>l</computeroutput>, or</para>
</listitem><listitem><para><computeroutput>f</computeroutput> is an infinite face incident to a convex hull edge whose interior is intersected by <computeroutput>l</computeroutput>, or</para>
</listitem><listitem><para><computeroutput>f</computeroutput> is an infinite face incident to a convex hull vertex lying on <computeroutput>l</computeroutput> and the finite edge of <computeroutput>f</computeroutput> lies to the left of <computeroutput>l</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>The circulator has a singular value if the line <computeroutput>l</computeroutput> intersect no finite face of the triangulation. This circulator is non-mutable and bidirectional. Its value type is <computeroutput>Face</computeroutput>. Figure <ref refid="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_Line_face_circulator" kindref="member">Triangulation_ref_Fig_Line_face_circulator</ref> illustrates which finite faces are enumerated. Lines <formula id="39">$ l_1$</formula> and <formula id="40">$ l_2$</formula> have no face to their left. Lines <formula id="41">$ l_3$</formula> and <formula id="42">$ l_4$</formula> have faces to their left. Note that the finite faces that are only vertex incident to lines <formula id="41">$ l_3$</formula> and <formula id="42">$ l_4$</formula> are not enumerated.</para>
<para><anchor id="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_Line_face_circulator"/><image type="html" name="walk.png">The line face circulator. A line face circulator is invalidated if the face the circulator refers to is changed.</image>
 <image type="latex" name="walk.png">The line face circulator. A line face circulator is invalidated if the face the circulator refers to is changed.</image>
 </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a41a46211193d767f122504f2eb99189a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ad720b1a9adc835ed1a27c228eea1e36c" kindref="member">Line_face_circulator</ref></type>
        <definition>Line_face_circulator CGAL::Triangulation_2&lt; Traits, Tds &gt;::line_walk</definition>
        <argsstring>(const Point &amp;p, const Point &amp;q, Face_handle f=Face_handle()) const</argsstring>
        <name>line_walk</name>
        <qualifiedname>CGAL::Triangulation_2::line_walk</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
          <defval><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref>()</defval>
        </param>
        <briefdescription>
<para>This function returns a circulator that allows to visit the faces intersected by the line <computeroutput>pq</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no such face the circulator has a singular value.</para>
<para>The starting point of the circulator is the face <computeroutput>f</computeroutput>, or the first finite face traversed by <computeroutput>l</computeroutput> , if <computeroutput>f</computeroutput> is omitted.</para>
<para>The circulator wraps around the infinite vertex: after the last traversed finite face, it steps through the infinite face adjacent to this face then through the infinite face adjacent to the first traversed finite face then through the first finite traversed face again. <simplesect kind="pre"><para>The triangulation must have dimension 2. </para>
</simplesect>
<simplesect kind="pre"><para>Points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> must be different points. </para>
</simplesect>
<simplesect kind="pre"><para>If <computeroutput>f != nullptr</computeroutput>, it must point to a finite face and the point <computeroutput>p</computeroutput> must be inside or on the boundary of <computeroutput>f</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1065" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Face, Edge and Vertex Circulators</header>
      <description><para>The triangulation also provides circulators that allows to visit respectively all faces or edges incident to a given vertex or all vertices adjacent to a given vertex.</para>
<para>These circulators are non-mutable and bidirectional. The <computeroutput>operator++</computeroutput> moves the circulator counterclockwise around the vertex while the <computeroutput>operator-</computeroutput> moves clockwise. A face circulator is invalidated by any modification of the face pointed to. An edge or a vertex circulator are invalidated by any modification of one of the two faces incident to the edge pointed to. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a1ca68226e40c30304c4d54685a77a7ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator CGAL::Triangulation_2&lt; Traits, Tds &gt;::incident_faces</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_faces</name>
        <qualifiedname>CGAL::Triangulation_2::incident_faces</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary face incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1085" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a341c4f3888b6ede6b9df55c2bb745ca3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator CGAL::Triangulation_2&lt; Traits, Tds &gt;::incident_faces</definition>
        <argsstring>(Vertex_handle v, Face_handle f) const</argsstring>
        <name>incident_faces</name>
        <qualifiedname>CGAL::Triangulation_2::incident_faces</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1091" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a1708a62dea4a40f63025848e4afaefa0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator CGAL::Triangulation_2&lt; Traits, Tds &gt;::incident_edges</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_edges</name>
        <qualifiedname>CGAL::Triangulation_2::incident_edges</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary edge incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1097" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a843853eb19644389ba8d6024765eb4f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator CGAL::Triangulation_2&lt; Traits, Tds &gt;::incident_edges</definition>
        <argsstring>(Vertex_handle v, Face_handle f) const</argsstring>
        <name>incident_edges</name>
        <qualifiedname>CGAL::Triangulation_2::incident_edges</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at the first edge of <computeroutput>f</computeroutput> incident to <computeroutput>v</computeroutput>, in counterclockwise order around <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1104" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1afebc0e18dc93bce4b62b1e06944a6921" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator CGAL::Triangulation_2&lt; Traits, Tds &gt;::incident_vertices</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_vertices</name>
        <qualifiedname>CGAL::Triangulation_2::incident_vertices</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary vertex incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1110" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a58c9a0c9f69a356a31c8a7c02eff1841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator CGAL::Triangulation_2&lt; Traits, Tds &gt;::incident_vertices</definition>
        <argsstring>(Vertex_handle v, Face_handle f)</argsstring>
        <name>incident_vertices</name>
        <qualifiedname>CGAL::Triangulation_2::incident_vertices</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at the first vertex of <computeroutput>f</computeroutput> adjacent to <computeroutput>v</computeroutput> in counterclockwise order around <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1117" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversal Between Adjacent Faces</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a9213aedceda4c17381960d041d4f297a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Triangulation_2&lt; Traits, Tds &gt;::mirror_vertex</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>mirror_vertex</name>
        <qualifiedname>CGAL::Triangulation_2::mirror_vertex</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the vertex of the <formula id="43">$ i^{th}$</formula> neighbor of <computeroutput>f</computeroutput> that is opposite to <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="44">$ 0\leq i \leq2$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1129" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a9c54807a29595dc1116054cc4ac214fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Triangulation_2&lt; Traits, Tds &gt;::mirror_index</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>mirror_index</name>
        <qualifiedname>CGAL::Triangulation_2::mirror_index</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>returns the index of <computeroutput>f</computeroutput> in its <formula id="43">$ i^{th}$</formula> neighbor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="44">$ 0\leq i \leq2$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1135" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ab97ce60b20674d0a7a4455e88c2eadb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" kindref="member">Edge</ref></type>
        <definition>Edge CGAL::Triangulation_2&lt; Traits, Tds &gt;::mirror_edge</definition>
        <argsstring>(Edge e) const</argsstring>
        <name>mirror_edge</name>
        <qualifiedname>CGAL::Triangulation_2::mirror_edge</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" kindref="member">Edge</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>returns the same edge seen from the other adjacent face. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="44">$ 0\leq i \leq2$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1141" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a38ffc4db3bc10b11ae77bbcd4fe21005" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Triangulation_2&lt; Traits, Tds &gt;::ccw</definition>
        <argsstring>(int i) const</argsstring>
        <name>ccw</name>
        <qualifiedname>CGAL::Triangulation_2::ccw</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns <formula id="45">$ i+1$</formula> modulo 3. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="44">$ 0\leq i \leq2$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1151" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a49fc8cd3cd899d0c0aa6bc0f20c72a0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Triangulation_2&lt; Traits, Tds &gt;::cw</definition>
        <argsstring>(int i) const</argsstring>
        <name>cw</name>
        <qualifiedname>CGAL::Triangulation_2::cw</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns <formula id="46">$ i+2$</formula> modulo 3. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="44">$ 0\leq i \leq2$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1156" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a176b3903b04aaad6996d1c2a56a14dcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1a48984e6735c075b17d7a956cb396d1f5" kindref="member">Triangle</ref></type>
        <definition>Triangle CGAL::Triangulation_2&lt; Traits, Tds &gt;::triangle</definition>
        <argsstring>(Face_handle f) const</argsstring>
        <name>triangle</name>
        <qualifiedname>CGAL::Triangulation_2::triangle</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Returns the triangle formed by the three vertices of <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The face is finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ac3beee6618a86505bfc03bcbfbb46a4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" kindref="member">Segment</ref></type>
        <definition>Segment CGAL::Triangulation_2&lt; Traits, Tds &gt;::segment</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>segment</name>
        <qualifiedname>CGAL::Triangulation_2::segment</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the line segment formed by the vertices <computeroutput>ccw(i)</computeroutput> and <computeroutput>cw(i)</computeroutput> of face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><formula id="44">$ 0\leq i \leq2$</formula>. The vertices <computeroutput>ccw(i)</computeroutput> and <computeroutput>cw(i)</computeroutput> of <computeroutput>f</computeroutput> are finite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a06f3967c92db0fe28368c31ff671c658" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" kindref="member">Segment</ref></type>
        <definition>Segment CGAL::Triangulation_2&lt; Traits, Tds &gt;::segment</definition>
        <argsstring>(const Edge &amp;e) const</argsstring>
        <name>segment</name>
        <qualifiedname>CGAL::Triangulation_2::segment</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Returns the line segment corresponding to edge <computeroutput>e</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>e</computeroutput> is a finite edge. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ad43c112fe392ea9194b449e6116499c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" kindref="member">Segment</ref></type>
        <definition>Segment CGAL::Triangulation_2&lt; Traits, Tds &gt;::segment</definition>
        <argsstring>(const Edge_circulator &amp;ec) const</argsstring>
        <name>segment</name>
        <qualifiedname>CGAL::Triangulation_2::segment</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" kindref="member">Edge_circulator</ref> &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para>Returns the line segment corresponding to edge <computeroutput>*ec</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>*ec</computeroutput> is a finite edge. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1afd84762f5a856ebdbd9786de8744feda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" kindref="member">Segment</ref></type>
        <definition>Segment CGAL::Triangulation_2&lt; Traits, Tds &gt;::segment</definition>
        <argsstring>(const Edge_iterator &amp;ei) const</argsstring>
        <name>segment</name>
        <qualifiedname>CGAL::Triangulation_2::segment</qualifiedname>
        <param>
          <type>const Edge_iterator &amp;</type>
          <declname>ei</declname>
        </param>
        <briefdescription>
<para>Returns the line segment corresponding to edge <computeroutput>*ei</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>*ei</computeroutput> is a finite edge. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a4185c75ba2c5ec34181fdef8fa57401c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" kindref="member">Point</ref></type>
        <definition>Point CGAL::Triangulation_2&lt; Traits, Tds &gt;::circumcenter</definition>
        <argsstring>(Face_handle f) const</argsstring>
        <name>circumcenter</name>
        <qualifiedname>CGAL::Triangulation_2::circumcenter</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Compute the circumcenter of the face pointed to by f. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is available only if the corresponding function is provided in the geometric traits. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1199" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setting</header>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a25a5eaabf6ba1d9c9acf240b4453c09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Triangulation_2&lt; Traits, Tds &gt;::set_infinite_vertex</definition>
        <argsstring>(const Vertex_handle &amp;v)</argsstring>
        <name>set_infinite_vertex</name>
        <qualifiedname>CGAL::Triangulation_2::set_infinite_vertex</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" kindref="member">Vertex_handle</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>This is an advanced function. </para>
        </briefdescription>
        <detaileddescription>
<para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>This method is meant to be used only if you have done a low-level operation on the underlying tds that invalidated the infinite vertex. Sets the infinite vertex. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1213" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checking</header>
      <description><para><htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The responsibility of keeping a valid triangulation belongs to the users if advanced operations are used.</para>
<para>Obviously the advanced user, who implements higher levels operations may have to make a triangulation invalid at some times. The following method is provided to help the debugging. <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a8bcea78e9ffd5cc836331c5021cd851a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Triangulation_2&lt; Traits, Tds &gt;::is_valid</definition>
        <argsstring>(bool verbose=false, int level=0) const</argsstring>
        <name>is_valid</name>
        <qualifiedname>CGAL::Triangulation_2::is_valid</qualifiedname>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Checks the combinatorial validity of the triangulation and also the validity of its geometric embedding. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is mainly a debugging help for the users of advanced features. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1235" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1ac7351668deed7464974684ab3c7147ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Triangulation_2&lt; Traits, Tds &gt; &amp;T)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::Triangulation_2::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref>&lt; Traits, Tds &gt; &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
<para>Inserts the triangulation into the stream <computeroutput>os</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The insert operator must be defined for <computeroutput>Point</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1246" column="1" declfile="CGAL/Triangulation_2.h" declline="1246" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Triangulation__2_1a8dc99f907cc125ce7a55024da5ddb4c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream &amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, const Triangulation_2&lt; Traits, Tds &gt; &amp;T)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::Triangulation_2::operator&gt;&gt;</qualifiedname>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref>&lt; Traits, Tds &gt; &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
<para>Reads a triangulation from stream <computeroutput>is</computeroutput> and assigns it to the triangulation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The extract operator must be defined for <computeroutput>Point</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Triangulation_2.h" line="1255" column="9" declfile="CGAL/Triangulation_2.h" declline="1255" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref></computeroutput> is the basic class designed to handle triangulations of set of points <formula id="31">$ { A}$</formula> in the plane. </para>
    </briefdescription>
    <detaileddescription>
<para>Such a triangulation has vertices at the points of <formula id="31">$ { A}$</formula> and its domain covers the convex hull of <formula id="31">$ { A}$</formula>. It can be viewed as a planar partition of the plane whose bounded faces are triangular and cover the convex hull of <formula id="31">$ { A}$</formula>. The single unbounded face of this partition is the complementary of the convex hull of <formula id="31">$ { A}$</formula>.</para>
<para>In many applications, it is convenient to deal only with triangular faces. Therefore, we add to the triangulation a fictitious vertex, called the <computeroutput>infinite vertex</computeroutput> and we make each convex hull edge incident to an <computeroutput>infinite</computeroutput> face having as third vertex the <computeroutput>infinite vertex</computeroutput>. In that way, each edge is incident to exactly two faces and special cases at the boundary of the convex hull are simpler to deal with.</para>
<para><anchor id="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_infinite_vertex"/><image type="html" name="infinite_vertex.png">The infinite vertex.</image>
 <image type="latex" name="infinite_vertex.png">The infinite vertex.</image>
</para>
<para>The class <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">Triangulation_2</ref></computeroutput> implements this point of view and therefore considers the triangulation of the set of points as a set of triangular, finite and infinite faces. Although it is convenient to draw a triangulation as in figure <ref refid="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_infinite_vertex" kindref="member">Triangulation_ref_Fig_infinite_vertex</ref>, note that the <computeroutput>infinite vertex</computeroutput> has no significant coordinates and that no geometric predicate can be applied on it or on an infinite face.</para>
<para>A triangulation is a collection of vertices and faces that are linked together through incidence and adjacency relations. Each face give access to its three incident vertices and to its three adjacent faces. Each vertex give access to one of its incident faces.</para>
<para>The three vertices of a face are indexed with 0, 1 and 2 in counterclockwise order. The neighbor of a face are also indexed with 0,1,2 in such a way that the neighbor indexed by <formula id="32">$ i$</formula> is opposite to the vertex with the same index.</para>
<para>The triangulation class offers two functions <computeroutput>int cw(int i)</computeroutput> and <computeroutput>int ccw(int i)</computeroutput> which, given the index of a vertex in a face, compute the index of the next vertex of the same face in clockwise or counterclockwise order. Thus, for example the neighbor <computeroutput>neighbor(cw(i))</computeroutput> is the neighbor of <computeroutput>f</computeroutput> which is next to <computeroutput>neighbor(i)</computeroutput> turning clockwise around <computeroutput>f</computeroutput>. The face <computeroutput>neighbor(cw(i))</computeroutput> is also the first face encountered after <computeroutput>f</computeroutput> when turning clockwise around vertex <computeroutput>i</computeroutput> of <computeroutput>f</computeroutput> (see Figure <ref refid="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_neighbors" kindref="member">Triangulation_ref_Fig_neighbors</ref>).</para>
<para><anchor id="classCGAL_1_1Triangulation__2_1Triangulation_ref_Fig_neighbors"/><image type="html" name="neighbors.png">Vertices and neighbors.</image>
 <image type="latex" name="neighbors.png">Vertices and neighbors.</image>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>is the geometric traits which must be a model of the concept <computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tds</parametername>
</parameternamelist>
<parameterdescription>
<para>is the triangulation data structure which must be a model of the concept <computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput>. By default, the triangulation data structure is instantiated by <computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">Triangulation_data_structure_2</ref> &lt; <ref refid="classCGAL_1_1Triangulation__vertex__base__2" kindref="compound">Triangulation_vertex_base_2</ref>&lt;Gt&gt;, <ref refid="classCGAL_1_1Triangulation__face__base__2" kindref="compound">Triangulation_face_base_2</ref>&lt;Gt&gt; &gt;</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Traversal of the Triangulation</bold><linebreak/>
</para>
<para>A triangulation can be seen as a container of faces and vertices. Therefore the triangulation provides several iterators and circulators that allow to traverse it completely or partially.</para>
<para><bold>Traversal of the Convex Hull</bold><linebreak/>
</para>
<para>Applied on the infinite vertex the above functions allow to visit the vertices on the convex hull and the infinite edges and faces. Note that a counterclockwise traversal of the vertices adjacent to the infinite vertex is a clockwise traversal of the convex hull.</para>
<para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">CGAL::Triangulation_2&lt;Traits, Tds&gt;</ref><sp/><ref refid="classCGAL_1_1Triangulation__2_1a97deb44f4edfb6baa30c12a22f928dc7" kindref="member">Triangulation_2</ref>;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__2_1a97deb44f4edfb6baa30c12a22f928dc7" kindref="member">Triangulation_2</ref><sp/>t;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" kindref="member">Triangulation_2::Face_handle</ref><sp/>f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" kindref="member">Face_circulator</ref><sp/><ref refid="classCGAL_1_1Triangulation__2_1a1ca68226e40c30304c4d54685a77a7ca" kindref="member">incident_faces</ref>(t.infinite_vertex())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" kindref="member">Face_circulator</ref><sp/><ref refid="classCGAL_1_1Triangulation__2_1a1ca68226e40c30304c4d54685a77a7ca" kindref="member">incident_faces</ref>(t.infinite_vertex(),<sp/>f)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" kindref="member">Edge_circulator</ref><sp/><ref refid="classCGAL_1_1Triangulation__2_1a1708a62dea4a40f63025848e4afaefa0" kindref="member">incident_edges</ref>(t.infinite_vertex())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" kindref="member">Edge_circulator</ref><sp/><ref refid="classCGAL_1_1Triangulation__2_1a1708a62dea4a40f63025848e4afaefa0" kindref="member">incident_edges</ref>(t.infinite_vertex(),<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" kindref="member">Vertex_circulator</ref><sp/><ref refid="classCGAL_1_1Triangulation__2_1afebc0e18dc93bce4b62b1e06944a6921" kindref="member">incident_vertices</ref>(t.infinite_vertex()<sp/>v)<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" kindref="member">Vertex_circulator</ref><sp/><ref refid="classCGAL_1_1Triangulation__2_1afebc0e18dc93bce4b62b1e06944a6921" kindref="member">incident_vertices</ref>(t.infinite_vertex(),<sp/>f)<sp/>;</highlight></codeline>
</programlisting></para>
<para><bold>I/O</bold><linebreak/>
</para>
<para>The I/O operators are defined for <computeroutput>iostream</computeroutput>. The format for the iostream is an internal format.</para>
<para>The information output in the <computeroutput>iostream</computeroutput> is:</para>
<para><itemizedlist>
<listitem><para>the number of vertices (including the infinite one), the number of faces (including infinite ones), and the dimension.</para>
</listitem><listitem><para>for each vertex (except the infinite vertex), the non combinatorial information stored in that vertex (point, etc.).</para>
</listitem><listitem><para>for each faces, the indices of its vertices and the non combinatorial information (if any) in this face.</para>
</listitem><listitem><para>for each face again the indices of the neighboring faces.</para>
</listitem></itemizedlist>
</para>
<para>The index of an item (vertex of face) is the rank of this item in the output order. When dimension <formula id="33">$ &lt;$</formula> 2, the same information is output for faces of maximal dimension instead of faces.</para>
<para><bold>Implementation</bold><linebreak/>
</para>
<para>Locate is implemented by a line walk from a vertex of the face given as optional parameter (or from a finite vertex of <computeroutput><ref refid="classCGAL_1_1Triangulation__2_1a5758b4f843e2d884d759f278e154ed87" kindref="member">infinite_face()</ref></computeroutput> if no optional parameter is given). It takes time <formula id="7">$O(n)$</formula> in the worst case, but only <formula id="34">$O(\sqrt{n})$</formula> on average if the vertices are distributed uniformly at random.</para>
<para>Insertion of a point is done by locating a face that contains the point, and then splitting this face. If the point falls outside the convex hull, the triangulation is restored by flips. Apart from the location, insertion takes a time time <formula id="5">$O(1)$</formula>. This bound is only an amortized bound for points located outside the convex hull.</para>
<para>Removal of a vertex is done by removing all adjacent triangles, and re-triangulating the hole. Removal takes time <formula id="6">$O(d^2)$</formula> in the worst case, if <formula id="4">$ d$</formula> is the degree of the removed vertex, which is <formula id="5">$O(1)$</formula> for a random vertex.</para>
<para>The face, edge, and vertex iterators on finite features are derived from their counterparts visiting all (finite and infinite) features which are themselves derived from the corresponding iterators of the triangulation data structure.</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2_1_1Face" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2::Face</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classTriangulationDataStructure__2_1_1Vertex" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">TriangulationDataStructure_2::Vertex</ref></computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">CGAL::Triangulation_data_structure_2</ref>&lt;Vb,Fb&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__vertex__base__2" kindref="compound">CGAL::Triangulation_vertex_base_2</ref>&lt;Traits&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Triangulation__face__base__2" kindref="compound">CGAL::Triangulation_face_base_2</ref>&lt;Traits&gt;</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>CGAL::Constrained_Delaunay_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__Delaunay__triangulation__2"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>CGAL::Constrained_triangulation_2&lt; Traits, Tds, Itag &gt;</label>
        <link refid="classCGAL_1_1Constrained__triangulation__2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>CGAL::Delaunay_triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Delaunay__triangulation__2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>CGAL::Regular_triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Regular__triangulation__2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>CGAL::Triangulation_2&lt; Traits, Tds &gt;</label>
        <link refid="classCGAL_1_1Triangulation__2"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>CGAL::Triangulation_cw_ccw_2</label>
        <link refid="classCGAL_1_1Triangulation__cw__ccw__2"/>
      </node>
    </collaborationgraph>
    <location file="CGAL/Triangulation_2.h" line="170" column="1" bodyfile="CGAL/Triangulation_2.h" bodystart="170" bodyend="1239"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Triangulation__2_1a6126344554bd1af7dcd166a705e4e0ff" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aab68c0408fce72a3294d76f6ded2ea56" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>All_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a83de89d7d1c6e306b331b7158728bb57" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aee85b73cb094f95603939be436e63438" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5b63aff651ae1e485ea2c7d20421b4b9" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae0bd242bbe0d505aa1f7c4c366d5d56f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_face_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a40f06313bd485eed99b6ba119da98bb5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>All_face_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a93f4b88a11e455e4af2f5442e5d4824d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a395ece5a58ae27040ccbbb9503899671" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae5363996414e60613b556b14a9f87891" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>All_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abb3ae01ea08e705e49ced503e4a83026" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_vertex_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aaed9fdd0b481d9ec138548fb243752ab" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>All_vertex_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb9bbf3918a8081d21fc0c1de20b157e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a99d052d1f8a1f99c8defec48604192f5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1d4600a9428fed798c112964ba57d9f1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a38ffc4db3bc10b11ae77bbcd4fe21005" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>ccw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4185c75ba2c5ec34181fdef8fa57401c" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>circumcenter</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a031db533d1f567a2c7b0e9736f85a4f1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a49fc8cd3cd899d0c0aa6bc0f20c72a0f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>cw</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae837aea43417f936cefb715765d332e1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>difference_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a644f9730fdece05c0e951201e0012805" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad28c6e0e0e65b8aaecb1ae76d8744b33" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a5111882933f6615f618c8900e2bc6acf" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>EDGE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a997ed97a0ac906a0342ad18c91a1ec81" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Edge_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a937da59ce47b08cfc0d452901e6c3625" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>FACE</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6c6a38b0ce694a47c2323834107fa758" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1bda2ab92ccf638bb22fc223ae281b96" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aaa702188ca1171deece65da34c8f134b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af7f5d22e7244c73be90bec59a502e7aa" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Finite_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a837c6fe6f8daaec60b0276e294daf5ca" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3d7335c51c4c777fec2b9c2560f2635f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6bd40af3800321a0d0d43f489b37fc2a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af70ca2702b9de4ae712b953f6a94b9a2" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae89fd1a46ae755c79ac650fc41f6d3dd" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Finite_face_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a01c421302be46c33fd6d8de75945a1ad" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_face_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a66241217c984aa597d36d4ff6f0ff3f2" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_faces_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3df949e116750967bc46db9ba53da7c0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_faces_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a84923815e1cfca537c93cee97c0ed24f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Finite_faces_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a78d0a3bd3637897ab1abe06389899b63" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a07f0b236b51b0e8a69512561dc12734a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Finite_vertex_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a742d528593275c1fe119979b4ce74a90" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_vertex_handles</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afec203a9cabc1700b76a3f7d4b388840" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a00acf9a6484acec989b945dca69cac0b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a3dfacc0bd86f726c637b7ff86f404f84" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa47a446fc11809d30146fbcdb689a396" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>flip</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4e201a26ae4f2593c8dd2607b333ff48" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a94f47e3c6bdf5e36ae51180bcd013ad6" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1708a62dea4a40f63025848e4afaefa0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a843853eb19644389ba8d6024765eb4f7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1ca68226e40c30304c4d54685a77a7ca" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a341c4f3888b6ede6b9df55c2bb745ca3" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afebc0e18dc93bce4b62b1e06944a6921" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a58c9a0c9f69a356a31c8a7c02eff1841" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a171d77fc26d48860fa8a5711000ee690" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>includes_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a0d62215704e84f18ef9294b27f9e82b0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>inexact_locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a5758b4f843e2d884d759f278e154ed87" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>infinite_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae146d68059cd9d1430bafba2cbe25461" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1025cd7e7226ccb44d82f0fb1d63ad4e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab5282f769ba8445b872b4d32e8b38487" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a02f3c7c337f38cd9b534e6807856c106" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac5e9bc8adef80dc01a0b31c2d0234545" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a359b4c5e12af04f9235b5f2f42cae709" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert_first</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aefd64b3be7364535e808ed62faaa6a67" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert_in_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8f4a1ca36147ac331db5be089e17a2a5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert_in_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad8a56f1fb051ce731a079671799010de" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert_outside_affine_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a2c35ed5fa9ea46b55687c36a4755d592" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert_outside_convex_hull</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6a30184b0267dc1cdc9cc516440cbb4e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>insert_second</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a37b3896ab3a416fe4adff475ed625e16" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adbeb9736f9bfc588658316669cd7fb44" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a7a94b10ae76a8d4d6e762c19e05b6343" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4084823ee026d7a00a3991cd2b553fe0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_face</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8596038ef09d0d3ffcba99e912d1da" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acf8e2ef548683138d8766b6c89794fbb" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8009eb06cbe50a3fa1358d203a1fa924" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7519fb75001a53abba7e8d9127d22c5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae4becba370b2929508ec894aa2b0370d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa9ca70cc8b0cb3e0b6c0bf062d710613" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8bcea78e9ffd5cc836331c5021cd851a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad720b1a9adc835ed1a27c228eea1e36c" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Line_face_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a41a46211193d767f122504f2eb99189a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>line_walk</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a940567120751e7864c7b345eaf756642" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af61a05a0a53d009e111a3873c1796b52" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>locate</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Locate_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab97ce60b20674d0a7a4455e88c2eadb1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>mirror_edge</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9c54807a29595dc1116054cc4ac214fd" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>mirror_index</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9213aedceda4c17381960d041d4f297a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>mirror_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a62de40896ebe056bbf008eb4090eb76b" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>move</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a433cff4ceaeaba390df1a968d93a4899" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>move_if_no_collision</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ab18fcf7127c007253348fcfb37b67df4" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>number_of_faces</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abb274869c3eac8fb775702bf68c4e8f1" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac7351668deed7464974684ab3c7147ea" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a40701ad345813f8df044fd197d3c9d96" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8dc99f907cc125ce7a55024da5ddb4c0" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a01fbafc011677846a729a809b4b21a99" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>oriented_side</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6ae8b775f120094d9b0a6871f53446184f" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>OUTSIDE_AFFINE_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6afd690e18b1d2857068085d771fc354d4" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>OUTSIDE_CONVEX_HULL</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adf800f903a06c19d07d27afb2927fc71" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Point</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06ec87f55894738972350f631f6dc1fe" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Point_iterator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1acae6c6bf678ec1a90b49498862bb7fa2" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>points</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a55aff11c6b56078d7384374a898bc1b9" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Points</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a048beaadce99c9bdfeaa69dd68701c32" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>points_begin</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1adb17161924b6d2b6e7ac537d6b760728" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>points_end</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a21109eb748cd3800fe2ef92ff5f1e77e" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>push_back</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9a5dc75ed6ce4a645a5b61e5a8e88974" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4b3389b24fe7bfe703151375d15a745a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>remove_degree_3</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac00496f74f7d05465407861f5a447768" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>remove_first</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a44461f8dc31540c015f24ee3d36870ab" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>remove_second</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ae7b5594c15ef61394d76826e1fc1e8e6" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ac3beee6618a86505bfc03bcbfbb46a4a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a06f3967c92db0fe28368c31ff671c658" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ad43c112fe392ea9194b449e6116499c5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1afd84762f5a856ebdbd9786de8744feda" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>segment</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a25a5eaabf6ba1d9c9acf240b4453c09a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>set_infinite_vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1abc885b3d116e1d0b6943b211e750e472" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>side_of_oriented_circle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7b0b96c9ed11cab337313f34cd96a59" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a8b058b055ef24a4b6fc25bf110e46638" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a4511afae77c0c2978b6412d9411e4fe2" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>star_hole</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a1788d6ffa3f5986b2b07e7e0b48a2ffc" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6de738928cfecde1ae15bcbac16327ac" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a9a215e702f4b5a03d77cc8c5e27a6b54" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a176b3903b04aaad6996d1c2a56a14dcc" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a48984e6735c075b17d7a956cb396d1f5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Triangle</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a97deb44f4edfb6baa30c12a22f928dc7" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6e43f49405b43057d1b911a9f6e39404" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a6cfa7d3aaa375a25d217858b49e2eb07" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Triangulation_2</name></member>
      <member refid="classCGAL_1_1Triangulation__cw__ccw__2_1a7069704014f0d62aa327453e5bcfb44d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Triangulation_cw_ccw_2</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1addbcd86ae5679a10363f46080159d00d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1a22dbae3b466c50924759754de5865db6a4fc5b644a7c38197036955ba1662afe5" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>VERTEX</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1af48b3f6c165d50c74fe67a75caec129a" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1ade901d47c7c422f7978adf3ac0188a9d" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Vertex_circulator</name></member>
      <member refid="classCGAL_1_1Triangulation__2_1aa7993454afb8684835b6ca96731a9eca" prot="public" virt="non-virtual"><scope>CGAL::Triangulation_2</scope><name>Vertex_handle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
