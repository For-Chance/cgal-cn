<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceCGAL" kind="namespace" language="C++">
    <compoundname>CGAL</compoundname>
    <innerclass refid="classCGAL_1_1Constrained__Delaunay__triangulation__2" prot="public">CGAL::Constrained_Delaunay_triangulation_2</innerclass>
    <innerclass refid="classCGAL_1_1Constrained__triangulation__2" prot="public">CGAL::Constrained_triangulation_2</innerclass>
    <innerclass refid="classCGAL_1_1Constrained__triangulation__face__base__2" prot="public">CGAL::Constrained_triangulation_face_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Constrained__triangulation__plus__2" prot="public">CGAL::Constrained_triangulation_plus_2</innerclass>
    <innerclass refid="classCGAL_1_1Delaunay__triangulation__2" prot="public">CGAL::Delaunay_triangulation_2</innerclass>
    <innerclass refid="structCGAL_1_1Exact__intersections__tag" prot="public">CGAL::Exact_intersections_tag</innerclass>
    <innerclass refid="structCGAL_1_1Exact__predicates__tag" prot="public">CGAL::Exact_predicates_tag</innerclass>
    <innerclass refid="structCGAL_1_1No__constraint__intersection__requiring__constructions__tag" prot="public">CGAL::No_constraint_intersection_requiring_constructions_tag</innerclass>
    <innerclass refid="structCGAL_1_1No__constraint__intersection__tag" prot="public">CGAL::No_constraint_intersection_tag</innerclass>
    <innerclass refid="structCGAL_1_1No__intersection__tag" prot="public">CGAL::No_intersection_tag</innerclass>
    <innerclass refid="classCGAL_1_1Regular__triangulation__2" prot="public">CGAL::Regular_triangulation_2</innerclass>
    <innerclass refid="classCGAL_1_1Regular__triangulation__face__base__2" prot="public">CGAL::Regular_triangulation_face_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Regular__triangulation__vertex__base__2" prot="public">CGAL::Regular_triangulation_vertex_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__2" prot="public">CGAL::Triangulation_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__cw__ccw__2" prot="public">CGAL::Triangulation_cw_ccw_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__face__base__2" prot="public">CGAL::Triangulation_face_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__face__base__with__info__2" prot="public">CGAL::Triangulation_face_base_with_info_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__hierarchy__2" prot="public">CGAL::Triangulation_hierarchy_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__hierarchy__vertex__base__2" prot="public">CGAL::Triangulation_hierarchy_vertex_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__vertex__base__2" prot="public">CGAL::Triangulation_vertex_base_2</innerclass>
    <innerclass refid="classCGAL_1_1Triangulation__vertex__base__with__info__2" prot="public">CGAL::Triangulation_vertex_base_with_info_2</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PkgDrawConstrainedTriangulation2_1gaa8ce0931d83c1728d860109afa4b2661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CT2</type>
          </param>
          <param>
            <type>class InDomainPMap</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const CT2 &amp;ct2, InDomainPMap ipm)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const CT2 &amp;</type>
          <declname>ct2</declname>
        </param>
        <param>
          <type>InDomainPMap</type>
          <declname>ipm</declname>
        </param>
        <briefdescription>
<para>opens a new window and draws a constrained triangulation. </para>
        </briefdescription>
        <detaileddescription>
<para>If the triangulation has constraints they are drawn. The faces inside and outside of the domain, based on the property map, are drawn in different colors.</para>
<para>A call to this function blocks the execution of the program until the drawing window is closed. This function requires <computeroutput>CGAL_Qt6</computeroutput>, and is only available if the macro <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput> is defined. Linking with the cmake target <computeroutput>CGAL::CGAL_Basic_viewer</computeroutput> will link with <computeroutput>CGAL_Qt6</computeroutput> and add the definition <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CT2</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound">CGAL::Constrained_triangulation_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDomainPMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a class model of <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>CT2::Face_handle</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ct2</parametername>
</parameternamelist>
<parameterdescription>
<para>the constrained triangulation to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipm</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map defining the faces which are in the domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class Gt, class Tds, class Itag, class InDomainPMap&gt;</computeroutput></para>
<para><computeroutput> void CGAL::draw(const CGAL::Constrained_triangulation_2&lt;Gt, Tds, Itag&gt;&amp; ct2, InDomainPMap ipm); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_constrained_triangulation_2.h" line="28" column="8" declfile="CGAL/draw_constrained_triangulation_2.h" declline="28" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawConstrainedTriangulation2_1gab61ec32dbb931e808ac62d324531c838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CT2</type>
          </param>
          <param>
            <type>class InDomainPMap</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const CT2 &amp;ct2, InDomainPMap ipm, CGAL::Graphics_scene &amp;gs)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const CT2 &amp;</type>
          <declname>ct2</declname>
        </param>
        <param>
          <type>InDomainPMap</type>
          <declname>ipm</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <briefdescription>
<para>adds the vertices, edges and faces of <computeroutput>ct2</computeroutput> into the given graphic scene <computeroutput>gs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the triangulation has constraints they are drawn. The faces inside and outside of the domain, based on the property map, are drawn in different colors. Note that <computeroutput>gs</computeroutput> is not cleared before being filled (to enable to draw several data structures in the same basic viewer).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CT2</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Constrained__triangulation__2" kindref="compound">CGAL::Constrained_triangulation_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDomainPMap</parametername>
</parameternamelist>
<parameterdescription>
<para>a class model of <computeroutput>ReadablePropertyMap</computeroutput> with <computeroutput>CT2::Face_handle</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ct2</parametername>
</parameternamelist>
<parameterdescription>
<para>the constrained triangulation to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipm</parametername>
</parameternamelist>
<parameterdescription>
<para>the property map defining the faces which are in the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gs</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphic scene to fill.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class Gt, class Tds, class Itag, class InDomainPMap&gt;</computeroutput></para>
<para><computeroutput> void CGAL::add_to_graphics_scene(const CGAL::Constrained_triangulation_2&lt;Gt, Tds, Itag&gt;&amp; ct2, InDomainPMap ipm, CGAL::Graphics_scene&amp; gs); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_constrained_triangulation_2.h" line="53" column="6" declfile="CGAL/draw_constrained_triangulation_2.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawTriangulation2_1gaaae9847caff7054677faf3573497d9be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T2</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const T2 &amp;at2, const GSOptions &amp;gso)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const T2 &amp;</type>
          <declname>at2</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>opens a new window and draws a triangulation. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the drawing are taken from the optional graphics scene options parameter.</para>
<para>A call to this function blocks the execution of the program until the drawing window is closed. This function requires <computeroutput>CGAL_Qt6</computeroutput>, and is only available if the macro <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput> is defined. Linking with the cmake target <computeroutput>CGAL::CGAL_Basic_viewer</computeroutput> will link with <computeroutput>CGAL_Qt6</computeroutput> and add the definition <computeroutput>CGAL_USE_BASIC_VIEWER</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T2</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">CGAL::Triangulation_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>GraphicsSceneOptions</computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>at2</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulation to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class Gt, class Tds, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::draw(const CGAL::Triangulation_2&lt;Gt, Tds&gt;&amp; at2, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_triangulation_2.h" line="28" column="8" declfile="CGAL/draw_triangulation_2.h" declline="28" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawTriangulation2_1ga5b2aa57d37e1b52c7f4a3a879fd40dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::draw</definition>
        <argsstring>(const T2 &amp;at2)</argsstring>
        <name>draw</name>
        <qualifiedname>CGAL::draw</qualifiedname>
        <param>
          <type>const T2 &amp;</type>
          <declname>at2</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawConstrainedTriangulation2_1gaa8ce0931d83c1728d860109afa4b2661" kindref="member">CGAL::draw</ref>(at2, Graphics_scene_options{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_triangulation_2.h" line="36" column="8" declfile="CGAL/draw_triangulation_2.h" declline="36" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawTriangulation2_1ga3b2995676eace30ef57c873bff34aa18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T2</type>
          </param>
          <param>
            <type>class GSOptions</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const T2 &amp;at2, CGAL::Graphics_scene &amp;gs, const GSOptions &amp;gso)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const T2 &amp;</type>
          <declname>at2</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <param>
          <type>const GSOptions &amp;</type>
          <declname>gso</declname>
        </param>
        <briefdescription>
<para>adds the vertices, edges and faces of <computeroutput>at2</computeroutput> into the given graphic scene <computeroutput>gs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters of the cells are taken from the optional graphics scene options parameter <computeroutput>gso</computeroutput>. Note that <computeroutput>gs</computeroutput> is not cleared before being filled (to enable to draw several data structures in the same basic viewer).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T2</parametername>
</parameternamelist>
<parameterdescription>
<para>which must be an instantiation of a <computeroutput><ref refid="classCGAL_1_1Triangulation__2" kindref="compound">CGAL::Triangulation_2</ref>&lt;...&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>GSOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>a model of <computeroutput>GraphicsSceneOptions</computeroutput> concept.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>at2</parametername>
</parameternamelist>
<parameterdescription>
<para>the triangulation to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gs</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphic scene to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gso</parametername>
</parameternamelist>
<parameterdescription>
<para>the graphics scene options parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<htmlonly block="yes"> &lt;div class=&quot;CGALAdvanced&quot;&gt; &lt;div&gt;Advanced&lt;/div&gt; </htmlonly></para>
<para>The real declaration of this function template is:</para>
<para><computeroutput> template&lt;class Gt, class Tds, class GSOptions&gt;</computeroutput></para>
<para><computeroutput> void CGAL::add_to_graphics_scene(const CGAL::Triangulation_2&lt;Gt, Tds&gt;&amp; at2, CGAL::Graphics_scene&amp; gs, const GSOptions&amp; gso); </computeroutput> <htmlonly block="yes"> &lt;/div&gt; </htmlonly> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_triangulation_2.h" line="61" column="6" declfile="CGAL/draw_triangulation_2.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgDrawTriangulation2_1ga6604e04e2c8f8feba81132711c3e628a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::add_to_graphics_scene</definition>
        <argsstring>(const T2 &amp;at2, CGAL::Graphics_scene &amp;gs)</argsstring>
        <name>add_to_graphics_scene</name>
        <qualifiedname>CGAL::add_to_graphics_scene</qualifiedname>
        <param>
          <type>const T2 &amp;</type>
          <declname>at2</declname>
        </param>
        <param>
          <type>CGAL::Graphics_scene &amp;</type>
          <declname>gs</declname>
        </param>
        <briefdescription>
<para>A shortcut to <computeroutput><ref refid="group__PkgDrawConstrainedTriangulation2_1gab61ec32dbb931e808ac62d324531c838" kindref="member">CGAL::add_to_graphics_scene</ref>(at2, gs, Graphics_scene_options{})</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/draw_triangulation_2.h" line="71" column="6" declfile="CGAL/draw_triangulation_2.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgTriangulation2Miscellaneous_1gabe989734ed8d720d4385900d50b3c9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename InDomainPmap</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::mark_domain_in_triangulation</definition>
        <argsstring>(CT &amp;ct, InDomainPmap ipm)</argsstring>
        <name>mark_domain_in_triangulation</name>
        <qualifiedname>CGAL::mark_domain_in_triangulation</qualifiedname>
        <param>
          <type>CT &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>InDomainPmap</type>
          <declname>ipm</declname>
        </param>
        <briefdescription>
<para>marks faces connected with non constrained edges as inside of the domain based on the nesting level. </para>
        </briefdescription>
        <detaileddescription>
<para>The function starts from facets incident to the infinite vertex, with a nesting level of 0. Then recursively considers the non-explored facets incident to constrained edges bounding the former set and increase the nesting level by 1. Facets in the domain are those with an odd nesting level.</para>
<para>For this overload, the &quot;in domain&quot; information is set in <computeroutput>ipm</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CT</parametername>
</parameternamelist>
<parameterdescription>
<para>a constrained triangulation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InDomainPmap</parametername>
</parameternamelist>
<parameterdescription>
<para>a class model of <computeroutput>ReadWritePropertyMap</computeroutput> with <computeroutput>CT::Face_handle</computeroutput> as key type and <computeroutput>bool</computeroutput> as value type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ct.dimension() == 2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/mark_domain_in_triangulation.h" line="23" column="1" declfile="CGAL/mark_domain_in_triangulation.h" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PkgTriangulation2Miscellaneous_1ga0409755d0eb89100810230443a85e7eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CGAL::mark_domain_in_triangulation</definition>
        <argsstring>(CT &amp;ct)</argsstring>
        <name>mark_domain_in_triangulation</name>
        <qualifiedname>CGAL::mark_domain_in_triangulation</qualifiedname>
        <param>
          <type>CT &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>marks faces connected with non constrained edges as inside of the domain based on the nesting level. </para>
        </briefdescription>
        <detaileddescription>
<para>The function starts from facets incident to the infinite vertex, with a nesting level of 0. Then recursively considers the non-explored facets incident to constrained edges bounding the former set and increase the nesting level by 1. Facets in the domain are those with an odd nesting level.</para>
<para>For this overload, the &quot;in domain&quot; marker is contained in the face type of <computeroutput>CT</computeroutput>, which must provide the methods <computeroutput>bool is_in_domain()</computeroutput> and <computeroutput>void set_in_domain(bool)</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CT</parametername>
</parameternamelist>
<parameterdescription>
<para>a constrained triangulation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>ct.dimension() == 2</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/mark_domain_in_triangulation.h" line="47" column="1" declfile="CGAL/mark_domain_in_triangulation.h" declline="47" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CGAL/Constrained_Delaunay_triangulation_2.h" line="2" column="1"/>
  </compounddef>
</doxygen>
