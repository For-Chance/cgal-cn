<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classDelaunayTriangulationTraits__2" kind="class" language="C++" prot="public">
    <compoundname>DelaunayTriangulationTraits_2</compoundname>
    <includes local="no">Concepts/DelaunayTriangulationTraits_2.h</includes>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits__2_1a18e634b998dbafc0bef232eb09bfb547" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits_2::Line_2</definition>
        <argsstring></argsstring>
        <name>Line_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::Line_2</qualifiedname>
        <briefdescription>
<para>The line type. </para>
        </briefdescription>
        <detaileddescription>
<para>This type is required only if some dual functions are called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="46" column="26" bodyfile="Concepts/DelaunayTriangulationTraits_2.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits__2_1af58b5f8e4f0b69a6a567fe16926fb88f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits_2::Ray_2</definition>
        <argsstring></argsstring>
        <name>Ray_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::Ray_2</qualifiedname>
        <briefdescription>
<para>The type for ray. </para>
        </briefdescription>
        <detaileddescription>
<para>This type is required only if some dual functions are called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="52" column="26" bodyfile="Concepts/DelaunayTriangulationTraits_2.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits__2_1a5a5ec4e6dedcf21bcd68efa60cc6d983" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits_2::Side_of_oriented_circle_2</definition>
        <argsstring></argsstring>
        <name>Side_of_oriented_circle_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::Side_of_oriented_circle_2</qualifiedname>
        <briefdescription>
<para>A function object to perform an incircle test for a point and three other points. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator:</para>
<para><computeroutput>Oriented_side operator()(Point p, Point q, Point r, Point s)</computeroutput> which takes four points <computeroutput>p, q, r, s</computeroutput> as arguments and returns <computeroutput>ON_POSITIVE_SIDE</computeroutput>, <computeroutput>ON_NEGATIVE_SIDE</computeroutput> or, <computeroutput>ON_ORIENTED_BOUNDARY</computeroutput> according to the position of points <computeroutput>s</computeroutput> with respect to the oriented circle through <computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="64" column="26" bodyfile="Concepts/DelaunayTriangulationTraits_2.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits__2_1abdf43bd5be46b551217a6d6d4b8b365f" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits_2::Compare_distance_2</definition>
        <argsstring></argsstring>
        <name>Compare_distance_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::Compare_distance_2</qualifiedname>
        <briefdescription>
<para>A function object to compare two distances for three points. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator:</para>
<para><computeroutput>Comparison_result operator()(Point_2 p, Point_2 q, Point_2 r)</computeroutput> which returns <computeroutput>SMALLER</computeroutput>, <computeroutput>EQUAL</computeroutput> or <computeroutput>LARGER</computeroutput> according to the distance between <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> being smaller, equal or larger than the distance between <computeroutput>p</computeroutput> and <computeroutput>r</computeroutput>. This type is only require if <computeroutput>nearest_vertex</computeroutput> queries are issued. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="76" column="26" bodyfile="Concepts/DelaunayTriangulationTraits_2.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits__2_1a64be511b875fa8bd10bd5b1191e2115b" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits_2::Construct_circumcenter_2</definition>
        <argsstring></argsstring>
        <name>Construct_circumcenter_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::Construct_circumcenter_2</qualifiedname>
        <briefdescription>
<para>A function object to construct the circumcenter of three points. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator:</para>
<para><computeroutput>Point_2 operator()(Point_2 p, Point_2 q, Point_2 r)</computeroutput> which returns the circumcenter of the three points <computeroutput>p, q</computeroutput> and <computeroutput>r</computeroutput>. This type is required only if functions relative to the dual Voronoi diagram are called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="87" column="26" bodyfile="Concepts/DelaunayTriangulationTraits_2.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits__2_1aebe2477cda42dade4b704a54f32a0802" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits_2::Construct_bisector_2</definition>
        <argsstring></argsstring>
        <name>Construct_bisector_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::Construct_bisector_2</qualifiedname>
        <briefdescription>
<para>A function object to construct the bisector of two points. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator:</para>
<para><computeroutput>Line_2 operator()(Point_2 p, Point_2 q)</computeroutput> which constructs the bisector line of points <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput>. This type is required only if functions relative to the dual Voronoi diagram are called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="99" column="26" bodyfile="Concepts/DelaunayTriangulationTraits_2.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classDelaunayTriangulationTraits__2_1af6b75d3ef473e4b20846e9ebe5b8decd" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type DelaunayTriangulationTraits_2::Construct_ray_2</definition>
        <argsstring></argsstring>
        <name>Construct_ray_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::Construct_ray_2</qualifiedname>
        <briefdescription>
<para>A function object to build a ray from a point and a line. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the operator:</para>
<para><computeroutput>Ray_2 operator() ( Point_2 p, Line_2 l);</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="107" column="26" bodyfile="Concepts/DelaunayTriangulationTraits_2.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classDelaunayTriangulationTraits__2_1a23be1b9e0b3ad3f52a0df873216c4108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DelaunayTriangulationTraits_2::DelaunayTriangulationTraits_2</definition>
        <argsstring>()</argsstring>
        <name>DelaunayTriangulationTraits_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::DelaunayTriangulationTraits_2</qualifiedname>
        <briefdescription>
<para>default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayTriangulationTraits__2_1a3199dbcb9c338b0e785858120f24fee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DelaunayTriangulationTraits_2::DelaunayTriangulationTraits_2</definition>
        <argsstring>(DelaunayTriangulationTraits_2 dtt)</argsstring>
        <name>DelaunayTriangulationTraits_2</name>
        <qualifiedname>DelaunayTriangulationTraits_2::DelaunayTriangulationTraits_2</qualifiedname>
        <param>
          <type><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></type>
          <declname>dtt</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayTriangulationTraits__2_1ada8b656839e63f5c7b5a52c8b8adabc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></type>
        <definition>DelaunayTriangulationTraits_2 DelaunayTriangulationTraits_2::operator=</definition>
        <argsstring>(traits2)</argsstring>
        <name>operator=</name>
        <qualifiedname>DelaunayTriangulationTraits_2::operator=</qualifiedname>
        <param>
          <type>traits2</type>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="129" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access to Predicate and Constructor Objects</header>
      <memberdef kind="function" id="classDelaunayTriangulationTraits__2_1a99bc8f691a3640ec2fbfd98b37a7d216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayTriangulationTraits__2_1a5a5ec4e6dedcf21bcd68efa60cc6d983" kindref="member">Side_of_oriented_circle_2</ref></type>
        <definition>Side_of_oriented_circle_2 DelaunayTriangulationTraits_2::side_of_oriented_circle_2_object</definition>
        <argsstring>()</argsstring>
        <name>side_of_oriented_circle_2_object</name>
        <qualifiedname>DelaunayTriangulationTraits_2::side_of_oriented_circle_2_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="140" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>The following functions are required only if member functions of the Delaunay triangulation relative to the dual Voronoi diagram are called. </para>
</description>
      <memberdef kind="function" id="classDelaunayTriangulationTraits__2_1a74aa09e9c197907effabdfc743981183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayTriangulationTraits__2_1abdf43bd5be46b551217a6d6d4b8b365f" kindref="member">Compare_distance_2</ref></type>
        <definition>Compare_distance_2 DelaunayTriangulationTraits_2::compare_distance_2_object</definition>
        <argsstring>()</argsstring>
        <name>compare_distance_2_object</name>
        <qualifiedname>DelaunayTriangulationTraits_2::compare_distance_2_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayTriangulationTraits__2_1a5d0c94b6b810c98db1b65b3fa09d9949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayTriangulationTraits__2_1a64be511b875fa8bd10bd5b1191e2115b" kindref="member">Construct_circumcenter_2</ref></type>
        <definition>Construct_circumcenter_2 DelaunayTriangulationTraits_2::construct_circumcenter_2_object</definition>
        <argsstring>()</argsstring>
        <name>construct_circumcenter_2_object</name>
        <qualifiedname>DelaunayTriangulationTraits_2::construct_circumcenter_2_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="159" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayTriangulationTraits__2_1ad37de1794d7b76f7b43893b545f4c5bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayTriangulationTraits__2_1aebe2477cda42dade4b704a54f32a0802" kindref="member">Construct_bisector_2</ref></type>
        <definition>Construct_bisector_2 DelaunayTriangulationTraits_2::construct_bisector_2_object</definition>
        <argsstring>()</argsstring>
        <name>construct_bisector_2_object</name>
        <qualifiedname>DelaunayTriangulationTraits_2::construct_bisector_2_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="164" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classDelaunayTriangulationTraits__2_1aa822f6d90e00a0c1324bbb82b66a9261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDelaunayTriangulationTraits__2_1af6b75d3ef473e4b20846e9ebe5b8decd" kindref="member">Construct_ray_2</ref></type>
        <definition>Construct_ray_2 DelaunayTriangulationTraits_2::construct_ray_2_object</definition>
        <argsstring>()</argsstring>
        <name>construct_ray_2_object</name>
        <qualifiedname>DelaunayTriangulationTraits_2::construct_ray_2_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Concepts/DelaunayTriangulationTraits_2.h" line="170" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>In addition to the requirements of the concept <computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput> the concept <computeroutput><ref refid="classDelaunayTriangulationTraits__2" kindref="compound">DelaunayTriangulationTraits_2</ref></computeroutput> requires a predicate to check the empty circle property. The corresponding predicate type is called type <computeroutput>Side_of_oriented_circle_2</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para></para>
<para>The additional types <computeroutput>Line_2</computeroutput>, <computeroutput>Ray_2</computeroutput> and the constructor objects <computeroutput>Construct_ray_2</computeroutput>, <computeroutput>Construct_circumcenter_2</computeroutput>, <computeroutput>Construct_bisector_2</computeroutput>, <computeroutput>Construct_midpoint</computeroutput> are used to build the dual Voronoi diagram and are required only if the dual functions are called. The additional predicate type <computeroutput>Compare_distance_2</computeroutput> is required if the method <computeroutput>nearest_vertex()</computeroutput> is used.</para>
<para><variablelist>
<varlistentry><term>Refines</term></varlistentry>
<listitem><para><computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><variablelist>
<varlistentry><term>Has models</term></varlistentry>
<listitem><para></para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para>All models of the CGAL concept <computeroutput><ref refid="classKernel" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">Kernel</ref></computeroutput> </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Projection__traits__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Projection_traits_3</ref>&lt;K&gt;</computeroutput> (not for dual Voronoi functions) </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Projection__traits__xy__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Projection_traits_xy_3</ref>&lt;K&gt;</computeroutput> (not for dual Voronoi functions) </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Projection__traits__yz__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Projection_traits_yz_3</ref>&lt;K&gt;</computeroutput> (not for dual Voronoi functions) </para>
</listitem>
<varlistentry><term></term></varlistentry>
<listitem><para><computeroutput><ref refid="classCGAL_1_1Projection__traits__xz__3" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Kernel_23.tag">CGAL::Projection_traits_xz_3</ref>&lt;K&gt;</computeroutput> (not for dual Voronoi functions) </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classTriangulationTraits__2" kindref="compound">TriangulationTraits_2</ref></computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="Concepts/DelaunayTriangulationTraits_2.h" line="36" column="1" bodyfile="Concepts/DelaunayTriangulationTraits_2.h" bodystart="36" bodyend="174"/>
    <listofallmembers>
      <member refid="classDelaunayTriangulationTraits__2_1abdf43bd5be46b551217a6d6d4b8b365f" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>Compare_distance_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1a74aa09e9c197907effabdfc743981183" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>compare_distance_2_object</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1aebe2477cda42dade4b704a54f32a0802" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>Construct_bisector_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1ad37de1794d7b76f7b43893b545f4c5bd" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>construct_bisector_2_object</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1a64be511b875fa8bd10bd5b1191e2115b" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>Construct_circumcenter_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1a5d0c94b6b810c98db1b65b3fa09d9949" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>construct_circumcenter_2_object</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1af6b75d3ef473e4b20846e9ebe5b8decd" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>Construct_ray_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1aa822f6d90e00a0c1324bbb82b66a9261" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>construct_ray_2_object</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1a23be1b9e0b3ad3f52a0df873216c4108" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>DelaunayTriangulationTraits_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1a3199dbcb9c338b0e785858120f24fee5" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>DelaunayTriangulationTraits_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1a18e634b998dbafc0bef232eb09bfb547" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>Line_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1ada8b656839e63f5c7b5a52c8b8adabc2" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>operator=</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1af58b5f8e4f0b69a6a567fe16926fb88f" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>Ray_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1a5a5ec4e6dedcf21bcd68efa60cc6d983" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>Side_of_oriented_circle_2</name></member>
      <member refid="classDelaunayTriangulationTraits__2_1a99bc8f691a3640ec2fbfd98b37a7d216" prot="public" virt="non-virtual"><scope>DelaunayTriangulationTraits_2</scope><name>side_of_oriented_circle_2_object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
