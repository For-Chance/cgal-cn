<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classCGAL_1_1Apollonius__graph__2" kind="class" language="C++" prot="public">
    <compoundname>CGAL::Apollonius_graph_2</compoundname>
    <derivedcompoundref refid="classCGAL_1_1Apollonius__graph__hierarchy__2" prot="public" virt="non-virtual">CGAL::Apollonius_graph_hierarchy_2&lt; Gt, Agds &gt;</derivedcompoundref>
    <includes local="no">CGAL/Apollonius_graph_2.h</includes>
    <templateparamlist>
      <param>
        <type>typename Gt</type>
      </param>
      <param>
        <type>typename Agds</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Types</header>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1adc99b3b3a8d7adc7f5b4e38a21733985" prot="public" static="no">
        <type>Agds</type>
        <definition>typedef Agds CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Data_structure</definition>
        <argsstring></argsstring>
        <name>Data_structure</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Data_structure</qualifiedname>
        <briefdescription>
<para>A type for the underlying data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="66" column="14" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a61636138d13c212ff2a6dd4ff5f816c9" prot="public" static="no">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1adc99b3b3a8d7adc7f5b4e38a21733985" kindref="member">Data_structure</ref></type>
        <definition>typedef Data_structure CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Triangulation_data_structure</definition>
        <argsstring></argsstring>
        <name>Triangulation_data_structure</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Triangulation_data_structure</qualifiedname>
        <briefdescription>
<para>Same as the <computeroutput>Data_structure</computeroutput> type. </para>
        </briefdescription>
        <detaileddescription>
<para>This type has been introduced in order for the <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref></computeroutput> class to be a model of the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Voronoi_diagram_2.tag">DelaunayGraph_2</ref></computeroutput> concept. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="73" column="24" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a1e780c09c97d949d3425144a8cc81e1a" prot="public" static="no">
        <type>Gt</type>
        <definition>typedef Gt CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Geom_traits</definition>
        <argsstring></argsstring>
        <name>Geom_traits</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Geom_traits</qualifiedname>
        <briefdescription>
<para>A type for the geometric traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="78" column="12" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a4417369c58be047f0159259f4a679a9e" prot="public" static="no">
        <type>Gt::Point_2</type>
        <definition>typedef Gt::Point_2 CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Point_2</definition>
        <argsstring></argsstring>
        <name>Point_2</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Point_2</qualifiedname>
        <briefdescription>
<para>A type for the point defined in the geometric traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="84" column="21" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1aef591204a5abd776cd7717b258b52f69" prot="public" static="no">
        <type>Gt::Site_2</type>
        <definition>typedef Gt::Site_2 CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Site_2</definition>
        <argsstring></argsstring>
        <name>Site_2</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Site_2</qualifiedname>
        <briefdescription>
<para>A type for the Apollonius site, defined in the geometric traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="89" column="20" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Handles And Iterators</header>
      <description><para>The vertices and faces of the Apollonius graph are accessed through <computeroutput>handles</computeroutput>, <computeroutput>iterators</computeroutput>, and <computeroutput>circulators</computeroutput>.</para>
<para>The iterators and circulators are all bidirectional and non-mutable. The circulators and iterators are assignable to the corresponding handle types, and they are also convertible to the corresponding handles. The edges of the Apollonius graph can also be visited through iterators and circulators, the edge circulators and iterators are also bidirectional and non-mutable. In the following, we call <emphasis>infinite</emphasis> any face or edge incident to the infinite vertex and the infinite vertex itself. Any other feature (face, edge or vertex) of the Apollonius graph is said to be <emphasis>finite</emphasis>. Some iterators (the <computeroutput>All</computeroutput> iterators ) allow to visit finite or infinite features while the others (the <computeroutput>Finite</computeroutput> iterators) visit only finite features. Circulators visit both infinite and finite features. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1ab1f5de353e920892190337b1b76cd509" prot="public" static="no">
        <type>Data_structure::Edge</type>
        <definition>typedef Data_structure::Edge CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Edge</definition>
        <argsstring></argsstring>
        <name>Edge</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Edge</qualifiedname>
        <briefdescription>
<para>the edge type. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2_1ab1f5de353e920892190337b1b76cd509" kindref="member">Edge(f,i)</ref></computeroutput> is the edge common to faces <computeroutput>f</computeroutput> and <computeroutput>f.neighbor(i)</computeroutput>. It is also the edge joining the vertices <computeroutput>vertex(cw(i))</computeroutput> and <computeroutput>vertex(ccw(i))</computeroutput> of <computeroutput>f</computeroutput>. <simplesect kind="pre"><para><computeroutput>i</computeroutput> must be <computeroutput>0</computeroutput>, <computeroutput>1</computeroutput> or <computeroutput>2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="118" column="30" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a17245aed36840bee031fc4fa908d2450" prot="public" static="no">
        <type>Data_structure::Vertex</type>
        <definition>typedef Data_structure::Vertex CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Vertex</definition>
        <argsstring></argsstring>
        <name>Vertex</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Vertex</qualifiedname>
        <briefdescription>
<para>A type for a vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="123" column="32" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a5fd4209127d34c18ac0885520aab5520" prot="public" static="no">
        <type>Data_structure::Face</type>
        <definition>typedef Data_structure::Face CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Face</definition>
        <argsstring></argsstring>
        <name>Face</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Face</qualifiedname>
        <briefdescription>
<para>A type for a face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="128" column="30" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" prot="public" static="no">
        <type>Data_structure::Vertex_handle</type>
        <definition>typedef Data_structure::Vertex_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Vertex_handle</definition>
        <argsstring></argsstring>
        <name>Vertex_handle</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Vertex_handle</qualifiedname>
        <briefdescription>
<para>A type for a handle to a vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="133" column="39" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" prot="public" static="no">
        <type>Data_structure::Face_handle</type>
        <definition>typedef Data_structure::Face_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Face_handle</definition>
        <argsstring></argsstring>
        <name>Face_handle</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Face_handle</qualifiedname>
        <briefdescription>
<para>A type for a handle to a face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="138" column="37" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a7c2be7467b149c7c76eab8ea3b1e2d33" prot="public" static="no">
        <type>Data_structure::Vertex_circulator</type>
        <definition>typedef Data_structure::Vertex_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Vertex_circulator</definition>
        <argsstring></argsstring>
        <name>Vertex_circulator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Vertex_circulator</qualifiedname>
        <briefdescription>
<para>A type for a circulator over vertices incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="143" column="43" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a6935414a5009edc49af24e8100deed54" prot="public" static="no">
        <type>Data_structure::Face_circulator</type>
        <definition>typedef Data_structure::Face_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Face_circulator</definition>
        <argsstring></argsstring>
        <name>Face_circulator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Face_circulator</qualifiedname>
        <briefdescription>
<para>A type for a circulator over faces incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="148" column="41" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a4a54f07541f4ef6fa55ac47cc260b619" prot="public" static="no">
        <type>Data_structure::Edge_circulator</type>
        <definition>typedef Data_structure::Edge_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Edge_circulator</definition>
        <argsstring></argsstring>
        <name>Edge_circulator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Edge_circulator</qualifiedname>
        <briefdescription>
<para>A type for a circulator over edges incident to a given vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="153" column="41" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a67efc48a9fdc072f18176cf8b2d1bf4f" prot="public" static="no">
        <type>Data_structure::Vertex_iterator</type>
        <definition>typedef Data_structure::Vertex_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::All_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>All_vertices_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::All_vertices_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over all vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="159" column="1" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a42b527855a0d86c39666fadbffe35a0e" prot="public" static="no">
        <type>Data_structure::Face_iterator</type>
        <definition>typedef Data_structure::Face_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::All_faces_iterator</definition>
        <argsstring></argsstring>
        <name>All_faces_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::All_faces_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over all faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="165" column="1" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a1a980bb005f7609fe901793c14e029eb" prot="public" static="no">
        <type>Data_structure::Edge_iterator</type>
        <definition>typedef Data_structure::Edge_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::All_edges_iterator</definition>
        <argsstring></argsstring>
        <name>All_edges_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::All_edges_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over all edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="171" column="1" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1af45600846b8c46a7cfb5ede06ff33d7e" prot="public" static="no">
        <type>Data_structure::size_type</type>
        <definition>typedef Data_structure::size_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>CGAL::Apollonius_graph_2::size_type</qualifiedname>
        <briefdescription>
<para>An unsigned integral type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="176" column="35" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a4c2e91040f1c353a7b611b55614bcf79" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Finite_vertices_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_vertices_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Finite_vertices_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="181" column="26" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a3969c0696ecb5a405a1a01a459c5b6df" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Finite_faces_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_faces_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Finite_faces_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over finite faces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="186" column="26" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a0c52fcbb3b25be0c6b78d4ae68f6661a" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Finite_edges_iterator</definition>
        <argsstring></argsstring>
        <name>Finite_edges_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Finite_edges_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over finite edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="191" column="26" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Site Iterators</header>
      <description><para>The following iterators allow respectively to visit all sites, the visible sites and the hidden sites.</para>
<para>These iterators are non-mutable, bidirectional and their value type is <computeroutput>Site_2</computeroutput>. They are all invalidated by any change in the Apollonius graph. </para>
</description>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1ade765de09304a43067546280f0302003" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Sites_iterator</definition>
        <argsstring></argsstring>
        <name>Sites_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Sites_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over all sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="205" column="26" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1a03a9c34a198c73ce1604723d4c4926ff" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Visible_sites_iterator</definition>
        <argsstring></argsstring>
        <name>Visible_sites_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Visible_sites_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over all visible sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="210" column="26" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCGAL_1_1Apollonius__graph__2_1afa1b8c7922d472b50aa9503520b12979" prot="public" static="no">
        <type><ref refid="classunspecified__type" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">unspecified_type</ref></type>
        <definition>typedef unspecified_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Hidden_sites_iterator</definition>
        <argsstring></argsstring>
        <name>Hidden_sites_iterator</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Hidden_sites_iterator</qualifiedname>
        <briefdescription>
<para>A type for an iterator over all hidden sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="215" column="26" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ad2c9b1e5cc26b9a09a2f3c3214d8d824" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ade765de09304a43067546280f0302003" kindref="member">Sites_iterator</ref></type>
        <definition>Sites_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::sites_begin</definition>
        <argsstring>() const</argsstring>
        <name>sites_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::sites_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="408" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a50982d21aad7b712945046696c71f13f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ade765de09304a43067546280f0302003" kindref="member">Sites_iterator</ref></type>
        <definition>Sites_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::sites_end</definition>
        <argsstring>() const</argsstring>
        <name>sites_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::sites_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="413" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ab2f2378456fe1cac1e2983ca59c720a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a03a9c34a198c73ce1604723d4c4926ff" kindref="member">Visible_sites_iterator</ref></type>
        <definition>Visible_sites_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::visible_sites_begin</definition>
        <argsstring>() const</argsstring>
        <name>visible_sites_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::visible_sites_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary visible site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="418" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1aa6507e4e0c85d68fb62f16bf66a3b561" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a03a9c34a198c73ce1604723d4c4926ff" kindref="member">Visible_sites_iterator</ref></type>
        <definition>Visible_sites_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::visible_sites_end</definition>
        <argsstring>() const</argsstring>
        <name>visible_sites_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::visible_sites_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="423" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1afb9d549d2654220cca50b20a478c80c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afa1b8c7922d472b50aa9503520b12979" kindref="member">Hidden_sites_iterator</ref></type>
        <definition>Hidden_sites_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::hidden_sites_begin</definition>
        <argsstring>() const</argsstring>
        <name>hidden_sites_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::hidden_sites_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary hidden site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="428" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a25f6977dceb8fd21143edcf978c04f02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afa1b8c7922d472b50aa9503520b12979" kindref="member">Hidden_sites_iterator</ref></type>
        <definition>Hidden_sites_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::hidden_sites_end</definition>
        <argsstring>() const</argsstring>
        <name>hidden_sites_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::hidden_sites_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="433" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Creation</header>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1aa5584c72f4877bcac11e5022b79bbb8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Apollonius_graph_2</definition>
        <argsstring>(Gt gt=Gt())</argsstring>
        <name>Apollonius_graph_2</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Apollonius_graph_2</qualifiedname>
        <param>
          <type>Gt</type>
          <declname>gt</declname>
          <defval>Gt()</defval>
        </param>
        <briefdescription>
<para>Creates an Apollonius graph <computeroutput>ag</computeroutput> using <computeroutput>gt</computeroutput> as geometric traits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1af387fad63bf790839d8ce5ffb2a875aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Input_iterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Apollonius_graph_2</definition>
        <argsstring>(Input_iterator first, Input_iterator beyond, Gt gt=Gt())</argsstring>
        <name>Apollonius_graph_2</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Apollonius_graph_2</qualifiedname>
        <param>
          <type>Input_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Input_iterator</type>
          <declname>beyond</declname>
        </param>
        <param>
          <type>Gt</type>
          <declname>gt</declname>
          <defval>Gt()</defval>
        </param>
        <briefdescription>
<para>Creates an Apollonius graph <computeroutput>ag</computeroutput> using <computeroutput>gt</computeroutput> as geometric traits and inserts all sites in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>Input_iterator</computeroutput> must be a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput>. The value type of <computeroutput>Input_iterator</computeroutput> must be <computeroutput>Site_2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a77b430b6cf2e494cf14099e2a0054c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::Apollonius_graph_2</definition>
        <argsstring>(const Apollonius_graph_2&lt; Gt, Agds &gt; &amp;other)</argsstring>
        <name>Apollonius_graph_2</name>
        <qualifiedname>CGAL::Apollonius_graph_2::Apollonius_graph_2</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref>&lt; Gt, Agds &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>All faces and vertices are duplicated. After the construction, <computeroutput>ag</computeroutput> and <computeroutput>other</computeroutput> refer to two different Apollonius graphs : if <computeroutput>other</computeroutput> is modified, <computeroutput>ag</computeroutput> is not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a2a701a24e0c0a5c4f54383b342e5685d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref>&lt; Gt, Agds &gt;</type>
        <definition>Apollonius_graph_2&lt; Gt, Agds &gt; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::operator=</definition>
        <argsstring>(const Apollonius_graph_2&lt; Gt, Agds &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>CGAL::Apollonius_graph_2::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref>&lt; Gt, Agds &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>ag</computeroutput> and <computeroutput>other</computeroutput> are the same object nothing is done. Otherwise, all the vertices and faces are duplicated. After the assignment, <computeroutput>ag</computeroutput> and <computeroutput>other</computeroutput> refer to different Apollonius graphs : if <computeroutput>other</computeroutput> is modified, <computeroutput>ag</computeroutput> is not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="254" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access Functions</header>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a6b4717e54ecb1feffe55b5a85b5596bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1a1e780c09c97d949d3425144a8cc81e1a" kindref="member">Geom_traits</ref> &amp;</type>
        <definition>const Geom_traits &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::geom_traits</definition>
        <argsstring>() const</argsstring>
        <name>geom_traits</name>
        <qualifiedname>CGAL::Apollonius_graph_2::geom_traits</qualifiedname>
        <briefdescription>
<para>Returns a reference to the Apollonius graph traits object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="264" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a83e2ffdb51bdbade565ef5f04f842bf3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1adc99b3b3a8d7adc7f5b4e38a21733985" kindref="member">Data_structure</ref> &amp;</type>
        <definition>const Data_structure &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::data_structure</definition>
        <argsstring>() const</argsstring>
        <name>data_structure</name>
        <qualifiedname>CGAL::Apollonius_graph_2::data_structure</qualifiedname>
        <briefdescription>
<para>Returns a reference to the underlying data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="270" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a17e25341b1e9d805a18e5e7968f5331f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1adc99b3b3a8d7adc7f5b4e38a21733985" kindref="member">Data_structure</ref> &amp;</type>
        <definition>const Data_structure &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::tds</definition>
        <argsstring>() const</argsstring>
        <name>tds</name>
        <qualifiedname>CGAL::Apollonius_graph_2::tds</qualifiedname>
        <briefdescription>
<para>Same as <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2_1a83e2ffdb51bdbade565ef5f04f842bf3" kindref="member">data_structure()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method has been added in compliance with the <computeroutput><ref refid="classDelaunayGraph__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Voronoi_diagram_2.tag">DelaunayGraph_2</ref></computeroutput> concept. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="277" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a040616ba5d85f21114b5d9f66f94f975" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <qualifiedname>CGAL::Apollonius_graph_2::dimension</qualifiedname>
        <briefdescription>
<para>Returns the dimension of the Apollonius graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="282" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1af7c36b8cf6eb82fed7f9896540c8e6f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1af45600846b8c46a7cfb5ede06ff33d7e" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::number_of_vertices</definition>
        <argsstring>() const</argsstring>
        <name>number_of_vertices</name>
        <qualifiedname>CGAL::Apollonius_graph_2::number_of_vertices</qualifiedname>
        <briefdescription>
<para>Returns the number of finite vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="287" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1af42cb4d4aceda28c842829c0f127df8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1af45600846b8c46a7cfb5ede06ff33d7e" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::number_of_visible_sites</definition>
        <argsstring>() const</argsstring>
        <name>number_of_visible_sites</name>
        <qualifiedname>CGAL::Apollonius_graph_2::number_of_visible_sites</qualifiedname>
        <briefdescription>
<para>Returns the number of visible sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="292" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1abd505d277047969aac281c3b06d3024e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1af45600846b8c46a7cfb5ede06ff33d7e" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::number_of_hidden_sites</definition>
        <argsstring>() const</argsstring>
        <name>number_of_hidden_sites</name>
        <qualifiedname>CGAL::Apollonius_graph_2::number_of_hidden_sites</qualifiedname>
        <briefdescription>
<para>Returns the number of hidden sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="297" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a9754175ffe172527164a2aa776153be9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1af45600846b8c46a7cfb5ede06ff33d7e" kindref="member">size_type</ref></type>
        <definition>size_type CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::number_of_faces</definition>
        <argsstring>() const</argsstring>
        <name>number_of_faces</name>
        <qualifiedname>CGAL::Apollonius_graph_2::number_of_faces</qualifiedname>
        <briefdescription>
<para>Returns the number of faces (both finite and infinite) of the Apollonius graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="303" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1acf04fd992512b8fc8ad6087954e4495a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" kindref="member">Face_handle</ref></type>
        <definition>Face_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::infinite_face</definition>
        <argsstring>() const</argsstring>
        <name>infinite_face</name>
        <qualifiedname>CGAL::Apollonius_graph_2::infinite_face</qualifiedname>
        <briefdescription>
<para>Returns a face incident to the <computeroutput>infinite_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="308" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a32531acecde7b014ba780c4328ed519d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::infinite_vertex</definition>
        <argsstring>() const</argsstring>
        <name>infinite_vertex</name>
        <qualifiedname>CGAL::Apollonius_graph_2::infinite_vertex</qualifiedname>
        <briefdescription>
<para>Returns the <computeroutput>infinite_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="313" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a203a6d2782af812135a3c3890f8ce842" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::finite_vertex</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertex</name>
        <qualifiedname>CGAL::Apollonius_graph_2::finite_vertex</qualifiedname>
        <briefdescription>
<para>Returns a vertex distinct from the <computeroutput>infinite_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The number of (visible) vertices in the Apollonius graph must be at least one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="319" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Face, Edge and Vertex Iterators</header>
      <description><para>The following iterators allow respectively to visit finite faces, finite edges and finite vertices of the Apollonius graph.</para>
<para>These iterators are non-mutable, bidirectional and their value types are respectively <computeroutput>Face</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. They are all invalidated by any change in the Apollonius graph. The following iterators allow respectively to visit all (both finite and infinite) faces, edges and vertices of the Apollonius graph. These iterators are non-mutable, bidirectional and their value types are respectively <computeroutput>Face</computeroutput>, <computeroutput>Edge</computeroutput> and <computeroutput>Vertex</computeroutput>. They are all invalidated by any change in the Apollonius graph. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a0676c730d2f8a39fbf85cff6ba28d856" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a4c2e91040f1c353a7b611b55614bcf79" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::finite_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::finite_vertices_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="339" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ae2308f8e4ad50c30969cffe986ffa2f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a4c2e91040f1c353a7b611b55614bcf79" kindref="member">Finite_vertices_iterator</ref></type>
        <definition>Finite_vertices_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::finite_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_vertices_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::finite_vertices_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="344" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a186d8f58c9f8835e75f3bd9900e42925" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a0c52fcbb3b25be0c6b78d4ae68f6661a" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::finite_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::finite_edges_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="349" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1aa68354f251165db9f08d69ae19e57db3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a0c52fcbb3b25be0c6b78d4ae68f6661a" kindref="member">Finite_edges_iterator</ref></type>
        <definition>Finite_edges_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::finite_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_edges_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::finite_edges_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="354" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ae1ec57a6ed30e596614d7fa9c801ee8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a3969c0696ecb5a405a1a01a459c5b6df" kindref="member">Finite_faces_iterator</ref></type>
        <definition>Finite_faces_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::finite_faces_begin</definition>
        <argsstring>() const</argsstring>
        <name>finite_faces_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::finite_faces_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary finite face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="359" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a26800688e5691e8a926568addb7cdbbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a3969c0696ecb5a405a1a01a459c5b6df" kindref="member">Finite_faces_iterator</ref></type>
        <definition>Finite_faces_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::finite_faces_end</definition>
        <argsstring>() const</argsstring>
        <name>finite_faces_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::finite_faces_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="364" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a30c5eec12ceba7c32c3156f84834f07e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a67efc48a9fdc072f18176cf8b2d1bf4f" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::all_vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::all_vertices_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary vertex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="369" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a5b2a9454def8fbd012cf7fbd976989d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a67efc48a9fdc072f18176cf8b2d1bf4f" kindref="member">All_vertices_iterator</ref></type>
        <definition>All_vertices_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::all_vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>all_vertices_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::all_vertices_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="374" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a96f40373b26f5f54f43459866589ce9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a1a980bb005f7609fe901793c14e029eb" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::all_edges_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_edges_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::all_edges_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="379" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ab22fcb7373318bd74c0569988c7f0df6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a1a980bb005f7609fe901793c14e029eb" kindref="member">All_edges_iterator</ref></type>
        <definition>All_edges_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::all_edges_end</definition>
        <argsstring>() const</argsstring>
        <name>all_edges_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::all_edges_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="384" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a0d2673ad1501aebdebecb504d965a40d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a42b527855a0d86c39666fadbffe35a0e" kindref="member">All_faces_iterator</ref></type>
        <definition>All_faces_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::all_faces_begin</definition>
        <argsstring>() const</argsstring>
        <name>all_faces_begin</name>
        <qualifiedname>CGAL::Apollonius_graph_2::all_faces_begin</qualifiedname>
        <briefdescription>
<para>Starts at an arbitrary face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="389" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1aa96070f479def52c8c41a56944b6257f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a42b527855a0d86c39666fadbffe35a0e" kindref="member">All_faces_iterator</ref></type>
        <definition>All_faces_iterator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::all_faces_end</definition>
        <argsstring>() const</argsstring>
        <name>all_faces_end</name>
        <qualifiedname>CGAL::Apollonius_graph_2::all_faces_end</qualifiedname>
        <briefdescription>
<para>Past-the-end iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="394" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Face, Edge and Vertex Circulators</header>
      <description><para>The Apollonius graph also provides circulators that allow to visit respectively all faces or edges incident to a given vertex or all vertices adjacent to a given vertex.</para>
<para>These circulators are non-mutable and bidirectional. The operator <computeroutput>operator++</computeroutput> moves the circulator counterclockwise around the vertex while the <computeroutput>operator--</computeroutput> moves clockwise. A face circulator is invalidated by any modification of the face pointed to. An edge circulator is invalidated by any modification in one of the two faces incident to the edge pointed to. A vertex circulator is invalidated by any modification in any of the faces adjacent to the vertex pointed to. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a105e4545eccd9d77d56bc427390b1497" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a6935414a5009edc49af24e8100deed54" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::incident_faces</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_faces</name>
        <qualifiedname>CGAL::Apollonius_graph_2::incident_faces</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary face incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="455" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1af1c92a3799648b599b776887d3b05435" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a6935414a5009edc49af24e8100deed54" kindref="member">Face_circulator</ref></type>
        <definition>Face_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::incident_faces</definition>
        <argsstring>(Vertex_handle v, Face_handle f) const</argsstring>
        <name>incident_faces</name>
        <qualifiedname>CGAL::Apollonius_graph_2::incident_faces</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at face <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="461" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ae737f9780b8e82660cf5cba2e91fa6ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a4a54f07541f4ef6fa55ac47cc260b619" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::incident_edges</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_edges</name>
        <qualifiedname>CGAL::Apollonius_graph_2::incident_edges</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary edge incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="467" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a246db3669d7f3f37b5b41db82b3bff93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a4a54f07541f4ef6fa55ac47cc260b619" kindref="member">Edge_circulator</ref></type>
        <definition>Edge_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::incident_edges</definition>
        <argsstring>(Vertex_handle v, Face_handle f) const</argsstring>
        <name>incident_edges</name>
        <qualifiedname>CGAL::Apollonius_graph_2::incident_edges</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at the first edge of <computeroutput>f</computeroutput> incident to <computeroutput>v</computeroutput>, in counterclockwise order around <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="474" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ab79b54196229b0e316f31087b6cdd7b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a7c2be7467b149c7c76eab8ea3b1e2d33" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::incident_vertices</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>incident_vertices</name>
        <qualifiedname>CGAL::Apollonius_graph_2::incident_vertices</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Starts at an arbitrary vertex incident to <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="480" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a2abda67bf614ad219266188bd87b8006" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a7c2be7467b149c7c76eab8ea3b1e2d33" kindref="member">Vertex_circulator</ref></type>
        <definition>Vertex_circulator CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::incident_vertices</definition>
        <argsstring>(Vertex_handle v, Face_handle f) const</argsstring>
        <name>incident_vertices</name>
        <qualifiedname>CGAL::Apollonius_graph_2::incident_vertices</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Starts at the first vertex of <computeroutput>f</computeroutput> adjacent to <computeroutput>v</computeroutput> in counterclockwise order around <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Face <computeroutput>f</computeroutput> is incident to vertex <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="487" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Predicates</header>
      <description><para>The class <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref></computeroutput> provides methods to test the finite or infinite character of any feature. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a36820d88501404365245c6a7f7fca573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::is_infinite</definition>
        <argsstring>(Vertex_handle v) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Apollonius_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff <computeroutput>v</computeroutput> is the <computeroutput>infinite_vertex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a4fb0275444193c09ffaacacaf3e57b40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::is_infinite</definition>
        <argsstring>(Face_handle f) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Apollonius_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff face <computeroutput>f</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1aeeea392554f6977a65d6c46d10bcf51f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::is_infinite</definition>
        <argsstring>(Face_handle f, int i) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Apollonius_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>(f,i)</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="511" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ac10e77936155bb1710d70d47f4d6900f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::is_infinite</definition>
        <argsstring>(const Edge &amp;e) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Apollonius_graph_2::is_infinite</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1ab1f5de353e920892190337b1b76cd509" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>e</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a82b53618d81c23d3b8f250fdbf942827" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::is_infinite</definition>
        <argsstring>(Edge_circulator ec) const</argsstring>
        <name>is_infinite</name>
        <qualifiedname>CGAL::Apollonius_graph_2::is_infinite</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a4a54f07541f4ef6fa55ac47cc260b619" kindref="member">Edge_circulator</ref></type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para><computeroutput>true</computeroutput>, iff edge <computeroutput>*ec</computeroutput> is infinite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="523" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion</header>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a30a25b908f475dc7c495a06799a8a11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Input_iterator</type>
          </param>
        </templateparamlist>
        <type>unsigned int</type>
        <definition>unsigned int CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::insert</definition>
        <argsstring>(Input_iterator first, Input_iterator beyond)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Apollonius_graph_2::insert</qualifiedname>
        <param>
          <type>Input_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Input_iterator</type>
          <declname>beyond</declname>
        </param>
        <briefdescription>
<para>Inserts the sites in the range [<computeroutput>first</computeroutput>,<computeroutput>beyond</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>The number of sites in the range [<computeroutput>first</computeroutput>, <computeroutput>beyond</computeroutput>) is returned. <simplesect kind="pre"><para><computeroutput>Input_iterator</computeroutput> must be a model of <computeroutput><ref refid="classInputIterator" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Manual.tag">InputIterator</ref></computeroutput> and its value type must be <computeroutput>Site_2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="537" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ab6e1c26710e0f262b904ec9b262553de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::insert</definition>
        <argsstring>(const Site_2 &amp;s)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Apollonius_graph_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1aef591204a5abd776cd7717b258b52f69" kindref="member">Site_2</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Inserts the site <computeroutput>s</computeroutput> in the Apollonius graph. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>s</computeroutput> is visible then the vertex handle of <computeroutput>s</computeroutput> is returned, otherwise <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle(nullptr)</ref></computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="545" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ae0d57f5e4c6af866fd2fad76ef91d652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::insert</definition>
        <argsstring>(const Site_2 &amp;s, Vertex_handle vnear)</argsstring>
        <name>insert</name>
        <qualifiedname>CGAL::Apollonius_graph_2::insert</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1aef591204a5abd776cd7717b258b52f69" kindref="member">Site_2</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>vnear</declname>
        </param>
        <briefdescription>
<para>Inserts <computeroutput>s</computeroutput> in the Apollonius graph using the site associated with <computeroutput>vnear</computeroutput> as an estimate for the nearest neighbor of the center of <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>s</computeroutput> is visible then the vertex handle of <computeroutput>s</computeroutput> is returned, otherwise <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle(nullptr)</ref></computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="554" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Removal</header>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1aaffa121b1edbcf179452a1d55026605c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::remove</definition>
        <argsstring>(Vertex_handle v)</argsstring>
        <name>remove</name>
        <qualifiedname>CGAL::Apollonius_graph_2::remove</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes the site associated to the vertex handle <computeroutput>v</computeroutput> from the Apollonius graph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><computeroutput>v</computeroutput> must correspond to a valid finite vertex of the Apollonius graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="567" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Nearest Neighbor Location</header>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a976247d6a042d6715e1f534d8ad97f8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::nearest_neighbor</definition>
        <argsstring>(const Point_2 &amp;p) const</argsstring>
        <name>nearest_neighbor</name>
        <qualifiedname>CGAL::Apollonius_graph_2::nearest_neighbor</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1a4417369c58be047f0159259f4a679a9e" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Finds the nearest neighbor of the point <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In other words it finds the site whose Apollonius cell contains <computeroutput>p</computeroutput>. Ties are broken arbitrarily and one of the nearest neighbors of <computeroutput>p</computeroutput> is returned. If there are no visible sites in the Apollonius diagram <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle(nullptr)</ref></computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="581" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a7dd7566a809e4940560d3f4ef9b7578c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
        <definition>Vertex_handle CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::nearest_neighbor</definition>
        <argsstring>(const Point_2 &amp;p, Vertex_handle vnear) const</argsstring>
        <name>nearest_neighbor</name>
        <qualifiedname>CGAL::Apollonius_graph_2::nearest_neighbor</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1a4417369c58be047f0159259f4a679a9e" kindref="member">Point_2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle</ref></type>
          <declname>vnear</declname>
        </param>
        <briefdescription>
<para>Finds the nearest neighbor of the point <computeroutput>p</computeroutput> using the site associated with <computeroutput>vnear</computeroutput> as an estimate for the nearest neighbor of <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Ties are broken arbitrarily and one of the nearest neighbors of <computeroutput>p</computeroutput> is returned. If there are no visible sites in the Apollonius diagram <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" kindref="member">Vertex_handle(nullptr)</ref></computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="591" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access to the Dual</header>
      <description><para>The <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref></computeroutput> class provides access to the duals of the faces of the graph.</para>
<para>The dual of a face of the Apollonius graph is a site. If the originating face is infinite, its dual is a site with center at infinity (or equivalently with infinite weight), which means that it can be represented geometrically as a line. If the originating face is finite, its dual is a site with finite center and weight. In the following three methods the returned object is assignable to either <computeroutput>Site_2</computeroutput> or <computeroutput>Gt::Line_2</computeroutput>, depending on whether the corresponding face of the Apollonius graph is finite or infinite, respectively. </para>
</description>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a304f5fe797914ddda090095ece7fdd7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Gt::Object_2</type>
        <definition>Gt::Object_2 CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::dual</definition>
        <argsstring>(Face_handle f) const</argsstring>
        <name>dual</name>
        <qualifiedname>CGAL::Apollonius_graph_2::dual</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" kindref="member">Face_handle</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Returns the dual corresponding to the face handle <computeroutput>f</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned object can be assigned to one of the following: <computeroutput>Site_2</computeroutput>, <computeroutput>Gt::Line_2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="613" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a6e6e1b20ab5018c96e4b0ed2c0f0ee00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Gt::Object_2</type>
        <definition>Gt::Object_2 CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::dual</definition>
        <argsstring>(All_faces_iterator it) const</argsstring>
        <name>dual</name>
        <qualifiedname>CGAL::Apollonius_graph_2::dual</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a42b527855a0d86c39666fadbffe35a0e" kindref="member">All_faces_iterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Returns the dual of the face to which <computeroutput>it</computeroutput> points to. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned object can be assigned to one of the following: <computeroutput>Site_2</computeroutput>, <computeroutput>Gt::Line_2</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="620" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ad290e2f58373af8dfd04b083540af35f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Site</type>
        <definition>Site CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::dual</definition>
        <argsstring>(Finite_faces_iterator it) const</argsstring>
        <name>dual</name>
        <qualifiedname>CGAL::Apollonius_graph_2::dual</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2_1a3969c0696ecb5a405a1a01a459c5b6df" kindref="member">Finite_faces_iterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Returns the dual of the face to which <computeroutput>it</computeroutput> points to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="626" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>I/O</header>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a2fa082ea432ff8cf0e2a1714edb64ea6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::draw_primal</definition>
        <argsstring>(Stream &amp;str) const</argsstring>
        <name>draw_primal</name>
        <qualifiedname>CGAL::Apollonius_graph_2::draw_primal</qualifiedname>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the Apollonius graph to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The following operators must be defined: <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput>, <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="642" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a4af1241444a6f3f0d7060f43d92afd73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::draw_dual</definition>
        <argsstring>(Stream &amp;str) const</argsstring>
        <name>draw_dual</name>
        <qualifiedname>CGAL::Apollonius_graph_2::draw_dual</qualifiedname>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the dual of the Apollonius graph, i.e., the Apollonius diagram, to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The following operators must be defined: <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput>, <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput>, <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Line_2)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="655" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a5c663700543fdf1850642be667068799" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::draw_primal_edge</definition>
        <argsstring>(const Edge &amp;e, Stream &amp;str) const</argsstring>
        <name>draw_primal_edge</name>
        <qualifiedname>CGAL::Apollonius_graph_2::draw_primal_edge</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1ab1f5de353e920892190337b1b76cd509" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the edge <computeroutput>e</computeroutput> of the Apollonius graph to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The following operators must be defined: <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput>, <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="666" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a76c0ba944717855d9de8dd6adc5ddb2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Stream</type>
          </param>
        </templateparamlist>
        <type>Stream &amp;</type>
        <definition>Stream &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::draw_dual_edge</definition>
        <argsstring>(const Edge &amp;e, Stream &amp;str) const</argsstring>
        <name>draw_dual_edge</name>
        <qualifiedname>CGAL::Apollonius_graph_2::draw_dual_edge</qualifiedname>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2_1ab1f5de353e920892190337b1b76cd509" kindref="member">Edge</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>Stream &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Draws the dual of the edge <computeroutput>e</computeroutput> to the stream <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The dual of <computeroutput>e</computeroutput> is an edge of the Apollonius diagram. <simplesect kind="pre"><para>The following operators must be defined: <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Segment_2)</computeroutput>, <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Ray_2)</computeroutput>, <computeroutput>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::Line_2)</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="679" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ab6d44c4ba3fca16592a6a75eefec3142" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::file_output</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>file_output</name>
        <qualifiedname>CGAL::Apollonius_graph_2::file_output</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Writes the current state of the Apollonius graph to an output stream. </para>
        </briefdescription>
        <detaileddescription>
<para>In particular, all visible and hidden sites are written as well as the underlying combinatorial data structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="687" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a4c7ae4fbb71648098764eaefb3f89b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::file_input</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>file_input</name>
        <qualifiedname>CGAL::Apollonius_graph_2::file_input</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Reads the state of the Apollonius graph from an input stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="693" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a0c6f7e8f89f2b15cd1f07c11697c138c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Apollonius_graph_2&lt; Gt, Agds &gt; &amp;ag) const</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>CGAL::Apollonius_graph_2::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref>&lt; Gt, Agds &gt; &amp;</type>
          <declname>ag</declname>
        </param>
        <briefdescription>
<para>Writes the current state of the Apollonius graph to an output stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="698" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1a3e6ee40ec025851112e67338f1613b0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, const Apollonius_graph_2&lt; Gt, Agds &gt; &amp;ag)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>CGAL::Apollonius_graph_2::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref>&lt; Gt, Agds &gt; &amp;</type>
          <declname>ag</declname>
        </param>
        <briefdescription>
<para>Reads the state of the Apollonius graph from an input stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="703" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Validity Check</header>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1aed821e45423a5b176a35e8a9de4756bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::is_valid</definition>
        <argsstring>(bool verbose=false, int level=1) const</argsstring>
        <name>is_valid</name>
        <qualifiedname>CGAL::Apollonius_graph_2::is_valid</qualifiedname>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Checks the validity of the Apollonius graph. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>verbose</computeroutput> is <computeroutput>true</computeroutput> a short message is sent to <computeroutput>std::cerr</computeroutput>. If <computeroutput>level</computeroutput> is 0, only the data structure is validated. If <computeroutput>level</computeroutput> is 1, then both the data structure and the Apollonius graph are validated. Negative values of <computeroutput>level</computeroutput> always return true, and values greater than 1 are equivalent to <computeroutput>level</computeroutput> being 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="718" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1af292b6d506335a271ece345ee9041523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>CGAL::Apollonius_graph_2::clear</qualifiedname>
        <briefdescription>
<para>Clears all contents of the Apollonius graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="728" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classCGAL_1_1Apollonius__graph__2_1ad4fddfda832750c89647807451ae757e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;::swap</definition>
        <argsstring>(Apollonius_graph_2&lt; Gt, Agds &gt; &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>CGAL::Apollonius_graph_2::swap</qualifiedname>
        <param>
          <type><ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref>&lt; Gt, Agds &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>The Apollonius graphs <computeroutput>other</computeroutput> and <computeroutput>ag</computeroutput> are swapped. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>ag.swap(other)</computeroutput> should be preferred to <computeroutput>ag = other</computeroutput> or to <computeroutput>ag(other)</computeroutput> if <computeroutput>other</computeroutput> is deleted afterwards. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CGAL/Apollonius_graph_2.h" line="736" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <computeroutput><ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">Apollonius_graph_2</ref></computeroutput> represents the Apollonius graph. </para>
    </briefdescription>
    <detaileddescription>
<para>It supports insertions and deletions of sites.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Gt</parametername>
</parameternamelist>
<parameterdescription>
<para>is the geometric traits class and must be a model of <computeroutput><ref refid="classApolloniusGraphTraits__2" kindref="compound">ApolloniusGraphTraits_2</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Agds</parametername>
</parameternamelist>
<parameterdescription>
<para>is the Apollonius graph data structure and must be a model of <computeroutput><ref refid="classApolloniusGraphDataStructure__2" kindref="compound">ApolloniusGraphDataStructure_2</ref></computeroutput> whose vertex and face must be models of <computeroutput><ref refid="classApolloniusGraphVertexBase__2" kindref="compound">ApolloniusGraphVertexBase_2</ref></computeroutput> and <computeroutput><ref refid="classTriangulationFaceBase__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_2.tag">TriangulationFaceBase_2</ref></computeroutput>, respectively. It defaults to: <programlisting><codeline><highlight class="normal"><ref refid="classCGAL_1_1Triangulation__data__structure__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/TDS_2.tag">CGAL::Triangulation_data_structure_2</ref>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Apollonius__graph__vertex__base__2" kindref="compound">CGAL::Apollonius_graph_vertex_base_2&lt;Gt,true&gt;</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classCGAL_1_1Triangulation__face__base__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Triangulation_2.tag">CGAL::Triangulation_face_base_2&lt;Gt&gt;</ref><sp/>&gt;</highlight></codeline>
</programlisting></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Traversal of the Apollonius Graph</bold><linebreak/>
</para>
<para>An Apollonius graph can be seen as a container of faces and vertices. Therefore the Apollonius graph provides several iterators and circulators that allow to traverse it (completely or partially).</para>
<para><bold>Traversal of the Convex Hull</bold><linebreak/>
</para>
<para>Applied on the <computeroutput>infinite_vertex</computeroutput> the <computeroutput>incident_*</computeroutput> functions allow to visit the vertices on the convex hull and the infinite edges and faces. Note that a counterclockwise traversal of the vertices adjacent to the <computeroutput>infinite_vertex</computeroutput> is a clockwise traversal of the convex hull.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classCGAL_1_1Apollonius__graph__2" kindref="compound">CGAL::Apollonius_graph_2&lt;Gt, Agds&gt;</ref><sp/>ag;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classCGAL_1_1Apollonius__graph__2_1a5fd4209127d34c18ac0885520aab5520" kindref="member">CGAL::Apollonius_graph_2&lt;Gt, Agds&gt;::Face</ref><sp/>f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1ab79b54196229b0e316f31087b6cdd7b0" kindref="member">incident_vertices</ref>(ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1a32531acecde7b014ba780c4328ed519d" kindref="member">infinite_vertex</ref>());</highlight></codeline>
<codeline><highlight class="normal">ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1ab79b54196229b0e316f31087b6cdd7b0" kindref="member">incident_vertices</ref>(ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1a32531acecde7b014ba780c4328ed519d" kindref="member">infinite_vertex</ref>(),<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1a105e4545eccd9d77d56bc427390b1497" kindref="member">incident_faces</ref>(ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1a32531acecde7b014ba780c4328ed519d" kindref="member">infinite_vertex</ref>());</highlight></codeline>
<codeline><highlight class="normal">ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1a105e4545eccd9d77d56bc427390b1497" kindref="member">incident_faces</ref>(ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1a32531acecde7b014ba780c4328ed519d" kindref="member">infinite_vertex</ref>(),<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1ae737f9780b8e82660cf5cba2e91fa6ab" kindref="member">incident_edges</ref>(ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1a32531acecde7b014ba780c4328ed519d" kindref="member">infinite_vertex</ref>());</highlight></codeline>
<codeline><highlight class="normal">ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1ae737f9780b8e82660cf5cba2e91fa6ab" kindref="member">incident_edges</ref>(ag.<ref refid="classCGAL_1_1Apollonius__graph__2_1a32531acecde7b014ba780c4328ed519d" kindref="member">infinite_vertex</ref>(),<sp/>f);</highlight></codeline>
</programlisting></para>
<para><variablelist>
<varlistentry><term>Is model of</term></varlistentry>
<listitem><para><computeroutput><ref refid="classDelaunayGraph__2" kindref="compound" external="/home/runner/work/cgal-cn/cgal-cn/build_doc/doc_tags/Voronoi_diagram_2.tag">DelaunayGraph_2</ref></computeroutput> </para>
</listitem>
</variablelist>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Apollonius__graph__traits__2" kindref="compound">CGAL::Apollonius_graph_traits_2</ref>&lt;K,Method_tag&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Apollonius__graph__filtered__traits__2" kindref="compound">CGAL::Apollonius_graph_filtered_traits_2</ref>&lt;CK,CM,EK,EM,FK,FM&gt;</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="classCGAL_1_1Apollonius__graph__hierarchy__2" kindref="compound">CGAL::Apollonius_graph_hierarchy_2</ref>&lt;Gt,Agds&gt;</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>CGAL::Apollonius_graph_2&lt; Gt, Agds &gt;</label>
        <link refid="classCGAL_1_1Apollonius__graph__2"/>
      </node>
      <node id="2">
        <label>CGAL::Apollonius_graph_hierarchy_2&lt; Gt, Agds &gt;</label>
        <link refid="classCGAL_1_1Apollonius__graph__hierarchy__2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="CGAL/Apollonius_graph_2.h" line="56" column="1" bodyfile="CGAL/Apollonius_graph_2.h" bodystart="56" bodyend="740"/>
    <listofallmembers>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a96f40373b26f5f54f43459866589ce9c" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>all_edges_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ab22fcb7373318bd74c0569988c7f0df6" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>all_edges_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a1a980bb005f7609fe901793c14e029eb" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>All_edges_iterator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a0d2673ad1501aebdebecb504d965a40d" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>all_faces_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1aa96070f479def52c8c41a56944b6257f" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>all_faces_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a42b527855a0d86c39666fadbffe35a0e" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>All_faces_iterator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a30c5eec12ceba7c32c3156f84834f07e" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>all_vertices_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a5b2a9454def8fbd012cf7fbd976989d7" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>all_vertices_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a67efc48a9fdc072f18176cf8b2d1bf4f" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>All_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1aa5584c72f4877bcac11e5022b79bbb8b" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Apollonius_graph_2</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1af387fad63bf790839d8ce5ffb2a875aa" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Apollonius_graph_2</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a77b430b6cf2e494cf14099e2a0054c1b" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Apollonius_graph_2</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1af292b6d506335a271ece345ee9041523" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>clear</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1adc99b3b3a8d7adc7f5b4e38a21733985" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Data_structure</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a83e2ffdb51bdbade565ef5f04f842bf3" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>data_structure</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a040616ba5d85f21114b5d9f66f94f975" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>dimension</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a4af1241444a6f3f0d7060f43d92afd73" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>draw_dual</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a76c0ba944717855d9de8dd6adc5ddb2b" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>draw_dual_edge</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a2fa082ea432ff8cf0e2a1714edb64ea6" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>draw_primal</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a5c663700543fdf1850642be667068799" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>draw_primal_edge</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a304f5fe797914ddda090095ece7fdd7d" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a6e6e1b20ab5018c96e4b0ed2c0f0ee00" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ad290e2f58373af8dfd04b083540af35f" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>dual</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ab1f5de353e920892190337b1b76cd509" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Edge</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a4a54f07541f4ef6fa55ac47cc260b619" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Edge_circulator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a5fd4209127d34c18ac0885520aab5520" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Face</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a6935414a5009edc49af24e8100deed54" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Face_circulator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1afe012870773a550396ad67f4cdfe6ccd" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Face_handle</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a4c7ae4fbb71648098764eaefb3f89b8a" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>file_input</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ab6d44c4ba3fca16592a6a75eefec3142" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>file_output</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a186d8f58c9f8835e75f3bd9900e42925" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>finite_edges_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1aa68354f251165db9f08d69ae19e57db3" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>finite_edges_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a0c52fcbb3b25be0c6b78d4ae68f6661a" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Finite_edges_iterator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ae1ec57a6ed30e596614d7fa9c801ee8c" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>finite_faces_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a26800688e5691e8a926568addb7cdbbe" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>finite_faces_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a3969c0696ecb5a405a1a01a459c5b6df" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Finite_faces_iterator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a203a6d2782af812135a3c3890f8ce842" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>finite_vertex</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a0676c730d2f8a39fbf85cff6ba28d856" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>finite_vertices_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ae2308f8e4ad50c30969cffe986ffa2f7" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>finite_vertices_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a4c2e91040f1c353a7b611b55614bcf79" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Finite_vertices_iterator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a6b4717e54ecb1feffe55b5a85b5596bf" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>geom_traits</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a1e780c09c97d949d3425144a8cc81e1a" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Geom_traits</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1afb9d549d2654220cca50b20a478c80c9" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>hidden_sites_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a25f6977dceb8fd21143edcf978c04f02" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>hidden_sites_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1afa1b8c7922d472b50aa9503520b12979" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Hidden_sites_iterator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ae737f9780b8e82660cf5cba2e91fa6ab" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a246db3669d7f3f37b5b41db82b3bff93" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>incident_edges</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a105e4545eccd9d77d56bc427390b1497" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1af1c92a3799648b599b776887d3b05435" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>incident_faces</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ab79b54196229b0e316f31087b6cdd7b0" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a2abda67bf614ad219266188bd87b8006" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>incident_vertices</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1acf04fd992512b8fc8ad6087954e4495a" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>infinite_face</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a32531acecde7b014ba780c4328ed519d" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>infinite_vertex</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a30a25b908f475dc7c495a06799a8a11a" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ab6e1c26710e0f262b904ec9b262553de" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ae0d57f5e4c6af866fd2fad76ef91d652" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>insert</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a36820d88501404365245c6a7f7fca573" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a4fb0275444193c09ffaacacaf3e57b40" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1aeeea392554f6977a65d6c46d10bcf51f" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ac10e77936155bb1710d70d47f4d6900f" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a82b53618d81c23d3b8f250fdbf942827" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>is_infinite</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1aed821e45423a5b176a35e8a9de4756bd" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>is_valid</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a976247d6a042d6715e1f534d8ad97f8b" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>nearest_neighbor</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a7dd7566a809e4940560d3f4ef9b7578c" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>nearest_neighbor</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a9754175ffe172527164a2aa776153be9" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>number_of_faces</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1abd505d277047969aac281c3b06d3024e" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>number_of_hidden_sites</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1af7c36b8cf6eb82fed7f9896540c8e6f5" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>number_of_vertices</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1af42cb4d4aceda28c842829c0f127df8b" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>number_of_visible_sites</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a0c6f7e8f89f2b15cd1f07c11697c138c" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>operator&lt;&lt;</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a2a701a24e0c0a5c4f54383b342e5685d" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>operator=</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a3e6ee40ec025851112e67338f1613b0e" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>operator&gt;&gt;</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a4417369c58be047f0159259f4a679a9e" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Point_2</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1aaffa121b1edbcf179452a1d55026605c" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>remove</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1aef591204a5abd776cd7717b258b52f69" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Site_2</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ad2c9b1e5cc26b9a09a2f3c3214d8d824" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>sites_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a50982d21aad7b712945046696c71f13f" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>sites_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ade765de09304a43067546280f0302003" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Sites_iterator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1af45600846b8c46a7cfb5ede06ff33d7e" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>size_type</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ad4fddfda832750c89647807451ae757e" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>swap</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a17e25341b1e9d805a18e5e7968f5331f" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>tds</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a61636138d13c212ff2a6dd4ff5f816c9" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Triangulation_data_structure</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a17245aed36840bee031fc4fa908d2450" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Vertex</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a7c2be7467b149c7c76eab8ea3b1e2d33" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Vertex_circulator</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ac49e5e5289682d991ea051327a4c0d8f" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Vertex_handle</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1ab2f2378456fe1cac1e2983ca59c720a4" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>visible_sites_begin</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1aa6507e4e0c85d68fb62f16bf66a3b561" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>visible_sites_end</name></member>
      <member refid="classCGAL_1_1Apollonius__graph__2_1a03a9c34a198c73ce1604723d4c4926ff" prot="public" virt="non-virtual"><scope>CGAL::Apollonius_graph_2</scope><name>Visible_sites_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
